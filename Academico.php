<?php
class Academico extends MX_Controller
{
	private $url_copia;
	private $url_aulaVirtual;
	public function __construct()
	{
		parent::__construct();
		$this->load->model('academico_model');
		$this->load->model('admin/perfil_model');
		$this->load->model('facturacion/rubros_model');
		$this->load->model('facturacion/facturacion_model');
		$this->load->model('admin/usuarios_model');
		$this->load->model('automatica/automatica_model');
		$this->url_copia =$this->academico_model->get_url_copia();
		$this->url_vlc =$this->academico_model->get_url_vlc();
		$this->url_vlc_supletorio_crear =$this->academico_model->url_vlc_supletorio_crear();
		$this->url_vlc_supletorio_eliminar =$this->academico_model->url_vlc_supletorio_eliminar();
		$this->url_vlc_remedial_crear =$this->academico_model->url_vlc_remedial_crear();
		$this->url_vlc_remedial_eliminar =$this->academico_model->url_vlc_remedial_eliminar();
		$this->url_aulaVirtual = "https://plataforma.tecnologicodeming.edu.ec/api/v2/binary/virtual_rooms/virtual_rooms";

		 //$this->url_copia = "http://localhost/DemingCopia/index.php/academico/academico/";
			//$this->url_copia = "http://binaryecuador.com/Deming2/index.php/academico/academico/";
		 //$this->url_copia = "http://binary.ec/ACADEMOS/Deming2/index.php/academico/academico/";
	}

	public function buscar_para_inscribir()
	{
		if($this->session->userdata('loggeado')){
			$datos=array();
			$datos['niveles'] = $this->academico_model->get_niveles();
			$datos['carreras'] = $this->academico_model->get_carreras();
			$datos['modalidades'] = $this->academico_model->get_modalidades();
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			$datos1=$this->perfil_model->cabecera($idusuario);
			$this->load->view('templates/header',$datos1);
			$this->load->view('busqueda_para_inscribir',$datos);
			$this->load->view('templates/footer');
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function reporteDocentesPorMaterias()
	{
		if($this->session->userdata('loggeado')){
			$datos=array();
			$datos['carreras'] = $this->academico_model->get_carreras();
			$datos['modalidades'] = $this->academico_model->get_modalidades();
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			$datos1=$this->perfil_model->cabecera($idusuario);
			$this->load->view('templates/header',$datos1);
			$this->load->view('reporteDocentesPorMaterias',$datos);
			$this->load->view('templates/footer');
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function reporteAlumnoAula()
	{
		$id_usuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($id_usuario,18)){
			$usuario=$this->session->userdata('loggeado');
			$datos=array();
			$datos['carreras'] = $this->academico_model->get_carreras();
			$datos['niveles'] = $this->academico_model->get_niveles();
			$datos['periodos'] = $this->academico_model->getPeriodos();
			$datos['ID_PERIODO_ACADEMICO'] = $this->academico_model->get_periodo_activado();
			$vector_us=null;
			$grupos=array();
			if($usuario['ID_PERFIL']==12){//filtrar grupos para coordinadores
				$gruposc=$this->usuarios_model->grupos_usuario_academico(array('ID_USUARIO_ACADEMICO'=>$id_usuario));
				foreach($gruposc as $g){
					$grupos[]=$g['GRUPO'];
				}
			}else{
				$grupos=$this->academico_model->buscarGruposEst($vector_us);
				$grupos = explode("-", $grupos);
			}
			$datos['grupos'] = $grupos;
			$datos['perfil']=$usuario['ID_PERFIL'];
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			$datos1=$this->perfil_model->cabecera($idusuario);
			$this->load->view('templates/header',$datos1);
			$this->load->view('reporteAlumnosPorAula',$datos);
			$this->load->view('templates/footer');
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function reporteCuotaNivel()
	{
		$id_usuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado')){
			$usuario=$this->session->userdata('loggeado');
			$datos=array();
			$datos['carreras'] = $this->academico_model->get_carreras();
			$datos['niveles'] = $this->academico_model->get_niveles();
			$datos['periodos'] = $this->academico_model->getPeriodos();
			$datos['id_periodo'] = $this->academico_model->get_periodo_activado();
			$vector_us=null;
			$grupos=array();
			if($usuario['ID_PERFIL']==12){//filtrar grupos para coordinadores
				$gruposc=$this->usuarios_model->grupos_usuario_academico(array('ID_USUARIO_ACADEMICO'=>$id_usuario));
				foreach($gruposc as $g){
					$grupos[]=$g['GRUPO'];
				}
			}else{
				$grupos=$this->academico_model->buscarGruposEst($vector_us);
				$grupos = explode("-", $grupos);
			}
			$datos['grupos'] = $grupos;
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			$datos['idPerfil']=$this->session->userdata('loggeado')['ID_PERFIL'];
			$datos1=$this->perfil_model->cabecera($idusuario);
			$this->load->view('templates/header',$datos1);
			$this->load->view('reporteCuotasNivel',$datos);
			$this->load->view('templates/footer');
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function reportePagosNivel()
	{
		if($this->session->userdata('loggeado')){
			$datos=array();
			$datos['carreras'] = $this->academico_model->get_carreras();
			$datos['niveles'] = $this->academico_model->get_niveles();
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			$datos1=$this->perfil_model->cabecera($idusuario);
			$this->load->view('templates/header',$datos1);
			$this->load->view('reportePagosNivel',$datos);
			$this->load->view('templates/footer');
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function buscar_doc_materia()
	{
		if($this->session->userdata('loggeado')){
			$datos=array();
			$datos['niveles'] = $this->academico_model->get_niveles();
			$datos['carreras'] = $this->academico_model->get_carreras();
			$datos['modalidades'] = $this->academico_model->get_modalidades();
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			$datos1=$this->perfil_model->cabecera($idusuario);
			$this->load->view('templates/header',$datos1);
			$this->load->view('busqueda_para_doc_materias',$datos);
			$this->load->view('templates/footer');
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function buscar_para_convalidar_homologar()
	{
		if($this->session->userdata('loggeado')){
			$datos=array();
			$datos['niveles'] = $this->academico_model->get_niveles();
			$datos['carreras'] = $this->academico_model->get_carreras();
			$datos['modalidades'] = $this->academico_model->get_modalidades();
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			$datos1=$this->perfil_model->cabecera($idusuario);
			$this->load->view('templates/header',$datos1);
			$this->load->view('busqueda_para_convalidar_homologar', $datos);
			$this->load->view('templates/footer');
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function buscar_para_matricular()
	{
		if($this->session->userdata('loggeado')){
			$datos=array();
			$datos['niveles'] = $this->academico_model->get_niveles();
			$datos['carreras'] = $this->academico_model->get_carreras();
			$datos['modalidades'] = $this->academico_model->get_modalidades();
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			$datos1=$this->perfil_model->cabecera($idusuario);
			$this->load->view('templates/header',$datos1);
			$this->load->view('busqueda_para_matricular',$datos);
			$this->load->view('templates/footer');
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function load()
	{
		if($this->session->userdata('loggeado')){
			$this->academico_model->load_data();
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function configurar()
	{
		if($this->session->userdata('loggeado')){
			$data=array();
			$opdion_pago=$this->academico_model->get_opciones_pago(1);
			//$data['activado_periodo_calificaciones']= $this->academico_model->perido_calificaciones_activo();
			$data['opdion_pago']= $opdion_pago['DESCRIPCION'];
			//revisar etapas activadas para calificacion
			$etapas=$this->academico_model->get_etapas_calificar();
			$etapas_periodo=$this->academico_model->get_carrera_modalidad_configuradas();
			if(count($etapas_periodo)>0){
				$row=$etapas_periodo[0];
			}else{
				$row['CANT_ETAPAS']=0;
				$row['ID_PERIODO_ACADEMICO']=$this->academico_model->get_periodo_activado();
			}
			if($etapas==NULL or count($etapas)!=($row['CANT_ETAPAS']+1)){
				//crear registro etapas activadas para calificacion
				if($etapas!=NULL){
					$this->academico_model->borrar_activacion_etapas_calificar_periodo();
				}
				/*if(!isset($row['ID_PERIODO_ACADEMICO'])){
					$row['ID_PERIODO_ACADEMICO']=$this->academico_model->get_periodo_activado();
				}*/
				for($i=0;$i<=$row['CANT_ETAPAS'];$i++){
					$data_etapa['ID_PERIODO_ACADEMICO']=$row['ID_PERIODO_ACADEMICO'];
					$data_etapa['ETAPA']=$i;
					$data_etapa['ESTADO']=0;
					$this->academico_model->crear_etapas_calificar($data_etapa);
				}
				$etapas=$this->academico_model->get_etapas_calificar();
			}
			$data['etapas']= $etapas;
			$data['mensaje_aprueba']=$this->academico_model->get_mensaje_aprueba();
			$data['mensaje_pierde']=$this->academico_model->get_mensaje_pierde();
			$data['mensaje_supletorio']=$this->academico_model->get_mensaje_supletorio();
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			$datos1=$this->perfil_model->cabecera($idusuario);
			$this->load->view('templates/header',$datos1);
			$this->load->view('configuracion',$data);
			$this->load->view('templates/footer');
		}else{
			redirect('admin/login', 'refresh');
		}
	}

	//**********************************************
	// CONFIGURACION
	public function activarPeriodoCalificaciones()
	{
		if($this->session->userdata('loggeado')){
			$id_etapas = explode('+',$this->input->post('id_etapas'));
			foreach($id_etapas as $id_etapa_calificacion){
				$data['ESTADO']=$this->input->post('etapa_'.$id_etapa_calificacion);
				$this->academico_model->actualizar_etapas_calificar($data,$id_etapa_calificacion);
			}
			echo utf8_encode('Activaci�n Actualizada');
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function activarPeriodo()
	{
		if($this->session->userdata('loggeado')){
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			$id = trim($this->input->post('id'));
			$idm = trim($this->input->post('idm'));
			///////////////////////////////////PROCESAMIENTO DE COPIA//////////////////////////////////////
				$ch  = curl_init();

				$url = $this->url_copia . 'activarPeriodo/';


				curl_setopt($ch, CURLOPT_URL, $url);
				$data_copia['idusuario'] = $idusuario;
				$data_copia['id'] = $id;

				$elements                = $data_copia;
				curl_setopt($ch, CURLOPT_POST,true);
				// curl_setopt($ch, CURLOPT_POSTFIELDS, $elements);
				// curl_setopt($ch, CURLOPT_HEADER, false);
				// curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode(array($elements)));
				curl_setopt($ch, CURLOPT_POSTFIELDS, $elements);
				curl_setopt($ch, CURLOPT_HEADER, false);
				// curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json'));
				curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);
				$resultado = curl_exec($ch);
				$error     = curl_error($ch);
				curl_close($ch);
			/////////////////////////////////////////////////////////////////////////

			$activado = $this->academico_model->activarPeriodo($id,$idm);
			echo json_encode($activado);
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function get_periodo_activado()
	{
		if($this->session->userdata('loggeado')){
			$activado = $this->academico_model->get_periodo_activado();
			echo json_encode($activado);
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function crearGrupoCarrera()
	{
		if($this->session->userdata('loggeado')){
			$nombreGrupo = trim($this->input->post('nombreGrupo'));
			$creado = $this->academico_model->crearGrupoCarrera($nombreGrupo);
			echo json_encode($creado);
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function buscarGruposCarrera()
	{
		if($this->session->userdata('loggeado')){
			$grupos = $this->academico_model->buscarGruposCarrera();
			echo json_encode($grupos);
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function crearTipoCarrera()
	{
		if($this->session->userdata('loggeado')){
			$tipo = trim($this->input->post('tipo'));
			$creado = $this->academico_model->crearTipoCarrera($tipo);
			echo json_encode($creado);
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function buscarTiposCarrera()
	{
		if($this->session->userdata('loggeado')){
			$tipos = $this->academico_model->buscarTiposCarrera();
			echo json_encode($tipos);
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function crearModalidad()
	{
		if($this->session->userdata('loggeado')){
			$modalidad = trim($this->input->post('modalidad'));
			$creado = $this->academico_model->crearModalidad($modalidad);
			echo json_encode($creado);
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function buscarModalidadesEstudio()
	{
		if($this->session->userdata('loggeado')){
			$modalidades = $this->academico_model->buscarModalidadesEstudio();
			echo json_encode($modalidades);
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function crearSistemaEstudio()
	{
		if($this->session->userdata('loggeado')){
			$sistema = trim($this->input->post('sistema'));
			$creado = $this->academico_model->crearSistemaEstudio($sistema);
			echo json_encode($creado);
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function buscarSistemasEstudio()
	{
		if($this->session->userdata('loggeado')){
			$sistemas = $this->academico_model->buscarSistemasEstudio();
			echo json_encode($sistemas);
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function crearSede(){
		if($this->session->userdata('loggeado')) {
			$sede = trim($this->input->post('sede'));

			/////////////////////////////////////////////////////////////////////////
				$ch  = curl_init();
				// $url = $this->url_copia . 'procesarFormularioGestionPND/';
				$url = $this->url_copia . 'crearSede/';

				curl_setopt($ch, CURLOPT_URL, $url);
				$elements['sede'] = $sede;

				curl_setopt($ch, CURLOPT_POST,true);
				// curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode(array("user" => $elements)));
				curl_setopt($ch, CURLOPT_POSTFIELDS, $elements);
				curl_setopt($ch, CURLOPT_HEADER, false);
				// curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json'));
				curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);
				$resultado = curl_exec($ch);
				$error     = curl_error($ch);
				curl_close($ch);
			/////////////////////////////////////////////////////////////////////////



			$creado = $this->academico_model->crearSede($sede);
			echo json_encode($creado);
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function buscarSedes()
	{
		if($this->session->userdata('loggeado')){
			$todo_sede = trim($this->input->post('todo_sede'));
			if($todo_sede>0){
				$sedes = $this->academico_model->buscar_sedes();
			}else{
				$sedes = $this->academico_model->buscarSedes();
			}
			echo json_encode($sedes);
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function crearArea()
	{
		if($this->session->userdata('loggeado')){
			$area = trim($this->input->post('area'));
			$creado = $this->academico_model->crearArea($area);
			echo json_encode($creado);
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function buscarAreas()
	{
		if($this->session->userdata('loggeado')){
			$areas = $this->academico_model->buscarAreas();
			echo json_encode($areas);
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function crearPeriodo(){
		if($this->session->userdata('loggeado')){
			$fecha_inicio= trim($this->input->post('fecha_inicio'));
			$fecha_fin = trim($this->input->post('fecha_fin'));

			/////////////////////////////////////////////////////////////////////////
				$ch  = curl_init();
				$url = $this->url_copia . 'crearPeriodo/';

				curl_setopt($ch, CURLOPT_URL, $url);
				$elements['fecha_inicio'] = $fecha_inicio;
				$elements['fecha_fin'] = $fecha_fin;

				curl_setopt($ch, CURLOPT_POST,true);
				// curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode(array("user" => $elements)));
				curl_setopt($ch, CURLOPT_POSTFIELDS, $elements);
				curl_setopt($ch, CURLOPT_HEADER, false);
				// curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json'));
				curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);
				$resultado = curl_exec($ch);
				$error     = curl_error($ch);
				curl_close($ch);
			/////////////////////////////////////////////////////////////////////////

			$idperiodo = $this->academico_model->crearPeriodo($fecha_inicio, $fecha_fin);
			$creado=false;
			if($idperiodo>0){
				//$this->crearContenido($idperiodo);
				//copiar configuracion docente-materia
				$docentes = $this->academico_model->getDocentesPeriodo($idperiodo);
				if(count($docentes)<=0){
					$id_periodo_actual=$this->academico_model->get_periodo_activado();
					$this->academico_model->copiarDocentesPeriodo($id_periodo_actual,$idperiodo);
				}
				$creado=true;
			}
			echo json_encode($creado);
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function buscarPeriodos($general=null)
	{
		if($this->session->userdata('loggeado')){
			if($general==1){
				$periodos = $this->academico_model->buscarPeriodosGeneral();
			}else{
				$periodos = $this->academico_model->buscarPeriodos();
			}
			echo json_encode($periodos);
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function crearGruposEst(){
		if($this->session->userdata('loggeado')){
			$nombre= trim($this->input->post('nombre'));
			$sede= trim($this->input->post('sede'));

			/////////////////////////////////////////////////////////////////////////
				$ch  = curl_init();
				// $url = $this->url_copia . 'procesarFormularioGestionPND/';
				$url = $this->url_copia . 'crearGruposEst/';

				curl_setopt($ch, CURLOPT_URL, $url);
				$elements['nombre'] = $nombre;
				$elements['sede'] = $sede;

				curl_setopt($ch, CURLOPT_POST,true);
				// curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode(array("user" => $elements)));
				curl_setopt($ch, CURLOPT_POSTFIELDS, $elements);
				curl_setopt($ch, CURLOPT_HEADER, false);
				// curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json'));
				curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);
				$resultado = curl_exec($ch);
				$error     = curl_error($ch);
				curl_close($ch);
			/////////////////////////////////////////////////////////////////////////

			$creado = $this->academico_model->crearGruposEst($nombre,$sede);
			echo json_encode($creado);
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function buscarGruposEst()
	{
		if($this->session->userdata('loggeado')){
			//$grupos = $this->academico_model->buscarGruposEst();
			$grupos = $this->academico_model->buscar_grupos_estudiantes();
			echo json_encode($grupos);
		}else{
			redirect('admin/login', 'refresh');
		}
	}

	//**********************************************
	// CREAR CARRERA
	public function procesarCarrera($idCarrera = null)
	{
		if($this->session->userdata('loggeado')){
			$carrera = array();
			if($idCarrera != NULL){
				$carrera = $this->academico_model->obtener_datos_carrera($idCarrera);
				if($carrera == NULL){
					show_404();
				}
			}
			$this->load->helper('form');
			$this->load->library('form_validation');
			$this->form_validation->CI =& $this;
			$this->form_validation->set_rules('formulario_carrera[NOMBRE]', 'nombre', 'required');
			$data = $this->input->post('formulario_carrera');
			$data['ID_CARRERA']=$idCarrera;
			$data['menciones']=$this->input->post('menciones');

			if($this->form_validation->run() == FALSE){

			}else{
				$this->academico_model->crearActualizarCarrera($data);
				$this->session->set_flashdata('mostrarMensajeConfirmacion', TRUE);
				if($idCarrera == NULL){
					redirect('index/index', 'refresh');
				}else{
					redirect('academico/academico/crearCarrera/'.$idCarrera, 'refresh');
				}
			}
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function crearCarrera($id_carrera=null)
	{
		if($this->session->userdata('loggeado')){
			$this->load->helper('form');
			$this->load->library('form_validation');
			$this->form_validation->CI =& $this;
			$carrera = array();
			$mencion=array();
			if($id_carrera === NULL){
				$carrera['DURACION_EN_NIVELES'] = 6;
			}else{
				$carrera = $this->academico_model->obtener_datos_carrera($id_carrera);
				if($carrera == NULL){
					show_404();
				}
				$carrera_mencion =$this->academico_model->get_carrera_mencion($id_carrera);
				foreach($carrera_mencion as $cm){
					$mencion[]=$cm['ID_MENCION'];
				}
			}
			$carrera['carrera_mencion'] = $mencion;
			$carrera['niveles'] = $this->academico_model->get_niveles();
			$carrera['grupos_de_carrera'] = $this->academico_model->get_grupos_carrera();
			$carrera['tipos_de_carrera'] = $this->academico_model->get_tipos_carrera();
			$carrera['areas_de_estudio'] = $this->academico_model->get_areas_estudio();
			$carrera['sedes'] = $this->academico_model->get_sedes();
			$carrera['sistemas_de_estudio'] = $this->academico_model->get_sistemas_estudio();
			$carrera['modalidades'] = $this->academico_model->get_modalidades();
			$carrera['menciones'] = $this->academico_model->get_menciones();
			$this->load->model('titulacion/titulacion_model');
			$carrera['examenes'] = $this->titulacion_model->buscar_examen();
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			$datos1=$this->perfil_model->cabecera($idusuario);
			$this->load->view('templates/header',$datos1);
			$this->load->view('crearCarrera', $carrera);
			$this->load->view('templates/footer');
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function editarCarrera()
	{
		if($this->session->userdata('loggeado')){
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			$datos1=$this->perfil_model->cabecera($idusuario);
			$this->load->view('templates/header',$datos1);
			$this->load->view('editarCarrera');
			$this->load->view('templates/footer');
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function buscarCarrera()
	{
		if($this->session->userdata('loggeado')){
			$nombre = trim($this->input->post('nombre'));
			$codigo = trim($this->input->post('codigo'));
			$carreras = $this->academico_model->buscarCarrera($nombre, $codigo);
			echo json_encode($carreras);
		}else{
			redirect('admin/login', 'refresh');
		}
	}

	//**********************************************
	// CREAR MATERIA
	public function crearMateria($id_carrera_materia=NULL,$msj=NULL)
	{
		if($this->session->userdata('loggeado')){
			$this->load->helper('form');
			$this->load->library('form_validation');
			$this->form_validation->CI =& $this;
			$materia = array();
			if($id_carrera_materia === NULL){
				//$id_materia['DURACION_EN_NIVELES'] = 6;
			}else{
				$materia = $this->academico_model->obtener_datos_materia($id_carrera_materia);
				$materia['materias_menores'] = $this->academico_model->obtener_materias_nivel_anterior($id_carrera_materia);
				$materia['pre'] = $this->academico_model->get_prerequisitos($id_carrera_materia);
				$idPeriodo=$this->academico_model->get_periodo_activado();
				$ids_plantillas=explode('+',$materia['IDS_PLANTILLA']);
				$materia['IDS_PLANTILLA']=$ids_plantillas;
				if(count($ids_plantillas)>0){
					foreach($ids_plantillas as $k=>$idp){
						$materia['ESTADO_PLANTILLA'][$k]=0;
						if($idp>0){
							$contenido_materia=$this->academico_model->getContenidoMateria($materia['ID_MATERIA'],$idPeriodo,$idp);
							if($contenido_materia!=NULL){
								$materia['ESTADO_PLANTILLA'][$k]=1;
								$materia['IDS_PLANTILLA'][$k]=$contenido_materia['ID_PLANTILLA'];
							}
						}
					}
				}
				if($materia == NULL){
					show_404();
				}
			}
			$materia['niveles'] = $this->academico_model->get_niveles();
			$materia['carreras'] = $this->academico_model->get_carreras();
			$materia['unidades'] = $this->academico_model->get_unidad_organizacional();
			$materia['plantillas'] = $this->academico_model->buscar_plantillas();
			$materia['msj'] = $msj;
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			$datos1=$this->perfil_model->cabecera($idusuario);
			$this->load->view('templates/header',$datos1);
			$this->load->view('crearMateria', $materia);
			$this->load->view('templates/footer');
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function procesarMateria($id_carrera_materia = null)
	{
		if($this->session->userdata('loggeado')){
			$materia = array();
			if($materia != NULL){
				$materia = $this->academico_model->obtener_datos_materia($id_carrera_materia);
				if($materia == NULL){
					show_404();
				}
			}
			$this->load->helper('form');
			$this->load->library('form_validation');
			$this->form_validation->CI =& $this;
			$this->form_validation->set_rules('formulario_materia[NOMBRE]', 'nombre', 'required');
			$data = $this->input->post('formulario_materia');
			$data['ID_MATERIA']=$id_carrera_materia;
			if($this->form_validation->run() == FALSE){

			}else{
				$ids_plantillas=$data['IDS_PLANTILLA'];
				$data['IDS_PLANTILLA']=implode('+',$data['IDS_PLANTILLA']);
				$id_carrera_materia=$this->academico_model->crearActualizarMateria($data);

				//vincular contenido si existe en periodo actual
				if(isset($ids_plantillas)){
					$idPeriodo=$this->academico_model->get_periodo_activado();
					foreach($ids_plantillas as $idPlantilla){
						$contenido_materia=$this->academico_model->getContenidoMateria($id_carrera_materia,$idPeriodo,$idPlantilla);
						if($contenido_materia==NULL){
							$contenido_plantilla=$this->academico_model->buscar_contenidos(array('ID_PLANTILLA'=>$idPlantilla,'ID_PERIODO_ACADEMICO'=>$idPeriodo));
							if(count($contenido_plantilla)>0){
								$cm['ID_CONTENIDO']=$contenido_plantilla[0]['ID_CONTENIDO'];
								$cm['ID_MATERIA']=$id_carrera_materia;
								$this->academico_model->crearMateriaContenido($cm);
							}
						}
					}
				}

				if(isset($data['PRE'])){//si seleccion� prerequisitos, los mando a crear
					$data_prerequisitos = array();
					$data_prerequisitos = $data['PRE'];
					$this->academico_model->guardar_prerequisitos($id_carrera_materia, $data_prerequisitos);
				}else //si NO seleccion� prerequisitos, mando vacio para que borre todos los que tenga
					$this->academico_model->guardar_prerequisitos($id_carrera_materia, array());

				$this->session->set_flashdata('mostrarMensajeConfirmacion', TRUE);
				if($id_carrera_materia == NULL){
					redirect('index/index', 'refresh');
				}else{
					redirect('academico/academico/crearMateria/'.$id_carrera_materia.'/1', 'refresh');
				}
			}
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function editarMateria()
	{
		if($this->session->userdata('loggeado')){
			$materia['carreras'] = $this->academico_model->get_carreras();
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			$datos1=$this->perfil_model->cabecera($idusuario);
			$this->load->view('templates/header',$datos1);
			$this->load->view('editarMateria', $materia);
			$this->load->view('templates/footer');
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function buscarMateria()
	{
		if($this->session->userdata('loggeado')){
			$nombre = trim($this->input->post('nombre'));
			$codigo = trim($this->input->post('codigo'));
			$carrera = trim($this->input->post('carrera'));
			$materias = $this->academico_model->buscarMateria($nombre, $codigo, $carrera);
			echo json_encode($materias);
		}else{
			redirect('admin/login', 'refresh');
		}
	}
	//**********************************************
	// CREAR INSCRIPCION
	public function inscripcion($id_cliente=null)
	{
		if($this->session->userdata('loggeado')){
			$this->load->helper('form');
			$this->load->library('form_validation');
			$this->form_validation->CI =& $this;
			if($id_cliente != NULL){
				$inscripcion = $this->academico_model->obtener_datos_inscripcion($id_cliente);
				$seleccionado_plan_pago = $this->academico_model->seleccionado_plan_de_pago($id_cliente);
				$this->load->model('clientes/clientes_model');
				$dato_persona= $this->clientes_model->obtener_datos_cliente_natural($id_cliente);
				$this->load->model('clientes/provincias_model');
				$this->load->model('clientes/cantones_model');
				$dato_persona['provincia_nacimiento']='';
				$dato_persona['canton_nacimiento']='';
				if($dato_persona['ID_PROVINCIA_NACIMIENTO']>0){
					$dato_persona['provincia_nacimiento']=$this->provincias_model->obtener_provincia_x_id($dato_persona['ID_PROVINCIA_NACIMIENTO']);
				}
				if($dato_persona['ID_CANTON_NACIMIENTO']>0){
					$dato_persona['canton_nacimiento']=$this->cantones_model->obtener_canton_x_id($dato_persona['ID_CANTON_NACIMIENTO']);
				}
			}else{
				show_404();
			}
			$datos_estudiante_inscripcion = $this->academico_model->get_datos_inscripcion($id_cliente);
			$inscripcion['APELLIDOS'] = $datos_estudiante_inscripcion['APELLIDOS'];
			$inscripcion['NOMBRES'] = $datos_estudiante_inscripcion['NOMBRES'];
			$inscripcion['COLEGIO'] = $datos_estudiante_inscripcion['EST_COLEGIO_GRADUACION'];
			$inscripcion['TITULO'] = $datos_estudiante_inscripcion['EST_TITULO_BACHILLER'];
			$inscripcion['ID_CLIENTE'] = $id_cliente;
			$inscripcion['carreras'] = $this->academico_model->get_carreras();
			$inscripcion['modalidades'] = $this->academico_model->get_modalidades();
			$inscripcion['niveles'] = $this->academico_model->get_niveles();
			$inscripcion['periodos'] = $this->academico_model->get_periodos_academicos();
			$inscripcion['plan_pago'] = $seleccionado_plan_pago;
			$inscripcion['persona'] = $dato_persona;
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			$datos1=$this->perfil_model->cabecera($idusuario);
			$this->load->view('templates/header',$datos1);
			$this->load->view('inscripcion',$inscripcion);
			$this->load->view('templates/footer');
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function procesarInscripcion($id_cliente=null,$id_inscripcion=null)
	{
		if($this->session->userdata('loggeado')){
			$this->load->helper('form');
			$this->load->library('form_validation');
			$this->form_validation->CI =& $this;
			if($id_cliente == NULL){
				show_404();
			}
			$this->form_validation->set_rules('formulario_inscripcion[NOMBRES]', 'nombre', 'required');
			$data = $this->input->post('formulario_inscripcion');
			$data_copia = $data;
			$data['ID_CLIENTE']=$id_cliente;
			$data['ID_INSCRIPCION']=$id_inscripcion;
			$data['OBSERVACIONES']=$this->input->post('documento1')."+".$this->input->post('documento2')."+".$this->input->post('documento3')."+".$this->input->post('documento4');
			if($this->form_validation->run() == FALSE){

			}else{
				///////////////////////////////////PROCESAMIENTO DE COPIA//////////////////////////////////////
					$ch  = curl_init();
					if (isset($id_inscripcion) && $id_inscripcion!= 0 && $id_inscripcion!= "") {
						$url = $this->url_copia . 'procesarInscripcion/'.$id_cliente."/".$id_inscripcion;
					}else{
						$url = $this->url_copia . 'procesarInscripcion/'.$id_cliente;
					}
					curl_setopt($ch, CURLOPT_URL, $url);
					$elements['formulario_inscripcion'] = $data_copia;
					$elements['documento1'] = $this->input->post('documento1');
					$elements['documento2'] = $this->input->post('documento2');
					$elements['documento3'] = $this->input->post('documento3');
					$elements['documento4'] = $this->input->post('documento4');
					curl_setopt($ch, CURLOPT_POST,true);
					// curl_setopt($ch, CURLOPT_POSTFIELDS, $elements);
					// curl_setopt($ch, CURLOPT_HEADER, false);
					curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode(array("formulario_personas" => $elements['formulario_inscripcion'], "documento1"=>$elements['documento1'], "documento2" => $elements['documento2'], "documento3" => $elements['documento3'], "documento4"=>$elements['documento4'])));
					curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json'));
					curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);
					$resultado = curl_exec($ch);
					$error     = curl_error($ch);
					curl_close($ch);
				/////////////////////////////////////////////////////////////////////////
				$respuesta=$this->academico_model->crearActualizarInscripcion($data);
				echo $respuesta;
				// print_r($resultado);
			}
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function buscarEstudiantes()
	{
		if($this->session->userdata('loggeado')){
			$ap = trim($this->input->post('ap'));
			$am = trim($this->input->post('am'));
			$pn = trim($this->input->post('pn'));
			$sn = trim($this->input->post('sn'));
			$id_carrera = trim($this->input->post('id_carrera'));
			$id_modalidad = trim($this->input->post('id_modalidad'));
			$id_nivel = trim($this->input->post('id_nivel'));
			$fi = trim($this->input->post('fi'));
			$ff = trim($this->input->post('ff'));
			$datos = $this->academico_model->buscarEstudiantes($ap, $am, $pn, $sn, $id_carrera, $id_nivel, $id_modalidad, $fi ,$ff);
			echo json_encode($datos);
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function cambiar_grupoA()
	{
		$id = trim($this->input->post('id'));
		$grupo = trim($this->input->post('id_grupo'));
		$datos = $this->academico_model->cambiar_grupoA($id, $grupo);
		echo json_encode($datos);
	}
	//*****************************************************************
	//CREAR MATRICULA
	public function procesarMatricula($id_cliente=null,$id_matricula=null)
	{
		if($this->session->userdata('loggeado')){
			$this->load->helper('form');
			$this->load->library('form_validation');
			$this->form_validation->CI =& $this;
			if($id_cliente == NULL){
				show_404();
			}
			$this->form_validation->set_rules('formulario_matricula[NOMBRES]', 'nombre', 'required');
			$data = $this->input->post('formulario_matricula');
			$data_copia = $data;
			$data['ID_CLIENTE']=$id_cliente;
			$data['ID_MATRICULA']=$id_matricula;
			if($this->form_validation->run() == FALSE){

			}else{
				/////////////////PROCESAMIENTO DE COPIA////////////////
					$ch  = curl_init();
					if (isset($id_matricula) && $id_matricula != 0 && $id_matricula != null ) {
						$url = $this->url_copia . 'procesarMatricula/'.$id_cliente.'/'.$id_matricula;
					}else{
						$url = $this->url_copia . 'procesarMatricula/'.$id_cliente;
					}

					curl_setopt($ch, CURLOPT_URL, $url);
					$data_copia['activado'] = $this->academico_model->get_periodo_activado();
					$elements = $data_copia;

					curl_setopt($ch, CURLOPT_POST,true);
					// curl_setopt($ch, CURLOPT_POSTFIELDS, $elements);
					// curl_setopt($ch, CURLOPT_HEADER, false);
					// curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode(array($elements)));
					curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($elements));
					curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json'));
					curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);
					$resultado = curl_exec($ch);
					$error     = curl_error($ch);
					curl_close($ch);
				/////////////////////////////////////////////////////////////////////////
				//echo json_encode($resultado);
				// print_r($resultado);
				//return 0;
				//VERIFICO, Y SI ESTA CREANDO LE ASIGNO UN USUARIO QUE NO EXISTA y le genero un pass
				$datos   = $this->academico_model->get_datos_cliente_para_crear_usuario($id_cliente);
				if($id_matricula == NULL){
					$this->load->model('admin/usuarios_model');
					//verificar si existe usuario
					$usuario = $this->usuarios_model->buscar_usuarios(array('ID_PERSONA'=>$datos['ID_PERSONA']));
					if(count($usuario)<=0){
						$data_usuario['ID_PERSONA'] = $datos['ID_PERSONA'];
						$data_usuario['USUARIO']    = $datos['NRO_DOCUMENTO'];
						$data_usuario['CLAVE']      = md5($datos['NRO_DOCUMENTO']);
						$data_usuario['ESTADO']     = 1;
						$data_usuario['NOMBRE_COMPLETO']   = $datos['PRIMER_NOMBRE']." ".$datos['SEGUNDO_NOMBRE']." ".$datos['APELLIDO_PATERNO']." ".$datos['APELLIDO_MATERNO'];
						$data_usuario['NRO_DOCUMENTO']     = $datos['NRO_DOCUMENTO'];
						$id_usuario                        = $this->usuarios_model->crearUsuario($data_usuario);
						$data_usuario_perfil['id_usuario'] = $id_usuario;
						$data_usuario_perfil['id_perfil']  = 5;//perfil alumno
						$this->usuarios_model->crearUsuarioPerfil($data_usuario_perfil);
					}
					///////////
					//notifico al mail
					//$this->enviarCorreoElectronico($dir_correo_e, $usuario_generado, $pass );
					//////////
				}
				if(isset($datos['ES_BECADO']) and $datos['ES_BECADO']==1){
					/*$data['ID_BECA']=$datos['ID_TIPO_BECA'];
					$dat_beca=$this->academico_model->buscar_beca(array('ID_BECA'=>$datos['ID_TIPO_BECA']));
					$beca=$dat_beca[0];*/
				}
				$respuesta = $this->academico_model->crearActualizarMatricula($data);

				$plan=$this->academico_model->seleccionado_plan_de_pago($data['ID_CLIENTE'],$data['ID_CARRERA'],$data['ID_PERIODO_ACADEMICO']);
				//sin tiene plan de p�go genero el plan personalizado de Deming
				if($plan==0){
					//aplicar plan de pagos
					$plan_pago=$this->input->post('select_plan_pago');
					$plan_pago=explode('-',$plan_pago);
					$id_plan_pago=$plan_pago[0];
					$cuotas=$plan_pago[1];
					$rubros_matricula=$this->automatica_model->get_datos_cliente_rubro($datos['NRO_DOCUMENTO'],$data['ID_PERIODO_ACADEMICO'],$data['ID_CARRERA']);
					foreach($rubros_matricula as $rubro){
						$id_cliente_rubro=$rubro['ID_CLIENTE_RUBRO'];
						$valor_primera_cuota=$rubro['VALOR_PRIMERA_CUOTA'];
						$valor_cuota_regular=$rubro['VALOR_CUOTA_REGULAR'];
						$valor_recargo_generacion=$rubro['VALOR_RECARGO_GENERACION'];
						$descuento_pronta_matricula=0;
						$descuento_beca=0;
						$plan_pago=4;
						//aplicar descuento Pronta Matr�cula
						if($data['ID_RUBRO_OPCIONAL']==-1){
							if($rubro['ID_RUBRO']==17){//semestre
								//$descuento = $this->rubros_model->buscar_rubros(array('rubro'=>'DESCUENTO SEMESTRE'));
								//$descuento_pronta_matricula=round(($descuento[0]['PRECIO']-15.5)/5,2);
							}
						}
						if($rubro['ID_RUBRO']==16 or $rubro['ID_RUBRO']==17){
							$plan_pago=$id_plan_pago;
						}
						if($rubro['ID_RUBRO']==17){//aplicar plan a semestre
							if($rubro['VALOR_PRIMERA_CUOTA']>=210 and $id_plan_pago==6){
								$valor_primera_cuota=210;
								$valor_cuota_regular=round(($rubro['VALOR_PRIMERA_CUOTA']-210)/($cuotas-1),2);
							}elseif($rubro['VALOR_PRIMERA_CUOTA']>=110 and $id_plan_pago==10){
								$valor_primera_cuota=110;
								$valor_cuota_regular=round(($rubro['VALOR_PRIMERA_CUOTA']-110)/($cuotas-1),2);
							}else{
								$valor_primera_cuota=round($rubro['VALOR_PRIMERA_CUOTA']/$cuotas,2);
								$valor_cuota_regular=round($rubro['VALOR_PRIMERA_CUOTA']/$cuotas,2);
							}
							if($descuento_pronta_matricula>$valor_cuota_regular){
								$descuento_pronta_matricula=$valor_cuota_regular;
							}
						}
						//aplicar beca
						/*if(isset($beca)){
							$rubros_aplica='+'.$beca['RUBROS_APLICA'].'+';
							$pos_rubro = strpos($rubros_aplica, '+'.$rubro['ID_RUBRO'].'+');
							if($pos_rubro!==false){//si a este rubro se aplica el descuento beca
								$descuento_beca=round($valor_cuota_regular*$beca['PORCENTAJE']/100,2);
							}
						}*/
						//datos matrcula
						$mat=$this->academico_model->buscar_matricula(array('ID_CLIENTE'=>$data['ID_CLIENTE'],'ID_CARRERA'=>$data['ID_CARRERA'],'ID_PERIODO_ACADEMICO'=>$data['ID_PERIODO_ACADEMICO']));
						$id_matricula=$mat[0]['ID_MATRICULA'];
						//eliminar de clientes-rubros-cuotas
						$this->automatica_model->elimiar_cuotas($id_cliente_rubro);
						$this->automatica_model->generar_nuevas_cuotas($id_cliente_rubro, $plan_pago,$valor_primera_cuota,$valor_cuota_regular, $valor_recargo_generacion,$id_cliente,$descuento_pronta_matricula,$descuento_beca,$id_matricula,$data['ID_PERIODO_ACADEMICO']);
					}//fin foreach($rubros_matricula as $rubro){

					//colocar beca si es el caso
					if(isset($datos['ES_BECADO']) and $datos['ES_BECADO']==1){
						$this->actualizacionMatriculaBeca($id_cliente,$datos['ID_TIPO_BECA'],$data['ID_PERIODO_ACADEMICO']);
					}
				}//fin de if($plan==0)

				//eviar datos a VLC
				/*$ids_materias_estudiante=$respuesta['ids_materias_estudiante'];
				foreach($ids_materias_estudiante as $id_ecm){
					$this->sendMateriaVlc($id_ecm,'crear');
				}*/
				//$this->sendMatriculaVlc($id_cliente,'activo');
				unset($respuesta['ids_materias_estudiante']);

				echo json_encode($respuesta);
			}
		}else{
			redirect('admin/login', 'refresh');
		}
	}

	//*****************************************************************************************
	public function matricula($id_cliente=null,$opcion=null,$id_matricula=null,$id_carrera=null)
	{
		if($this->session->userdata('loggeado')){
			$this->load->helper('form');
			$this->load->library('form_validation');
			$this->form_validation->CI =& $this;
			$id_periodo_activado = $this->academico_model->get_periodo_activado();
			if($id_matricula==null or $id_matricula==0){
				$id_periodo_activado = $this->academico_model->get_periodo_matricula();
			}
			$ins=NULL;
			if($id_cliente != NULL){
				$matricula = $this->academico_model->obtener_datos_matricula($id_cliente,$id_matricula,$id_periodo_activado,$id_carrera);
				if($matricula==NULL){
					$ins = $this->academico_model->obtener_datos_inscripcion($id_cliente);
					$ins['ID_NIVEL']=1;
				}
				$seleccionado_plan_pago = $this->academico_model->seleccionado_plan_de_pago($id_cliente,$id_carrera,$id_periodo_activado);
			}else{
				show_404();
			}
			if($matricula['NUMERO']==''){//revisar si tiene numero de matricula en otros periodos
			  // $matricula['NUMERO']=$this->academico_model->obtener_numero_unico_matricula($id_cliente,$id_carrera);
			}
			$materias_estudiante=array();
			if(!isset($matricula['ID_MATRICULA'])){//revisar si tiene datos de matricula. Si no tiene enviar datos generales de ultima matricula
				$ultima_matricula=$this->academico_model->datos_ultima_matricula_estudiante($id_cliente,$id_carrera);
				if(isset($ultima_matricula['ID_CARRERA']) and $ultima_matricula['ID_CARRERA']>0){//si existe datos de ultima matricula
					$ins['ID_CARRERA']=$ultima_matricula['ID_CARRERA'];
					$id_periodo_activado = $this->academico_model->get_periodo_matricula();
					//$num_materias_perdidas=$this->academico_model->num_materias_perdidas($ultima_matricula['ID_PERSONA'],$ultima_matricula['ID_PERIODO_ACADEMICO']);
					//verificar si estudiante aprobo nivel
					$materias=$this->academico_model->get_materias_estudiante($ultima_matricula['ID_PERSONA'],0,1,$ultima_matricula['ID_PERIODO_ACADEMICO'],$ultima_matricula['ID_CARRERA']);//todas las materias del alumno hasta el periodo de consulta
					$pensum_nivel=$this->academico_model->getMateriasPorCarreraNivel($ultima_matricula['ID_CARRERA'],$ultima_matricula['ID_NIVEL']);
					$todo_nivel=0;
					foreach($pensum_nivel as $pn){
						foreach($materias as $m){
							$aprobo=0;
							if($m['FUE_HOMOLOGADA']==1 or $m['FUE_CONVALIDADA']==1 or $m['FUE_HISTORIAL']==1){
								$aprobo=1;
							}else{
								$estado=$this->academico_model->get_calificaciones(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$m['ID_ESTUDIANTE_CARRERA_MATERIA'],'ID_TIPO_CALIFICACION'=>6));
								if(isset($estado[0]) and $estado[0]['ESTADO_CALIFICACION']==1){
									$aprobo=1;
								}
							}
							if($pn['ID_CARRERA_MATERIA']==$m['ID_CARRERA_MATERIA'] and $aprobo==1){
								$todo_nivel=$todo_nivel+1;
							}
						}
					}
					$aprobo_nivel=0;
					$aun_por_aprobar=count($pensum_nivel)-$todo_nivel;
					if($aun_por_aprobar<=2){
						$aprobo_nivel=1;
					}
					$ins['ID_NIVEL']=$ultima_matricula['ID_NIVEL'];
					//if($id_periodo_activado>$ultima_matricula['ID_PERIODO_ACADEMICO'] and $num_materias_perdidas<=2){
					if($aprobo_nivel==1){
						$ins['ID_NIVEL']=$ultima_matricula['ID_NIVEL']+1;//siguiente nivel para matricular
					}
					$ins['ID_MODALIDAD']=$ultima_matricula['ID_MODALIDAD'];
					//vector con materias ya tomadas para mostrar como arrastre
					foreach($materias as $m){
						if(isset($materias_estudiante[$m['ID_CARRERA_MATERIA']])){
							$materias_estudiante[$m['ID_CARRERA_MATERIA']]+=1;
						}else{
							$materias_estudiante[$m['ID_CARRERA_MATERIA']]=1;
						}
					}
				}
			}
			$datos_estudiante_matricula = $this->academico_model->get_datos_matricula($id_cliente);
			$matricula['APELLIDOS'] = $datos_estudiante_matricula['APELLIDOS'];
			$matricula['NOMBRES'] = $datos_estudiante_matricula['NOMBRES'];
			$matricula['COLEGIO'] = $datos_estudiante_matricula['EST_COLEGIO_GRADUACION'];
			$matricula['TITULO'] = $datos_estudiante_matricula['EST_TITULO_BACHILLER'];
			$matricula['USUARIO'] = $datos_estudiante_matricula['USUARIO'];
			$matricula['NRO_DOCUMENTO'] = $datos_estudiante_matricula['NRO_DOCUMENTO'];
			//$matricula['ESTADO'] = $datos_estudiante_matricula['ESTADO'];
			$matricula['ID_CLIENTE'] = $id_cliente;
			$ids_carrera=array();
			//solo primer nivel tendra listado completo de carreras para cambiar de carrera
			if(isset($matricula['ID_NIVEL']) && $matricula['ID_NIVEL'] > 1){
				$id_carrera=$matricula['ID_CARRERA'];
			}elseif(isset($ins['ID_NIVEL']) && $ins['ID_NIVEL'] > 1){
				$id_carrera=$ins['ID_CARRERA'];
			}else{
				//$id_carrera=NULL;
				$ins['ID_NIVEL']=1;
				if($id_carrera==0){
					$matricula['NUMERO']='';
					$carreras_matriculados=$this->academico_model->buscar_matricula(array('ID_CLIENTE'=>$id_cliente));
					foreach($carreras_matriculados as $cm){
						if(!in_array($cm['ID_CARRERA'], $ids_carrera)){
							$ids_carrera[]=$cm['ID_CARRERA'];
						}
					}
				}
			}
			//////////////comprobar si tiene cambio de carrera
			if(!isset($matricula['ID_MATRICULA'])){
				$id_persona=$this->academico_model->get_id_persona($id_cliente);
				$id_periodo_actual=$this->academico_model->get_periodo_matricula();
				$dat['ID_PERSONA']=$id_persona;
				$dat['ID_CARRERA_ANTERIOR']=$id_carrera;
				//$dat['ID_PERIODO']=$id_periodo_actual;
				$cambiado=$this->academico_model->get_cambio_carrera($dat);
				if(count($cambiado)>0){
					$id_carrera=$cambiado[count($cambiado)-1]['ID_CARRERA_NUEVO'];
					$ins['ID_CARRERA']=$id_carrera;
					$matricula['NUMERO']='';
				}
			}
			$matricula['carreras'] = $this->academico_model->get_carreras($id_carrera,$ids_carrera);
			$matricula['modalidades'] = $this->academico_model->get_modalidades();
			$matricula['niveles'] = $this->academico_model->get_niveles();
			$matricula['periodos'] = $this->academico_model->get_periodos_academicos($id_periodo_activado);
			$matricula['rubro_opcional'] = $this->rubros_model->buscar_rubros(array('ID_TIPO_RUBRO'=>7));//rubros tipo semestre extra
			$matricula['ins'] = $ins;
			$matricula['plan_pago'] = $seleccionado_plan_pago;
			$matricula['id_plan_pago'] = $this->academico_model->id_seleccionado_plan_de_pago($id_cliente,$id_carrera,$id_periodo_activado);
			$materias_a_asignar = $this->academico_model->getMateriasPorCarrera(null/*$ins['ID_CARRERA']*/);
			//$grupos_a_asignar = $this->academico_model->buscarGruposEst(); $grupos_a_asignar = explode("-", $grupos_a_asignar);
			$grupos_a_asignar = $this->academico_model->buscar_grupos_estudiantes();
			$docentes = $this->academico_model->getDocentes($id_periodo_activado);
			$matricula['materias_a_asignar'] = $materias_a_asignar;
			$matricula['docentes'] = $docentes;
			$matricula['grupos'] = $grupos_a_asignar;
			$matricula['materias_estudiante']=$materias_estudiante;
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			$datos1=$this->perfil_model->cabecera($idusuario);
			$this->load->view('templates/header',$datos1);
			if($opcion=='academico' and $this->academico_model->verificar_usuario_funcionalidad($idusuario,64)){

				$this->load->view('matricula_academico',$matricula);

			}elseif($opcion=='financiero' and $this->academico_model->verificar_usuario_funcionalidad($idusuario,65)){

				$this->load->model('clientes/clientes_model');
				$this->load->model('automatica/automatica_model');
				$cliente=$this->clientes_model->obtener_datos_cliente_natural($id_cliente);
				//toma los rubros asignados
				$rautomaticos_asociados = $this->automatica_model->buscarRubrosAutomaticos($cliente['NRO_DOCUMENTO'],$id_periodo_activado,$id_matricula);
				foreach($rautomaticos_asociados as $key=>$rubro){
					$rautomaticos_asociados[$key]['cuotas']=$this->automatica_model->get_cliente_rubros_cuotas($rubro['ID_CLIENTE_RUBRO']);
				}
				$matricula['rautomaticos_asociados']=$rautomaticos_asociados;
				//aqui ontiene el arreglo con las cuotas generales de acuerdo periodo
				$matricula['cuotas_generales'] = $this->automatica_model->get_cuotas_generales($id_cliente,$id_periodo_activado,$id_matricula);
				//buscar rubro adicional
				if($matricula['ID_RUBRO_OPCIONAL']>0){
		            $rubro_opcional = $this->rubros_model->buscar_rubros(array('ID_RUBRO'=>$matricula['ID_RUBRO_OPCIONAL']));//datos rubro extra
		            $matricula_rubro_adicional=$rubro_opcional[0]['RUBRO'];
				}else{
					$matricula_rubro_adicional='';
				}
				$matricula['matricula_rubro_adicional']=$matricula_rubro_adicional;
				//codigo para definir los descuentos
				for($i=0; $i<count($rautomaticos_asociados); $i++) {
					foreach($rautomaticos_asociados[$i]['cuotas'] as $cuota){
						if(isset($pronta_matricula[$cuota['CUOTA']])){
							$pronta_matricula[$cuota['CUOTA']]+=$cuota['DESCUENTO_PRONTA_MATRICULA'];
						}else{
							$pronta_matricula[$cuota['CUOTA']]=$cuota['DESCUENTO_PRONTA_MATRICULA'];
						}
						if(isset($beca[$cuota['CUOTA']])){
							$beca[$cuota['CUOTA']]+=$cuota['DESCUENTO_BECA'];
						}else{
							$beca[$cuota['CUOTA']]=$cuota['DESCUENTO_BECA'];
						}
					}
				}
				$matricula['pronta_matricula']=$pronta_matricula;
				$matricula['beca']=$beca;
				$this->load->view('matricula_financiero',$matricula);

			}elseif($this->academico_model->verificar_usuario_funcionalidad($idusuario,62)){//validar si va a pantalla sin validacion

				$this->load->view('matricula',$matricula);

			}else{

				$this->load->view('matricula_validado',$matricula);

			}
			$this->load->view('templates/footer');
		}else{
			redirect('admin/login', 'refresh');
		}
	}

	//************************************************************************************
	public function convalidar_homologar($id_cliente=null,$id_matricula=null)
	{
		if($this->session->userdata('loggeado')){
			$this->load->helper('form');
			$this->load->library('form_validation');
			$this->form_validation->CI =& $this;
			if($id_cliente == NULL){
				show_404();
			}else{
				$matricula = $this->academico_model->obtener_datos_matricula($id_cliente,$id_matricula);
			}
			$datos_estudiante = $this->academico_model->get_datos_cliente($id_cliente);
			$materias_a_convalidar= $this->academico_model->getMateriasPorCarrera(null);
			$matricula['materias_a_convalidar'] = $materias_a_convalidar;
			$matricula['materias_a_homologar'] = $materias_a_convalidar;
			$matricula['APELLIDOS'] = $datos_estudiante['APELLIDOS'];
			$matricula['NOMBRES'] = $datos_estudiante['NOMBRES'];
			$matricula['carreras'] = $this->academico_model->get_carreras($matricula['ID_CARRERA']);
			$matricula['modalidades'] = $this->academico_model->get_modalidades();
			$matricula['niveles'] = $this->academico_model->get_niveles();
			$matricula['periodos'] = $this->academico_model->get_periodos_academicos();
			$matricula['ID_CLIENTE'] = $id_cliente;
			$matricula['MATRICULA'] = $matricula;
			$matricula['homologacion'] = $this->academico_model->get_homologacion($matricula['ID_CARRERA'],$matricula['ID_PERSONA']);
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			$datos1=$this->perfil_model->cabecera($idusuario);
			$this->load->view('templates/header',$datos1);
			$this->load->view('convalidar_homologar', $matricula);
			$this->load->view('templates/footer');
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function procesarConvalidarHomologar($id_cliente=null)
	{
		if($this->session->userdata('loggeado')){
			$this->load->helper('form');
			$this->load->library('form_validation');
			$this->form_validation->CI =& $this;
			if($id_cliente == NULL){
				show_404();
			}
			$this->form_validation->set_rules('formulario_matricula[NOMBRES]', 'nombre', 'required');
			$data               = $this->input->post('formulario_matricula'); //todo: corregir en la vista, poner formular convalidar homologar
			$data_copia         = $data;
			$data['ID_CLIENTE'] = $id_cliente;
			if($this->form_validation->run() == FALSE){

			}else{
				///////////////////////////////////PROCESAMIENTO DE COPIA//////////////////////////////////////
					$ch  = curl_init();
					if (isset($id_cliente) && $id_cliente!= 0 && $id_cliente!= "") {
						$url = $this->url_copia . 'procesarConvalidarHomologar/'.$id_cliente;
					}else{
						$url = $this->url_copia . 'procesarConvalidarHomologar/';
					}
					curl_setopt($ch, CURLOPT_URL, $url);
					$elements['formulario_matricula'] = $data_copia;
					curl_setopt($ch, CURLOPT_POST,true);
					// curl_setopt($ch, CURLOPT_POSTFIELDS, $elements);
					// curl_setopt($ch, CURLOPT_HEADER, false);
					curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($elements['formulario_matricula']));
					curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json'));
					curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);
					$resultado = curl_exec($ch);
					$error     = curl_error($ch);
					curl_close($ch);
				/////////////////////////////////////////////////////////////////////////
				$respuesta      = $this->academico_model->homologarConvalidar($data);
				//enviar actualizacion matricula vlc
				//$this->sendMatriculaVlc($id_cliente,'activo');
				echo $respuesta;
				// print_r($data);
				// print_r($resultado);
			}
		}else{
			redirect('admin/login', 'refresh');
		}
	}

	//************************************************************************************
	public function buscarEstudiantesMatriculados()
	{
		if($this->session->userdata('loggeado')){
			$data['ap'] = trim($this->input->post('ap'));
			$data['am'] = trim($this->input->post('am'));
			$data['pn'] = trim($this->input->post('pn'));
			$data['sn'] = trim($this->input->post('sn'));
			$data['nd'] = trim($this->input->post('nd'));
			$data['id_carrera']=trim($this->input->post('id_carrera'));
			$data['id_nivel']=trim($this->input->post('id_nivel'));
			$data['estado'] = trim($this->input->post('estado'));
			//$datos = $this->academico_model->buscarEstudiantesMatriculados($ap, $am, $pn, $sn, $id_carrera, $id_nivel, $id_modalidad, $fi, $ff);
			$datos = $this->academico_model->buscarEstudiantesMatriculados($data);
			//filtrar solo estudiantes matriculados por primera vez
			$datos_filtrado=array();
			if($datos!=false){
				foreach($datos as $d){
					$primera_matricula=$this->academico_model->datos_primera_matricula_estudiante($d['ID_CLIENTE'],$d['ID_CARRERA']);
					if(isset($primera_matricula['ID_MATRICULA']) and $primera_matricula['ID_MATRICULA']==$d['ID_MATRICULA']){
						$datos_filtrado[]=$d;
					}
				}
			}
			echo json_encode($datos_filtrado);
			//echo json_encode($datos);
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function get_materias_asignadas()
	{
		if($this->session->userdata('loggeado')){
			$id_cliente = trim($this->input->post('id_cliente'));
			$id_carrera = trim($this->input->post('id_carrera'));
			$id_periodo = trim($this->input->post('id_periodo'));
			$id_nivel = trim($this->input->post('id_nivel'));
			$datos = $this->academico_model->get_materias_asignadas($id_cliente, $id_carrera, $id_periodo, $id_nivel);
			echo json_encode($datos);
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function get_materias_conv()
	{
		if($this->session->userdata('loggeado')){
			$id_cliente = trim($this->input->post('id_cliente'));
			$datos = $this->academico_model->get_materias_conv($id_cliente);
			echo json_encode($datos);
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function get_materias_homo()
	{
		if($this->session->userdata('loggeado')){
			$id_cliente = trim($this->input->post('id_cliente'));
			$datos = $this->academico_model->get_materias_homo($id_cliente);
			echo json_encode($datos);
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function get_grupo_asignado()
	{
		if($this->session->userdata('loggeado')){
			$id_cliente = trim($this->input->post('id_cliente'));
			$id_carrera = trim($this->input->post('id_carrera'));
			$id_periodo = trim($this->input->post('id_periodo'));
			$id_nivel = trim($this->input->post('id_nivel'));
			$grupo = $this->academico_model->get_grupo_sede_asignado($id_cliente, $id_carrera, $id_periodo, $id_nivel);
			echo json_encode($grupo);
		}else{
			redirect('admin/login', 'refresh');
		}
	}

	//******************************************************************
	public function get_ultimo_numero_matricula()
	{
		if($this->session->userdata('loggeado')){
			$ultimo_numero_matricula = $this->academico_model->get_ultimo_numero_matricula();
			echo json_encode($ultimo_numero_matricula);
		}else{
			redirect('admin/login', 'refresh');
		}
	}

	//************************************************************************************
	public function buscarDocenteMateria()
	{
		if($this->session->userdata('loggeado')){
			$ap = trim($this->input->post('ap'));
			$am = trim($this->input->post('am'));
			$pn = trim($this->input->post('pn'));
			$sn = trim($this->input->post('sn'));
			$id_carrera = trim($this->input->post('id_carrera'));
			$id_nivel = trim($this->input->post('id_nivel'));
			$datos = $this->academico_model->buscarDocenteMateria($ap, $am, $pn, $sn, $id_carrera, $id_nivel);
			echo json_encode($datos);
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function AsociarDocenteMateria($id_persona=null)
	{
		if($this->session->userdata('loggeado')){
			$this->load->helper('form');
			$this->load->library('form_validation');
			$this->form_validation->CI =& $this;
			$datos_docente = $this->academico_model->get_datos_docente($id_persona);
			$doc['APELLIDOS'] = $datos_docente['APELLIDOS'];
			$doc['NOMBRES'] = $datos_docente['NOMBRES'];
			$doc['TITULO'] = $datos_docente['TITULO'];
			$doc['INSTITUCION'] = $datos_docente['INST'];
			$doc['carreras'] = $this->academico_model->get_carreras();
			$doc['ID_PERSONA'] = $id_persona;
			$doc['modalidades'] = $this->academico_model->get_modalidades();
			$doc['niveles'] = $this->academico_model->get_niveles();
			$doc['periodos'] = $this->academico_model->get_periodos_academicos();
			$materias = $this->academico_model->getMateriasPorCarrera(null/*$ins['ID_CARRERA']*/);
			$doc['materias'] = $materias;
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			$datos1=$this->perfil_model->cabecera($idusuario);
			$this->load->view('templates/header',$datos1);
			$this->load->view('docenteMateria',$doc);
			$this->load->view('templates/footer');
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function procesarConfiguracionCalificaciones()
	{
		if($this->session->userdata('loggeado')){
			$this->load->helper('form');
			$this->load->library('form_validation');
			$this->form_validation->CI =& $this;
			$data = $this->input->post('formulario_matricula');
			$this->academico_model->crearActualizarConfiguracionCalificaciones($data);
			$this->session->set_flashdata('mostrarMensajeConfirmacion', TRUE);
			redirect('index/index', 'refresh');
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function procesarDocenteMateria($id_persona)
	{
		if($this->session->userdata('loggeado')){
			$this->load->helper('form');
			$this->load->library('form_validation');
			$this->form_validation->CI =& $this;
			if($id_persona == NULL){
				show_404();
			}
			$this->form_validation->set_rules('formulario_matricula[NOMBRES]', 'nombre', 'required');
			$data = $this->input->post('formulario_matricula');
			$data_copia = $data;
			$data['ID_PERSONA']=$id_persona;
			if ($this->form_validation->run() == FALSE){

			}else{
				$data_copia['MATERIAS_ELIMINAR'] = $this->academico_model->crearActualizarDocenteMateria($data);
				///////////////////////////////////PROCESAMIENTO DE COPIA//////////////////////////////////////
					$data_copia['id_periodo_actual'] = $this->academico_model->get_periodo_activado();
					$ch  = curl_init();
					$url = $this->url_copia . 'procesarDocenteMateria/'.$id_persona;
					curl_setopt($ch, CURLOPT_URL, $url);
					$elements = $data_copia;

					curl_setopt($ch, CURLOPT_POST,true);
					// curl_setopt($ch, CURLOPT_POSTFIELDS, $elements);
					// curl_setopt($ch, CURLOPT_HEADER, false);
					// curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode(array($elements)));
					curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($elements));
					curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json'));
					curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);
					$resultado = curl_exec($ch);
					$error     = curl_error($ch);
					curl_close($ch);
				/////////////////////////////////////////////////////////////////////////
				print_r($resultado);
				//$this->session->set_flashdata('mostrarMensajeConfirmacion', TRUE);
				//redirect('index/index', 'refresh');
			}
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function get_materias_asignadas_al_docente()
	{
		if($this->session->userdata('loggeado')){
			$id_persona = trim($this->input->post('id_persona'));
			$datos = $this->academico_model->get_materias_asignadas_al_docente($id_persona);
			echo json_encode($datos);
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function enviarCorreoElectronico($correo,$user,$pass)
	{
		//cargamos la libreria email de ci
		$this->load->library("email"); //ubicada en system...

		//configuracion para gmail
		/*$configGmail = array(
							'protocol' => 'smtp',
							'smtp_host' => 'server.binaryecuador.com',
							'smtp_port' => 465,
							'smtp_user' => 'wbaro@binary.ec',
							'smtp_pass' => 'wbaro.2016',
							'mailtype' => 'html',
							'charset' => 'utf-8',
							'newline' => "\r\n"
		);    */

		//cargamos la configuraci�n para enviar con gmail
		//$this->email->initialize($configGmail);

		$this->email->from('no-reply@binary.ec');
		$this->email->to($correo);
		$this->email->subject('Notificaci�n de registro en sistema Bi-Academos');
		$this->email->message('Usted ha sido registrado en el sistema Bi-Academos, puede ingresar usando el usuario: '.$user.' y la clave: '.$pass);
		//$this->email->send();
	}


	public function reporte_docentes_por_materia()
	{
		$id_carrera = trim($this->input->post('id_carrera'));
		$id_modalidad = trim($this->input->post('id_modalidad'));
		$pn = trim($this->input->post('pn'));
		$ap = trim($this->input->post('ap'));
		$datos = $this->academico_model->reporte_docentes_por_materia($id_carrera, $id_modalidad,$pn,$ap);
		echo json_encode($datos);
	}


	public function reporte_carrera_nivel()
	{
		$id_usuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($id_usuario,18)){
			$usuario=$this->session->userdata('loggeado');
			$id_carrera = trim($this->input->post('id_carrera'));
			$id_nivel = trim($this->input->post('id_nivel'));
			$id_periodo_academico = trim($this->input->post('id_periodo_academico'));
			$grupo = trim($this->input->post('grupo'));
			$idUsuarioAcademico=null;
			if($usuario['ID_PERFIL']==12){//filtrar grupos para coordinadores
				$idUsuarioAcademico=$usuario['ID_USUARIO'];
			}
			$datos = $this->academico_model->listaAlumnos($id_carrera, $id_nivel,$id_periodo_academico,$grupo,null,null,array(),$idUsuarioAcademico);
			echo json_encode($datos);
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function reporte_cuota_nivel()
	{
		$id_usuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		$id_carrera = trim($this->input->post('id_carrera'));
		$id_nivel = trim($this->input->post('id_nivel'));
		$id_periodo = trim($this->input->post('id_periodo'));
		$grupo = trim($this->input->post('grupo'));
		$id_persona=null;
		$usuario=$this->session->userdata('loggeado');
		if($this->session->userdata('loggeado')['ID_PERFIL']==5){
			$id_persona = $this->session->userdata('loggeado')['ID_PERSONA'];
		}
		$idUsuarioAcademico=null;
		if($usuario['ID_PERFIL']==12){//filtrar grupos para coordinadores
			$idUsuarioAcademico=$usuario['ID_USUARIO'];
		}
		$bidimensional= $this->academico_model->listaAlumnosCuotas($id_carrera, $id_nivel, $id_periodo,$grupo,$id_persona,$idUsuarioAcademico);

		//establecer fechas pagos mensual
		$parametro=$this->academico_model->getparametro('DIA_PAGO_CUOTA');
		$dia_mes_pago=$parametro['VALOR'];
		$dat_periodo=$this->academico_model->getPeriodo($id_periodo);
		$fip=explode('-',$dat_periodo['FECHA_INICIO']);
		$f = date_create($fip[0].'-'.$fip[1].'-'.$dia_mes_pago);
		$f_actual=date_create(date('Y-m-d'));
		if($id_periodo==16){
			$fechas_pago[]=$fip[0].'-'.$fip[1].'-28';
		}elseif($id_periodo==17){
			$fechas_pago[]=$fip[0].'-'.$fip[1].'-30';
		}else{
			$fechas_pago[]=$fip[0].'-'.$fip[1].'-'.$dia_mes_pago;
		}
		for($c=2;$c<=6; $c++){
			$f->modify('+ 1 month');
			$fechas_pago[]=$f->format('Y-m-d');
		}
		$arreglo=array('alumno'=>$bidimensional[0],
                        'cuotas'=>$bidimensional[1],
						'estado_matricula'=>$bidimensional[2],
						'becas'=>$bidimensional[3],
						'id'=>$bidimensional[4],
						'facturas'=>$bidimensional[5],
						'id_periodo'=>$id_periodo,
						'descuentos'=>$bidimensional[6],
						'recibido'=>$bidimensional[7],
						'grupo'=>$bidimensional[8],
						'id_carrera'=>$bidimensional[9],
						'fechas_pago'=>$fechas_pago
                        );
		/*$arreglo=array('alumno'=>$bidimensional[0],
						'cuotas'=>$bidimensional[1],
						'estado_matricula'=>$bidimensional[2],
						'becas'=>$bidimensional[3],
						'recibido'=>$bidimensional[4]
						);*/
						//print_r($bidimensional[1]);
		echo json_encode($arreglo);
	}


	public function reporte_pagos_nivel()
	{
		$id_carrera = trim($this->input->post('id_carrera'));
		$id_nivel = trim($this->input->post('id_nivel'));
		$bidimensional= $this->academico_model->listaAlumnosPagos($id_carrera, $id_nivel);
		$arreglo=array('alumno'=>$bidimensional[0],
						'cuotas'=>$bidimensional[1]
						);
		echo json_encode($arreglo);
	}


	public function configurarSistemaCalificacion()
	{
		if($this->session->userdata('loggeado')){
			$this->load->helper('form');
			$this->load->library('form_validation');
			$this->form_validation->CI =& $this;
			$datos=array();
			$datos['componentes'] = $this->academico_model->get_componentes();
			//$datos['niveles'] = $this->academico_model->get_niveles();
			$datos['carreras'] = $this->academico_model->get_carreras();
			$datos['modalidades'] = $this->academico_model->get_modalidades();
			$datos['carreras_configuradas'] = $this->academico_model->get_carrera_modalidad_configuradas();
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			$datos1=$this->perfil_model->cabecera($idusuario);
			$this->load->view('templates/header',$datos1);
			$this->load->view('configuracionCalificaciones',$datos);
			$this->load->view('templates/footer');
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function crearComponente()
	{
		$nombre = trim($this->input->post('nombre'));
		$valor  = trim($this->input->post('valor'));
		$id = $this->academico_model->crearComponente($nombre, $valor);
		echo json_encode($id);
	}


	public function get_componentes()
	{
		$datos = $this->academico_model->get_componentes();
		echo json_encode($datos);
	}


	public function eliminarComponente()
	{
		$id = trim($this->input->post('id'));
		$datos = $this->academico_model->eliminarComponente($id);
		echo json_encode(true);
	}


	public function updateValorComponente()
	{
		$id = trim($this->input->post('id'));
		$valor = trim($this->input->post('valor'));
		$this->academico_model->updateValorComponente($id, $valor);
	}

	//******************************************************************
	public function busqueda_docente_para_calificar()
	{
		if($this->session->userdata('loggeado')){
			$datos=array();
			$datos['niveles'] = $this->academico_model->get_niveles();
			$datos['carreras'] = $this->academico_model->get_carreras();
			$datos['modalidades'] = $this->academico_model->get_modalidades();
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			$datos1=$this->perfil_model->cabecera($idusuario);
			$this->load->view('templates/header',$datos1);
			$this->load->view('busqueda_docente_para_calificar',$datos);
			$this->load->view('templates/footer');
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function docente_materias_calificar($id_persona)
	{
		if($this->session->userdata('loggeado')){
			$datos=array();
			//$materias = $this->academico_model->get_materias_del_docente_para_calificar($id_persona);
			$materias = $this->academico_model->buscar_grupos_calificar(NULL, NULL, NULL,$id_persona);
			foreach($materias as $key=>$materia){
				if($this->academico_model->verificar_si_tiene_estudiantes($materia)==0){
					//unset($materias[$key]);
				}
			}
			//$datos['materias'] = $materias;
			$datos['grupos'] = $materias;
			$datos['id_persona'] =  $id_persona;
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			$datos1=$this->perfil_model->cabecera($idusuario);
			$perfil=$this->perfil_model->get_perfil($idusuario);
			if(isset($this->session->userdata('loggeado')['EXTERNO'])){
				//$this->load->view('templates/header_conexion');
			}elseif($perfil!=4){
				$this->load->view('templates/header',$datos1);
			}
			//$this->load->view('docente_materias_calificar',$datos);
			$this->load->view('docente_grupos_calificar',$datos);
			if(isset($this->session->userdata('loggeado')['EXTERNO'])){
				//$this->load->view('templates/footer_conexion');
			}elseif($perfil!=4){
				$this->load->view('templates/footer');
			}
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function reporte_docente_calificaciones()
	{
		if($this->session->userdata('loggeado')){
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			$id_persona=$this->academico_model->getpersona($idusuario);
			if($this->session->userdata('loggeado')['ID_PERFIL']==4){
				redirect('academico/academico/docente_materias_calificar_consolidado/'.$id_persona, 'refresh');
			}else{
				$datos=array();
				$datos['niveles'] = $this->academico_model->get_niveles();
				$datos['carreras'] = $this->academico_model->get_carreras();
				$datos['modalidades'] = $this->academico_model->get_modalidades();
				$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
				$datos1=$this->perfil_model->cabecera($idusuario);
				$this->load->view('templates/header',$datos1);
				$this->load->view('reporte_docente_calificaciones',$datos);
				$this->load->view('templates/footer');
			}
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function docente_materias_calificar_consolidado($id_persona)
	{
		if($this->session->userdata('loggeado')){
			$datos=array();
			//$materias = $this->academico_model->get_materias_del_docente_para_calificar($id_persona);
			$materias = $this->academico_model->buscar_grupos_calificar(NULL, NULL, NULL,$id_persona,1);
			foreach($materias as $key=>$materia){
				if($this->academico_model->verificar_si_tiene_estudiantes($materia)==0){
					unset($materias[$key]);
				}
			}
			//$datos['materias'] = $materias;
			$datos['grupos'] = $materias;
			$datos['id_persona'] =  $id_persona;
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			$datos1=$this->perfil_model->cabecera($idusuario);
			$this->load->view('templates/header',$datos1);
			//$this->load->view('docente_materias_calificar_consolidado',$datos);
			$this->load->view('docente_grupos_calificar_consolidado',$datos);
			$this->load->view('templates/footer');
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function buscar_grupos_calificar_consolidado($id_carrera, $id_materia, $id_nivel,$id_persona)
	{
		if($this->session->userdata('loggeado')){
			$datos=array();
			$datos['grupos'] = $this->academico_model->buscar_grupos_calificar($id_carrera, $id_materia, $id_nivel,$id_persona);
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			$datos1=$this->perfil_model->cabecera($idusuario);
			$this->load->view('templates/header',$datos1);
			$this->load->view('docente_grupos_calificar_consolidado',$datos);
			$this->load->view('templates/footer');
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function docente_materias_calificar1()
	{
		if($this->session->userdata('loggeado')){
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			$id_persona=$this->academico_model->getpersona($idusuario);
			$datos=array();
			//$materias = $this->academico_model->get_materias_del_docente_para_calificar($id_persona);
			$materias = $this->academico_model->buscar_grupos_calificar(NULL, NULL, NULL,$id_persona);
			foreach($materias as $key=>$materia){
				if($this->academico_model->verificar_si_tiene_estudiantes($materia)==0){
					unset($materias[$key]);
				}
			}
			//$datos['materias'] = $materias;
			$datos['grupos'] = $materias;
			$datos['id_persona'] =  $id_persona;
			$datos1=$this->perfil_model->cabecera($idusuario);
			$this->load->view('templates/header',$datos1);
			//$this->load->view('docente_materias_calificar1',$datos);
			$this->load->view('docente_grupos_calificar',$datos);
			$this->load->view('templates/footer');
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function docente_materias_calificar_reporte()
	{
		if($this->session->userdata('loggeado')){
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			$id_persona=$this->academico_model->getpersona($idusuario);
			$datos=array();
			$datos['materias'] = $this->academico_model->get_materias_del_docente_para_calificar($id_persona);
			$datos['id_persona'] =  $id_persona;
			$datos1=$this->perfil_model->cabecera($idusuario);
			$this->load->view('templates/header',$datos1);
			$this->load->view('docente_materias_calificar_reporte',$datos);
			$this->load->view('templates/footer');
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function buscar_grupos_calificar($id_carrera, $id_materia, $id_nivel,$id_persona)
	{
		if($this->session->userdata('loggeado')){
			$datos=array();
			$datos['grupos'] = $this->academico_model->buscar_grupos_calificar($id_carrera, $id_materia, $id_nivel,$id_persona);
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			$datos1=$this->perfil_model->cabecera($idusuario);
			$perfil=$this->perfil_model->get_perfil($idusuario);
			if(isset($this->session->userdata('loggeado')['EXTERNO'])){
				$this->load->view('templates/header_conexion');
			}elseif($perfil!=4){
				$this->load->view('templates/header',$datos1);
			}
			$this->load->view('docente_grupos_calificar',$datos);
			if(isset($this->session->userdata('loggeado')['EXTERNO'])){
				$this->load->view('templates/footer_conexion');
			}elseif($perfil!=4){
				$this->load->view('templates/footer');
			}
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function buscar_grupos_calificar_reporte($id_carrera, $id_materia, $id_nivel,$id_persona)
	{
		if($this->session->userdata('loggeado')){
			$datos=array();
			$datos['grupos'] = $this->academico_model->buscar_grupos_calificar($id_carrera, $id_materia, $id_nivel,$id_persona);
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			$datos1=$this->perfil_model->cabecera($idusuario);
			$this->load->view('templates/header',$datos1);
			$this->load->view('docente_grupos_calificar_reporte',$datos);
			$this->load->view('templates/footer');
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function buscar_grupo_de_estdiantes_calificar($id_grupo, $id_materia,$id_persona_docente)
	{
		if($this->session->userdata('loggeado')){
			$ids=explode('_',$id_materia);
			$id_materia=$ids[0];
			$id_plantilla=0;
			if(isset($ids[1])){
				$id_plantilla=$ids[1];
			}
			$datos= $this->academico_model->buscar_grupo_de_estdiantes_calificar($id_grupo, $id_materia,$id_persona_docente);
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			//$datos['activado_periodo_calificaciones']=$this->academico_model->perido_calificaciones_activo();
			$etapas=$this->academico_model->get_etapas_calificar();
			$estado_etapa=array();
			foreach($etapas as $etapa){
				$estado_etapa[$etapa['ETAPA']]=$etapa['ESTADO'];
				if($this->academico_model->verificar_usuario_funcionalidad($idusuario,69)){
					$estado_etapa[$etapa['ETAPA']]=1;//siempre activo si tiene permiso asignado
				}
			}
			$periodo= $this->academico_model->get_periodo_activado();
			//$fechaCierre=$this->academico_model->get_fecha_cierre(array('ID_GRUPO'=>$id_grupo,'ID_MATERIA'=>$id_materia,'ID_PERIODO_ACADEMICO'=>$periodo,'ID_PLANTILLA'=>));
			$fechaCierre=$this->academico_model->get_fecha_cierre(array('ID_GRUPO'=>$id_grupo,'ID_MATERIA'=>$id_materia,'ID_PERIODO_ACADEMICO'=>$periodo,'ID_PLANTILLA'=>$id_plantilla));
			$calificacion_cerrada=0;
			if(count($fechaCierre)>0){
				if($fechaCierre['FECHA_APLAZADO']!='0000-00-00'){
					$datetime1 = date_create($fechaCierre['FECHA_APLAZADO'].' 23:59:59');
				}else{
					$datetime1 = date_create($fechaCierre['FECHA_CIERRE'].' 23:59:59');
				}
				$datetime2 = date_create(date('Y-m-d H:i:s'));
				if($datetime1<$datetime2){
					$calificacion_cerrada=1;
				}
			}
			$total_horas=0;
			$valor_horas=0;
			$fechasClase='';
			$vector_horas=[4,3,3,3,3,3,8];//vector de horas de tutoria domingo a sabado
			$vector_valor=[13.75,10,10,10,10,10,13.75];//vector de valor por hora de tutoria domingo a sabado
			$planificacion=$this->academico_model->getPlanificacion($id_grupo, $id_materia, null, $id_plantilla);
			if($planificacion!=NULL){
				$fechast=$planificacion['FECHA_TUTORIA1'].'+'.$planificacion['FECHA_TUTORIA2'].'+'.$planificacion['FECHA_TUTORIA3'].'+'.$planificacion['FECHA_TUTORIA4'].'+'.$planificacion['FECHAS_TUTORIA'];
				$vector_ft=explode('+',$fechast);
				foreach($vector_ft as $ft){
					if($ft!='' and $ft!='0000-00-00'){
						$num_dia=date("w", strtotime($ft));
						$total_horas+=$vector_horas[$num_dia];
						$valor_horas+=$vector_horas[$num_dia]*$vector_valor[$num_dia];
						$fechasClase.=$ft.'<br>';
					}
				}
				if($planificacion['PLATAFORMA']==1){
					$total_horas=0;
					$valor_horas=40;
				}
			}
			$dati['ID_PERIODO_ACADEMICO']=$periodo;
			$dati['ID_MATERIA']=$id_materia;
			$dati['ID_GRUPO']=$id_grupo;
			$dati['ID_PLANTILLA']=$id_plantilla;
			$horaDictada=$this->academico_model->get_horasDictadas($dati);
			$nroFactura='';
			if(count($horaDictada)>0){
				$nroFactura=$horaDictada[0]['NRO_FACTURA'];
			}
			$datos['nroFactura']=$nroFactura;
			$datos['total_horas']=$total_horas;
			$datos['valor_horas']=sprintf("%01.2f",$valor_horas);
			$datos['fechasClase']=$fechasClase;
			$datos['calificacion_cerrada']=$calificacion_cerrada;
			$datos['estado_etapa']=$estado_etapa;
			$datos['id_grupo']=$id_grupo;
			$datos['id_materia']=$id_materia;
			$datos['id_plantilla']=$id_plantilla;
			$this->load->model('admin/usuarios_model');
			$datos['perfil'] = $this->usuarios_model->get_perfil_usuario($idusuario);
			//var_dump($datos['estudiantes'][0]);
			$datos1=$this->perfil_model->cabecera($idusuario);
			//$this->load->view('templates/header_conexion');
			//$this->load->view('templates/header',$datos1);
			$this->load->view('docente_grupo_de_estudiantes_calificar',$datos);
			//$this->load->view('templates/footer_conexion');
			//$this->load->view('templates/footer');
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function buscar_grupo_de_estdiantes_calificar_reporte($id_grupo, $id_materia,$id_persona_docente)
	{
		if($this->session->userdata('loggeado')){
			$datos= $this->academico_model->buscar_grupo_de_estdiantes_calificar($id_grupo, $id_materia,$id_persona_docente,1);
			$datos['activado_periodo_calificaciones']=$this->academico_model->perido_calificaciones_activo();

			$total_horas=0;
			$valor_horas=0;
			$fechasClase='';
			$fechaRegistro='';
			$vector_horas=[4,3,3,3,3,3,8];//vector de horas de tutoria domingo a sabado
			$vector_valor=[13.75,10,10,10,10,10,13.75];//vector de valor por hora de tutoria domingo a sabado
			$planificacion=$this->academico_model->getPlanificacion($id_grupo, $id_materia);
			if($planificacion!=NULL){
				$fechast=$planificacion['FECHA_TUTORIA1'].'+'.$planificacion['FECHA_TUTORIA2'].'+'.$planificacion['FECHA_TUTORIA3'].'+'.$planificacion['FECHA_TUTORIA4'].'+'.$planificacion['FECHAS_TUTORIA'];
				$vector_ft=explode('+',$fechast);
				foreach($vector_ft as $ft){
					if($ft!='' and $ft!='0000-00-00'){
						$num_dia=date("w", strtotime($ft));
						$total_horas+=$vector_horas[$num_dia];
						$valor_horas+=$vector_horas[$num_dia]*$vector_valor[$num_dia];
						$fechasClase.=$ft.'<br>';
					}
				}
				if($planificacion['PLATAFORMA']==1){
					$total_horas=0;
					$valor_horas=40;
				}
			}
			$dati['ID_PERIODO_ACADEMICO']=$this->academico_model->get_periodo_activado();;
			$dati['ID_MATERIA']=$id_materia;
			$dati['ID_GRUPO']=$id_grupo;
			$dati['TIPO']=1;
			$horaDictada=$this->academico_model->get_horasDictadas($dati);
			$nroFactura='Sin Factura';
			if(count($horaDictada)>0){
				$nroFactura=$horaDictada[0]['NRO_FACTURA'];
				$f=explode(' ',$horaDictada[0]['FECHA_CREACION']);
				$fechaRegistro=$f[0];
				if($horaDictada[0]['DETALLE_FACTURA']!=NULL){
					$d=explode('+',$horaDictada[0]['DETALLE_FACTURA']);
					$total_horas=$d[0];
					$valor_horas=$d[1];
				}
			}
			$datos['nroFactura']=$nroFactura;
			$datos['fechaRegistro']=$fechaRegistro;
			$datos['total_horas']=$total_horas;
			$datos['valor_horas']=sprintf("%01.2f",$valor_horas);
			$datos['fechasClaseTutorias']=$fechasClase;

			//var_dump($datos['estudiantes'][0]);
			$datos['id_grupo'] = $id_grupo;
			$datos['id_materia'] = $id_materia;
			$datos['id_persona_docente'] = $id_persona_docente;
			$datos['fechasClase']=$planificacion;
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			$datos1=$this->perfil_model->cabecera($idusuario);
			$this->load->view('templates/header',$datos1);
			$this->load->view('docente_grupo_de_estudiantes_calificar_reporte',$datos);
			$this->load->view('templates/footer');
		}else{
			redirect('admin/login', 'refresh');
		}
	}



	public function ListaDeAlumnosPorAula($id_carrera, $id_nivel, $id_grupo)
	{
		if($this->session->userdata('loggeado')){
			$datos['alumnos']= $this->academico_model->listaAlumnosAula($id_carrera, $id_nivel, $id_grupo);
			$datos['activado_periodo_calificaciones']=$this->academico_model->perido_calificaciones_activo();
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			$datos1=$this->perfil_model->cabecera($idusuario);
			$this->load->view('templates/header',$datos1);
			$this->load->view('ListaDeAlumnos',$datos);
			$this->load->view('templates/footer');
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function Re($id_carrera, $id_nivel, $id_grupo)
	{
		if($this->session->userdata('loggeado')){
			$datos['alumnos']= $this->academico_model->listaAlumnosAula($id_carrera, $id_nivel, $id_grupo);
			$datos['activado_periodo_calificaciones']=$this->academico_model->perido_calificaciones_activo();
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			$datos1=$this->perfil_model->cabecera($idusuario);
			$this->load->view('templates/header',$datos1);
			$this->load->view('ListaDeAlumnos',$datos);
			$this->load->view('templates/footer');
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function calificar_componentes()
	{
		if($this->session->userdata('loggeado')){
			$estudiante_carrera_meteria = trim($this->input->post('estudiante_carrera_meteria'));
			$etapa  = trim($this->input->post('etapa'));
			$cadena_componente  = trim($this->input->post('cadena_componente'));
			$cadena_valor  = trim($this->input->post('cadena_valor'));
			$promedio_etapa  = trim($this->input->post('promedio_etapa'));
			$etapas  = trim($this->input->post('etapas'));
			//$estado_matricula=obtener_estado_matricula($estudiante_carrera_meteria,'estudiante_carrera_materia');
			//if($estado_matricula==0){
			if($cadena_componente!=''){
				$this->academico_model->calificar_componentes($estudiante_carrera_meteria, $etapa,$cadena_componente,$cadena_valor,$promedio_etapa,$etapas);
			}
			//}
			echo json_encode(true);
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function buscarparametro()
	{
		$pm=$this->input->post('nparametro');
		$datos=$this->academico_model->getparametro($pm);
		echo json_encode($datos);
	}


	public function buscarNotaMinima()
	{
		$pm=$this->input->post('nparametro1');
		$datos=$this->academico_model->getNotaMinima($pm);
		echo json_encode($datos);
	}


	public function updatePromediototal()
	{
		if($this->session->userdata('loggeado')){
			$estudiante_carrera_meteria = trim($this->input->post('estudiante_carrera_meteria'));
			$promedio_total = trim($this->input->post('promedio_total'));
			$nota_final  = trim($this->input->post('nota_final'));
			$estado  = trim($this->input->post('estado'));
			$asistencia  = trim($this->input->post('asistencia'));
			$this->academico_model->updatePromediototal($estudiante_carrera_meteria,$promedio_total,$nota_final,$asistencia,$estado);
			echo json_encode(true);
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function asistenciaSupletorioPromedio()
	{
		if($this->session->userdata('loggeado')){
			$estudiante_carrera_meteria = trim($this->input->post('estudiante_carrera_meteria'));
			$asistencia  = trim($this->input->post('asistencia'));
			$supletorio  = trim($this->input->post('supletorio'));
			$nota_final  = trim($this->input->post('nota_final'));
			$estado      = trim($this->input->post('estado'));

			$carrera_materia_copia = "";
			$personas_copia        = "";
			$periodos_copia        = "";
			$estudiantes_carrera_materia_copia = "";
			///////////////////////////////////PROCESAMIENTO DE COPIA//////////////////////////////////////
				$ch  = curl_init();

				$url = $this->url_copia . 'asistenciaSupletorioPromedio/';

				curl_setopt($ch, CURLOPT_URL, $url);
				$datos_EstudianteCarreraMateria = $this->academico_model->buscarEstudianteCarreraMateria($estudiante_carrera_meteria);
				$carrera_materia_copia          = $datos_EstudianteCarreraMateria['ID_CARRERA_MATERIA'];
				$personas_copia                 = $datos_EstudianteCarreraMateria['ID_PERSONA'];
				$periodos_copia                 = $datos_EstudianteCarreraMateria['ID_PERIODO_ACADEMICO'];
				$data_copia['estudiante_carrera_meteria'] = $estudiante_carrera_meteria;
				$data_copia['asistencia']                 = $asistencia;
				$data_copia['supletorio']                 = $supletorio;
				$data_copia['nota_final']                 = $nota_final;
				$data_copia['estado']                     = $estado;

				$data_copia['carrera_materia_copia'] = $carrera_materia_copia;
				$data_copia['personas_copia']        = $personas_copia;
				$data_copia['periodos_copia']        = $periodos_copia;
				$data_copia['activado']           = $this->academico_model->get_periodo_activado();
				$data_copia['data_log']              = $this->session->userdata()['loggeado']["ID_USUARIO"];
				$elements = $data_copia;

				curl_setopt($ch, CURLOPT_POST,true);
				// curl_setopt($ch, CURLOPT_POSTFIELDS, $elements);
				// curl_setopt($ch, CURLOPT_HEADER, false);
				// curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode(array($elements)));
				curl_setopt($ch, CURLOPT_POSTFIELDS, $elements);
				curl_setopt($ch, CURLOPT_HEADER, false);
				// curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json'));
				curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);
				//-$resultado = curl_exec($ch);
				//-$error     = curl_error($ch);
				curl_close($ch);
			/////////////////////////////////////////////////////////////////////////
			$this->academico_model->updateAsistenciaSupletorioNotaFinal($estudiante_carrera_meteria,$asistencia,$supletorio,$nota_final,$estado);
			/////enviar supletorio a VLC//////////
			if($estado==0){
				$supletorio_vlc=$this->academico_model->get_estudiante_supletorio($estudiante_carrera_meteria);
				if($supletorio_vlc==NULL or $supletorio_vlc['ID_SUPLETORIO_VLC']==0){
					if($supletorio_vlc==NULL){
						$this->academico_model->crear_estudiante_supletorio(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$estudiante_carrera_meteria));
					}
					//$this->sendSupletorioVlc($estudiante_carrera_meteria,'crear');
				}
				//codigo arancel supletorio
				$this->load->module('facturacion/facturacion');
				$this->facturacion->crearArancelSupletorioEstudiante($estudiante_carrera_meteria);

			}elseif($estado>0 and ($supletorio=='' or $supletorio==NULL)){
				$supletorio_vlc=$this->academico_model->get_estudiante_supletorio($estudiante_carrera_meteria);
				if($supletorio_vlc!=NULL){
					//$this->sendSupletorioVlc($estudiante_carrera_meteria,'borrar');
					$this->academico_model->borrar_estudiante_supletorio($estudiante_carrera_meteria);
				}

			}
			//codigo arancel remedial
			if($estado == 2){
				$this->load->module('facturacion/facturacion');
				$this->facturacion->crearArancelRemedialEstudiante($estudiante_carrera_meteria);
			}

			 echo json_encode(true);
			//echo json_encode($resultado);
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function buscarEstudiantesInscritos()
	{
		if($this->session->userdata('loggeado')){
			$ap = trim($this->input->post('tb_ap'));
			$am = trim($this->input->post('tb_am'));
			$pn = trim($this->input->post('tb_pn'));
			$sn = trim($this->input->post('tb_sn'));
			$id_carrera = trim($this->input->post('s_carrera'));
			$id_modalidad = trim($this->input->post('s_modalida'));
			$periodo = trim($this->input->post('s_period'));
			$datos = $this->academico_model->buscarEstudiantesInscritos($ap, $am, $pn, $sn, $id_carrera,  $id_modalidad, $periodo);
			echo json_encode($datos);
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function inscritosReporte()
	{
		if($this->session->userdata('loggeado')){
			if($this->session->userdata('loggeado')){
				$datos=$this->academico_model->buscarEstudiantesInscritosAll();
				//var_dump($datos['estudiantes'][0]);
				$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
				$datos1=$this->perfil_model->cabecera($idusuario);
				$this->load->view('inscritosReporte',$datos);
				$this->load->view('templates/footer');
			}else{
				redirect('admin/login', 'refresh');
			}
		}
	}


	public function inscritosVista()
	{
		if($this->session->userdata('loggeado')){
			$data['ap'] = trim($this->input->post('tb_ap'));
			$data['am'] = trim($this->input->post('tb_am'));
			$data['pn'] = trim($this->input->post('tb_pn'));
			$data['sn'] = trim($this->input->post('tb_sn'));
			$data['id_carrera'] = trim($this->input->post('s_carrera'));
			$data['id_modalidad'] = trim($this->input->post('s_modalida'));
			$data['id_periodo'] = trim($this->input->post('s_period'));
			$datos=$this->academico_model->buscarEstudiantesInscritosAll($data);
			//var_dump($datos['estudiantes'][0]);
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			$datos1=$this->perfil_model->cabecera($idusuario);
			$this->load->view('templates/header',$datos1);
			$this->load->view('inscritosVista',$datos);
			$this->load->view('templates/footer');
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function busquedaInscritos()
	{
		if($this->session->userdata('loggeado')){
			$datos=array();
			$datos['niveles'] = $this->academico_model->get_niveles();
			$datos['carreras'] = $this->academico_model->get_carreras();
			$datos['modalidades'] = $this->academico_model->get_modalidades();
			$datos['periodos']=$this->academico_model->getPeriodos();
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			$datos1=$this->perfil_model->cabecera($idusuario);
			$this->load->view('templates/header',$datos1);
			$this->load->view('busquedaInscritos',$datos);
			$this->load->view('templates/footer');
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function busqueda_calificaciones_alumnos()
	{
		$id_usuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($id_usuario,47)){
			$usuario=$this->session->userdata('loggeado');
			$datos=array();
			$datos['niveles'] = $this->academico_model->get_niveles();
			$datos['carreras'] = $this->academico_model->get_carreras();
			$datos['modalidades'] = $this->academico_model->get_modalidades();
			$datos['periodos'] = $this->academico_model->getPeriodos();
			$datos['ID_PERIODO_ACADEMICO'] = $this->academico_model->get_periodo_activado();
			$grupos=array();
			$vector_us=null;
			if($usuario['ID_PERFIL']==12){//filtrar grupos para coordinadores

				$gruposc=$this->usuarios_model->grupos_usuario_academico(array('ID_USUARIO_ACADEMICO'=>$id_usuario));
				foreach($gruposc as $g){
					$grupos[]=$g['GRUPO'];
				}
			}else{
				$grupos=$this->academico_model->buscarGruposEst($vector_us);
				$grupos = explode("-", $grupos);
			}
			$datos['grupos'] = $grupos;
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			$datos1=$this->perfil_model->cabecera($idusuario);
			$this->load->view('templates/header',$datos1);
			$this->load->view('busqueda_calificaciones_alumnos',$datos);
			$this->load->view('templates/footer');
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function buscarAlumnoMateria()
	{
		if($this->session->userdata('loggeado')){
			$usuario=$this->session->userdata('loggeado');
			$id_usuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			$d['nd'] = trim($this->input->post('nd'));
			$d['ap'] = trim($this->input->post('ap'));
			$d['am'] = trim($this->input->post('am'));
			$d['pn'] = trim($this->input->post('pn'));
			$d['sn'] = trim($this->input->post('sn'));
			$d['grupo'] = trim($this->input->post('grupo'));
			$d['id_carrera'] = trim($this->input->post('id_carrera'));
			$d['id_nivel'] = trim($this->input->post('id_nivel'));
			$d['id_periodo_academico'] = trim($this->input->post('id_periodo_academico'));
			$d['estado_matricula'] = '0';
			if($usuario['ID_PERFIL']==12){//filtrar grupos para coordinadores
				$d['id_academico']=$usuario['ID_USUARIO'];
			}
			$datos = $this->academico_model->buscarAlumnoMateria($d);
			echo json_encode($datos);
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function alumnos_calificaciones($id_persona,$id_grupo,$id_nivel,$id_carrera,$id_periodo_academico)
	{
		if($this->session->userdata('loggeado')){
			$datos=array();
			$datos= $this->academico_model->buscar_estdiante_calificado($id_persona,$id_grupo,$id_nivel,$id_carrera,$id_periodo_academico);
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			$datos1=$this->perfil_model->cabecera($idusuario);
			$datos['id_personas']=trim($this->input->post('id_personas'),'+');
			$datos['id_grupos']=trim($this->input->post('id_grupos'),'+');
			$datos['id_carreras']= trim($this->input->post('id_carreras'),'+');
			$datos['id_niveles']= trim($this->input->post('id_niveles'),'+');
			$datos['id_matriculas']= trim($this->input->post('id_matriculas'),'+');
			$datos['id_matricula']= trim($this->input->post('id_matricula'));
			$vista=$this->input->post('vista');
			$datos['id_persona']=$id_persona;
			$datos['id_nivel']=$id_nivel;
			$datos['id_carrera']=$id_carrera;
			$datos['id_periodo_academico']=$id_periodo_academico;
			$etapas=$this->academico_model->get_etapas_calificar();
			$estado_etapa=array();
			foreach($etapas as $etapa){
				$estado_etapa[$etapa['ETAPA']]=$etapa['ESTADO'];
				if($this->academico_model->verificar_usuario_funcionalidad($idusuario,69)){
					$estado_etapa[$etapa['ETAPA']]=1;//siempre activo si tiene permiso asignado
				}
			}
			$datos['estado_etapa']=$estado_etapa;
			$datos['mensaje_aprueba']=$this->academico_model->get_mensaje_aprueba();
			$datos['mensaje_pierde']=$this->academico_model->get_mensaje_pierde();
			$datos['mensaje_supletorio']=$this->academico_model->get_mensaje_supletorio();
			if(!isset($vista)){
				$this->load->view('templates/header',$datos1);
			}
			$this->load->view('calificaciones_estudiante',$datos);
			if(!isset($vista)){
				$this->load->view('templates/footer');
			}
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function certificado_calificaciones_alumno($id_persona,$id_grupo,$id_nivel,$id_carrera,$id_periodo_academico)
	{
		if($this->session->userdata('loggeado')){
			$datos=array();
			$datos= $this->academico_model->buscar_certificado_estudiante($id_persona,$id_grupo,$id_nivel,$id_carrera,$id_periodo_academico);
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			$datos1=$this->perfil_model->cabecera($idusuario);
			$datos['id_personas']          = trim($this->input->post('id_personas'),'+');
			$datos['id_grupos']            = trim($this->input->post('id_grupos'),'+');
			$datos['id_carreras']            = trim($this->input->post('id_carreras'),'+');
			$datos['id_niveles']            = trim($this->input->post('id_niveles'),'+');
			$datos['id_matriculas']            = trim($this->input->post('id_matriculas'),'+');
			$datos['id_matricula']            = trim($this->input->post('id_matricula'));
			$vista                         = $this->input->post('vista');
			$datos['id_persona']           = $id_persona;
			$datos['id_nivel']             = $id_nivel;
			$datos['id_carrera']           = $id_carrera;
			$datos['id_periodo_academico'] = $id_periodo_academico;
			if(!isset($vista)){
				$this->load->view('templates/header',$datos1);
			}
			$this->load->view('certificado_calificaciones_alumno',$datos);
			if(!isset($vista)){
				$this->load->view('templates/footer');
			}
		}else{
			redirect('admin/login', 'refresh');
		}
	}
	public function calificaciones_alumno_pdf($id_persona,$id_grupo,$id_nivel,$id_carrera,$id_periodo_academico){
		if($this->session->userdata('loggeado')){
			$datos=array();
			$datos= $this->academico_model->buscar_certificado_estudiante($id_persona,$id_grupo,$id_nivel,$id_carrera,$id_periodo_academico);
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			$datos1=$this->perfil_model->cabecera($idusuario);
			$datos['id_personas']          = trim($this->input->post('id_personas'),'+');
			$datos['id_grupos']            = trim($this->input->post('id_grupos'),'+');
			$vista                         = $this->input->post('vista');
			$datos['id_persona']           = $id_persona;
			$datos['id_nivel']             = $id_nivel;
			$datos['id_carrera']           = $id_carrera;
			$datos['id_periodo_academico'] = $id_periodo_academico;
			/****************************CREAR DOCUMENTO ACADEMICO***********************************/
				$consultarCodigo   = true;
				$prefijoDocumento  = $this->academico_model->buscarTipoDocumento(array('ID_TIPO_DOCUMENTO'=>3));
				$data['matricula'] = $this->academico_model->obtener_matricula(array("ID_PERSONA"=>$id_persona,"ID_NIVEL"=>$id_nivel, "ID_CARRERA"=>$id_carrera,"ID_PERIODO_ACADEMICO"=>$id_periodo_academico));
				$certificado       = "";
				$certificado       = $this->academico_model->buscarDocumentoAcademico(array('ID_MATRICULA'=>$data['matricula']['ID_MATRICULA'],'ID_TIPO_DOCUMENTO'=>3));
				// if ($certificado == "") {
					$dataCertificado['CODIGO_DOCUMENTO'] = $prefijoDocumento['PREFIJO_DOCUMENTO']."-".$this->generarCodigo(6);
					while ($consultarCodigo) {
						$consultarCodigo                 = $this->academico_model->consultarCodigo($dataCertificado['CODIGO_DOCUMENTO']);
						if ($consultarCodigo == true) {
							$dataCertificado['CODIGO_DOCUMENTO']  = $prefijoDocumento['PREFIJO_DOCUMENTO']."-".$this->generarCodigo(6);
						}
					}
					$dataCertificado['ID_MATRICULA']              = $data['matricula']['ID_MATRICULA'];
					$dataCertificado['ID_TIPO_DOCUMENTO']         = $prefijoDocumento['ID_TIPO_DOCUMENTO'];
					$dataCertificado['FECHA_GENERACION']          = date('Y-m-d H:i:s');
					$dataCertificado['NUM_DESCARGAS']             = 1;
					$dataCertificado['FECHA_ULTIMA_DESCARGA']     = date('Y-m-d H:i:s');
					$dataCertificado['NUM_VERIFICACIONES']        = 1;
					$dataCertificado['FECHA_ULTIMA_VERIFICACION'] = date('Y-m-d H:i:s');
					$dataCertificado['PANTALLA_ULTIMA_DESCARGA']  = 1;
					$dataCertificado['NOMBRE_ARCHIVO_PDF']        = time().$dataCertificado['CODIGO_DOCUMENTO'].".pdf";
					$dataCertificado['ID_USUARIO']                = $this->session->userdata('loggeado')['ID_USUARIO'];
					//crear
					$dataCertificado['ID_DOCUMENTO_ACADEMICO']    = $this->academico_model->crearDocumentoAcademico($dataCertificado);
				// }

				$datos['certificado'] = $dataCertificado;

			/****************************************************************************************/
			if(!isset($vista)){
				// $this->load->view('templates/header',$datos1);
			}
			$this->load->view('certificado_calificaciones_alumno_pdf',$datos);
			if(!isset($vista)){
				// $this->load->view('templates/footer');
			}
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	public function certificado_calificaciones_alumno_detallado($id_persona,$id_grupo,$id_nivel,$id_carrera,$id_periodo)
	{
		if($this->session->userdata('loggeado')){
			$datos     = array();
			$datos     = $this->academico_model->buscar_certificado_estudiante_detallado($id_persona,$id_grupo,$id_nivel,$id_carrera,$id_periodo);
			$idusuario = $this->session->userdata('loggeado')['ID_USUARIO'];
			$datos1    = $this->perfil_model->cabecera($idusuario);
			$datos['id_personas'] = trim($this->input->post('id_personas'),'+');
			$datos['id_grupos']   = trim($this->input->post('id_grupos'),'+');
			$datos['id_carreras']            = trim($this->input->post('id_carreras'),'+');
			$datos['id_niveles']            = trim($this->input->post('id_niveles'),'+');
			$datos['id_matriculas']            = trim($this->input->post('id_matriculas'),'+');
			$datos['id_matricula']            = trim($this->input->post('id_matricula'));
			$vista                = $this->input->post('vista');
			$datos['id_persona']  = $id_persona;
			$datos['id_nivel']    = $id_nivel;
			$datos['id_carrera']  = $id_carrera;
			$datos['id_periodo']  = $id_periodo;

			if(!isset($vista)){
				$this->load->view('templates/header',$datos1);
			}
			$this->load->view('certificado_calificaciones_alumno_detallado',$datos);
			if(!isset($vista)){
				$this->load->view('templates/footer');
			}
		}else{
			redirect('admin/login', 'refresh');
		}
	}
	public function certificado_calificaciones_alumno_detallado_pdf($id_persona,$id_grupo,$id_nivel,$id_carrera,$id_periodo){

		if($this->session->userdata('loggeado')){
			$datos     = array();
			$datos     = $this->academico_model->buscar_certificado_estudiante_detallado($id_persona,$id_grupo,$id_nivel,$id_carrera,$id_periodo);
			$idusuario = $this->session->userdata('loggeado')['ID_USUARIO'];
			$datos1    = $this->perfil_model->cabecera($idusuario);
			$datos['id_personas'] = trim($this->input->post('id_personas'),'+');
			$datos['id_grupos']   = trim($this->input->post('id_grupos'),'+');
			$vista                = $this->input->post('vista');
			$datos['id_persona']  = $id_persona;
			$datos['id_nivel']    = $id_nivel;
			$datos['id_carrera']  = $id_carrera;
			$datos['id_periodo']  = $id_periodo;
			/****************************CREAR DOCUMENTO ACADEMICO***********************************/
				$consultarCodigo   = true;
				$prefijoDocumento  = $this->academico_model->buscarTipoDocumento(array('ID_TIPO_DOCUMENTO'=>2));
				$data['matricula'] = $this->academico_model->obtener_matricula(array("ID_PERSONA"=>$id_persona,"ID_NIVEL"=>$id_nivel, "ID_CARRERA"=>$id_carrera,"ID_PERIODO_ACADEMICO"=>$id_periodo));
				$certificado       = "";
				$certificado       = $this->academico_model->buscarDocumentoAcademico(array('ID_MATRICULA'=>$data['matricula']['ID_MATRICULA'],'ID_TIPO_DOCUMENTO'=>2));
				// if ($certificado == ""){
					$dataCertificado['CODIGO_DOCUMENTO']         = $prefijoDocumento['PREFIJO_DOCUMENTO']."-".$this->generarCodigo(6);
					while ($consultarCodigo) {
						$consultarCodigo = $this->academico_model->consultarCodigo($dataCertificado['CODIGO_DOCUMENTO']);
						if ($consultarCodigo == true) {
							$dataCertificado['CODIGO_DOCUMENTO'] = $prefijoDocumento['PREFIJO_DOCUMENTO']."-".$this->generarCodigo(6);
						}
					}
					$dataCertificado['ID_MATRICULA']              = $data['matricula']['ID_MATRICULA'];
					$dataCertificado['ID_TIPO_DOCUMENTO']         = $prefijoDocumento['ID_TIPO_DOCUMENTO'];
					$dataCertificado['FECHA_GENERACION']          = date('Y-m-d H:i:s');
					$dataCertificado['NUM_DESCARGAS']             = 1;
					$dataCertificado['FECHA_ULTIMA_DESCARGA']     = date('Y-m-d H:i:s');
					$dataCertificado['NUM_VERIFICACIONES']        = 1;
					$dataCertificado['FECHA_ULTIMA_VERIFICACION'] = date('Y-m-d H:i:s');
					$dataCertificado['PANTALLA_ULTIMA_DESCARGA']  = 1;
					$dataCertificado['NOMBRE_ARCHIVO_PDF']        = time().$dataCertificado['CODIGO_DOCUMENTO'].".pdf";
					$dataCertificado['ID_USUARIO']                = $this->session->userdata('loggeado')['ID_USUARIO'];
					//crear
					$dataCertificado['ID_DOCUMENTO_ACADEMICO']    = $this->academico_model->crearDocumentoAcademico($dataCertificado);
				// }
				/*
					else{
						//actualizar
						$dataCertificado['NUM_DESCARGAS']             = $certificado['NUM_DESCARGAS']+1;
						$dataCertificado['FECHA_ULTIMA_DESCARGA']     = date('Y-m-d H:i:s');
						$dataCertificado['NUM_VERIFICACIONES']        = $certificado['NUM_VERIFICACIONES']+1;
						$dataCertificado['FECHA_ULTIMA_VERIFICACION'] = date('Y-m-d H:i:s');
						$dataCertificado['PANTALLA_ULTIMA_DESCARGA']  = 1;
						$this->academico_model->actualizarDocumentoAcademico($dataCertificado,$certificado['ID_DOCUMENTO_ACADEMICO']);
						$dataCertificado['ID_MATRICULA']              = $certificado['ID_MATRICULA'];
						$dataCertificado['ID_TIPO_DOCUMENTO']         = $certificado['ID_TIPO_DOCUMENTO'];
						$dataCertificado['FECHA_GENERACION']          = $certificado['FECHA_GENERACION'];
						$dataCertificado['ID_DOCUMENTO_ACADEMICO']    = $certificado['ID_DOCUMENTO_ACADEMICO'];
						$dataCertificado['CODIGO_DOCUMENTO']          = $certificado['CODIGO_DOCUMENTO'];
					}
				*/
				$datos['certificado'] = $dataCertificado;
			/****************************************************************************************/
			if(!isset($vista)){
				// $this->load->view('templates/header',$datos1);
			}
			$this->load->view('certificado_calificaciones_alumno_detallado_pdf',$datos);
			if(!isset($vista)){
				// $this->load->view('templates/footer');
			}
		}else{
			redirect('admin/login', 'refresh');
		}
	}
		public function obtener_periodo()
		{
			$datos=array();
			$datos=$this->academico_model->get_periodo();
			echo json_encode($datos);
		}

		//Codigo realizado por GM***///
		//////////////////////////////
		public function buscar_para_anular_matricula()
		{
			if($this->session->userdata('loggeado')){
				$datos=array();
				$datos['niveles'] = $this->academico_model->get_niveles();
				$datos['carreras'] = $this->academico_model->get_carreras();
				$datos['periodos'] = $this->academico_model->getPeriodos();
				$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
				$datos1=$this->perfil_model->cabecera($idusuario);
				$this->load->view('templates/header',$datos1);
				$this->load->view('busqueda_para_anular_matricula',$datos);
				$this->load->view('templates/footer');
			}else{
				redirect('admin/login', 'refresh');
			}
		}


		public function anular_matricula($id_matricula=null)
		{
			if($this->session->userdata('loggeado')){
				$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
				///////////////////////////////////PROCESAMIENTO DE COPIA//////////////////////////////////////
					$ch  = curl_init();

					if (isset($id_matricula) && $id_matricula != 0 && $id_matricula != null ) {
						$url = $this->url_copia . 'anular_matricula/'.$id_matricula;
					}else{
						$url = $this->url_copia . 'anular_matricula/';
					}

					curl_setopt($ch, CURLOPT_URL, $url);
					$data_copia['idusuario'] = $idusuario;

					$elements                = $data_copia;
					curl_setopt($ch, CURLOPT_POST,true);
					// curl_setopt($ch, CURLOPT_POSTFIELDS, $elements);
					// curl_setopt($ch, CURLOPT_HEADER, false);
					// curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode(array($elements)));
					curl_setopt($ch, CURLOPT_POSTFIELDS, $elements);
					curl_setopt($ch, CURLOPT_HEADER, false);
					// curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json'));
					curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);
					$resultado = curl_exec($ch);
					$error     = curl_error($ch);
					curl_close($ch);
				/////////////////////////////////////////////////////////////////////////

				$dato=$this->academico_model->anular_matricula($id_matricula,$idusuario);
				if($dato=='ANULADO'){
					//enviar actualizacion matricula vlc
					//$id_cliente=$this->academico_model->obtener_idCliente_matricula($id_matricula);
					//$this->sendMatriculaVlc($id_cliente,'anulado');
					echo json_encode($dato);
				}else{
					$dato1='<input class="btn btn-success btn-sm" type="button" value="Anular Matricula" onclick="confirma_anular_matricula(\''.$id_matricula.'\',\'\')">
					<script>
					var params = {                
										onInit: function(data) {
										},
										onCreate: function(notification, data) {
										},
										onClose: function(notification, data) {
										}
										};
									var text = "'.$dato.'";
									params.heading = "Notificaci�n";
									params.theme = "teal";
									params.life = "3000";
									$.notific8(text, params);
					</script>
					';
					echo $dato1;
				}
				// echo $resultado;
			}else{
				//redirect('admin/login', 'refresh');
				echo "Sesion Terminada";
			}
		}


		public function buscar_para_retirar_estudiante()
		{
			if($this->session->userdata('loggeado')){
				$datos=array();
				$datos['niveles'] = $this->academico_model->get_niveles();
				$datos['carreras'] = $this->academico_model->get_carreras();
				//$datos['periodos'] = $this->academico_model->getPeriodos();
				$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
				$datos1=$this->perfil_model->cabecera($idusuario);
				$this->load->view('templates/header',$datos1);
				$this->load->view('busqueda_para_retirar_estudiante',$datos);
				$this->load->view('templates/footer');
			}else{
				redirect('admin/login', 'refresh');
			}
		}


		public function retirar_estudiante($id_matricula=null,$nota_asistencia)
		{
			if($this->session->userdata('loggeado')){
				$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
				///////////////////////////////////PROCESAMIENTO DE COPIA//////////////////////////////////////
					$ch  = curl_init();

					if (isset($id_matricula) && $id_matricula != 0 && $id_matricula != null ) {
						$url = $this->url_copia . 'retirar_estudiante/'.$id_matricula.'/'.$nota_asistencia;
					}else{
						$url = $this->url_copia . 'retirar_estudiante/'.null.'/'.$nota_asistencia;
					}

					curl_setopt($ch, CURLOPT_URL, $url);
					$data_copia['idusuario'] = $idusuario;

					$elements                = $data_copia;
					curl_setopt($ch, CURLOPT_POST,true);
					// curl_setopt($ch, CURLOPT_POSTFIELDS, $elements);
					// curl_setopt($ch, CURLOPT_HEADER, false);
					// curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode(array($elements)));
					curl_setopt($ch, CURLOPT_POSTFIELDS, $elements);
					curl_setopt($ch, CURLOPT_HEADER, false);
					// curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json'));
					curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);
					$resultado = curl_exec($ch);
					$error     = curl_error($ch);
					curl_close($ch);
				/////////////////////////////////////////////////////////////////////////
				$dato=$this->academico_model->retirar_estudiante($id_matricula,$idusuario,$nota_asistencia);
				if($dato=='RETIRADO'){
					//enviar datos a VLC
					$matricula=$this->academico_model->obtener_matricula(array('ID_MATRICULA'=>$id_matricula));
					$materias=$this->academico_model->get_materias_estudiante($matricula['ID_PERSONA'],$matricula['ID_PERIODO_ACADEMICO'],null,null,$matricula['ID_CARRERA']);
					foreach($materias as $m){
						//$this->sendMateriaVlc($m['ID_ESTUDIANTE_CARRERA_MATERIA'],'borrar');
					}
					//$id_cliente=$this->academico_model->obtener_idCliente_matricula($id_matricula);
					//$this->sendMatriculaVlc($id_cliente,'retirado');
					echo json_encode($dato);
				}else{
					$dato1='<input class="btn btn-success btn-sm" type="button" value="Retirar Estudiante" onclick="retirar_estudiante(\''.$id_matricula.'\')">
					<script>
					var params = {                
										onInit: function(data) {
										},
										onCreate: function(notification, data) {
										},
										onClose: function(notification, data) {
										}
										};
									var text = "'.$dato.'";
									params.heading = "Notificaci�n";
									params.theme = "teal";
									params.life = "3000";
									$.notific8(text, params);
					</script>
					';
					echo $dato1;
				}
			}else{
				//redirect('admin/login', 'refresh');
				echo "Sesion Terminada";
			}
		}


		public function buscarEstudiantesParaMatricular()
		{
			if($this->session->userdata('loggeado')){
				$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
				$ap = trim($this->input->post('ap'));
				$am = trim($this->input->post('am'));
				$pn = trim($this->input->post('pn'));
				$sn = trim($this->input->post('sn'));
				$nd = trim($this->input->post('nd'));
				$para_cambio_carrera = trim($this->input->post('para_cambio'));
				/*$id_carrera = trim($this->input->post('id_carrera'));
				$id_modalidad = trim($this->input->post('id_modalidad'));
				$id_nivel = trim($this->input->post('id_nivel'));
				$fi = trim($this->input->post('fi'));
				$ff = trim($this->input->post('ff'));*/
				//$datos = $this->academico_model->buscarEstudiantesMatriculados($ap, $am, $pn, $sn, $id_carrera, $id_nivel, $id_modalidad, $fi, $ff);
				$datos = $this->academico_model->buscarEstudiantesParaMatricular($ap, $am, $pn, $sn, $nd);
				if(isset($datos[0]['ID_CLIENTE'])){
					$datos[0]['academico']=0;
					$datos[0]['financiero']=0;
					$datos[0]['borrar']=0;
					/*foreach($datos as $key=>$dato){
						if(isset($dato['ID_CLIENTE'])){
							$datos[$key]['tiene_plan'] = $this->academico_model->seleccionado_plan_de_pago($dato['ID_CLIENTE']);
						}
					}*/
					if($this->academico_model->verificar_usuario_funcionalidad($idusuario,64)){
						$datos[0]['academico']=1;
					}
					if($this->academico_model->verificar_usuario_funcionalidad($idusuario,65)){
						$datos[0]['financiero']=1;
					}
					if($this->academico_model->verificar_usuario_funcionalidad($idusuario,83)){
						$datos[0]['borrar']=1;
					}
				}
				if($para_cambio_carrera==1){//filtrar los registros que no tienen matricula anterior
					foreach($datos as $key=>$dato){
						$ultima_matricula=$this->academico_model->datos_ultima_matricula_estudiante($dato['ID_CLIENTE']);
						if($ultima_matricula==NULL){
							$datos[$key]['ESTADO']=-1;
						}
						$datos[$key]['cambiado']=0;
						$id_periodo=$this->academico_model->get_periodo_activado();
						$dat['ID_PERSONA']=$dato['ID_PERSONA'];
						$dat['ID_PERIODO']=$id_periodo;
						/*$cambios_realizados=$this->academico_model->get_cambio_carrera($dat);
						if(count($cambios_realizados)>0){
							$datos[$key]['cambiado']=1;
						}*/
					}
				}
				echo json_encode($datos);
			}else{
				redirect('admin/login', 'refresh');
			}
		}


		public function calificacion_alumno($id_periodo_academico=null,$id_carrera=null)
		{
			if($this->session->userdata('loggeado')){
				$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
				$id_persona=$this->academico_model->getpersona($idusuario);


				if($id_periodo_academico==null){
					$id_periodo_academico=$this->academico_model->get_periodo_activado();
				}

				$matriculas = $this->academico_model->buscar_matricula(array('ID_PERSONA'=>$id_persona,'ID_PERIODO_ACADEMICO'=>$id_periodo_academico));
				$carreras=array();
				$id_grupo=null;
				$id_nivel=null;
				if(count($matriculas)>0){
					foreach($matriculas as $m){
						$carreras[$m['ID_CARRERA']]=$m['CARRERA'];
						if($m['ID_CARRERA']==$id_carrera){
							$id_grupo=$m['ID_GRUPO'];
							$id_nivel=$m['ID_NIVEL'];
							$id_carrera=$m['ID_CARRERA'];
						}
					}
				}else{
					if($id_carrera==null){
						$id_carrera=0;
					}
					$matriculas = $this->academico_model->buscar_matricula(array('ID_PERSONA'=>$id_persona,'ESTADO'=>'0'));
					$id_cliente=$this->academico_model->get_id_cliente($id_persona);
					foreach($matriculas as $k=>$m){
						if(!isset($carreras[$m['ID_CARRERA']])){
							$carreras[$m['ID_CARRERA']]=$m['CARRERA'];
							if($m['ID_CARRERA']==$id_carrera or $id_carrera==$k){
								$ultima_matricula=$this->academico_model->datos_ultima_matricula_estudiante($id_cliente,$m['ID_CARRERA']);
								$datos_ultima_matricula = $this->academico_model->obtener_datos_matricula($ultima_matricula['ID_CLIENTE'],$ultima_matricula['ID_MATRICULA'],$ultima_matricula['ID_PERIODO_ACADEMICO']);
								$cabecera['GRUPO']=$datos_ultima_matricula['GRUPO'];
								$cabecera['ESTADO']=-1;
								$cabecera['DOCENTE']=$datos_ultima_matricula['APELLIDOS'].' '.$datos_ultima_matricula['NOMBRES'];
								$cabecera['NRO_DOCUMENTO']=$datos_ultima_matricula['NRO_DOCUMENTO'];
							}
						}
					}
				}
				if($id_grupo==null){
					$id_grupo=$this->academico_model->obtener_idgrupo_estudiante($id_persona,$id_periodo_academico);
				}
				if($id_nivel==null){
					$id_nivel=$this->academico_model->obtener_idnivel_estudiante($id_persona,$id_periodo_academico);
				}
				if($id_carrera==null){
					$id_carrera=$this->academico_model->obtener_idcarrera_estudiante($id_persona,$id_periodo_academico);
				}

				if($id_carrera==''){
					$id_carrera=0;
				}

				$datos=array();
				$etapas=$this->academico_model->get_etapas_calificar();
				$estado_etapa=array();
				foreach($etapas as $etapa){
					$estado_etapa[$etapa['ETAPA']]=$etapa['ESTADO'];
					if($this->academico_model->verificar_usuario_funcionalidad($idusuario,69)){
						$estado_etapa[$etapa['ETAPA']]=1;//siempre activo si tiene permiso asignado
					}
				}
				//obtener_datos_matricula($id_cliente)
				$datos= $this->academico_model->buscar_estdiante_calificado($id_persona,$id_grupo,$id_nivel,$id_carrera,$id_periodo_academico);
				if(isset($cabecera)){
					$datos['cabecera']=$cabecera;
				}
				$datos['estado_etapa']=$estado_etapa;
				$datos['mensaje_aprueba']=$this->academico_model->get_mensaje_aprueba();
				$datos['mensaje_pierde']=$this->academico_model->get_mensaje_pierde();
				$datos['mensaje_supletorio']=$this->academico_model->get_mensaje_supletorio();
				//filtrar periodos del estudiante
				$periodos = $this->academico_model->getPeriodos();
				$vector_periodos=array();
				foreach($periodos as $periodo){
					$matricula=$this->academico_model->obtener_matricula(array('ID_PERSONA'=>$id_persona,'ID_PERIODO_ACADEMICO'=>$periodo['ID_PERIODO_ACADEMICO']));
					if($matricula!=NULL or $periodo['ID_PERIODO_ACADEMICO']==$id_periodo_academico){
						$vector_periodos[]=$periodo;
					}
				}
				$datos['periodos'] = $vector_periodos;
				$datos['ID_PERIODO_ACADEMICO'] = $id_periodo_academico;
				$datos['ID_CARRERA'] = $id_carrera;
				$datos['carreras'] = $carreras;
				$datos1=$this->perfil_model->cabecera($idusuario);
				$this->load->view('templates/header',$datos1);
				$this->load->view('calificaciones_estudiante',$datos);
				$this->load->view('templates/footer');
			}else{
				redirect('admin/login', 'refresh');
			}
		}//fin alumno_calificacion()

		////////////////////////////////////////////////////////////////////////////////////////////////
		public function gestionBeca()
		{
			if($this->session->userdata('loggeado')){
				$idbeca=$this->input->post('idbeca');
				if(isset($idbeca) and $idbeca!=''){
					$data['TIPO_BECA']=$this->input->post('beca');
					$data['PORCENTAJE']=$this->input->post('porcentaje');
					$data['RUBROS_APLICA']=trim($this->input->post('rubros'),'+');
					if($idbeca==0){
						$this->academico_model->crearBeca($data);
					}else{
						$this->academico_model->actualizarBeca($data,$idbeca);
					}
					echo 'Registro Realizado';
				}else{
					$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
					$datos1=$this->perfil_model->cabecera($idusuario);
					$dat['ID_TIPO_RUBRO']=3;
					$dat['rubro']='';
					$data['rubros'] = $this->rubros_model->buscar_rubros($dat);
					$this->load->view('templates/header',$datos1);
					$this->load->view('gestionBeca',$data);
					$this->load->view('templates/footer');
				}
			}else{
				redirect('admin/login', 'refresh');
			}
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////
		public function buscarBecas()
		{
			if($this->session->userdata('loggeado')){
				$data['NOMBRE']=$this->input->post('nombre');
				$becas = $this->academico_model->buscar_beca($data);
				foreach($becas as $key=>$beca){//a�adir los nombres de los rubros al cual aplica el descuento beca
					$datos_rubros_aplica=',';
					if($beca['RUBROS_APLICA']!=''){
						$dat['rubro']='';
						$dat['ID_RUBROS']=explode('+',$beca['RUBROS_APLICA']);
						if(count($dat['ID_RUBROS'])>0){
							$rubros=$this->rubros_model->buscar_rubros($dat);
							foreach($rubros as $rubro){
								$datos_rubros_aplica.=' '.$rubro['RUBRO'].',';
							}
						}
					}
					$becas[$key]['DATOS_RUBROS_APLICA']=trim($datos_rubros_aplica,',');
				}
				echo json_encode($becas);
			}else{
				redirect('admin/login', 'refresh');
			}
		}

		///////////////////////////////////////////////////////////////////////////////////////////////////
		public function actualizaEstadoBeca($idBeca=null,$estado=null)
		{
			if($this->session->userdata('loggeado')){
				if($idBeca!=null){
					$data['ESTADO']=$estado;
					$this->academico_model->actualizarBeca($data,$idBeca);
					$data['ID_BECA']=$idBeca;
					$beca = $this->academico_model->buscar_beca($data);
					if($estado==0){
						 echo '<input class="btn btn-info btn-sm" value="Editar" onclick="gestionBeca(\''.$beca[0]['TIPO_BECA'].'\',\''.$beca[0]['PORCENTAJE'].'\',\''.$beca[0]['RUBROS_APLICA'].'\',\''.$idBeca.'\')" type="button"><input class="btn btn-danger btn-sm" style="margin-left:5px" value="Desactivar" onclick="estado_beca(\''.$idBeca.'\',\'1\')" type="button">';
					 }else{
						 echo '<input class="btn btn-info btn-sm" value="Editar" onclick="gestionBeca(\''.$beca[0]['TIPO_BECA'].'\',\''.$beca[0]['PORCENTAJE'].'\',\''.$beca[0]['RUBROS_APLICA'].'\',\''.$idBeca.'\')" type="button"><input class="btn btn-warning btn-sm" style="margin-left:5px;width:80px" value="Activar" onclick="estado_beca(\''.$idBeca.'\',\'0\')" type="button">';
					 }
				}
			}else{
				redirect('admin/login', 'refresh');
			}
		}

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public function buscar_para_historial_calificaciones()
		{
			if($this->session->userdata('loggeado')){
				$datos=array();
				$datos['niveles'] = $this->academico_model->get_niveles();
				$datos['carreras'] = $this->academico_model->get_carreras();
				$datos['modalidades'] = $this->academico_model->get_modalidades();
				$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
				$datos1=$this->perfil_model->cabecera($idusuario);
				$this->load->view('templates/header',$datos1);
				$this->load->view('busqueda_para_historial_calificaciones', $datos);
				$this->load->view('templates/footer');
			}else{
				redirect('admin/login', 'refresh');
			}
		}

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public function historialCalificaciones($id_cliente=null,$id_matricula=null)
		{
			if($this->session->userdata('loggeado')){
				$this->load->helper('form');
				$this->load->library('form_validation');
				$this->form_validation->CI =& $this;
				if($id_cliente == NULL){
					show_404();
				}else{
					$matricula = $this->academico_model->obtener_datos_matricula($id_cliente,$id_matricula);
				}
				$datos_estudiante = $this->academico_model->get_datos_cliente($id_cliente);
				$materias_a_historial = $this->academico_model->getMateriasParaHistorial($matricula['ID_CARRERA'],$matricula['ID_PERSONA']);

				foreach ($materias_a_historial as $key => $materia) {
					$materias_a_historial[$key]['docentes'] = $this->academico_model->getDocentesMateria($materia);
				}
				$matricula['materias_a_historial'] = $materias_a_historial;
				$matricula['APELLIDOS'] = $datos_estudiante['APELLIDOS'];
				$matricula['NOMBRES']   = $datos_estudiante['NOMBRES'];
				$matricula['carreras']  = $this->academico_model->get_carreras();
				$matricula['modalidades'] = $this->academico_model->get_modalidades();
				$matricula['niveles'] = $this->academico_model->get_niveles();
				//$matricula['periodos'] = $this->academico_model->get_periodos_academicos();
				$matricula['periodos'] = $this->academico_model->getPeriodos();

				$matricula['ID_CLIENTE'] = $id_cliente;
				$matricula['MATRICULA'] = $matricula;
				$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
				$datos1=$this->perfil_model->cabecera($idusuario);
				$this->load->view('templates/header',$datos1);
				$this->load->view('historialCalificaciones', $matricula);
				$this->load->view('templates/footer');
			}else{
				redirect('admin/login', 'refresh');
			}
		}

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public function procesarHistorialCalificaciones($id_cliente=null)
		{
			if($this->session->userdata('loggeado')){
				$this->load->helper('form');
				$this->load->library('form_validation');
				$this->form_validation->CI =& $this;
				if($id_cliente == NULL){
					show_404();
				}
				$this->form_validation->set_rules('formulario_matricula[NOMBRES]', 'nombre', 'required');
				$data = $this->input->post('formulario_matricula'); //todo: corregir en la vista, poner formular convalidar homologar
				$data['ID_CLIENTE']=$id_cliente;
				if($this->form_validation->run() == FALSE){

				}else{
					$respuesta=$this->academico_model->historialCalificaciones($data);
					echo $respuesta;
				}
			}else{
				redirect('admin/login', 'refresh');
			}
		}

		/////////////////////////////////////////////////////////////////////////////////////////////
		public function get_materias_historial()
		{
			if($this->session->userdata('loggeado')){
				$id_cliente = trim($this->input->post('id_cliente'));
				$datos = $this->academico_model->get_materias_historial($id_cliente);
				echo json_encode($datos);
			}else{
				redirect('admin/login', 'refresh');
			}
		}

		///////////////////////////////////////////////////////////////////////////////////////////////////
		public function matriculadosVista()
		{
			if($this->session->userdata('loggeado')){
				$data['ID_CARRERA']=trim($this->input->post('s_carrera'));
				$data['ID_NIVEL']=trim($this->input->post('s_nivel'));
				$data['ID_PERIODO_ACADEMICO']=trim($this->input->post('s_period'));
				$data['GRUPO']=trim($this->input->post('s_grupo'));
				$datos=$this->academico_model->buscarEstudiantesMatriculadosAll($data);
				if($this->session->userdata('loggeado')['ID_PERFIL']==12 and $data['GRUPO']==''){//filtrar grupos para coordinadores
					$id_usuario=$this->session->userdata('loggeado')['ID_USUARIO'];
					$datos_temp=array();
					/*$usuario_sedes=$this->usuarios_model->buscar_usuario_sede(array('ID_USUARIO'=>$id_usuario));
					if(count($usuario_sedes)>0){
						$vector_us=null;
						foreach($usuario_sedes as $us){
							$vector_us[]=$us['ID_SEDE'];
						}
						$grupos=$this->academico_model->buscarGruposEst($vector_us);
						$grupos = explode("-", $grupos);
						$vector_grupos=array();
						foreach($grupos as $g){
							$vector_grupos[]=trim($g);
						}
						foreach($datos['estudiantes'] as $dat){
							if(in_array($dat['GRUPO'],$vector_grupos)){
								$datos_temp[]=$dat;
							}
						}
					}*/

					$vector_grupos=array();
					$usuario_grupos=$this->usuarios_model->buscar_usuario_grupos(array('ID_USUARIO'=>$id_usuario));
					if($usuario_grupos!=NULL){
						$vector_grupos=explode('+',$usuario_grupos['GRUPOS']);
					}
					foreach($datos['estudiantes'] as $dat){
						if(in_array($dat['GRUPO'],$vector_grupos)){
							$datos_temp[]=$dat;
						}
					}
					$datos['estudiantes']=$datos_temp;
				}
				$datos['titulo']='MATRICULADOS';
				$reporte=trim($this->input->post('reporte'));
				$datos['id_carrera']=0;
				$datos['id_nivel']=0;
				$datos['id_periodo_academico']=0;
				$datos['id_grupo']=0;
				if($data['ID_CARRERA']!=''){
					$datos['id_carrera']=$data['ID_CARRERA'];
				}
				if($data['ID_NIVEL']!=''){
					$datos['id_nivel']=$data['ID_NIVEL'];
				}
				if($data['ID_PERIODO_ACADEMICO']!=''){
					$datos['id_periodo_academico']=$data['ID_PERIODO_ACADEMICO'];
				}
				if($data['GRUPO']!=''){
					$datos['id_grupo']=$data['GRUPO'];
				}
				$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
				$datos1=$this->perfil_model->cabecera($idusuario);
				if($reporte==1){
					$datos['datos']=$data;
					$this->load->view('reporteMatriculados',$datos);
				}else{
					$this->load->view('templates/header',$datos1);
					$this->load->view('inscritosVista',$datos);
					//$this->load->view('inscritosVistaCodificado',$datos);
					$this->load->view('templates/footer');
				}
			}else{
				redirect('admin/login', 'refresh');
			}
		}

		/////////////////////////////////////////////////////////////////////////////////////////
		public function matriculadosReporte($id_carrera,$id_nivel,$id_periodo_academico,$idgrupo,$tipo)
		{
			if($this->session->userdata('loggeado')){
				$data['ID_CARRERA']=$id_carrera;
				$data['ID_NIVEL']=$id_nivel;
				$data['ID_PERIODO_ACADEMICO']=$id_periodo_academico;
				$data['GRUPO']=$idgrupo;
				$datos=$this->academico_model->buscarEstudiantesMatriculadosAll($data);
				if($this->session->userdata('loggeado')['ID_PERFIL']==12 and $data['GRUPO']<=0){//filtrar grupos para coordinadores
					$id_usuario=$this->session->userdata('loggeado')['ID_USUARIO'];
					$datos_temp=array();
					/*$usuario_sedes=$this->usuarios_model->buscar_usuario_sede(array('ID_USUARIO'=>$id_usuario));
					if(count($usuario_sedes)>0){
						$vector_us=null;
						foreach($usuario_sedes as $us){
							$vector_us[]=$us['ID_SEDE'];
						}
						$grupos=$this->academico_model->buscarGruposEst($vector_us);
						$grupos = explode("-", $grupos);
						$vector_grupos=array();
						foreach($grupos as $g){
							$vector_grupos[]=trim($g);
						}
						foreach($datos['estudiantes'] as $dat){
							if(in_array($dat['GRUPO'],$vector_grupos)){
								$datos_temp[]=$dat;
							}
						}
					}*/

					$vector_grupos=array();
					$usuario_grupos=$this->usuarios_model->buscar_usuario_grupos(array('ID_USUARIO'=>$id_usuario));
					if($usuario_grupos!=NULL){
						$vector_grupos=explode('+',$usuario_grupos['GRUPOS']);
					}
					foreach($datos['estudiantes'] as $dat){
						if(in_array($dat['GRUPO'],$vector_grupos)){
							$datos_temp[]=$dat;
						}
					}
					$datos['estudiantes']=$datos_temp;
				}
				$datos['tipo_reporte']=$tipo;
				$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
				/*$datos1=$this->perfil_model->cabecera($idusuario);
				$datos['titulo']='MATRICULADOS';
				 $this->load->view('inscritosReporte',$datos);
				   $this->load->view('templates/footer');*/
				$this->load->view('reporte_matriculados_excel',$datos);
			}else{
				redirect('admin/login', 'refresh');
			}
		}

		/////////////////////////////////////////////////////////////////////////////////////////////
		public function get_materias_periodos()
		{
			if($this->session->userdata('loggeado')){
				$id_cliente = trim($this->input->post('id_cliente'));
				$id_periodo = trim($this->input->post('id_periodo'));
				$para_convalidar_homologar = trim($this->input->post('hc'));
				if($para_convalidar_homologar==1){
					$id_persona=$this->academico_model->get_id_persona($id_cliente);
					//todas las materias matriculadas sin convalidadas,ni homologadas, ni historial
					$datos = $this->academico_model->get_materias_estudiante($id_persona,null);
				}else{
					$datos = $this->academico_model->get_materias_periodos($id_cliente,$id_periodo);
				}
				echo json_encode($datos);
			}else{
				redirect('admin/login', 'refresh');
			}
		}

		/////////////////////////////////////////////////////////////////////////////////////////////
		public function get_materias_prerequisito_sin_aprobar()
		{
			if($this->session->userdata('loggeado')){
				$id_cliente = trim($this->input->post('id_cliente'));
				$id_carrera = trim($this->input->post('id_carrera'));
				$datos = $this->academico_model->get_materias_prerequisito_sin_aprobar($id_cliente,$id_carrera);
				echo json_encode($datos);
			}else{
				redirect('admin/login', 'refresh');
			}
		}

		/////////////////////////////////////////////////////////////////////////////////////////////
		public function get_num_alumnos_materias_asignadas_al_docente()
		{
			if($this->session->userdata('loggeado')){
				$id_persona = trim($this->input->post('id_persona'));
				$id_materias = trim($this->input->post('id_materias'),'+');
				$materias=explode('+',$id_materias);
				$i=0;
				foreach($materias as $id_materia){
					$datos[$i]['ID_CARRERA_MATERIA']=$id_materia;
					$datos[$i]['NUM_ALUMNOS']=$this->academico_model->get_num_alumnos_materias_asignadas_al_docente($id_persona,$id_materia);
					$grupos=$this->academico_model->get_grupos_alumnos_materias_asignadas_al_docente($id_persona,$id_materia);
					$id_grupos='';
					$nombre_grupos='';
					foreach($grupos as $grupo){
						$id_grupos.=$grupo['ID_GRUPO'].'+';
						$nombre_grupos.=$grupo['NOMBRE'].'+';
					}
					$datos[$i]['ID_GRUPOS']=trim($id_grupos,'+');
					$datos[$i]['NOMBRE_GRUPOS']=trim($nombre_grupos,'+');
					$i++;
				}
				echo json_encode($datos);
			}else{
				redirect('admin/login', 'refresh');
			}
		}

		/////////////////////////////////////////////////////////////////////////////////////////////
		public function getDocentesDeMateria()
		{
			if($this->session->userdata('loggeado')){
				$id_carrera_materia = trim($this->input->post('id_materia'));
				$datos=$this->academico_model->getDocentesDeMateria($id_carrera_materia);
				echo json_encode($datos);
			}else{
				redirect('admin/login', 'refresh');
			}
		}

		/////////////////////////////////////////////////////////////////////////////////////////////
		public function reasignarDocente()
		{
			if($this->session->userdata('loggeado')){
				$id_nuevo_docente   = trim($this->input->post('id_nuevo_docente'));
				$id_antiguo_docente = trim($this->input->post('id_antiguo_docente'));
				$id_carrera_materia = trim($this->input->post('id_carrera_materia'));
				$id_grupo           = trim($this->input->post('id_grupo'));
				///////////////////////////////////PROCESAMIENTO DE COPIA//////////////////////////////////////
					$ch  = curl_init();
					$url = $this->url_copia . 'reasignarDocente/';
					curl_setopt($ch, CURLOPT_URL, $url);
					$data_copia['id_nuevo_docente']   = $id_nuevo_docente;
					$data_copia['id_antiguo_docente'] = $id_antiguo_docente;
					$data_copia['id_carrera_materia'] = $id_carrera_materia;
					$data_copia['id_grupo']           = $id_grupo;
					$data_copia['activado']           = $this->academico_model->get_periodo_activado();
					$data_copia['id_usu']           = $this->session->userdata('loggeado')['ID_USUARIO'];

					$elements                         = $data_copia;
					curl_setopt($ch, CURLOPT_POST,true);
					// curl_setopt($ch, CURLOPT_POSTFIELDS, $elements);
					// curl_setopt($ch, CURLOPT_HEADER, false);
					// curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode(array($elements)));
					curl_setopt($ch, CURLOPT_POSTFIELDS, $elements);
					curl_setopt($ch, CURLOPT_HEADER, false);
					// curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json'));
					curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);
					$resultado = curl_exec($ch);
					$error     = curl_error($ch);
					curl_close($ch);
				/////////////////////////////////////////////////////////////////////////

				$alumnos_reasignados=$this->academico_model->get_alumnos_materias_asignadas_al_docente($id_antiguo_docente,$id_carrera_materia,$id_grupo);
				$datos=$this->academico_model->reasignarDocente($id_nuevo_docente,$id_antiguo_docente,$id_carrera_materia,$id_grupo);
				if($datos>0){
					foreach($alumnos_reasignados as $row){
						//enviar actualizacion matricula vlc
						//$this->sendMatriculaVlc($row['ID_CLIENTE'],'activo');
						//$this->sendMateriaVlc($row['ID_ESTUDIANTE_CARRERA_MATERIA'],'actualizar');
					}
				}

				echo json_encode($datos);
				// echo json_encode($resultado);
			}else{
				redirect('admin/login', 'refresh');
			}
		}

		/////////////////////////////////////////////////////////////////////////////////////////////
		public function importar_estudiantes()
		{
			if($this->session->userdata('loggeado')){
				if($_FILES){
					$this->load->model('clientes/clientes_model');
					$archivo= $_FILES['archivo']['name'];
					if($archivo!=''){
						$name=time().'.xlsx';
						copy($_FILES['archivo']['tmp_name'], FCPATH."/assets/librerias/images/". $name);
						if(file_exists(FCPATH."/assets/librerias/images/". $name)){
							// Clases necesarias //
							$this->load->library('excel');
							$this->load->library('excel_reader');
							// Cargando la hoja de c?lculo
							$objReader = new PHPExcel_Reader_Excel2007();
							$objPHPExcel = $objReader->load(FCPATH."/assets/librerias/images/". $name);
							$objFecha = new PHPExcel_Shared_Date();
							// Asignar hoja de excel activa
							$objPHPExcel->setActiveSheetIndex(0);
							// Llenamos el arreglo con los datos  del archivo xlsx
							$objWorksheet = $objPHPExcel->setActiveSheetIndex(0);
							//Se obtiene el n?mero m?ximo de filas
							$num_reg = $objWorksheet->getHighestRow();

							$num_regExistentes = 0;
							//Llenar detalle action items
							for($i = 1; $i <= $num_reg; $i++){
								$nombre=trim($objPHPExcel->getActiveSheet()->getCell('A' . $i)->getCalculatedValue());
								$n=explode(' ',$nombre);
								$d['PRIMER_NOMBRE']=$n[0];
								if(isset($n[1])){
									$d['SEGUNDO_NOMBRE']=$n[1];
								}else{
									$d['SEGUNDO_NOMBRE']='';
								}
								$d['SEGUNDO_NOMBRE']=trim($objPHPExcel->getActiveSheet()->getCell('B' . $i)->getCalculatedValue());
								$d['APELLIDO_PATERNO']=trim($objPHPExcel->getActiveSheet()->getCell('C' . $i)->getCalculatedValue());
								$d['APELLIDO_MATERNO']=trim($objPHPExcel->getActiveSheet()->getCell('D' . $i)->getCalculatedValue());
								$d['ID_NACIONALIDAD']=trim($objPHPExcel->getActiveSheet()->getCell('H' . $i)->getCalculatedValue());
								if ($d['ID_NACIONALIDAD']==NULL || $d['ID_NACIONALIDAD']=='NULL'){
									$d['ID_NACIONALIDAD']=18;
								}
								//$fn=trim($objPHPExcel->getActiveSheet()->getCell('I' . $i)->getCalculatedValue());
								$fa=trim($objPHPExcel->getActiveSheet()->getCell('I'.$i)->getvalue());
								if(is_numeric($fa)){
									/*$fa_temp=date("Y-m-d",PHPExcel_Shared_Date::ExcelToPHP($fa));
									$fa_temp1=explode("-",$fa_temp);
									$fa=$fa_temp1[0]."-".$fa_temp1[2]."-".$fa_temp1[1];*/
									$fa=date("Y-m-d",PHPExcel_Shared_Date::ExcelToPHP($fa)+86400);
								}elseif($fa!=''){
									$fa=explode("/",$fa);
									$fa=$fa[2]."-".$fa[1]."-".$fa[0];
								}else{
									$fa='';
								}
								$d['FECHA_NACIMIENTO']=$fa;
								//$d['FECHA_NACIMIENTO']=$fn;
								$d['ID_PAIS_NACIMIENTO']=trim($objPHPExcel->getActiveSheet()->getCell('J' . $i)->getCalculatedValue());
								$d['ID_PROVINCIA_NACIMIENTO']=trim($objPHPExcel->getActiveSheet()->getCell('K' . $i)->getCalculatedValue());
								$d['ID_ESTADO_CIVIL']=trim($objPHPExcel->getActiveSheet()->getCell('L' . $i)->getCalculatedValue());
								$d['TIPO_SANGRE']=trim($objPHPExcel->getActiveSheet()->getCell('M' . $i)->getCalculatedValue());
								//$g=array('1'=>'M','2'=>'F');
								//$d['GENERO']=$g[trim($objPHPExcel->getActiveSheet()->getCell('N' . $i)->getCalculatedValue())];
								$d['GENERO']=trim($objPHPExcel->getActiveSheet()->getCell('N' . $i)->getCalculatedValue());
								$d['OCUPACION']=1;
								$d['CARNET_CONADIS']=trim($objPHPExcel->getActiveSheet()->getCell('AG' . $i)->getCalculatedValue());
								$d['TIPO_DISCAPACIDAD']=trim($objPHPExcel->getActiveSheet()->getCell('AH' . $i)->getCalculatedValue());
								$d['PORCENTAJE_DICAPACIDAD']=trim($objPHPExcel->getActiveSheet()->getCell('AI' . $i)->getCalculatedValue());
								$d['ES_DISCAPACITADO']=trim($objPHPExcel->getActiveSheet()->getCell('AF' . $i)->getCalculatedValue());
								$d['EST_COLEGIO_GRADUACION']=trim($objPHPExcel->getActiveSheet()->getCell('O' . $i)->getCalculatedValue());
								$ag=trim($objPHPExcel->getActiveSheet()->getCell('P' . $i)->getCalculatedValue());
								$a=explode('-',$ag);
								if(count($a)>1){
									$anio=$a[count($a)-1];
								}else{
									$anio=$ag;
								}
								$d['EST_ANO_GRADUACION']=$anio;
								$d['EST_PAIS_GRADUACION']=trim($objPHPExcel->getActiveSheet()->getCell('Q' . $i)->getCalculatedValue());
								$d['EST_TITULO_BACHILLER']=trim($objPHPExcel->getActiveSheet()->getCell('R' . $i)->getCalculatedValue());
								//$d['FECHA_CREACION']=date('Y-m-d H:i:s');
								//$this->db->insert('tab_personas', $d);
								//$id_persona=$this->db->insert_id();
								$cliente = array();
								$cliente['TIPO_DOCUMENTO']=trim($objPHPExcel->getActiveSheet()->getCell('F' . $i)->getCalculatedValue());
								$cliente['NRO_DOCUMENTO']=trim($objPHPExcel->getActiveSheet()->getCell('G' . $i)->getCalculatedValue());
								$cliente['ID_TIPO_CONTRIBUYENTE']=trim($objPHPExcel->getActiveSheet()->getCell('E' . $i)->getCalculatedValue());
								$cliente['ES_CONTRIBUYENTE_ESPECIAL']=0;
								$persona = array();
								$contactoLaboral=array();
								$contactoDomiciliar=array();
								$contactoDomiciliar['CORREO_ELECTRONICO']=trim($objPHPExcel->getActiveSheet()->getCell('U' . $i)->getCalculatedValue());
								$contactoDomiciliar['ID_PAIS']=trim($objPHPExcel->getActiveSheet()->getCell('V' . $i)->getCalculatedValue());
								$contactoDomiciliar['ID_PROVINCIA']=trim($objPHPExcel->getActiveSheet()->getCell('W' . $i)->getCalculatedValue());
								$contactoDomiciliar['ID_CANTON']=trim($objPHPExcel->getActiveSheet()->getCell('X' . $i)->getCalculatedValue());
								$contactoDomiciliar['DIRECCION_REFERENCIA']=trim($objPHPExcel->getActiveSheet()->getCell('Y' . $i)->getCalculatedValue());
								$contactoDomiciliar['TELEFONO']=trim($objPHPExcel->getActiveSheet()->getCell('T' . $i)->getCalculatedValue());
								$contactoDomiciliar['CELULAR']=trim($objPHPExcel->getActiveSheet()->getCell('S' . $i)->getCalculatedValue());
								$existeCliente = array();
								$existeCliente = $this->clientes_model->obtener_cliente_por_nro_documento($cliente['NRO_DOCUMENTO']);
								if($existeCliente==""){
									$this->clientes_model->crearActualizarClienteNaturalTransaccional($persona,$d,$cliente,$contactoLaboral,$contactoDomiciliar);
								}else{
									$num_regExistentes++;
								}
							}//fin for ($i = 1; $i <= $num_reg; $i++) {
							unlink(FCPATH."/assets/librerias/images/". $name);
						}//fin de if (file_exists(FCPATH."/images/bk/". $dato_archivo['nombre'])) {
					}
					$respuesta= 'Registros : '.($i-1).' Registros <br>';
					$respuesta.= 'Registros Existentes : '.($num_regExistentes).' Registros <br>';
					$respuesta.= 'Registros Creados : '.($i-1-$num_regExistentes).' Registros';
				}
				echo json_encode($respuesta);
			}else{
				redirect('admin/login', 'refresh');
			}
		}

		//*****************************************************************
		//Actualizar  MATRICULA Academico
		public function procesarMatriculaAcademico($id_cliente=null,$id_matricula=null)
		{
			$idUsuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idUsuario,64)){
				$this->load->helper('form');
				$this->load->library('form_validation');
				$this->form_validation->CI =& $this;
				if($id_cliente == NULL){
					show_404();
				}
				$this->form_validation->set_rules('formulario_matricula[NOMBRES]', 'nombre', 'required');
				$data = $this->input->post('formulario_matricula');
				$data_copia = $data;
				$data['ID_CLIENTE']=$id_cliente;
				$data['ID_MATRICULA']=$id_matricula;
				if($this->form_validation->run() == FALSE){

				}else{


					///////////////////////////////////PROCESAMIENTO DE COPIA//////////////////////////////////////
						$ch  = curl_init();
						if (isset($id_matricula) && $id_matricula != 0 && $id_matricula != null ) {
							$url = $this->url_copia . 'procesarMatriculaAcademico/'.$id_cliente.'/'.$id_matricula;
						}else{
							$url = $this->url_copia . 'procesarMatriculaAcademico/'.$id_cliente;
						}
						// $url = $this->url_copia . 'procesarMatriculaAcademico/'.$id_cliente;
						curl_setopt($ch, CURLOPT_URL, $url);
						$data_copia['activado']           = $this->academico_model->get_periodo_activado();
						$elements = $data_copia;

						curl_setopt($ch, CURLOPT_POST,true);
						// curl_setopt($ch, CURLOPT_POSTFIELDS, $elements);
						// curl_setopt($ch, CURLOPT_HEADER, false);
						// curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode(array($elements)));
						curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($elements));
						curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json'));
						curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);
						$resultado = curl_exec($ch);
						$error     = curl_error($ch);
						curl_close($ch);
					/////////////////////////////////////////////////////////////////////////


					$respuesta=$this->academico_model->actualizarMatriculaAcademico($data);
					//enviar actualizacion matricula vlc
					//$this->sendMatriculaVlc($id_cliente,'activo');
					$ids_materias_estudiante_actualiza=$respuesta['ids_materias_estudiante_actualiza'];
					foreach($ids_materias_estudiante_actualiza as $id_ecm){
						//$this->sendMateriaVlc($id_ecm,'actualizar');
					}
					$ids_materias_estudiante_crea=$respuesta['ids_materias_estudiante_crea'];
					foreach($ids_materias_estudiante_crea as $id_ecm){
						//$this->sendMateriaVlc($id_ecm,'crear');
					}
					/*$ids_materias_estudiante_borra=$respuesta['ids_materias_estudiante_borra'];
					foreach($ids_materias_estudiante_borra as $id_ecm){
						$this->sendMateriaVlc($id_ecm,'borrar');
					}*/

					echo $respuesta['resultado'];

						// $data['resultado'] = $resultado;
					// print_r($data);
				}
			}else{
				redirect('admin/login', 'refresh');
			}
		}

		//*****************************************************************
		//Actualizar  MATRICULA Financiero
		public function procesarMatriculaFinanciero($id_cliente=null,$id_matricula=null)
		{
			$idUsuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idUsuario,65)){
				$this->load->helper('form');
				$this->load->library('form_validation');
				$this->form_validation->CI =& $this;
				if($id_cliente == NULL){
					show_404();
				}
				$this->form_validation->set_rules('formulario_matricula[NOMBRES]', 'nombre', 'required');
				$data = $this->input->post('formulario_matricula');
				$data['ID_CLIENTE']=$id_cliente;
				$data['ID_MATRICULA']=$id_matricula;
				if ($this->form_validation->run() == FALSE){

				}else{
					$this->load->model('automatica/automatica_model');
					$this->load->model('clientes/clientes_model');
					$rubro_recargo = $this->input->post('rubro_recargo');
					//datos para obtener porcentaje de beca por cada rubro y cuota
					$cliente=$this->clientes_model->obtener_datos_cliente_natural($id_cliente);
					$rautomaticos_asociados = $this->automatica_model->buscarRubrosAutomaticos($cliente['NRO_DOCUMENTO'],NULL,$id_matricula);
					foreach($rautomaticos_asociados as $key=>$rubro){
						$rautomaticos_asociados[$key]['cuotas']=$this->automatica_model->get_cliente_rubros_cuotas($rubro['ID_CLIENTE_RUBRO']);
					}
					for($i=0; $i<count($rautomaticos_asociados); $i++){
						foreach($rautomaticos_asociados[$i]['cuotas'] as $cuota){
							if(isset($beca[$cuota['CUOTA']])){
								$beca[$cuota['CUOTA']]+=$cuota['DESCUENTO_BECA'];
							}else{
								$beca[$cuota['CUOTA']]=$cuota['DESCUENTO_BECA'];
							}
						}
					}
					for($i=0; $i<count($rautomaticos_asociados); $i++){
						foreach($rautomaticos_asociados[$i]['cuotas'] as $cuota){
							if(isset($beca[$cuota['CUOTA']]) and $beca[$cuota['CUOTA']]>0){
								$pb=round($cuota['DESCUENTO_BECA']*100/$beca[$cuota['CUOTA']],2);
								$porcentaje_beca[$cuota['CUOTA']][$rautomaticos_asociados[$i]['ID_RUBRO']]=$pb;
							}
						}
					}
					for($i=1;$i<=6; $i++){
						$beca_total[$i]=$this->input->post('beca_'.$i);
					}
					//actualizar tabla cuotas generales
					$id_cg = $this->input->post('id_cuotas_generales');
					$id_cuotas_generales=explode('+',$id_cg);
					$total_pagado=0;
					foreach($id_cuotas_generales as $id_cuota_general){
						$data_cg=array();
						$data_cg['MONTO_SIN_VERIFICAR']=$this->input->post('msv_'.$id_cuota_general);
						$data_cg['MONTO_VERIFICADO']=$this->input->post('mv_'.$id_cuota_general);
						$data_cg['TOTAL_PAGADO']=$this->input->post('mt_'.$id_cuota_general);
						$data_cg['POR_PAGAR']=$this->input->post('mxp_'.$id_cuota_general);
						$data_cg['PRECIO_CUOTA']=$this->input->post('pc_'.$id_cuota_general);
						$data_cg['RECARGO_ATRAZO']=$this->input->post('rxa_'.$id_cuota_general);
						$data_cg['ESTADO']=0;
						if($data_cg['TOTAL_PAGADO']==$data_cg['PRECIO_CUOTA']){
							$data_cg['ESTADO']=1;
						}
						$cuota=$this->input->post('nc_'.$id_cuota_general);
						if($cuota==1 and $rubro_recargo!=NULL){
							$data_cg['RECARGO_GENERACION']=$rubro_recargo;
						}
						$this->automatica_model->actualizar_cuotas_generales($id_cuota_general,$data_cg);
						$total_pagado+=$data_cg['TOTAL_PAGADO'];
					}
					//actualizar tabla fac_clientes_rubros_cuota
					$id_crc = $this->input->post('id_cliente_rubro_cuotas');
					$id_cliente_rubro_cuotas=explode('+',$id_crc);
					foreach($id_cliente_rubro_cuotas as $id_cliente_rubro_cuota){
						$data_crc=array();
						$dat_cliente_rubro_cuota=$this->automatica_model->get_cliente_rubro_cuota($id_cliente_rubro_cuota);
						$dat_cliente_rubro=$this->automatica_model->get_cliente_rubro($dat_cliente_rubro_cuota['ID_CLIENTE_RUBRO']);
						if($dat_cliente_rubro_cuota['CUOTA']==1 and $dat_cliente_rubro['ID_RUBRO']==17 and $rubro_recargo!=NULL){//sonlo en primera cuota de rubro semestre
							$data_crc['RECARGO_POR_GENERACION_RUBRO']=$rubro_recargo;
						}
						if(isset($beca_total[$dat_cliente_rubro_cuota['CUOTA']]) and isset($porcentaje_beca[$dat_cliente_rubro_cuota['CUOTA']][$dat_cliente_rubro['ID_RUBRO']])){
							$data_crc['DESCUENTO_BECA']=round($beca_total[$dat_cliente_rubro_cuota['CUOTA']]*$porcentaje_beca[$dat_cliente_rubro_cuota['CUOTA']][$dat_cliente_rubro['ID_RUBRO']]/100,2);
						}
						$data_crc['PRECIO']=$this->input->post('rubro_'.$id_cliente_rubro_cuota);
						$this->automatica_model->actualizar_cliente_rubro_cuotas($id_cliente_rubro_cuota,$data_crc);
					}
					//actualizar monto pagado en cuotas rubros
					$cuotas_rubros_prioridad=$this->automatica_model->get_cuotas_rubros_prioridad($id_cliente_rubro_cuotas);
					foreach($cuotas_rubros_prioridad as $cuota_rubro_prioridad){
						if($total_pagado>0){
							$saldo_total_pagado=$total_pagado+$cuota_rubro_prioridad['DESCUENTO_PRONTA_MATRICULA']+$cuota_rubro_prioridad['DESCUENTO_BECA']-$cuota_rubro_prioridad['PRECIO']-$cuota_rubro_prioridad['RECARGO_POR_GENERACION_RUBRO']-$cuota_rubro_prioridad['RECARGO_POR_ATRAZO_EN_PAGO'];
							if($saldo_total_pagado>=0){
								$data_crc1['VALOR_SALDADO_POR_PAGO']=$cuota_rubro_prioridad['PRECIO']+$cuota_rubro_prioridad['RECARGO_POR_GENERACION_RUBRO']+$cuota_rubro_prioridad['RECARGO_POR_ATRAZO_EN_PAGO']-$cuota_rubro_prioridad['DESCUENTO_PRONTA_MATRICULA']-$cuota_rubro_prioridad['DESCUENTO_BECA'];
								$data_crc1['ESTADO']=0;
							}else{
								$data_crc1['VALOR_SALDADO_POR_PAGO']=$total_pagado;
								$data_crc1['ESTADO']=1;
							}
							$total_pagado=$saldo_total_pagado;
						}else{
							$data_crc1['VALOR_SALDADO_POR_PAGO']=0;
							$data_crc1['ESTADO']=1;
						}
						$this->automatica_model->actualizar_cliente_rubro_cuotas($cuota_rubro_prioridad['ID_CLIENTE_RUBRO_CUOTA'],$data_crc1);
						//datos para actulizar tabla cliente_rubro
						$dat_cliente_rubro=$this->automatica_model->get_cliente_rubro($cuota_rubro_prioridad['ID_CLIENTE_RUBRO']);
						if(isset($data_cr[$cuota_rubro_prioridad['ID_CLIENTE_RUBRO']])){
							$data_cr[$cuota_rubro_prioridad['ID_CLIENTE_RUBRO']]['PRECIO_UNITARIO_RUBRO']+=$cuota_rubro_prioridad['PRECIO'];
							$data_cr[$cuota_rubro_prioridad['ID_CLIENTE_RUBRO']]['VALOR_SALDADO_POR_PAGO']+=$data_crc1['VALOR_SALDADO_POR_PAGO'];
							$data_cr[$cuota_rubro_prioridad['ID_CLIENTE_RUBRO']]['ESTADO']=$data_crc1['ESTADO'];
						}else{
							$data_cr[$cuota_rubro_prioridad['ID_CLIENTE_RUBRO']]['PRECIO_UNITARIO_RUBRO']=$cuota_rubro_prioridad['PRECIO'];
							$data_cr[$cuota_rubro_prioridad['ID_CLIENTE_RUBRO']]['VALOR_SALDADO_POR_PAGO']=$data_crc1['VALOR_SALDADO_POR_PAGO'];
							$data_cr[$cuota_rubro_prioridad['ID_CLIENTE_RUBRO']]['ESTADO']=$data_crc1['ESTADO'];
							if($dat_cliente_rubro['ID_RUBRO']==17 and $rubro_recargo!=NULL){//si es rubro semestre
								$data_cr[$cuota_rubro_prioridad['ID_CLIENTE_RUBRO']]['RECARGO_POR_GENERACION_RUBRO']=$rubro_recargo;
								$data_cr[$cuota_rubro_prioridad['ID_CLIENTE_RUBRO']]['VALOR_RECARGO_GENERACION']=$rubro_recargo;
							}
						}
					}
					//actualizar tabla fac_clientes_rubros
					foreach($data_cr as $key=>$cr){
						$cr['PRECIO_X_NRO_ITEMS']=$cr['PRECIO_UNITARIO_RUBRO'];
						$this->automatica_model->actualizar_cliente_rubro($key,$cr);
					}
					echo 'Tabla Actualizada';
					//print_r($_POST);
				}
			}else{
				redirect('admin/login', 'refresh');
			}
		}

		/////////////////////////////////////////////////////////////////////////////////////////////
		public function imprimirExpediente($id_cliente,$id_carrera=null,$id_periodo=null)
		{
			if($this->session->userdata('loggeado')){
				$this->load->model('clientes/clientes_model');
				$data['matricula'] = $this->academico_model->obtener_datos_matricula($id_cliente,null,$id_periodo,$id_carrera);
				$data['estudiante'] = $this->clientes_model->obtener_detalles_cliente_natural($id_cliente);
				$carrera=$this->academico_model->get_carreras($data['matricula']['ID_CARRERA']);
				$data['matricula']['CARRERA']=$carrera[0]['NOMBRE'];
				$modalidad=$this->academico_model->get_Modalidad($data['matricula']['ID_MODALIDAD']);
				$data['matricula']['MODALIDAD']=$modalidad['MODALIDAD'];
				$data['matricula']['GRUPO'] = $this->academico_model->get_grupo_asignado($id_cliente, $data['matricula']['ID_CARRERA'], $data['matricula']['ID_PERIODO_ACADEMICO'], $data['matricula']['ID_NIVEL']);
				$this->load->view('expediente',$data);
			}else{
				redirect('admin/login', 'refresh');
			}
		}

	/////////////////////////////////////////////////////////////////////////////////////////////
	public function imprimirDocumento($documento,$id_cliente,$id_carrera=null,$id_periodo=null)
	{
		if($this->session->userdata('loggeado')){
			$this->load->model('clientes/clientes_model');
			$data['matricula'] = $this->academico_model->obtener_datos_matricula($id_cliente,null,$id_periodo,$id_carrera);
			$data['estudiante'] = $this->clientes_model->obtener_detalles_cliente_natural($id_cliente);
			$carrera=$this->academico_model->get_carreras($data['matricula']['ID_CARRERA']);
			$data['matricula']['CARRERA']=$carrera[0]['NOMBRE'];
			$data['matricula']['NIVELES_CARRERA']=$carrera[0]['DURACION_EN_NIVELES'];
			$data['matricula']['PERIODO']=$this->academico_model->getPeriodos($data['matricula']['ID_PERIODO_ACADEMICO']);
			$modalidad=$this->academico_model->get_Modalidad($data['matricula']['ID_MODALIDAD']);
			$data['matricula']['MODALIDAD']=$modalidad['MODALIDAD'];
			$data['matricula']['GRUPO'] = $this->academico_model->get_grupo_asignado($id_cliente, $data['matricula']['ID_CARRERA'], $data['matricula']['ID_PERIODO_ACADEMICO'], $data['matricula']['ID_NIVEL']);
			$consultarCodigo = true;
			if($documento=='contrato'){
				$this->load->view('contrato_matricula',$data);
			}elseif($documento=='certificado'){
				$prefijoDocumento = $this->academico_model->buscarTipoDocumento(array('ID_TIPO_DOCUMENTO'=>1));
				$certificado      = "";
				$certificado      = $this->academico_model->buscarDocumentoAcademico(array('ID_MATRICULA'=>$data['matricula']['ID_MATRICULA'],'ID_TIPO_DOCUMENTO'=>1));
				// if ($certificado == "") {
					$dataCertificado['CODIGO_DOCUMENTO']         = $prefijoDocumento['PREFIJO_DOCUMENTO']."-".$this->generarCodigo(6);
					while ($consultarCodigo) {
						$consultarCodigo                         = $this->academico_model->consultarCodigo($dataCertificado['CODIGO_DOCUMENTO']);
						if ($consultarCodigo == true) {
							$dataCertificado['CODIGO_DOCUMENTO'] = $prefijoDocumento['PREFIJO_DOCUMENTO']."-".$this->generarCodigo(6);
						}
					}
					$dataCertificado['ID_MATRICULA']      = $data['matricula']['ID_MATRICULA'];
					$dataCertificado['ID_TIPO_DOCUMENTO'] = $prefijoDocumento['ID_TIPO_DOCUMENTO'];
					$dataCertificado['FECHA_GENERACION']  = date('Y-m-d H:i:s');
					$dataCertificado['NUM_DESCARGAS']     = 1;
					$dataCertificado['FECHA_ULTIMA_DESCARGA']     = date('Y-m-d H:i:s');
					$dataCertificado['NUM_VERIFICACIONES']        = 1;
					$dataCertificado['FECHA_ULTIMA_VERIFICACION'] = date('Y-m-d H:i:s');
					$dataCertificado['PANTALLA_ULTIMA_DESCARGA']  = 1;
					$dataCertificado['ID_USUARIO']                = $this->session->userdata('loggeado')['ID_USUARIO'];
					$dataCertificado['NOMBRE_ARCHIVO_PDF']        = time().$dataCertificado['CODIGO_DOCUMENTO'].".pdf";
					//crear
					$dataCertificado['ID_DOCUMENTO_ACADEMICO']    = $this->academico_model->crearDocumentoAcademico($dataCertificado);
				/*}else{
					//actualizar
					$dataCertificado['NUM_DESCARGAS']             = $certificado['NUM_DESCARGAS']+1;
					$dataCertificado['FECHA_ULTIMA_DESCARGA']     = date('Y-m-d H:i:s');
					$dataCertificado['NUM_VERIFICACIONES']        = $certificado['NUM_VERIFICACIONES']+1;
					$dataCertificado['FECHA_ULTIMA_VERIFICACION'] = date('Y-m-d H:i:s');
					$dataCertificado['PANTALLA_ULTIMA_DESCARGA']  = 1;
					$this->academico_model->actualizarDocumentoAcademico($dataCertificado,$certificado['ID_DOCUMENTO_ACADEMICO']);
					$dataCertificado['ID_MATRICULA']              = $certificado['ID_MATRICULA'];
					$dataCertificado['ID_TIPO_DOCUMENTO']         = $certificado['ID_TIPO_DOCUMENTO'];
					$dataCertificado['FECHA_GENERACION']          = $certificado['FECHA_GENERACION'];
					$dataCertificado['ID_DOCUMENTO_ACADEMICO']    = $certificado['ID_DOCUMENTO_ACADEMICO'];
					$dataCertificado['CODIGO_DOCUMENTO']          = $certificado['CODIGO_DOCUMENTO'];
					$dataCertificado['NOMBRE_ARCHIVO_PDF']        = $certificado['NOMBRE_ARCHIVO_PDF'];
				}*/
				$data['certificado'] = $dataCertificado;

				$this->load->view('certificado_matricula',$data);
			}elseif($documento=='anexo'){
				$opdion_pago=$this->academico_model->get_opciones_pago(1);
				$data['matricula']['OPCIONES_PAGO']= $opdion_pago['DESCRIPCION'];
				$this->load->view('anexo_matricula',$data);
			}
		}else{
			redirect('admin/login', 'refresh');
		}
	}
	public function generarCodigo($longitud) {
		$key = '';
		$pattern = '1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ';
		$max = strlen($pattern)-1;
		for($i=0;$i < $longitud;$i++){

			$key .= $pattern{mt_rand(0,$max)};

		}
		return $key;
	}

		/////////////////////////////////////////////////////////////////////////////////////////////
		public function guardar_opciones_pago()
		{
			if($this->session->userdata('loggeado')){
				$data['DESCRIPCION'] = trim($this->input->post('texto_opciones_pago'));
				$opdion_pago=$this->academico_model->get_opciones_pago(1);
				if($opdion_pago==NULL){
					$this->academico_model->guardar_opciones_pago($data);
					$respuesta='Registro Creado';
				}else{
					$this->academico_model->actualizar_opciones_pago($data,1);
					$respuesta='Registro Actualizado';
				}
				echo $respuesta;
			}else{
				redirect('admin/login', 'refresh');
			}
		}

		///////////////////////////////////////////////////
		public function buscar_para_cambio()
		{
			$idUsuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idUsuario,68)){
				$datos=array();
				$datos['niveles'] = $this->academico_model->get_niveles();
				$datos['carreras'] = $this->academico_model->get_carreras();
				$datos['periodos'] = $this->academico_model->getPeriodos();
				$datos1=$this->perfil_model->cabecera($idUsuario);
				$this->load->view('templates/header',$datos1);
				$this->load->view('busqueda_para_cambio_carrera',$datos);
				$this->load->view('templates/footer');
			}else{
				redirect('admin/login', 'refresh');
			}
		}

		////////////////////////////////////////////////////////////////////////////
		public function cambio_carrera($id_cliente,$id_matricula)
		{
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,68)){
				$matricula = $this->academico_model->obtener_datos_matricula($id_cliente,$id_matricula);
				$id_periodo_actual=$this->academico_model->get_periodo_activado();

				///////////////////////////////////PROCESAMIENTO DE COPIA//////////////////////////////////////
					$ch  = curl_init();
					$url = $this->url_copia . 'cambio_carrera/'.$id_cliente.'/'.$id_matricula;
					curl_setopt($ch, CURLOPT_URL, $url);
					$data_copia['id_periodo_actual'] = $id_periodo_actual;
					$data_copia['idusu']             = $idusuario;
					$data_copia['nueva_carrera']     = $this->input->post('nueva_carrera');

					$elements                        = $data_copia;
					curl_setopt($ch, CURLOPT_POST,true);
					// curl_setopt($ch, CURLOPT_POSTFIELDS, $elements);
					// curl_setopt($ch, CURLOPT_HEADER, false);
					// curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode(array($elements)));
					curl_setopt($ch, CURLOPT_POSTFIELDS, $elements);
					curl_setopt($ch, CURLOPT_HEADER, false);
					// curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json'));
					curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);
					$resultado = curl_exec($ch);
					$error     = curl_error($ch);
					curl_close($ch);
				/////////////////////////////////////////////////////////////////////////


				if($matricula==NULL){
					$matricula=$this->academico_model->datos_ultima_matricula_estudiante($id_cliente);
					$datos_estudiante_matricula = $this->academico_model->get_datos_matricula($id_cliente);
					$matricula['APELLIDOS'] = $datos_estudiante_matricula['APELLIDOS'];
					$matricula['NOMBRES'] = $datos_estudiante_matricula['NOMBRES'];
				}
				$dat=array();
				$dat['ID_PERSONA']=$matricula['ID_PERSONA'];
				$dat['ID_CARRERA_ANTERIOR']=$matricula['ID_CARRERA'];
				//$dat['ID_PERIODO']=$id_periodo_actual;
				$cambiados=$this->academico_model->get_cambio_carrera($dat);
				if(count($cambiados)>0){
					$matricula['ID_CARRERA']=$cambiados[count($cambiados)-1]['ID_CARRERA_NUEVO'];//colocar ultima id_carrera si ya tiene otros cambios de carrera
				}
				$matricula['ID_CLIENTE'] = $id_cliente;
				$id_nueva_carrera=$this->input->post('nueva_carrera');
				if($id_nueva_carrera>0){//procesar el cambio de carrera
					$data_cambio['ID_PERSONA']=$matricula['ID_PERSONA'];
					$data_cambio['ID_CARRERA_ANTERIOR']=$matricula['ID_CARRERA'];
					$data_cambio['ID_CARRERA_NUEVO']=$id_nueva_carrera;
					//$data_cambio['ID_PERIODO_ACADEMICO']=$matricula['ID_PERIODO_ACADEMICO'];
					$data_cambio['ID_PERIODO_ACADEMICO']=$id_periodo_actual;
					$data_cambio['ID_MATRICULA']=$matricula['ID_MATRICULA'];
					$data_cambio['ABONO']=$this->academico_model->get_abono_matricula_actual($id_cliente,$id_periodo_actual,$matricula['ID_MATRICULA']);
					$data_cambio['ID_USUARIO']=$idusuario;
					$data_cambio['FECHA']=date('Y-m-d H:i:s');
					$this->academico_model->crearCambioCarrera($data_cambio);
					//enviar actualizacion matricula vlc
					//$this->sendMatriculaVlc($id_cliente,'borrado');
					$materias=$this->academico_model->get_materias_estudiante($matricula['ID_PERSONA'],$id_periodo_actual,null,null,$matricula['ID_CARRERA']);

					foreach($materias as $m){
						//$this->sendMateriaVlc($m['ID_ESTUDIANTE_CARRERA_MATERIA'],'borrar');
					}

					$result=$this->academico_model->cambioCarrera($id_cliente,$matricula['ID_CARRERA'],$id_periodo_actual);
					$carrera=$this->academico_model->get_carreras($id_nueva_carrera);
					$resp�esta=$carrera[0]['NOMBRE'].'<br>';
					$resp�esta.="<strong>Fecha</strong><br>".date('Y-m-d');
					echo $resp�esta.'<br><br>'.$result;
				}else{
					$carreras_matriculados=$this->academico_model->buscar_matricula(array('ID_CLIENTE'=>$id_cliente));
					$ids_carrera = array();
					foreach($carreras_matriculados as $cm){
						if($matricula['ID_CARRERA']!=$cm['ID_CARRERA']){
							$ids_carrera[]=$cm['ID_CARRERA'];
						}
					}
					$datos['carreras'] = $this->academico_model->get_carreras(NULL,$ids_carrera);
					$datos['matricula'] = $matricula;
					$datos['id_matricula'] = $id_matricula;
					$dat=array();
					$dat['ID_PERSONA']=$matricula['ID_PERSONA'];
					$dat['ID_CARRERA_NUEVO']=$matricula['ID_CARRERA'];
					//$dat['ID_PERIODO']=$id_periodo_actual;
					$datos['cambiados']=$this->academico_model->get_cambio_carrera($dat);
					$this->load->view('cambioCarreraDetalle',$datos);
				}
			}else{
				//redirect('admin/login', 'refresh');
				echo "Sesion Terminada";
			}
		}

		////////////////////////////////////////////////////////////////////////////
		public function certificado_cambio_carrera($id_cambio_carrera)
		{
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,68)){
				$id_periodo_actual=$this->academico_model->get_periodo_activado();
				$dat['ID_CAMBIO_CARRERA']=$id_cambio_carrera;
				//$dat['ID_PERIODO']=$id_periodo_actual;
				$cambiados=$this->academico_model->get_cambio_carrera($dat);
				$cambiado=array();
				if(count($cambiados)>0){
					$cambiado=$cambiados[0];
					$datos= $this->academico_model->buscar_certificado_estudiante_detallado($cambiado['ID_PERSONA'],null,null,$cambiado['ID_CARRERA_ANTERIOR']);
				}
				$datos['carreras'] = $this->academico_model->get_carreras(NULL);
				$datos['cambiado']=$cambiado;
				$this->load->view('certificado_cambio_carrera',$datos);
			}else{
				//redirect('admin/login', 'refresh');
				echo "Sesion Terminada";
			}
		}

		/////////////////////////////////////////////////////
		public function activarPeriodoIndividual()
		{
			if($this->session->userdata('loggeado')){
				$id_periodo = trim($this->input->post('id'));
				$this->session->set_userdata('id_periodo', $id_periodo);
				echo json_encode('cambiado');
			}else{
				redirect('admin/login', 'refresh');
			}
		}

		/////////////////////////////////////////////////////
		public function estadoMateria()
		{
			if($this->session->userdata('loggeado')){
				$estado=array(false,true);
				$id_carrera_materia = trim($this->input->post('id'));
				$data['ESTADO'] = $estado[trim($this->input->post('estado'))];
				$this->academico_model->actualizaMateria($id_carrera_materia,$data);
				//echo json_encode('cambiado');
				$respuesta='<input class="btn btn-success btn-sm" type="button" value="Editar" onclick="editar('.$id_carrera_materia.')">';
				if($data['ESTADO']==0){
					$respuesta.='<input class="btn btn-primary btn-sm" type="button" value="Activar" onclick="estado_materia(\''.$id_carrera_materia.'\',\'1\')" style="margin-left:5px">';
				}
				if($data['ESTADO']==1){
					$respuesta.='<input class="btn btn-danger btn-sm" type="button" value="Desactivar" onclick="estado_materia(\''.$id_carrera_materia.'\',\'0\')" style="margin-left:5px">';
				}
				echo $respuesta;
			}else{
				redirect('admin/login', 'refresh');
			}
		}

		////////////////////////////////////////////////////////////////////
		public function buscar_silabos_tareas()
		{
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,71)){
				$this->load->model('admin/usuarios_model');
				$perfil = $this->usuarios_model->get_perfil_usuario($idusuario);
				if(!$this->input->is_ajax_request()){
					$datos=array();
					$datos['niveles'] = $this->academico_model->get_niveles();
					$datos['carreras'] = $this->academico_model->get_carreras();
					$datos['periodos'] = $this->academico_model->getPeriodos();
					$datos['perfil'] = $perfil;
					$datos1=$this->perfil_model->cabecera($idusuario);
					$this->load->view('templates/header',$datos1);
					$this->load->view('busqueda_calificaciones_alumnos',$datos);
					$this->load->view('templates/footer');
				}else{
					$data['APELLIDO_PATERNO'] = trim($this->input->post('ap'));
					$data['APELLIDO_MATERNO'] = trim($this->input->post('am'));
					$data['PRIMER_NOMBRE'] = trim($this->input->post('pn'));
					$data['SEGUNDO_NOMBRE'] = trim($this->input->post('sn'));
					$data['ID_PERIODO_ACADEMICO'] = trim($this->input->post('id_periodo'));
					$data['ID_CARRERA'] = trim($this->input->post('id_carrera'));
					$data['ID_NIVEL'] = trim($this->input->post('id_nivel'));
					$datos['perfil'] = $perfil;
					if($perfil==4){//vista docentes
						$data['ID_PERSONA'] = $this->session->userdata('loggeado')['ID_PERSONA'];
					}
					if($perfil==5){//vista estudiante
						$periodo = $this->academico_model->get_periodo_activado();
						$id_persona_estudiante = $this->session->userdata('loggeado')['ID_PERSONA'];
						//materias inscritas por el estudiante en el periodo actual
						$materias_estudiante = $this->academico_model->get_materias_estudiante($id_persona_estudiante,$periodo);
						$silabos_tareas=array();
						foreach($materias_estudiante as $materia_estudiante){
							if($materia_estudiante['ID_PERSONA_DOCENTE']!=NULL and $materia_estudiante['ID_PERSONA_DOCENTE']>0){
								$data['ID_PERIODO_ACADEMICO'] = $materia_estudiante['ID_PERIODO_ACADEMICO'];
								$data['ID_CARRERA'] = $materia_estudiante['ID_CARRERA'];
								$data['ID_NIVEL'] = $materia_estudiante['NIVEL_MATERIA'];
								$data['ID_CARRERA_MATERIA'] = $materia_estudiante['ID_CARRERA_MATERIA'];
								$data['ID_PERSONA'] = $materia_estudiante['ID_PERSONA_DOCENTE'];
								$data['ID_GRUPO'] = $materia_estudiante['ID_GRUPO'];
								$silabo_tarea = $this->academico_model->listado_silabos_tareas($data);
								$silabos_tareas = array_merge($silabos_tareas, $silabo_tarea);
							}
						}
					}else{
						$silabos_tareas = $this->academico_model->listado_silabos_tareas($data);
						foreach($silabos_tareas as $key=>$silabo_tarea){
							if($this->academico_model->verificar_si_tiene_estudiantes($silabo_tarea)==0){
								unset($silabos_tareas[$key]);
							}
						}
					}
					///agregar numero de tareas
					foreach($silabos_tareas as $key=>$silabo_tarea){
						$silabos_tareas[$key]['num_tareas']=$this->academico_model->num_tareas_estudiantes($silabo_tarea['ID_DOCENTE_CARRERA_MATERIA'],$silabo_tarea['ID_GRUPO']);
					}
					$datos['silabos_tareas']=$silabos_tareas;
					$this->load->view('resultadoSilabosTareas',$datos);
				}
			}else{
				redirect('admin/login', 'refresh');
			}
		}

		////////////////////////////////////////////////////////////////////////////
		public function procesarSilaboTarea()
		{
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,71)){
				$id_docente_carrera_materia = trim($this->input->post('id_docente_carrera_materia'));
				$id_grupo = trim($this->input->post('id_grupo'));
				$documento = trim($this->input->post('documento'));
				//carga de archivo
				$archivo= $_FILES['archivo']['name'];
				$ingreso_archivo='';
				$nombre_archivo='';
				if($archivo!=''){
					$dato_archivo=$this->cargar_archivo('archivo');
					if($dato_archivo['error']==''){
						$nombre_archivo=$dato_archivo['file_name'];
						//$ingreso_archivo="Archivo ingresado";
					}else{
						$ingreso_archivo=$dato_archivo['error'];
						//$ingreso_archivo="Fallo ingreso de archivo";
					}
				}
				if($nombre_archivo!=''){
					 if($documento==0){//silabo
						 $data['SILABO'] = $nombre_archivo;
					 }
					 if($documento==1){//tarea
						 $data['TAREA'] = $nombre_archivo;
						 //enviar correo de aviso
						 $data_silabo['ID_DOCENTE_CARRERA_MATERIA']=$id_docente_carrera_materia;
						 $data_silabo['ID_GRUPO']=$id_grupo;
						 $silabo_tarea = $this->academico_model->listado_silabos_tareas($data_silabo);
						 $correos=$this->academico_model->get_correos_estudiantes_grupo($id_docente_carrera_materia,$id_grupo);
						 if($correos!=NULL){
							 foreach($correos as $correo){
								 if($correo['CORREO_INSTITUCIONAL']!=NULL and $correo['CORREO_INSTITUCIONAL']!=''){
									 // Ahora creamos el cuerpo del mensaje
									 $head = "From: info@binary.ec \r\n";
									 $msg = "------------------------------------------ \n";
									 $msg.= "        NUEVA TAREA INGRESADA            \n";
									 $msg.= "------------------------------------------ \n";
									 $msg.= "PERIODO:   ".$silabo_tarea[0]['PERIODO']."\n";
									 $msg.= "DOCENTE:   ".$silabo_tarea[0]['DOCENTE']."\n";
									 $msg.= "CARRERA:   ".$silabo_tarea[0]['CARRERA']."\n";
									 $msg.= "MATERIA:   ".$silabo_tarea[0]['MATERIA']."\n";
									 $msg.= "GRUPO:   ".$silabo_tarea[0]['GRUPO']."\n";
									 $msg.= "HORA:     ".date("h:i:s a ")."\n";
									 $msg.= "FECHA:    ".date("D, d M Y")."\n";
									 $msg.= " Mensaje creado por Sistema Acad�mico \n";
									 @mail($correo['CORREO_INSTITUCIONAL'],"Nueva Tarea",$msg, $head);
								 }
							 }
						  }
					   }
					   $silabo=$this->academico_model->get_silabo_tarea($id_docente_carrera_materia,$id_grupo);
					   if($silabo!=NULL){//actualizacion
						   if($documento==0 and $silabo['SILABO']!=''){
							   unlink(FCPATH.'archivos/'.$silabo['SILABO']);
						   }
						   if($documento==1 and $silabo['TAREA']!=''){
							   unlink(FCPATH.'archivos/'.$silabo['TAREA']);
						   }
						   $id_silabo_tarea=$silabo['ID_SILABO_TAREA'];
						   $this->academico_model->actualizarSilaboTarea($data,$id_silabo_tarea);
					   }else{//creacion
						   $data['ID_DOCENTE_CARRERA_MATERIA']=$id_docente_carrera_materia;
						   $data['ID_GRUPO']=$id_grupo;
						   $data['FECHA']=date('Y-m-d H:i:s');
						   $this->academico_model->crearSilaboTarea($data);
					   }
					   $res=1;
					   $mensaje='Registro Realizado';
				   }else{
					   $res=0;
					   $mensaje='Fallo Ingreso :'.$ingreso_archivo;
				 }
				 $respuesta['respuesta']=$res;
				 $respuesta['mensaje']=$mensaje;
				 $respuesta['archivo']=$nombre_archivo;
				 echo json_encode($respuesta);
			}else{
				//redirect('admin/login', 'refresh');
				echo "Sesion Terminada";
			}
		}

		/////////////////////////////////////////////////////////////////////////////////////////////
		public function cargar_archivo($iname,$peso=0,$carpeta='')
		{
			$name=time();
			$config['upload_path'] = 'archivos/'.$carpeta;
			//$config['allowed_types'] = 'xls|xlsx|pdf|doc|docx|gif|jpg|png|mp3|wav|avi|mpg|mpeg|mp4';
			$config['allowed_types'] = '*';
			/*if($tipo==null){
				$config['allowed_types'] = 'xls|xlsx|pdf|doc|docx|gif|jpg|png';
			}else{
				$config['allowed_types'] = 'mp3|wav|avi|mpg|mpeg|mp4';
			}*/
			if($peso>0){
				$config['max_size'] = $peso;
			}else{
				$config['max_size'] = 5000;
			}
			//$config['max_width']            = 1024;
			//$config['max_height']           = 768;
			$config['file_name']= $name;
			$dato_imagen['nombre']=$name;
			$this->load->library('upload', $config);

			if(!$this->upload->do_upload($iname)){
				$error = $this->upload->display_errors();
				$dato_imagen['error']=$error;
			}else{
				$dato_imagen = $this->upload->data();
				$dato_imagen['error']='';
			}
			return $dato_imagen;
		}

		////////////////////////////////////////////////////////////////////////////////////////////////
		public function gestionTareas($id_docente_carrera_materia,$id_grupo)
		{
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,71)){
				$this->load->model('admin/usuarios_model');
				$perfil = $this->usuarios_model->get_perfil_usuario($idusuario);
				$id_tarea = trim($this->input->post('id_tarea'));
				if(isset($id_tarea) and $id_tarea!='' and $perfil!=5){
					$data['ID_DOCENTE_CARRERA_MATERIA'] = trim($this->input->post('id_docente_carrera_materia'));
					$data['ID_GRUPO'] = trim($this->input->post('id_grupo'));
					$data['TITULO'] = trim($this->input->post('titulo'));
					$data['DESCRIPCION'] = trim($this->input->post('texto'));
					$data['FECHA_LIMITE'] = trim($this->input->post('fecha_limite'));
					$num_archivos=trim($this->input->post('nroArchivos'));
					$tipo_archivos='';
					for($i=1; $i<=$num_archivos; $i++){
						$tipo_archivos.=$this->input->post('tipo_archivo_'.$i).'+';
					}
					$data['TIPO_ARCHIVOS_RESPUESTA'] = trim($tipo_archivos,'+');
					//carga de archivo
					$archivo= $_FILES['archivo']['name'];
					$ingreso_archivo='';
					$nombre_archivo='';
					$res=1;
					$mensaje='Registro Realizado';
					if($archivo!=''){
						$dato_archivo=$this->cargar_archivo('archivo');
						if($dato_archivo['error']==''){
							$nombre_archivo=$dato_archivo['file_name'];
							$data['TAREA'] = $nombre_archivo;
						}else{
							$ingreso_archivo=$dato_archivo['error'];
							$res=0;
							$mensaje='Fallo Ingreso :'.$ingreso_archivo;
						}
					}
					if($id_tarea==0 and $res==1){
						$data['FECHA_CREACION']=date('Y-m-d H:i:s');
						$this->academico_model->crearTarea($data);
						//enviar correo de aviso
						$data_silabo['ID_DOCENTE_CARRERA_MATERIA']=$id_docente_carrera_materia;
						$data_silabo['ID_GRUPO']=$id_grupo;
						$silabo_tarea = $this->academico_model->listado_silabos_tareas($data_silabo);
						$correos=$this->academico_model->get_correos_estudiantes_grupo($id_docente_carrera_materia,$id_grupo);
						if($correos!=NULL){
							foreach($correos as $correo){
								if($correo['CORREO_INSTITUCIONAL']!=NULL and $correo['CORREO_INSTITUCIONAL']!=''){
									// Ahora creamos el cuerpo del mensaje
									$head = "From: info@binary.ec \r\n";
									$msg = "------------------------------------------ \n";
									$msg.= "        NUEVA TAREA INGRESADA            \n";
									$msg.= "------------------------------------------ \n";
									$msg.= "PERIODO:   ".$silabo_tarea[0]['PERIODO']."\n";
									$msg.= "DOCENTE:   ".$silabo_tarea[0]['DOCENTE']."\n";
									$msg.= "CARRERA:   ".$silabo_tarea[0]['CARRERA']."\n";
									$msg.= "MATERIA:   ".$silabo_tarea[0]['MATERIA']."\n";
									$msg.= "GRUPO:   ".$silabo_tarea[0]['GRUPO']."\n";
									$msg.= "TITULO:   ".$data['TITULO']."\n";
									$msg.= "HORA:     ".date("h:i:s a ")."\n";
									$msg.= "FECHA:    ".date("D, d M Y")."\n";
									$msg.= " Mensaje creado por Sistema Acad�mico \n";
									@mail($correo['CORREO_INSTITUCIONAL'],"Nueva Tarea",$msg, $head);
								}
							}
						}
					}elseif($res==1){
						$tarea=$this->academico_model->buscar_tareas(array('ID_TAREA'=>$id_tarea));
						if(isset($data['TAREA']) and $tarea[0]['TAREA']!=''){
							unlink(FCPATH.'archivos/'.$tarea[0]['TAREA']);
						}
						$data['FECHA_MODIFICACION']=date('Y-m-d H:i:s');
						$this->academico_model->actualizarTarea($data,$id_tarea);
					}
					$respuesta['respuesta']=$res;
					$respuesta['mensaje']=$mensaje;
					echo json_encode($respuesta);
				}else{
					$datos1=$this->perfil_model->cabecera($idusuario);
					$data=array();
					$data['cabecera_tarea']=$this->academico_model->get_docente_carrera_materia_grupo($id_docente_carrera_materia,$id_grupo);
					$datat['ID_DOCENTE_CARRERA_MATERIA']=$id_docente_carrera_materia;
					$datat['ID_GRUPO']=$id_grupo;
					$tareas=$this->academico_model->buscar_tareas($datat);
					if($perfil==5){
						///agregar datos de respuesta
						foreach($tareas as $key=>$tarea){
							$data_respuesta['ID_TAREA']=$tarea['ID_TAREA'];
							$data_respuesta['ID_PERSONA'] = $this->session->userdata('loggeado')['ID_PERSONA'];
							$respuestas=$this->academico_model->buscar_respuestas_tarea($data_respuesta);
							if($respuestas==NULL){
								$tareas[$key]['respuesta']=NULL;
							}else{
								$tareas[$key]['respuesta']=$respuestas[0];
							}
						}
					}else{
						///agregar numero de tareas
						foreach($tareas as $key=>$tarea){
							$tareas[$key]['num_respuestas']=$this->academico_model->num_respuestas_estudiantes($tarea['ID_TAREA']);
						}
					}
					$data['perfil']=$perfil;
					$data['tareas']=$tareas;
					$this->load->view('templates/header',$datos1);
					$this->load->view('gestionTareas',$data);
					$this->load->view('templates/footer');
				}
			}else{
				redirect('admin/login', 'refresh');
			}
		}

		////////////////////////////////////////////////////////////////////////////////////////////////
		public function respuestaTarea()
		{
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,71)){
				$this->load->model('admin/usuarios_model');
				$perfil = $this->usuarios_model->get_perfil_usuario($idusuario);
				$id_tarea = trim($this->input->post('id_tarea'));
				$listado = trim($this->input->post('listado'));
				if($id_tarea!='' and $listado==''){
					$data['ID_TAREA'] = $id_tarea;
					$data['ID_PERSONA'] = $this->session->userdata('loggeado')['ID_PERSONA'];
					//carga de archivo
					$tareas=$this->academico_model->buscar_tareas(array('ID_TAREA'=>$id_tarea));
					$tarea=$tareas[0];
					$tipo_archivo=explode('+',$tarea['TIPO_ARCHIVOS_RESPUESTA']);
					$num_respuesta=count($tipo_archivo);
					$nombre_archivo='';
					$res=1;
					$ingreso_archivo='';
					$mensaje='Registro Realizado';
					for($i=1; $i<=$num_respuesta; $i++){
						if(isset($_FILES['archivo'.$i])){
							$archivo= $_FILES['archivo'.$i]['name'];
							if($archivo!=''){
								if($tipo_archivo[$i-1]==1){
									$dato_archivo=$this->cargar_archivo('archivo'.$i,5000);
								}else{
									$dato_archivo=$this->cargar_archivo('archivo'.$i);
								}
								if($dato_archivo['error']==''){
									$nombre_archivo.=$dato_archivo['file_name'].'+';
									$archivo_temp[$i]=$dato_archivo['file_name'];
								}else{
									$ingreso_archivo=$dato_archivo['error'].$tipo_archivo[$i-1];
									$res=0;
									$mensaje.='Fallo Ingreso :'.$ingreso_archivo;
								}
							}
						}
					}
					$data['RESPUESTA'] = trim($nombre_archivo,'+');
					/*$archivo= $_FILES['archivo']['name'];
					$ingreso_archivo='';
					$nombre_archivo='';
					$res=1;
					$mensaje='Registro Realizado';
					 if($archivo!=''){
						$dato_archivo=$this->cargar_archivo('archivo');
						if($dato_archivo['error']==''){
							$nombre_archivo=$dato_archivo['file_name'];
							$data['RESPUESTA'] = $nombre_archivo;
						}else{
							$ingreso_archivo=$dato_archivo['error'];
							$res=0;
							$mensaje='Fallo Ingreso :'.$ingreso_archivo;
						}
					 }*/

					 //verificar que no exista ya registrado una respuesta del estudiante
					 $data_respuesta['ID_TAREA']=$id_tarea;
					 $data_respuesta['ID_PERSONA'] = $this->session->userdata('loggeado')['ID_PERSONA'];
					 $respuestas=$this->academico_model->buscar_respuestas_tarea($data_respuesta);
					 if($respuestas!=NULL){
						 $nombre_archivo='';
						 $respuesta=$respuestas[0];
						 $datetime1 = date_create($tarea['FECHA_LIMITE'].' 23:59:59');
						 $datetime2 = date_create(date('Y-m-d H:i:s'));
						 if($respuesta['CALIFICACION']==NULL and $datetime2<$datetime1){
							 $respuesta_tarea=explode('+',$respuesta['RESPUESTA']);
							 for($i=1; $i<=$num_respuesta; $i++){
								 if(isset($archivo_temp[$i])){
									 $nombre_archivo.=$archivo_temp[$i].'+';
								 }else{
									 $nombre_archivo.=$respuesta_tarea[$i-1].'+';
								 }
							 }
							 $this->academico_model->actualizarRespuestaTarea(array('RESPUESTA'=>trim($nombre_archivo,'+')),$respuesta['ID_RESPUESTA_TAREA']);
						}else{
							$res=0;
							$mensaje='Fallo: Ya no se puede cambiar el archivo';
						}
					}elseif($res==1){
						$data['FECHA']=date('Y-m-d H:i:s');
						$this->academico_model->crearRespuestaTarea($data);
					}
					$respuesta['respuesta']=$res;
					$respuesta['mensaje']=$mensaje;
					echo json_encode($respuesta);
				}elseif($id_tarea!='' and $listado==1){
					$data_respuesta['ID_TAREA']=$id_tarea;
					$respuestas=$this->academico_model->buscar_respuestas_tarea($data_respuesta);
					///agregar numero de respuestas
					$tabla='<form action="'.site_url().'/academico/academico/guardaCalificacionTarea/" method="post" name="formulario_calificacion" id="formulario_calificacion">';
					$tabla.='<div id="respuesta_calificacion"></div>';
					$tabla.='<table class="table table-condensed"><tr>';
					$tabla.='<th>ESTUDIANTE</th>';
					$tabla.='<th>RESPUESTA</th>';
					$tabla.='<th>FECHA</th>';
					$tabla.='<th>CALIFICACI�N</th></tr>';
					$id_respuestas='';
					foreach($respuestas as $respuesta){
						$id_respuestas.=$respuesta['ID_RESPUESTA_TAREA'].'+';
						$tabla.='<tr onMouseOver="this.style.backgroundColor=\'#EBFCE2\'" onMouseOut="this.style.backgroundColor=\'\'">';
						$tabla.='<td>'.$respuesta['ESTUDIANTE'].'</td>';
						$tabla.='<td align="center">';
						$res=explode('+',$respuesta['RESPUESTA']);
						foreach($res as $k=>$r){
							if($r!=''){
								$tabla.='<a href="'.base_url('archivos/')."/".$r.'" title="Ver respuesta" target="_blank" style="color:#052F90"><span class="glyphicon glyphicon-list-alt" style="font-size:20px"></span></a> ';
							}
						}
						$tabla.='</td>';
						$f=explode(' ',$respuesta['FECHA']);
						$tabla.='<td nowrap="nowrap">'.$f[0].'</td>';
						$tabla.='<td align="center"><input style="width:80px" type="number" class="form-control" name="calificacion_'.$respuesta['ID_RESPUESTA_TAREA'].'" id="calificacion_'.$respuesta['ID_RESPUESTA_TAREA'].'" value="'.$respuesta['CALIFICACION'].'"></td>';
						$tabla.='</tr>';
					}
					$tabla.='</table>';
					$tabla.='<input type="hidden" name="id_respuestas" id="id_respuestas" value="'.trim($id_respuestas,'+').'">';
					$tabla.='</form>';
					echo $tabla;
				}
			}else{
				redirect('admin/login', 'refresh');
			}
		}

		////////////////////////////////////////////////////////////////////
		public function buscar_guias_academicas()
		{
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,78)){
				$this->load->model('admin/usuarios_model');
				$perfil = $this->usuarios_model->get_perfil_usuario($idusuario);
				if(!$this->input->is_ajax_request()){
					$datos=array();
					$datos['niveles'] = $this->academico_model->get_niveles();
					$datos['carreras'] = $this->academico_model->get_carreras();
					$datos['periodos'] = $this->academico_model->getPeriodos();
					$datos['perfil'] = $perfil;
					$datos['ID_PERIODO_ACADEMICO'] = $this->academico_model->get_periodo_activado();
					$datos1=$this->perfil_model->cabecera($idusuario);
					$this->load->view('templates/header',$datos1);
					$this->load->view('buscar_guias_academicas',$datos);
					$this->load->view('templates/footer');
				}else{
					$datos['perfil'] = $perfil;
					$guias_academicas=array();
					if($perfil==5){//vista estudiante
						$id_periodo = $this->academico_model->get_periodo_activado();
						$id_persona_estudiante = $this->session->userdata('loggeado')['ID_PERSONA'];
						//materias inscritas por el estudiante en el periodo actual
						$materias_estudiante = $this->academico_model->get_materias_estudiante($id_persona_estudiante,$id_periodo);
						$id_carrera_materias='';
						foreach($materias_estudiante as $materia_estudiante){
							$id_carrera_materias.=$materia_estudiante['ID_CARRERA_MATERIA'].',';
						}
						$data['IDS_CARRERA_MATERIA']=trim($id_carrera_materias,',');
						if($id_carrera_materias==''){
							$data['IDS_CARRERA_MATERIA']='0';
						}
					}elseif($perfil==4){//vista docente
						$id_periodo = $this->academico_model->get_periodo_activado();
						$id_persona_docente = $this->session->userdata('loggeado')['ID_PERSONA'];
						$data['ID_CARRERA'] = trim($this->input->post('id_carrera'));
						$data['ID_NIVEL'] = trim($this->input->post('id_nivel'));
						//materias inscritas por el estudiante en el periodo actual
						$materias_docente = $this->academico_model->get_materias_asignadas_al_docente($id_persona_docente);
						$id_carrera_materias='';
						foreach($materias_docente as $materia_docente){
							$id_carrera_materias.=$materia_docente['ID_CARRERA_MATERIA'].',';
						}
						$data['IDS_CARRERA_MATERIA']=trim($id_carrera_materias,',');
						if($id_carrera_materias==''){
							$data['IDS_CARRERA_MATERIA']='0';
						}
					}else{
						$id_periodo = trim($this->input->post('id_periodo'));
						$data['ID_CARRERA'] = trim($this->input->post('id_carrera'));
						$data['ID_NIVEL'] = trim($this->input->post('id_nivel'));
					}
					$materias_carreras = $this->academico_model->listado_carrera_materia($data);
					$periodos = $this->academico_model->getPeriodos($id_periodo);
					$i=0;
					foreach($periodos as $periodo){
						foreach($materias_carreras as $materia_carrera){
							$guias_academicas[$i]=$materia_carrera;
							$guias_academicas[$i]['PERIODO']=substr($periodo['FECHA_INICIO'],0,7).' / '.substr($periodo['FECHA_FIN'],0,7);
							$guias_academicas[$i]['ID_PERIODO_ACADEMICO']=$periodo['ID_PERIODO_ACADEMICO'];
							$guias_academicas[$i]['GUIA']=$this->academico_model->buscar_guia_academica($periodo['ID_PERIODO_ACADEMICO'],$materia_carrera['ID_CARRERA_MATERIA']);
							$i++;
						}
					}
					$datos['guias_academicas']=$guias_academicas;
					$this->load->view('resultadoGuiasAcademicas',$datos);
				}
			}else{
				redirect('admin/login', 'refresh');
			}
		}

		////////////////////////////////////////////////////////////////////////////
		public function procesarGuiaAcademica()
		{
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,78)){
				$id_periodo_academico = trim($this->input->post('id_periodo_academico'));
				$id_carrera_materia = trim($this->input->post('id_carrera_materia'));
				//carga de archivo
				$archivo= $_FILES['archivo']['name'];
				$ingreso_archivo='';
				$nombre_archivo='';
				$res=1;
				$mensaje='Registro Realizado';
				if($archivo!=''){
					$dato_archivo=$this->cargar_archivo('archivo',51200);
					if($dato_archivo['error']==''){
						$nombre_archivo=$dato_archivo['file_name'];
						$data['GUIA'] = $nombre_archivo;
					}else{
						$ingreso_archivo=$dato_archivo['error'];
						$res=0;
						$mensaje='Fallo Ingreso :'.$ingreso_archivo;
					}
				 }
				 $data['ID_PERIODO_ACADEMICO']=$id_periodo_academico;
				 $data['ID_CARRERA_MATERIA']=$id_carrera_materia;
				 $guia=$this->academico_model->buscar_guia_academica($id_periodo_academico,$id_carrera_materia);
				 if($guia!=NULL){//actualizacion
					 if($guia['GUIA']!='' and $nombre_archivo!=''){
						 unlink(FCPATH.'archivos/'.$guia['GUIA']);
					 }
					 $id_guia_academica=$guia['ID_GUIA_ACADEMICA'];
					 $this->academico_model->actualizarGuiaAcademica($data,$id_guia_academica);
				 }else{//creacion
					 $data['FECHA']=date('Y-m-d H:i:s');
					 $this->academico_model->crearGuiaAcademica($data);
				 }
				 $respuesta['respuesta']=$res;
				 $respuesta['mensaje']=$mensaje;
				 $respuesta['archivo']=$nombre_archivo;
				 echo json_encode($respuesta);
			}else{
				//redirect('admin/login', 'refresh');
				echo "Sesion Terminada";
			}
		}

		////////////////////////////////////////////////////////////////////////////
		public function borrarArchivo()
		{
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			if($this->session->userdata('loggeado')){
				$id_respuesta = trim($this->input->post('id_respuesta'));
				$archivo = trim($this->input->post('archivo'));
				$respuestas=$this->academico_model->buscar_respuestas_tarea(array('ID_RESPUESTA_TAREA'=>$id_respuesta));
				$respuesta=$respuestas[0];
				$tareas=$this->academico_model->buscar_tareas(array('ID_TAREA'=>$respuesta['ID_TAREA']));
				$tarea=$tareas[0];
				$datetime1 = date_create($tarea['FECHA_LIMITE'].' 23:59:59');
				$datetime2 = date_create(date('Y-m-d H:i:s'));
				if($respuesta['CALIFICACION']==NULL and $datetime2<$datetime1){
					if($archivo!=''){
						unlink(FCPATH.'archivos/'.$archivo);
					}
					$respuestas_tarea=str_replace($archivo,'',$respuesta['RESPUESTA']);
					$this->academico_model->actualizarRespuestaTarea(array('RESPUESTA'=>$respuestas_tarea),$id_respuesta);
					echo '1';
				}else{
					echo '0';
				}
			}else{
				//redirect('admin/login', 'refresh');
				echo "Sesion Terminada";
			}
		}

		////////////////////////////////////////////////////////////////////////////
		public function guardaCalificacionTarea()
		{
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			if($this->session->userdata('loggeado')){
				$id_respuestas = trim($this->input->post('id_respuestas'));
				$array_id_respuestas=explode('+',$id_respuestas);
				foreach($array_id_respuestas as $id_respuesta){
					$califiacion=$this->input->post('calificacion_'.$id_respuesta);
					if($califiacion!=''){
						$this->academico_model->actualizarRespuestaTarea(array('CALIFICACION'=>$califiacion),$id_respuesta);
					}
				}
				$respuesta['respuesta']=1;
				$respuesta['mensaje']='Calificaciones Guardadas';
				echo json_encode($respuesta);
			}else{
				//redirect('admin/login', 'refresh');
				echo "Sesion Terminada";
			}
		}

		////////////////////////////////////////////////////////////////////////////
		public function calificacionesPromedioTareas()
		{
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			if($this->session->userdata('loggeado')){
				$id_docente_carrera_materia = trim($this->input->post('id_docente_carrera_materia'));
				$id_grupo = trim($this->input->post('id_grupo'));
				$estudiantes=$this->academico_model->get_estudiantes_grupo($id_docente_carrera_materia,$id_grupo);
				$num_tareas=$this->academico_model->num_tareas_estudiantes($id_docente_carrera_materia,$id_grupo);
				$tabla='<table class="table table-condensed"><tr>';
				$tabla.='<th>Nro.</th>';
				$tabla.='<th>Estudiante</th>';
				$tabla.='<th>Nro. Tareas Enviadas</th>';
				$tabla.='<th>Nro. Tareas Realizadas</th>';
				$tabla.='<th>Calificaci�n Promedio</th></tr>';
				foreach($estudiantes as $k=>$estudiante){
					$tabla.='<tr><td>'.($k+1).'</td>';
					$tabla.='<td>'.$estudiante['ESTUDIANTE'].'</td>';
					$tabla.='<td align="center">'.$num_tareas.'</td>';
					$tareas_realizadas=$this->academico_model->tareas_realizadas_estudiante($estudiante['ID_PERSONA'],$id_docente_carrera_materia,$id_grupo);
					$num_tareas_realizadas=0;
					$calificacion=0;
					foreach($tareas_realizadas as $tarea_realizada){
						$num_tareas_realizadas+=1;
						$calificacion+=$tarea_realizada['CALIFICACION'];
					}
					if($num_tareas>0){
						$calificacion_promedio=round($calificacion/$num_tareas,2);
					}else{
						$calificacion_promedio=0;
					}
					$tabla.='<td align="center">'.$num_tareas_realizadas.'</td>';
					$tabla.='<td align="center" class="text-primary">'.$calificacion_promedio.'</td></tr>';
				}
				$tabla.='</table>';
				echo $tabla;
			}else{
				//redirect('admin/login', 'refresh');
				echo "Sesion Terminada";
			}
		}

		////////////////////////////////////////////////////////////////////
		public function calificacionGeneral()
		{
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,79)){
				$this->load->model('admin/usuarios_model');
				$perfil = $this->usuarios_model->get_perfil_usuario($idusuario);

				$usuario=$this->session->userdata('loggeado');
				if(!$this->input->is_ajax_request()){
					$datos=array();
					$datos['carreras'] = $this->academico_model->get_carreras();
					$datos['niveles'] = $this->academico_model->get_niveles();
					$datos['periodos'] = $this->academico_model->getPeriodos();
					$datos['ID_PERIODO_ACADEMICO'] = $this->academico_model->get_periodo_activado();

					$vector_us=null;
					$grupos=array();
					if($usuario['ID_PERFIL']==12){//filtrar grupos para coordinadores
						$gruposc=$this->usuarios_model->grupos_usuario_academico(array('ID_USUARIO_ACADEMICO'=>$idusuario));
						foreach($gruposc as $g){
							$grupos[]=$g['GRUPO'];
						}
					}else{
						$grupos=$this->academico_model->buscarGruposEst($vector_us);
						$grupos = explode("-", $grupos);
					}

					$datos['grupos'] = $grupos;
					$datos1=$this->perfil_model->cabecera($idusuario);
					$this->load->view('templates/header',$datos1);
					$this->load->view('reporteCalificacionGeneral',$datos);
					$this->load->view('templates/footer');
				}else{
					$id_carrera = trim($this->input->post('id_carrera'));
					$id_nivel = trim($this->input->post('id_nivel'));
					$id_periodo_academico = trim($this->input->post('id_periodo_academico'));
					$estado = trim($this->input->post('estado'));
					$grupo=trim($this->input->post('grupo'));
					$idUsuarioAcademico=null;
					if($usuario['ID_PERFIL']==12){//filtrar grupos para coordinadores
						$idUsuarioAcademico=$usuario['ID_USUARIO'];
					}
					$datos = $this->academico_model->listaAlumnos($id_carrera, $id_nivel,$id_periodo_academico,$grupo,null,null,array(),$idUsuarioAcademico);
					$nota_minima=$this->academico_model->getparametro('Nota pierde');
					$nota_minima1=$this->academico_model->getparametro('Asistencia minima');
					$componentes=$this->academico_model->get_componentes();
					foreach($componentes as $componente){
						$valor_componente[$componente['ID_COMPONENTE']]=$componente['VALOR'];
					}
					$i=0;
					$estudiantes=array();
					if($datos!=false){
						foreach($datos as $dato){
							$materias=$this->academico_model->get_materias_estudiante($dato['ID_PERSONA'],$dato['ID_PERIODO_ACADEMICO'],null,null,$dato['id_carrera']);
							foreach($materias as $materia){
								$dat_grupo=$this->academico_model->get_grupo($materia['ID_GRUPO']);
								$dat_sede=$this->academico_model->get_sede($dat_grupo['ID_SEDE']);
								$dat_materia=$this->academico_model->obtener_datos_materia($materia['ID_CARRERA_MATERIA']);
								$dat_docente=$this->academico_model->get_datos_persona($materia['ID_PERSONA_DOCENTE']);
								$dn['ID_ESTUDIANTE_CARRERA_MATERIA']=$materia['ID_ESTUDIANTE_CARRERA_MATERIA'];
								$dn['ID_TIPO_CALIFICACION']=6;
								$dat_nota=$this->academico_model->get_calificaciones($dn);

								$dn1['ID_ESTUDIANTE_CARRERA_MATERIA']=$materia['ID_ESTUDIANTE_CARRERA_MATERIA'];
								$dn1['ID_TIPO_CALIFICACION']=4;
								$dn1['ETAPA']=0;
								$dat_nota1=$this->academico_model->get_calificaciones($dn1);
								$calificacion='';
								$asistencia='';
								if(count($dat_nota)>0 and $dat_nota[0]['CALIFICACION']!=''){
									$calificacion=number_format($dat_nota[0]['CALIFICACION'],2);
								}
								if(count($dat_nota1)>0){
									$asistencia=$dat_nota1[0]['CALIFICACION'];
								}
								$estado_mat='SIN NOTA';
								$estado_c=-1;
								if(count($dat_nota)<=0 or count($dat_nota1)<=0){
									$estado_mat='SIN NOTA'; $estado_c=-1;
								}elseif($dat_nota[0]['ESTADO_CALIFICACION']==0 and $dat_nota[0]['CALIFICACION']!=''){
									//$nota_min=round($nota_minima['VALOR']/3);
									$nota_min=$nota_minima['VALOR'];
									if($dat_nota[0]['CALIFICACION']>=$nota_min and $dat_nota1[0]['CALIFICACION']>=$nota_minima1['VALOR']){
										$estado_mat='SUPLETORIO'; $estado_c=0;
									}else{
										$estado_mat='SIN NOTA'; $estado_c=-1;
									}
								}elseif($dat_nota[0]['ESTADO_CALIFICACION']==1 and $dat_nota[0]['CALIFICACION']!=''){
									$estado_mat='APROBADO'; $estado_c=1;
								}elseif($dat_nota[0]['ESTADO_CALIFICACION']==2 and $dat_nota[0]['CALIFICACION']!=''){
									$estado_mat='PERDIDO'; $estado_c=2;
								}
								//agregar notas componentes
								$notas_componente=$this->academico_model->get_calificaciones(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$materia['ID_ESTUDIANTE_CARRERA_MATERIA']));
								$reto_proyecto='';
								$taller='';
								$examen='';
								$supletorio='';
								$justificado='';
								foreach($notas_componente as $nc){
									if($nc['ID_COMPONENTE']==1 and $nc['ID_TIPO_CALIFICACION']==1 and $nc['CALIFICACION']!=''){
										$base_componente=$valor_componente[1];
										$reto_proyecto=number_format($nc['CALIFICACION']*$base_componente/10,2);
									}
									if($nc['ID_COMPONENTE']==2 and $nc['ID_TIPO_CALIFICACION']==1 and $nc['CALIFICACION']!=''){
										if($materia['ASISTENCIA_JUSTIFICADA']==1){
											$base_componente=0;
										}else{
											$base_componente=$valor_componente[2];
										}
										$taller=number_format($nc['CALIFICACION']*$base_componente/10,2);
									}

									if($nc['ID_COMPONENTE']==3 and $nc['ID_TIPO_CALIFICACION']==1 and $nc['CALIFICACION']!=''){
										if($materia['ASISTENCIA_JUSTIFICADA']==1){
											$base_componente=6;
											$justificado='color:blue';
										}else{
											$base_componente=$valor_componente[3];
										}
										$examen=number_format($nc['CALIFICACION']*$base_componente/10,2);
									}
									if($nc['ID_TIPO_CALIFICACION']==5 and $nc['CALIFICACION']!=''){
										$supletorio=number_format($nc['CALIFICACION'],2);
									}
								}
								if($estado=='' or $estado==$estado_c){
									$planificacion=$this->academico_model->getPlanificacion($materia['ID_GRUPO'],$materia['ID_CARRERA_MATERIA'],$id_periodo_academico);
									$estudiantes[$i]['FECHA_TUTORIA']='';
									if($planificacion!=NULL){
										$estudiantes[$i]['FECHA_TUTORIA']=$planificacion['FECHA_TUTORIA1'];
									}
									$estudiantes[$i]['NOMBRE_COMPLETO']=$dato['NOMBRE_COMPLETO'];
									$estudiantes[$i]['CARRERA']=$dato['CARRERA'];
									$estudiantes[$i]['NIVEL']=$dato['NIVEL'];
									$estudiantes[$i]['ESTADO_MATRICULA']=$dato['ESTADO_MATRICULA'];
									$estudiantes[$i]['MATERIA']=$dat_materia['NOMBRE'];
									$estudiantes[$i]['DOCENTE']=$dat_docente['APELLIDO_PATERNO'].' '.$dat_docente['APELLIDO_MATERNO'].' '.$dat_docente['PRIMER_NOMBRE'].' '.$dat_docente['SEGUNDO_NOMBRE'];
									$estudiantes[$i]['TALLER']=$taller;
									$estudiantes[$i]['RETO_PROYECTO']=$reto_proyecto;
									$estudiantes[$i]['EXAMEN']=$examen;
									$estudiantes[$i]['ASISTENCIA']=$asistencia;
									$estudiantes[$i]['SUPLETORIO']=$supletorio;
									$estudiantes[$i]['CALIFICACION']=$calificacion;
									$estudiantes[$i]['ESTADO']=$estado_mat;
									$estudiantes[$i]['GRUPO']=$dat_grupo['NOMBRE'];
									$estudiantes[$i]['SEDE']=$dat_sede['SEDE'];
									$estudiantes[$i]['ID_GRUPO']=$materia['ID_GRUPO'];
									$estudiantes[$i]['ID_MATERIA']=$materia['ID_CARRERA_MATERIA'];
									$estudiantes[$i]['ID_DOCENTE']=$materia['ID_PERSONA_DOCENTE'];
									$estudiantes[$i]['CEDULA_ESTUDIANTE']=$dato['CEDULA'];
									$estudiantes[$i]['Justificado']=$justificado;
									$i++;
								}
							}
						}
					}
					echo json_encode($estudiantes);
				}
			}else{
				redirect('admin/login', 'refresh');
			}
		}

		////exporta archivo a excel
		public function archivoExcel()
		{
			$this->load->view('archivo_excel');
		}

		////////////////////////////////////////////////////////////////////////////
		/***WEBSERVICES DEMING******************************************************/
		public function ws($cedula=NULL)
		{
			$ip=$_SERVER['REMOTE_ADDR'];
			$opcion = trim($this->input->post('opcion'));
			if($ip=='158.69.60.207' or $ip=='186.71.53.194' or $ip=='::1'){
				$id_periodo_academico = $this->academico_model->get_periodo_activado();
				//$opcion = 1;
				$resXML='';
				/*OPCION:1
				Listado de Alumnos, los cuales estar�n inscritos en los distintos Grupos o Secciones
				***************************************************************************************/
				if($opcion==1){
					$alumnos = $this->academico_model->listaAlumnos(null, null,$id_periodo_academico,null);
					/*$resXML.='<?xml version="1.0" encoding="iso-8859-1" ?>';*/
					$resXML.='<alumnos>';
					foreach($alumnos as $alumno){
						$resXML.='<alumno>';
						$resXML.='<cedula>'.$alumno['CEDULA'].'</cedula>';
						$resXML.='<nombre>'.$alumno['NOMBRES'].'</nombre>';
						$resXML.='<apellido>'.$alumno['APELLIDOS'].'</apellido>';
						$resXML.='</alumno>';
					}
					$resXML.='</alumnos>';
				}
				/*OPCION:2
				Listado de Profesores, los cuales estar�n asignados a los distintos Grupos o Secciones, y ser�n ellos, los encargados de evaluar los contenidos de cada Alumno.
				***************************************************************************************/
				if($opcion==2){
					$docentes = $this->academico_model->getDocentes();
					$resXML.='<?xml version="1.0" encoding="iso-8859-1"?>';
					$resXML.='<profesores>';
					foreach($docentes as $docente){
						$resXML.='<profesor>
								  <cedula>'.$docente['CEDULA'].'</cedula>
								  <nombre>'.$docente['NOMBRES'].'</nombre>
								  <apellido>'.$docente['APELLIDOS'].'</apellido>
								</profesor>';
					}
					$resXML.='</profesores>';
				}
				/*OPCION:3
				Listado de Materias, las cuales ser�n asignadas a los diferentes Grupos o Secciones de Alumnos.
				***************************************************************************************/
				if($opcion==3){
					$materias = $this->academico_model->buscarMateria(NULL, NULL, NULL);
					$resXML.='<?xml version="1.0" encoding="iso-8859-1"?>';
					$resXML.='<materias>';
					foreach($materias as $materia){
						$resXML.='<materia>
								  <id>'.$materia['ID_MATERIA'].'</id>
								  <nombre_materia>'.$materia['NOMBRE'].'</nombre_materia>
								</materia>';
					}
					$resXML.='</materias>';
				}
				/*OPCION:4
				Listado de Alumnos inscritos en los diferentes Grupos o Secciones, con sus respectivos profesores.
				***************************************************************************************/
				if($opcion==4){
					$resXML.='<?xml version="1.0" encoding="iso-8859-1"?>';
					$resXML.='<grupos>';
					$datos = $this->academico_model->listaAlumnos(null, null,$id_periodo_academico,null);
					$i=0;
					$estudiantes=array();
					if($datos!=false){
						foreach($datos as $dato){
							$materias=$this->academico_model->get_materias_estudiante($dato['ID_PERSONA'],$dato['ID_PERIODO_ACADEMICO']);
							foreach($materias as $materia){
								  $dat_materia=$this->academico_model->obtener_datos_materia($materia['ID_CARRERA_MATERIA']);
								  $dat_docente=$this->academico_model->get_datos_persona($materia['ID_PERSONA_DOCENTE']);
								  $resXML.='<grupo>
											  <id>'.$materia['ID_ESTUDIANTE_CARRERA_MATERIA'].'</id>
											  <alumno_cedula>'.$dato['CEDULA'].'</alumno_cedula>
											  <profesor_cedula>'.$dat_docente['CEDULA'].'</profesor_cedula>
											  <materia_id>'.$dat_materia['ID_MATERIA'].'</materia_id>
											</grupo>';
							}
						}
					}

					$resXML.='</grupos>';
				}
				if($cedula!=NULL){
					$resXML.='<?xml version="1.0" encoding="iso-8859-1"?>';
					$resXML.='<estudiante>';
					$resXML.='<status>';
					$resXML.='<success>true</success>';
					$resXML.='<http>200</http>';
					$resXML.='<message>OK</message>';
					$resXML.='<descripcion>OK</descripcion>';
					$resXML.='</status>';
					$resXML.='<data>';
					$alumno=$this->academico_model->buscarEstudiantesMatriculados(array('nd'=>$cedula));
					if($alumno!=false){
						$resXML.='<alumnos>';
						$resXML.='<id>'.$alumno[0]['ID_PERSONA'].'</id>';
						$resXML.='<cedula>'.$alumno[0]['NRO_DOCUMENTO'].'</cedula>';
						$resXML.='<nombre>'.trim($alumno[0]['PRIMER_NOMBRE'].' '.$alumno[0]['SEGUNDO_NOMBRE']).'</nombre>';
						$resXML.='<apellido>'.trim($alumno[0]['APELLIDO_PATERNO'].' '.$alumno[0]['APELLIDO_MATERNO']).'</apellido>';
						$resXML.='<status>true</status>';
						$resXML.='</alumnos>';
						$resXML.='<secciones>';
						$materias=$this->academico_model->get_materias_estudiante($alumno[0]['ID_PERSONA'],$alumno[0]['ID_PERIODO_ACADEMICO']);
						foreach($materias as $materia){
							$dat_materia=$this->academico_model->obtener_datos_materia($materia['ID_CARRERA_MATERIA']);
							$dat_docente=$this->academico_model->get_datos_persona($materia['ID_PERSONA_DOCENTE']);
							$dat_grupo=$this->academico_model->get_grupo($materia['ID_GRUPO']);
							$resXML.='<seccion>';
							$resXML.='<id>'.$dat_grupo['NOMBRE'].'</id>';
							$resXML.='<materia_id>'.$dat_materia['ID_MATERIA'].'</materia_id>';
							$resXML.='<profesor_id>'.$materia['ID_PERSONA_DOCENTE'].'</profesor_id>';
							$resXML.='<status>true</status>';
							$resXML.='<created_at>'.$alumno[0]['FECHA'].'</created_at>';
							$resXML.='<materias>';
							$resXML.='<materia>';
							$resXML.='<id>'.$dat_materia['ID_MATERIA'].'</id>';
							$resXML.='<nombre>'.$dat_materia['NOMBRE'].'</nombre>';
							$resXML.='<created_at>'.$alumno[0]['FECHA'].'</created_at>';
							$resXML.='</materia>';
							$resXML.='</materias>';
							$resXML.='<profesores>';
							$resXML.='<profesor>';
							$resXML.='<id>'.$materia['ID_PERSONA_DOCENTE'].'</id>';
							$resXML.='<cedula>'.$dat_docente['CEDULA'].'</cedula>';
							$resXML.='<nombre>'.trim($dat_docente['PRIMER_NOMBRE'].' '.$dat_docente['SEGUNDO_NOMBRE']).'</nombre>';
							$resXML.='<apellido>'.trim($dat_docente['APELLIDO_PATERNO'].' '.$dat_docente['APELLIDO_MATERNO']).'</apellido>';
							$resXML.='<created_at>'.$alumno[0]['FECHA'].'</created_at>';
							$resXML.='</profesor>';
							$resXML.='</profesores>';
							$resXML.='</seccion>';
						}
						$resXML.='</secciones>';
					}
					$resXML.='</data>';
					$resXML.='</estudiante>';
					$xml = simplexml_load_string($resXML);
					$resXML = json_encode($xml);
				}
				echo $resXML;
			}else{
				echo "Acceso Denegado ".$ip.$opcion ;
			}
		}

		/////////////////////////////////////////////////////////////////////////////////////////////
		public function guardar_mensaje_estudiante()
		{
			if($this->session->userdata('loggeado')){
				$data['mensaje_aprueba'] = trim($this->input->post('texto_aprueba'));
				$data['mensaje_pierde'] = trim($this->input->post('texto_pierde'));
				$data['mensaje_supletorio'] = trim($this->input->post('texto_supletorio'));
				$this->academico_model->actualizar_mensaje_estudiante($data);
				$respuesta='Registro Actualizado';
				echo $respuesta;
			}else{
				redirect('admin/login', 'refresh');
			}
		}

		//////////////////////////////////////////////////////////////////////////////
		//interfaz que muestra la interfaz de ingreso y consulta de calificaciones en sistema externo para profesor y estudiantes
		public function calificacion($cedula=null)
		{
			$this->load->model('admin/usuarios_model');
			$this->load->module('admin/login');
			if($cedula==null){
				$cedula = trim($this->input->post('cedula'));
			}
			$usuario=$this->usuarios_model->verificar_usuario_cedula($cedula);
			if($usuario!=NULL){
				$sess_array = array('ID_USUARIO' => $usuario['ID_USUARIO'],
									'USUARIO' => $usuario['USUARIO'],
									'ID_PERSONA' => $usuario['ID_PERSONA'],
									'PERIODO'=>$this->login->getPeriodo(),
									'ACTUALIZAR_CLAVE'=>$usuario['ACTUALIZAR_CLAVE'],
									'EXTERNO'=>1
									);
				$this->session->set_userdata('loggeado', $sess_array);
				if($usuario['id_perfil']==4){//vista profesor
					$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
					$id_persona=$this->academico_model->getpersona($idusuario);
					$datos=array();
					//$materias = $this->academico_model->get_materias_del_docente_para_calificar($id_persona);
					$materias = $this->academico_model->buscar_grupos_calificar(NULL, NULL, NULL,$id_persona);
					foreach($materias as $key=>$materia){
						if($this->academico_model->verificar_si_tiene_estudiantes($materia)==0){
							unset($materias[$key]);
						}
					}
					$datos['grupos'] = $materias;
					//$datos['materias'] = $materias;
					$datos['id_persona'] =  $id_persona;
					$this->load->view('templates/header_conexion');
					$this->load->view('docente_grupos_calificar',$datos);
					//redirect('index/index');
					//$this->load->view('docente_materias_calificar1',$datos);
					//$this->load->view('templates/footer_conexion');
				}
				if($usuario['id_perfil']==5){//vista estudiante
					$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
					$id_persona=$this->academico_model->getpersona($idusuario);
					$id_grupo=$this->academico_model->obtener_idgrupo_estudiante($id_persona);
					$id_nivel=$this->academico_model->obtener_idnivel_estudiante($id_persona);
					$id_carrera=$this->academico_model->obtener_idcarrera_estudiante($id_persona);
					$id_periodo_academico=$this->academico_model->get_periodo_activado();
					$datos=array();
					$etapas=$this->academico_model->get_etapas_calificar();
					$estado_etapa=array();
					foreach($etapas as $etapa){
						$estado_etapa[$etapa['ETAPA']]=$etapa['ESTADO'];
						if($this->academico_model->verificar_usuario_funcionalidad($idusuario,69)){
							$estado_etapa[$etapa['ETAPA']]=1;//siempre activo si tiene permiso asignado
						}
					}
					//obtener_datos_matricula($id_cliente)
					$datos= $this->academico_model->buscar_estdiante_calificado($id_persona,$id_grupo,$id_nivel,$id_carrera,$id_periodo_academico);
					$datos['estado_etapa']=$estado_etapa;
					$datos['mensaje_aprueba']=$this->academico_model->get_mensaje_aprueba();
					$datos['mensaje_pierde']=$this->academico_model->get_mensaje_pierde();
					$datos['mensaje_supletorio']=$this->academico_model->get_mensaje_supletorio();
					$this->load->view('templates/header_conexion');
					$this->load->view('calificaciones_estudiante',$datos);
					$this->load->view('templates/footer_conexion');
				}
			}else{
				echo 'Usuario no existe';
			}
		}

		/////////////////////////////////////////////////////////////////////////
		//funcion que guarda la nota de componente retos y proyectos enviada desde un sistema externo
		public function promedio_retos_proyectos()
		{
			$this->load->model('admin/usuarios_model');
			$this->load->module('admin/login');
			$ip=$_SERVER['REMOTE_ADDR'];
			$id_carrera = trim($this->input->post('id_carrera'));
			$id_materia = trim($this->input->post('id_materia'));
			$cedula = trim($this->input->post('cedula'));
			$nota_retos = trim($this->input->post('calificacion'));
			$cedula_docente = trim($this->input->post('cedula_docente'));
			$res='';
			$this->session->set_userdata('loggeado', array('ID_USUARIO'=>0));

			//if ($ip=='158.69.60.207' or $ip=='186.71.53.194' or $ip=='::1' or $ip=='200.58.110.26')
			//{
				//$id_periodo_academico = $this->academico_model->get_periodo_activado();
				$id_periodo_academico = 11;
				$usuario              = $this->usuarios_model->verificar_usuario_cedula($cedula);
				$materias             = $this->academico_model->get_materias_estudiante($usuario['ID_PERSONA'],$id_periodo_academico);
				$id_materias=$this->academico_model->get_materias_conversion($id_materia);
				$vector_materias=explode('+',$id_materias);
				$estudiante_carrera_materia = 0;
				$id_grupo                   = 0;
				$id_carrera_materia         = 0;
				$asistencia_justificada     = 0;
				$id_docente     = 0;
				$homologado     = 0;
				$convalidado     = 0;
				$historial     = 0;
				foreach($materias as $materia){
					//if($materia['ID_CARRERA_MATERIA']==$id_materia){
					if(in_array($materia['ID_CARRERA_MATERIA'],$vector_materias)){
						$estudiante_carrera_materia = $materia['ID_ESTUDIANTE_CARRERA_MATERIA'];
						$id_grupo                   = $materia['ID_GRUPO'];
						$id_carrera_materia         = $materia['ID_CARRERA_MATERIA'];
						$asistencia_justificada     = $materia['ASISTENCIA_JUSTIFICADA'];
						$periodo_academico          = $materia['ID_PERIODO_ACADEMICO'];
						$id_docente          = $materia['ID_PERSONA_DOCENTE'];
						$homologado          = $materia['FUE_HOMOLOGADA'];
						$convalidado          = $materia['FUE_CONVALIDADA'];
						$historial          = $materia['FUE_HISTORIAL'];
					}

				}
				// print_r($materias);
				// 	echo "<br>";
				///////////////////////////////////PROCESAMIENTO DE COPIA//////////////////////////////////////
					$ch  = curl_init();
					$url = $this->url_copia . 'promedio_tarea/';
					curl_setopt($ch, CURLOPT_URL, $url);
					// $data_copia['estudiante_carrera_materia'] = $estudiante_carrera_materia;
					$data_copia['id_grupo']                   = $id_grupo;
					$data_copia['id_carrera_materia']         = $id_carrera_materia;
					$data_copia['asistencia_justificada']     = $asistencia_justificada;
					$data_copia['id_persona']                 = $usuario['ID_PERSONA'];
					$data_copia['id_periodo_academico']       = $id_periodo_academico;
					$data_copia['calificacion']               = $nota_retos;
					$elements                                 = $data_copia;
					curl_setopt($ch, CURLOPT_POST,true);
					// curl_setopt($ch, CURLOPT_POSTFIELDS, $elements);
					// curl_setopt($ch, CURLOPT_HEADER, false);
					// curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode(array($elements)));
					curl_setopt($ch, CURLOPT_POSTFIELDS, $elements);
					curl_setopt($ch, CURLOPT_HEADER, false);
					// curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json'));
					curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);
					$resultado = curl_exec($ch);
					$error     = curl_error($ch);
					curl_close($ch);
				/////////////////////////////////////////////////////////////////////////
				//verificar periodo de calificacion
				$v_grupo=$this->academico_model->get_grupo($id_grupo);
				$grupo=$v_grupo['NOMBRE'];
				$v_materia=$this->academico_model->obtener_datos_materia($id_carrera_materia);
				$materia=$v_materia['NOMBRE'];
				$fechaCierre=$this->academico_model->get_fecha_cierre(array('ID_GRUPO'=>$id_grupo,'ID_MATERIA'=>$id_carrera_materia,'ID_PERIODO_ACADEMICO'=>$id_periodo_academico));
				$calificacion_cerrada=0;
				/*if(count($fechaCierre)>0){
					if($fechaCierre['FECHA_APLAZADO']!='0000-00-00'){
						$datetime1 = date_create($fechaCierre['FECHA_APLAZADO'].' 23:59:59');
					}else{
						$datetime1 = date_create($fechaCierre['FECHA_CIERRE'].' 23:59:59');
					}
					$datetime2 = date_create(date('Y-m-d H:i:s'));
					if($datetime1<$datetime2){
						$calificacion_cerrada=1;
					}
				}*/
				if($nota_retos!='' and $nota_retos>=0 and $nota_retos<=10){
					if($calificacion_cerrada==0){
						if($homologado==0 and $convalidado==0 and $historial==0){
							$etapa=1;
							$cadena_componente='1';//id componente retos y proyectos
							$cadena_valor=$nota_retos;
							$componentes=$this->academico_model->get_componentes();
							foreach($componentes as $v){
								$componente[$v['ID_COMPONENTE']]=$v['VALOR'];
								if($asistencia_justificada==1 and $v['ID_COMPONENTE']==3){
									$componente[$v['ID_COMPONENTE']]=$v['VALOR']*2;
								}
								if($asistencia_justificada==1 and $v['ID_COMPONENTE']==2){
									$componente[$v['ID_COMPONENTE']]=0;//si esta con asistencia justificada taller vale cero
								}
							}
							$op['ID_ESTUDIANTE_CARRERA_MATERIA']=$estudiante_carrera_materia;
							$op['ID_TIPO_CALIFICACION']=1;
							$op['ETAPA']=1;
							$notas_componente=$this->academico_model->get_calificaciones($op);
							$nota_etapa=0;
							$num_componentes=count($componentes)-1;//total componentes menos el componente retos
							$num_componentes_calificados=0;//total componentes ya calificados
							foreach($notas_componente as $nc){
								if($nc['ID_COMPONENTE']!=1){//si no es componente de taras
									if($nc['CALIFICACION']!=NULL and $nc['CALIFICACION']!=''){
										$nota_etapa=$nota_etapa+$nc['CALIFICACION']*$componente[$nc['ID_COMPONENTE']]/10;
										$num_componentes_calificados=$num_componentes_calificados+1;
									}
								}
								if($nc['ID_COMPONENTE']==3){//calificacion componente examen
									$componente_examen=$nc['CALIFICACION'];
								}
							}
							//if(count($componentes)==count($notas_componente)){
							$asistencia=$this->academico_model->get_asistencia_materia($estudiante_carrera_materia);
							$supletorio=$this->academico_model->get_supletorio_materia($estudiante_carrera_materia);
							if($supletorio<0){
								$supletorio='';
							}
							$estado='';
							if($num_componentes==$num_componentes_calificados and $asistencia>=0 and $nota_retos!=''){
								$nota_final=$nota_etapa+$nota_retos*$componente[1]/10;
								$v_notamin=$this->academico_model->getparametro(utf8_encode('Nota m�nima'));
								$notamin=$v_notamin['VALOR'];
								$v_notamax=$this->academico_model->getparametro(utf8_encode('Nota m�xima'));
								$notamax=$v_notamax['VALOR'];
								$min_componente_examen=5;
								$v_notamax_asis=$this->academico_model->getparametro('Asistencia');
								$notamax_asis=$v_notamax_asis['VALOR'];
								$v_notamin_asis=$this->academico_model->getparametro('Asistencia minima');
								$notamin_asis=$v_notamin_asis['VALOR'];
								$v_nota_pierde=$this->academico_model->getparametro('Nota pierde');
								$nota_pierde=$v_nota_pierde['VALOR'];
								//calcular estado materia
								if($nota_final>=$notamin && $nota_final<=$notamax && $componente_examen>=$min_componente_examen){
									if($asistencia>=$notamax_asis){
										$estado=1;
									}elseif($asistencia>=$notamin_asis && $asistencia<$notamax_asis){
										$estado='0';
									}else{
										$estado=2;
									}
								}elseif(($nota_final>=$nota_pierde && $nota_final<$notamin) or ($componente_examen<$min_componente_examen && $nota_final>=$nota_pierde)){
									if($asistencia>=$notamax_asis){
										$estado='0';
									}elseif($asistencia>=$notamin_asis && $asistencia<$notamax_asis && $componente_examen>=$min_componente_examen){
										$estado='0';
									}else{
										$estado=2;
									}
								}elseif($nota_final<$nota_pierde){
									$estado=2;
								}
								//$this->academico_model->updatePromediototal($estudiante_carrera_materia,$nota_etapa,$nota_etapa,$asistencia,$estado);
								if($supletorio!=''){
									$nota_final=round(($nota_final+$supletorio)/2,2);
									if($nota_final>=$notamin){
										$estado=1;
									}else{
										$estado=2;
									}
								}
								$this->academico_model->updateAsistenciaSupletorioNotaFinal($estudiante_carrera_materia,$asistencia,$supletorio,$nota_final,$estado,$id_periodo_academico);
							}else{
								$nota_final='';
								if($asistencia<0){
									$asistencia='';
								}
								$supletorio='';
								$estado=-1;
								$this->academico_model->updateAsistenciaSupletorioNotaFinal($estudiante_carrera_materia,$asistencia,$supletorio,$nota_final,$estado,$id_periodo_academico);
							}

							/////enviar supletorio a VLC//////////
							if($estado==0){
								$supletorio_vlc=$this->academico_model->get_estudiante_supletorio($estudiante_carrera_materia);
								if($supletorio_vlc==NULL or $supletorio_vlc['ID_SUPLETORIO_VLC']==0){
									if($supletorio_vlc==NULL){
										$this->academico_model->crear_estudiante_supletorio(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$estudiante_carrera_materia));
									}
									$this->sendSupletorioVlc($estudiante_carrera_materia,'crear');
								}
							}elseif($estado>0 and ($supletorio=='' or $supletorio==NULL)){
								$supletorio_vlc=$this->academico_model->get_estudiante_supletorio($estudiante_carrera_materia);
								if($supletorio_vlc!=NULL){
									$this->sendSupletorioVlc($estudiante_carrera_materia,'borrar');
									$this->academico_model->borrar_estudiante_supletorio($estudiante_carrera_materia);
								}
							}

							$etapas=1;
							if($estudiante_carrera_materia>0){
								if($num_componentes==$num_componentes_calificados and $nota_retos!=''){
									$nota_etapa=$nota_etapa+$nota_retos*$componente[1]/10;
								}else{
									$nota_etapa='';
								}
								$this->academico_model->calificar_componentes($estudiante_carrera_materia, $etapa,$cadena_componente,$cadena_valor,$nota_etapa,$etapas,$id_periodo_academico);
								$res= 'Registro Realizado';
							}else{
								$res= 'Error:Materia No existe';
							}
						}else{
							$res='Error:Materia fue HCH';
						}
					}else{
						$res= 'Error:Periodo Cerrado';
					}
				}else{
					$res= 'Error:Calificacion Incorrecta';
				}

				if(count($materias)<=0){
					$res='Estudiante No Matriculado';
				}elseif($id_docente!=NULL){
					$doc_docente = $this->academico_model->get_datos_persona($id_docente);
					if($doc_docente!=NULL and $doc_docente['CEDULA']!=$cedula_docente){
						$res.=':Docente Incorrecto';
					}
				}
				//guardar log vlc
				$dat=array();
				$dat['IP']=$ip;
				$dat['ID_MATERIA']=$id_materia;
				$dat['CALIFICACION']=$nota_retos;
				$dat['CEDULA_ESTUDIANTE']=$cedula;
				$dat['FECHA']=date('Y-m-d H:i:s');
				$dat['ESTADO']=$res;
				$dat['CEDULA_DOCENTE']=$cedula_docente;
				$dat['TIPO']='Retos';
				$this->academico_model->crearLogVlc($dat);
				if(stripos($res, 'Registro Realizado')!== false){
					http_response_code(200);
				}else{
					http_response_code(422);
				}
				echo $res;

				/*$head = "From: info@binary.ec \r\n";
				$msg = "------------------------------------------ \n";
				$msg.= "Id materia:   ".$id_materia."\n";
				$msg.= "nota:    ".$nota."\n";
				$msg.= "cedula:    ".$cedula."\n\n\n";
				$msg.= "HORA:     ".date("h:i:s a ")."\n";
				$msg.= "FECHA:    ".date("D, d M Y")."\n";
				$msg.= " Mensaje creado por Bi-Academos \n";
				@mail('hgranda@binary.ec',"datos vlc",$msg, $head);*/

			//}else{
			//	echo 'Acceso Denegado';
			//}
		}

		///////////////////////////////////////////////////
		/*public function justificaAsistencia()
		{
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,80)){
				$id_estudiante_carrera_materia = trim($this->input->post('id_estudiante_carrera_materia'));
				if($id_estudiante_carrera_materia!=NULL and $id_estudiante_carrera_materia>0){
					$this->academico_model->actualizar_acad_estudiante_carrera_materia(array('ASISTENCIA_JUSTIFICADA'=>1),$id_estudiante_carrera_materia);
					echo '<input type="button" class="btn btn-info btn-xs" value="Justificado" style="color:#000000" disabled>';
				}else{
					$datos=array();
					$datos['niveles'] = $this->academico_model->get_niveles();
					$datos['carreras'] = $this->academico_model->get_carreras();
					$datos['modalidades'] = $this->academico_model->get_modalidades();
					$datos['periodos'] = $this->academico_model->getPeriodos();
					$datos['ID_PERIODO_ACADEMICO'] = $this->academico_model->get_periodo_activado();
					$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
					$datos1=$this->perfil_model->cabecera($idusuario);
					$this->load->view('templates/header',$datos1);
					$this->load->view('busqueda_justificacion_alumnos',$datos);
					$this->load->view('templates/footer');
				}
			}else{
				redirect('admin/login', 'refresh');
			}
		}*/

		///////////////////////////////////////////////////
		public function justificaAsistencia()
		{
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,80)){
				$id_estudiante_carrera_materia = trim($this->input->post('id_estudiante_carrera_materia'));
				if($this->input->is_ajax_request()){
					$id_usuario=$this->session->userdata('loggeado')['ID_USUARIO'];
					$d['nd'] = trim($this->input->post('nd'));
					$d['ap'] = trim($this->input->post('ap'));
					$d['am'] = trim($this->input->post('am'));
					$d['pn'] = trim($this->input->post('pn'));
					$d['sn'] = trim($this->input->post('sn'));
					$d['grupo'] = trim($this->input->post('grupo'));
					$d['id_carrera'] = trim($this->input->post('id_carrera'));
					$d['id_nivel'] = trim($this->input->post('id_nivel'));
					$d['id_periodo_academico'] = trim($this->input->post('id_periodo_academico'));
					$d['estado'] = trim($this->input->post('estado'));
					if($d['id_periodo_academico']=='' or $d['id_periodo_academico']==NULL){
						$d['id_periodo_academico']=$this->academico_model->get_periodo_activado();
					}
					if($this->session->userdata('loggeado')['ID_PERFIL']==5){
						$d['ID_PERSONA']=$this->session->userdata('loggeado')['ID_PERSONA'];
					}
					$d['justificando'] = 1;
					$datos = $this->academico_model->buscar_alumno_materia($d);
					echo json_encode($datos);
				}elseif($id_estudiante_carrera_materia!=NULL and $id_estudiante_carrera_materia>0){
					$this->academico_model->actualizar_acad_estudiante_carrera_materia(array('ASISTENCIA_JUSTIFICADA'=>1),$id_estudiante_carrera_materia);
					echo '<input type="button" class="btn btn-info btn-xs" value="Justificado" style="color:#000000" disabled>';
				}else{
					$datos=array();
					$datos['niveles'] = $this->academico_model->get_niveles();
					$datos['carreras'] = $this->academico_model->get_carreras();
					$datos['modalidades'] = $this->academico_model->get_modalidades();
					$datos['periodos'] = $this->academico_model->getPeriodos();
					$datos['ID_PERIODO_ACADEMICO'] = $this->academico_model->get_periodo_activado();
					$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
					$justificar=0;
					if($this->academico_model->verificar_usuario_funcionalidad($idusuario,96)){
						$justificar=1;
					}
					if($this->session->userdata('loggeado')['ID_PERFIL']==5){
						$id_cliente=$this->academico_model->get_id_cliente($this->session->userdata('loggeado')['ID_PERSONA']);
						$datos['matricula'] = $this->academico_model->obtener_datos_matricula($id_cliente);
					}
					$datos['justificar']=$justificar;
					$datos1=$this->perfil_model->cabecera($idusuario);
					$this->load->view('templates/header',$datos1);
					$this->load->view('gestionJustificacionAsistencia',$datos);
					$this->load->view('templates/footer');
				}
			}else{
				redirect('admin/login', 'refresh');
			}
		}

		//////////////////////////////////////////////////////////////////
		public function justificaAsistenciaMaterias($id_persona,$id_grupo,$id_nivel,$id_carrera,$id_periodo_academico)
		{
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,80)){
				$datos=array();
				$datos= $this->academico_model->buscar_estdiante_calificado($id_persona,$id_grupo,$id_nivel,$id_carrera,$id_periodo_academico);
				$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
				$datos1=$this->perfil_model->cabecera($idusuario);
				$datos['id_persona']=$id_persona;
				$datos['id_nivel']=$id_nivel;
				$datos['id_carrera']=$id_carrera;
				$datos['id_periodo_academico']=$id_periodo_academico;
				$this->load->view('justificacion_asistencia',$datos);
			}else{
				redirect('admin/login', 'refresh');
			}
		}

	////////////////////////////////////////////////////////////////////////////
	public function pases_nivel_alumno()
	{
		if($this->session->userdata('loggeado')){
			$datos=array();
			$pases_nivel=trim($this->input->post('pases_nivel'),'_');
			$pases=explode('_',$pases_nivel);
			foreach($pases as $k=>$pase){
				$dat=explode('+',$pase);
				$id_persona = $dat[0];
				$id_grupo   = $dat[1];
				$id_nivel   = $dat[2];
				$id_carrera = $dat[3];
				$id_periodo_academico    = $dat[4];
				$datos[$k] = $this->academico_model->buscar_certificado_estudiante($id_persona,$id_grupo,$id_nivel,$id_carrera,$id_periodo_academico);
				$datos[$k]['id_persona'] = $dat[0];
				$datos[$k]['id_nivel']   = $dat[2];
				$datos[$k]['id_carrera'] = $dat[3];
				$datos[$k]['id_periodo_academico'] = $dat[4];
				//verificar si estudiante aprobo pensum carrera
				$materias  = $this->academico_model->get_materias_estudiante($id_persona,0,1,$id_periodo_academico);//todas las materias del alumno hasta el periodo de consulta
				$pensum_nivel = $this->academico_model->getMateriasPorCarreraNivel($id_carrera,$id_nivel);
				$todo_nivel   = 0;
				foreach($pensum_nivel as $pn){
					foreach($materias as $m){
						$aprobo=0;
						if($m['FUE_HOMOLOGADA']==1 or $m['FUE_CONVALIDADA']==1 or $m['FUE_HISTORIAL']==1){
							$aprobo=1;
						}else{
							$estado=$this->academico_model->get_calificaciones(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$m['ID_ESTUDIANTE_CARRERA_MATERIA'],'ID_TIPO_CALIFICACION'=>6));
							if(isset($estado[0]) and $estado[0]['ESTADO_CALIFICACION']==1){
								$aprobo=1;
							}
						}
						if($pn['ID_CARRERA_MATERIA']==$m['ID_CARRERA_MATERIA'] and $aprobo==1){
							$todo_nivel=$todo_nivel+1;
						}
					}
				}
				$aprobo_nivel     = 0;
				$aun_por_aprobar  = count($pensum_nivel)-$todo_nivel;
				if($aun_por_aprobar<=2){
					$aprobo_nivel = 1;
				}
				$datos[$k]['aprobo_nivel'] = $aprobo_nivel;
				//////////////DOCUMENTO ACADEMICO////////////////
					$data['ID_PERSONA']           = $datos[$k]['id_persona'];
					$data['ID_NIVEL']             = $datos[$k]['id_nivel'];
					$data['ID_CARRERA']           = $datos[$k]['id_carrera'];
					$data['ID_PERIODO_ACADEMICO'] = $datos[$k]['id_periodo_academico'];
					$data['matricula'] = $this->academico_model->obtener_matricula($data);
					$consultarCodigo   = true;
					$prefijoDocumento  = $this->academico_model->buscarTipoDocumento(array('ID_TIPO_DOCUMENTO'=>5));
					$certificado       = "";
					$dataCertificado['CODIGO_DOCUMENTO']         = $prefijoDocumento['PREFIJO_DOCUMENTO']."-".$this->generarCodigo(6);
					while ($consultarCodigo) {
						$consultarCodigo                         = $this->academico_model->consultarCodigo($dataCertificado['CODIGO_DOCUMENTO']);
						if ($consultarCodigo == true) {
							$dataCertificado['CODIGO_DOCUMENTO'] = $prefijoDocumento['PREFIJO_DOCUMENTO']."-".$this->generarCodigo(6);
						}
					}
					$dataCertificado['ID_MATRICULA']      = $data['matricula']['ID_MATRICULA'];
					$dataCertificado['ID_TIPO_DOCUMENTO'] = $prefijoDocumento['ID_TIPO_DOCUMENTO'];
					$dataCertificado['FECHA_GENERACION']  = date('Y-m-d H:i:s');
					$dataCertificado['NUM_DESCARGAS']     = 1;
					$dataCertificado['FECHA_ULTIMA_DESCARGA']     = date('Y-m-d H:i:s');
					$dataCertificado['NUM_VERIFICACIONES']        = 1;
					$dataCertificado['FECHA_ULTIMA_VERIFICACION'] = date('Y-m-d H:i:s');
					$dataCertificado['PANTALLA_ULTIMA_DESCARGA']  = 1;
					$dataCertificado['ID_USUARIO']                = $this->session->userdata('loggeado')['ID_USUARIO'];
					$dataCertificado['NOMBRE_ARCHIVO_PDF']        = time().$dataCertificado['CODIGO_DOCUMENTO'].".pdf";
					//crear
					$ID_DOCUMENTO_ACADEMICO    = $this->academico_model->crearDocumentoAcademico($dataCertificado);
				/////////////////////////////////////////////////
				$datos[$k]['cert_paseNivel'] = $dataCertificado;
			}
			$this->load->view('pases_nivel_alumnos',array('datos'=>$datos));
		}else{
			redirect('admin/login', 'refresh');
		}
	}

	///////////////////////////////////////////////////////////////
	public function calificar_estudiantes()
	{
		if($this->session->userdata('loggeado')){
			$this->load->module('facturacion/facturacion');

			$estudiantes_carrera_materia = trim($this->input->post('estudiantes_carrera_materia'),',');
			$etapa  = trim($this->input->post('etapa'));
			//$cadena_componente  = trim($this->input->post('cadena_componente'),'+');
			$cadena_componente  = $this->input->post('cadena_componente');
			//$cadena_valor  = trim($this->input->post('cadena_valor'),'+');
			$cadena_valor  = $this->input->post('cadena_valor');
			$promedio_etapa  = $this->input->post('cadena_promedio');
			$etapas  = trim($this->input->post('etapas'));
			////////////////

			$estudiantes = explode(',',$estudiantes_carrera_materia);
			$componentes = explode('+',$cadena_componente);
			$valores     = explode('+',$cadena_valor);
			$promedios   = explode('+',$promedio_etapa);

			$carrera_materia_copia = "";
			$personas_copia        = "";
			$periodos_copia        = "";
			$estudiantes_carrera_materia_copia = "";

			///////////////////////////////////PROCESAMIENTO DE COPIA//////////////////////////////////////
				$ch  = curl_init();

				$url = $this->url_copia . 'calificar_estudiantes/';

				curl_setopt($ch, CURLOPT_URL, $url);

				foreach ($estudiantes as $index => $estudiante_carrera_meteria) {
					$datos_EstudianteCarreraMateria     = $this->academico_model->buscarEstudianteCarreraMateria($estudiante_carrera_meteria);
					$carrera_materia_copia .= $datos_EstudianteCarreraMateria['ID_CARRERA_MATERIA'].",";
					$personas_copia .= $datos_EstudianteCarreraMateria['ID_PERSONA'].",";
					$periodos_copia .= $datos_EstudianteCarreraMateria['ID_PERIODO_ACADEMICO'].",";
				}
				// $data_copia['estudiantes_carrera_materia']       = trim($this->input->post('estudiantes_carrera_materia'),',');
				$data_copia['carrera_materia_copia'] = trim($carrera_materia_copia,',');
				$data_copia['personas_copia']        = trim($personas_copia,',');
				$data_copia['periodos_copia']        = trim($periodos_copia,',');
				$data_copia['etapa']                 = trim($this->input->post('etapa'));
				$data_copia['cadena_componente']     = $this->input->post('cadena_componente');
				$data_copia['cadena_valor']          = $this->input->post('cadena_valor');
				$data_copia['cadena_promedio']       = $this->input->post('cadena_promedio');
				$data_copia['etapas']                = trim($this->input->post('etapas'));

				$data_copia['data_log']              = $this->session->userdata()['loggeado']["ID_USUARIO"];
				$data_copia['periodo_activo']        = $this->academico_model->get_periodo_activado();
				$elements = $data_copia;

				curl_setopt($ch, CURLOPT_POST,true);
				// curl_setopt($ch, CURLOPT_POSTFIELDS, $elements);
				// curl_setopt($ch, CURLOPT_HEADER, false);
				// curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode(array($elements)));
				curl_setopt($ch, CURLOPT_POSTFIELDS, $elements);
				curl_setopt($ch, CURLOPT_HEADER, false);
				// curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json'));
				curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);
				$resultado = curl_exec($ch);
				$error     = curl_error($ch);
				curl_close($ch);
			/////////////////////////////////////////////////////////////////////////

			foreach($estudiantes as $k=>$estudiante_carrera_meteria){
				if(isset($componentes[$k])){
					$componentes[$k] = trim($componentes[$k],'&');
					$valores[$k]     = trim($valores[$k],'&');
					if(isset($componentes[$k]) and $componentes[$k]!=''){
						$this->academico_model->calificar_componentes($estudiante_carrera_meteria, $etapa,$componentes[$k],$valores[$k],$promedios[$k],$etapas);

					}
				}
			}
			echo json_encode(true);




			// $data_copia['resultado'] = $resultado;
			// echo json_encode($resultado);
			// print_r($resultado);
			// print_r($this->session->userdata());
		}else{
			redirect('admin/login', 'refresh');
		}
	}

	//////////////////////////////////////////////////////////////
	public function periodosCalificacion()
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,81)){
			$periodo= $this->academico_model->get_periodo_activado();
			$datos=array();
			$materias = $this->academico_model->buscar_grupos_calificar(NULL, NULL, NULL,NULL,1);
			$materias_adicionales=array();
			foreach($materias as $key=>$materia){
				//if($this->academico_model->verificar_si_tiene_estudiantes($materia)==0){
					//unset($materias[$key]);
				//}else{
					//$fechaCierre=$this->academico_model->get_fecha_cierre(array('GRUPO'=>$materia['GRUPO'],'MATERIA'=>$materia['MATERIA'],'ID_PERIODO_ACADEMICO'=>$periodo));
					$fechaCierre=$this->academico_model->get_fecha_cierre(array('ID_GRUPO'=>$materia['ID_GRUPO'],'ID_MATERIA'=>$materia['ID_MATERIA'],'ID_PERIODO_ACADEMICO'=>$periodo));
					$materias[$key]['id_plantilla']=0;
					if(count($fechaCierre)>0){
						if(isset($fechaCierre['FECHA_CIERRE'])){
							$materias[$key]['fecha_cierre']=$fechaCierre['FECHA_CIERRE'];
							$materias[$key]['fecha_aplazo']=$fechaCierre['FECHA_APLAZADO'];
							$materias[$key]['motivo']=$fechaCierre['MOTIVO'];
							$materias[$key]['id_plantilla']=$fechaCierre['ID_PLANTILLA'];
						}else{
							$materia_temp=$materia['MATERIA'];
							foreach($fechaCierre as $j=>$fc){
								$plantilla=$this->academico_model->get_plantilla($fc['ID_PLANTILLA']);
								$nombre_materia=$materia_temp;
								if($plantilla!=NULL){
									$nombre_materia.='<br><span style="color:#337ab7; font-size:11px">'.$plantilla['PLANTILLA'].'</span>';
								}
								if($j==0){
									$materias[$key]['fecha_cierre']=$fc['FECHA_CIERRE'];
									$materias[$key]['fecha_aplazo']=$fc['FECHA_APLAZADO'];
									$materias[$key]['motivo']=$fc['MOTIVO'];
									$materias[$key]['id_plantilla']=$fc['ID_PLANTILLA'];
									$materias[$key]['MATERIA']=$nombre_materia;
								}else{
									$materia['fecha_cierre']=$fc['FECHA_CIERRE'];
									$materia['fecha_aplazo']=$fc['FECHA_APLAZADO'];
									$materia['motivo']=$fc['MOTIVO'];
									$materia['id_plantilla']=$fc['ID_PLANTILLA'];
									$materia['MATERIA']=$nombre_materia;
									$materias_adicionales[]=$materia;
								}
							}
						}
					}
				//}
			}
			//$datos['materias'] = $materias;
			$datos['grupos'] = array_merge($materias,$materias_adicionales);
			$datos['id_persona'] =  0;
			$datos1=$this->perfil_model->cabecera($idusuario);
			$this->load->view('templates/header',$datos1);
			$this->load->view('periodosCalificacion',$datos);
			$this->load->view('templates/footer');
		}else{
			redirect('admin/login', 'refresh');
		}
	}

	//////////////////////////////////////////////////////////////
	public function guardaFechaCierre()
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,81)){
			$data['ID_GRUPO']= trim($this->input->post('id_grupo'));
			//$data['GRUPO']= trim($this->input->post('grupo'));
			$ids= trim($this->input->post('id_materia'));
			$ids=explode('_',$ids);
			$data['ID_MATERIA']= $ids[0];
			$data['ID_PLANTILLA']= $ids[1];
			//$data['MATERIA']= trim($this->input->post('materia'));
			$data['FECHA_APLAZADO']= trim($this->input->post('fecha'));
			$data['MOTIVO']= trim($this->input->post('motivo'));
			$data['ID_PERIODO_ACADEMICO']= $this->academico_model->get_periodo_activado();
			$fechaCierre=$this->academico_model->get_fecha_cierre(array('ID_GRUPO'=>$data['ID_GRUPO'],'ID_MATERIA'=>$data['ID_MATERIA'],'ID_PERIODO_ACADEMICO'=>$data['ID_PERIODO_ACADEMICO'],'ID_PLANTILLA'=>$data['ID_PLANTILLA']));
			if(count($fechaCierre)<=0){
				$this->academico_model->crear_fecha_cierre($data);
				$resultado='Fecha Creada';
			}else{
				$this->academico_model->actualizar_fecha_cierre($data,$fechaCierre['ID_CIERRE_CALIFICACION']);
				$resultado='Fecha Actualizada';
			}
			echo $resultado;
		}else{
			echo 'Acceso Denegado';
		}
	}

	///////////////////////////////////////////////////
	public function bloquearMateria()
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,82)){
			$id_estudiante_carrera_materia = trim($this->input->post('id_estudiante_carrera_materia'));
			$valor = trim($this->input->post('valor'));
			if($id_estudiante_carrera_materia!=NULL and $id_estudiante_carrera_materia>0){
				$this->academico_model->actualizar_acad_estudiante_carrera_materia(array('BLOQUEO_CALIFICACION'=>$valor),$id_estudiante_carrera_materia);
				if($valor==0){
					echo '<input type="button" class="btn btn-primary btn-xs" value="Bloquear" onClick="procesar_bloqueo(\''.$id_estudiante_carrera_materia.'\',\'1\')">';
				}else{
					echo '<input type="button" class="btn btn-info btn-xs" value="Desbloquear" style="color:#000000" onClick="procesar_bloqueo(\''.$id_estudiante_carrera_materia.'\',\'0\')">';
				}
			}else{
				$datos=array();
				$datos['niveles'] = $this->academico_model->get_niveles();
				$datos['carreras'] = $this->academico_model->get_carreras();
				$datos['modalidades'] = $this->academico_model->get_modalidades();
				$datos['periodos'] = $this->academico_model->getPeriodos();
				$datos['ID_PERIODO_ACADEMICO'] = $this->academico_model->get_periodo_activado();
				$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
				$datos1=$this->perfil_model->cabecera($idusuario);
				$this->load->view('templates/header',$datos1);
				$this->load->view('busqueda_bloqueo_materia_alumnos',$datos);
				$this->load->view('templates/footer');
			}
		}else{
			redirect('admin/login', 'refresh');
		}
	}

	//////////////////////////////////////////////////////////////////
	public function bloqueoMateriasEstudiante($id_persona,$id_grupo,$id_nivel,$id_carrera,$id_periodo_academico)
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,82)){
			$datos=array();
			$datos= $this->academico_model->buscar_estdiante_calificado($id_persona,$id_grupo,$id_nivel,$id_carrera,$id_periodo_academico);
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			$datos1=$this->perfil_model->cabecera($idusuario);
			$datos['id_persona']=$id_persona;
			$datos['id_nivel']=$id_nivel;
			$datos['id_carrera']=$id_carrera;
			$datos['id_periodo_academico']=$id_periodo_academico;
			$this->load->view('bloqueo_materia_estudiante',$datos);
		}else{
			redirect('admin/login', 'refresh');
		}
	}

	/////////////////////////////////////////////////////////////////////////
	//funcion que guarda la nota de componente examen enviada desde un sistema externo
	public function promedio_examen()
	{
		$this->load->model('admin/usuarios_model');
		$this->load->module('admin/login');
		$ip=$_SERVER['REMOTE_ADDR'];
		$id_carrera = trim($this->input->post('id_carrera'));
		$id_materia = trim($this->input->post('id_materia'));
		$cedula = trim($this->input->post('cedula'));
		$nota = trim($this->input->post('calificacion'));
		$cedula_docente = trim($this->input->post('cedula_docente'));
		$res='';
		$this->session->set_userdata('loggeado', array('ID_USUARIO'=>0));
		//if ($ip=='158.69.60.207' or $ip=='186.71.53.194' or $ip=='::1' or $ip=='200.58.110.26')
		//{
			//$id_periodo_academico = $this->academico_model->get_periodo_activado();
			$id_periodo_academico = 11;
			$usuario=$this->usuarios_model->verificar_usuario_cedula($cedula);
			$materias=$this->academico_model->get_materias_estudiante($usuario['ID_PERSONA'],$id_periodo_academico);

			$id_materias=$this->academico_model->get_materias_conversion($id_materia);
			$vector_materias=explode('+',$id_materias);
			$estudiante_carrera_materia=0;
			$id_grupo=0;
			$id_carrera_materia=0;
			$asistencia_justificada=0;
			$periodo_academico = 0;
			$id_docente     = 0;
			$homologado     = 0;
			$convalidado     = 0;
			$historial     = 0;
			foreach($materias as $materia){
				//if($materia['ID_CARRERA_MATERIA']==$id_materia){
				if(in_array($materia['ID_CARRERA_MATERIA'],$vector_materias)){
					$estudiante_carrera_materia = $materia['ID_ESTUDIANTE_CARRERA_MATERIA'];
					$id_grupo                   = $materia['ID_GRUPO'];
					$id_carrera_materia         = $materia['ID_CARRERA_MATERIA'];
					$asistencia_justificada     = $materia['ASISTENCIA_JUSTIFICADA'];
					$periodo_academico          = $materia['ID_PERIODO_ACADEMICO'];
					$id_docente          = $materia['ID_PERSONA_DOCENTE'];
					$homologado          = $materia['FUE_HOMOLOGADA'];
					$convalidado          = $materia['FUE_CONVALIDADA'];
					$historial          = $materia['FUE_HISTORIAL'];
				}
			}
			///////////////////////////////////PROCESAMIENTO DE COPIA//////////////////////////////////////
				$ch  = curl_init();
				$url = $this->url_copia . 'promedio_examen/';
				curl_setopt($ch, CURLOPT_URL, $url);
				// $data_copia['estudiante_carrera_materia'] = $estudiante_carrera_materia;
				$data_copia['id_grupo']                   = $id_grupo;
				$data_copia['id_carrera_materia']         = $id_carrera_materia;
				$data_copia['asistencia_justificada']     = $asistencia_justificada;
				$data_copia['id_persona']                 = $usuario['ID_PERSONA'];
				$data_copia['id_periodo_academico']       = $id_periodo_academico;
				$data_copia['calificacion']               = $nota;
				$elements                                 = $data_copia;
				curl_setopt($ch, CURLOPT_POST,true);
				// curl_setopt($ch, CURLOPT_POSTFIELDS, $elements);
				// curl_setopt($ch, CURLOPT_HEADER, false);
				// curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode(array($elements)));
				curl_setopt($ch, CURLOPT_POSTFIELDS, $elements);
				curl_setopt($ch, CURLOPT_HEADER, false);
				// curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json'));
				curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);
				$resultado = curl_exec($ch);
				$error     = curl_error($ch);
				curl_close($ch);
			/////////////////////////////////////////////////////////////////////////
			//verificar periodo de calificacion
			$v_grupo=$this->academico_model->get_grupo($id_grupo);
			$grupo=$v_grupo['NOMBRE'];
			$v_materia=$this->academico_model->obtener_datos_materia($id_carrera_materia);
			$materia=$v_materia['NOMBRE'];
			$fechaCierre=$this->academico_model->get_fecha_cierre(array('ID_GRUPO'=>$id_grupo,'ID_MATERIA'=>$id_carrera_materia,'ID_PERIODO_ACADEMICO'=>$id_periodo_academico));
			$calificacion_cerrada=0;
			/*if(count($fechaCierre)>0){
				if($fechaCierre['FECHA_APLAZADO']!='0000-00-00'){
					$datetime1 = date_create($fechaCierre['FECHA_APLAZADO'].' 23:59:59');
				}else{
					$datetime1 = date_create($fechaCierre['FECHA_CIERRE'].' 23:59:59');
				}
				$datetime2 = date_create(date('Y-m-d H:i:s'));
				if($datetime1<$datetime2){
					$calificacion_cerrada=1;
				}
			}*/
			if($nota!='' and $nota>=0 and $nota<=10){
				if($calificacion_cerrada==0){
					if($homologado==0 and $convalidado==0 and $historial==0){
						$etapa=1;
						$cadena_componente='3';//id componente examen
						$cadena_valor=$nota;
						$componentes=$this->academico_model->get_componentes();
						foreach($componentes as $v){
							$componente[$v['ID_COMPONENTE']]=$v['VALOR'];
							if($asistencia_justificada==1 and $v['ID_COMPONENTE']==3){
								$componente[$v['ID_COMPONENTE']]=$v['VALOR']*2;
							}
							if($asistencia_justificada==1 and $v['ID_COMPONENTE']==2){
								$componente[$v['ID_COMPONENTE']]=0;//si esta con asistencia justificada taller vale cero
							}
						}
						$op['ID_ESTUDIANTE_CARRERA_MATERIA']=$estudiante_carrera_materia;
						$op['ID_TIPO_CALIFICACION']=1;
						$op['ETAPA']=1;
						$notas_componente=$this->academico_model->get_calificaciones($op);
						$nota_etapa=0;
						$num_componentes=count($componentes)-1;//total componentes menos el componente examen
						$num_componentes_calificados=0;//total componentes ya calificados
						foreach($notas_componente as $nc){
							if($nc['ID_COMPONENTE']!=3){//si no es componente de examen
								if($nc['CALIFICACION']!=NULL and $nc['CALIFICACION']!=''){
									$nota_etapa=$nota_etapa+$nc['CALIFICACION']*$componente[$nc['ID_COMPONENTE']]/10;
									$num_componentes_calificados=$num_componentes_calificados+1;
								}
							}
							/*if($nc['ID_COMPONENTE']==3){//calificacion componente examen
								$componente_examen=$nc['CALIFICACION'];
							}*/
						}
						//calificacion componente examen
						$componente_examen=$nota;
						//if(count($componentes)==count($notas_componente)){
						$asistencia=$this->academico_model->get_asistencia_materia($estudiante_carrera_materia);
						$supletorio=$this->academico_model->get_supletorio_materia($estudiante_carrera_materia);
						if($supletorio<0){
							$supletorio='';
						}
						$estado='';
						if($num_componentes==$num_componentes_calificados and $asistencia>=0 and $nota!=''){
							$nota_final=$nota_etapa+$nota*$componente[3]/10;
							$v_notamin=$this->academico_model->getparametro(utf8_encode('Nota m�nima'));
							$notamin=$v_notamin['VALOR'];
							$v_notamax=$this->academico_model->getparametro(utf8_encode('Nota m�xima'));
							$notamax=$v_notamax['VALOR'];
							$min_componente_examen=5;
							$v_notamax_asis=$this->academico_model->getparametro('Asistencia');
							$notamax_asis=$v_notamax_asis['VALOR'];
							$v_notamin_asis=$this->academico_model->getparametro('Asistencia minima');
							$notamin_asis=$v_notamin_asis['VALOR'];
							$v_nota_pierde=$this->academico_model->getparametro('Nota pierde');
							$nota_pierde=$v_nota_pierde['VALOR'];
							//calcular estado materia
							if($nota_final>=$notamin && $nota_final<=$notamax && $componente_examen>=$min_componente_examen){
								if($asistencia>=$notamax_asis){
									$estado=1;
								}elseif($asistencia>=$notamin_asis && $asistencia<$notamax_asis){
									$estado='0';
								}else{
									$estado=2;
								}
							}elseif(($nota_final>=$nota_pierde && $nota_final<$notamin) or ($componente_examen<$min_componente_examen && $nota_final>=$nota_pierde)){
								if($asistencia>=$notamax_asis){
									$estado='0';
								}elseif($asistencia>=$notamin_asis && $asistencia<$notamax_asis && $componente_examen>=$min_componente_examen){
									$estado='0';
								}else{
									$estado=2;
								}
							}elseif($nota_final<$nota_pierde){
								$estado=2;
							}
							//$this->academico_model->updatePromediototal($estudiante_carrera_materia,$nota_etapa,$nota_etapa,$asistencia,$estado);

							if($supletorio!=''){
								$nota_final=round(($nota_final+$supletorio)/2,2);
								if($nota_final>=$notamin){
									$estado=1;
								}else{
									$estado=2;
								}
							}
							$this->academico_model->updateAsistenciaSupletorioNotaFinal($estudiante_carrera_materia,$asistencia,$supletorio,$nota_final,$estado,$id_periodo_academico);

						}else{
							$nota_final='';
							if($asistencia<0){
								$asistencia='';
							}
							$supletorio='';
							$estado=-1;
							$this->academico_model->updateAsistenciaSupletorioNotaFinal($estudiante_carrera_materia,$asistencia,$supletorio,$nota_final,$estado,$id_periodo_academico);
						}

						/////enviar supletorio a VLC//////////
						if($estado==0){
							$supletorio_vlc=$this->academico_model->get_estudiante_supletorio($estudiante_carrera_materia);
							if($supletorio_vlc==NULL or $supletorio_vlc['ID_SUPLETORIO_VLC']==0){
								if($supletorio_vlc==NULL){
									$this->academico_model->crear_estudiante_supletorio(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$estudiante_carrera_materia));
								}
								$this->sendSupletorioVlc($estudiante_carrera_materia,'crear');
							}
						}elseif($estado>0 and ($supletorio=='' or $supletorio==NULL)){
							$supletorio_vlc=$this->academico_model->get_estudiante_supletorio($estudiante_carrera_materia);
							if($supletorio_vlc!=NULL){
								$this->sendSupletorioVlc($estudiante_carrera_materia,'borrar');
								$this->academico_model->borrar_estudiante_supletorio($estudiante_carrera_materia);
							}
						}

						$etapas=1;
						if($estudiante_carrera_materia>0){
							if($num_componentes==$num_componentes_calificados and $nota!=''){
								$nota_etapa=$nota_etapa+$nota*$componente[3]/10;
							}else{
								$nota_etapa='';
							}
							$this->academico_model->calificar_componentes($estudiante_carrera_materia, $etapa,$cadena_componente,$cadena_valor,$nota_etapa,$etapas,$id_periodo_academico);
							$res= 'Registro Realizado';
						}else{
							$res= 'Error:Materia No Existe';
						}
					}else{
						$res='Error:Materia fue HCH';
					}
				}else{
					$res= 'Error:Periodo Cerrado';
				}
			}else{
				$res= 'Error:Calificacion Incorrecta';
			}
			if(count($materias)<=0){
				$res='Estudiante No Matriculado';
			}elseif($id_docente!=NULL){
				$doc_docente = $this->academico_model->get_datos_persona($id_docente);
				if($doc_docente!=NULL and $doc_docente['CEDULA']!=$cedula_docente){
					$res.=':Docente Incorrecto';
				}
			}
			//guardar log vlc
			$dat=array();
			$dat['IP']=$ip;
			$dat['ID_MATERIA']=$id_materia;
			$dat['CALIFICACION']=$nota;
			$dat['CEDULA_ESTUDIANTE']=$cedula;
			$dat['FECHA']=date('Y-m-d H:i:s');
			$dat['ESTADO']=$res;
			$dat['CEDULA_DOCENTE']=$cedula_docente;
			$dat['TIPO']='Examen';
			$this->academico_model->crearLogVlc($dat);
			if(stripos($res, 'Registro Realizado')!== false){
				http_response_code(200);
			}else{
				http_response_code(422);
			}
			echo $res;

		//}else{
		//	echo 'Acceso Denegado';
		//}
	}

	/////////////////////////////////////////////////////////////////////////
	//funcion que guarda la nota de componente taller enviada desde un sistema externo
	public function promedio_taller()
	{
		$this->load->model('admin/usuarios_model');
		$this->load->module('admin/login');
		$ip=$_SERVER['REMOTE_ADDR'];
		$id_carrera = trim($this->input->post('id_carrera'));
		$id_materia = trim($this->input->post('id_materia'));
		$cedula = trim($this->input->post('cedula'));
		$nota = trim($this->input->post('calificacion'));
		$cedula_docente = trim($this->input->post('cedula_docente'));
		$res='';
		$this->session->set_userdata('loggeado', array('ID_USUARIO'=>0));

		//if ($ip=='158.69.60.207' or $ip=='186.71.53.194' or $ip=='::1' or $ip=='200.58.110.26')
		//{
			//$id_periodo_academico = $this->academico_model->get_periodo_activado();
			$id_periodo_academico = 11;
			$usuario              = $this->usuarios_model->verificar_usuario_cedula($cedula);
			$materias             = $this->academico_model->get_materias_estudiante($usuario['ID_PERSONA'],$id_periodo_academico);

			$id_materias=$this->academico_model->get_materias_conversion($id_materia);
			$vector_materias=explode('+',$id_materias);
			$estudiante_carrera_materia = 0;
			$id_grupo                   = 0;
			$id_carrera_materia         = 0;
			$asistencia_justificada     = 0;
			$id_docente     = 0;
			$homologado     = 0;
			$convalidado     = 0;
			$historial     = 0;
			foreach($materias as $materia){
				//if($materia['ID_CARRERA_MATERIA']==$id_materia){
				if(in_array($materia['ID_CARRERA_MATERIA'],$vector_materias)){
					$estudiante_carrera_materia = $materia['ID_ESTUDIANTE_CARRERA_MATERIA'];
					$id_grupo                   = $materia['ID_GRUPO'];
					$id_carrera_materia         = $materia['ID_CARRERA_MATERIA'];
					$asistencia_justificada     = $materia['ASISTENCIA_JUSTIFICADA'];
					$periodo_academico          = $materia['ID_PERIODO_ACADEMICO'];
					$id_docente          = $materia['ID_PERSONA_DOCENTE'];
					$homologado          = $materia['FUE_HOMOLOGADA'];
					$convalidado          = $materia['FUE_CONVALIDADA'];
					$historial          = $materia['FUE_HISTORIAL'];
				}
			}
			// print_r($materias);
			// 	echo "<br>";
			///////////////////////////////////PROCESAMIENTO DE COPIA//////////////////////////////////////
				$ch  = curl_init();
				$url = $this->url_copia . 'promedio_taller/';
				curl_setopt($ch, CURLOPT_URL, $url);
				// $data_copia['estudiante_carrera_materia'] = $estudiante_carrera_materia;
				$data_copia['id_grupo']                   = $id_grupo;
				$data_copia['id_carrera_materia']         = $id_carrera_materia;
				$data_copia['asistencia_justificada']     = $asistencia_justificada;
				$data_copia['id_persona']                 = $usuario['ID_PERSONA'];
				$data_copia['id_periodo_academico']       = $id_periodo_academico;
				$data_copia['calificacion']               = $nota;
				$elements                                 = $data_copia;
				curl_setopt($ch, CURLOPT_POST,true);
				// curl_setopt($ch, CURLOPT_POSTFIELDS, $elements);
				// curl_setopt($ch, CURLOPT_HEADER, false);
				// curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode(array($elements)));
				curl_setopt($ch, CURLOPT_POSTFIELDS, $elements);
				curl_setopt($ch, CURLOPT_HEADER, false);
				// curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json'));
				curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);
				$resultado = curl_exec($ch);
				$error     = curl_error($ch);
				curl_close($ch);
			/////////////////////////////////////////////////////////////////////////
			//verificar periodo de calificacion
			$v_grupo=$this->academico_model->get_grupo($id_grupo);
			$grupo=$v_grupo['NOMBRE'];
			$v_materia=$this->academico_model->obtener_datos_materia($id_carrera_materia);
			$materia=$v_materia['NOMBRE'];
			$fechaCierre=$this->academico_model->get_fecha_cierre(array('ID_GRUPO'=>$id_grupo,'ID_MATERIA'=>$id_carrera_materia,'ID_PERIODO_ACADEMICO'=>$id_periodo_academico));
			$calificacion_cerrada=0;
			/*if(count($fechaCierre)>0){
				if($fechaCierre['FECHA_APLAZADO']!='0000-00-00'){
					$datetime1 = date_create($fechaCierre['FECHA_APLAZADO'].' 23:59:59');
				}else{
					$datetime1 = date_create($fechaCierre['FECHA_CIERRE'].' 23:59:59');
				}
				$datetime2 = date_create(date('Y-m-d H:i:s'));
				if($datetime1<$datetime2){
					$calificacion_cerrada=1;
				}
			}*/

			if($nota!='' and $nota>=0 and $nota<=10){
				if($calificacion_cerrada==0){
					if($homologado==0 and $convalidado==0 and $historial==0){
						$etapa=1;
						$cadena_componente='2';//id componente taller
						$cadena_valor=$nota;
						$componentes=$this->academico_model->get_componentes();
						foreach($componentes as $v){
							$componente[$v['ID_COMPONENTE']]=$v['VALOR'];
							if($asistencia_justificada==1 and $v['ID_COMPONENTE']==3){
								$componente[$v['ID_COMPONENTE']]=$v['VALOR']*2;
							}
							if($asistencia_justificada==1 and $v['ID_COMPONENTE']==2){
								$componente[$v['ID_COMPONENTE']]=0;//si esta con asistencia justificada
							}
						}
						$op['ID_ESTUDIANTE_CARRERA_MATERIA']=$estudiante_carrera_materia;
						$op['ID_TIPO_CALIFICACION']=1;
						$op['ETAPA']=1;
						$notas_componente=$this->academico_model->get_calificaciones($op);
						$nota_etapa=0;
						$num_componentes=count($componentes)-1;//total componentes menos el componente taller
						$num_componentes_calificados=0;//total componentes ya calificados
						foreach($notas_componente as $nc){
							if($nc['ID_COMPONENTE']!=2){//si no es componente de taller
								if($nc['CALIFICACION']!=NULL and $nc['CALIFICACION']!=''){
									$nota_etapa=$nota_etapa+$nc['CALIFICACION']*$componente[$nc['ID_COMPONENTE']]/10;
									$num_componentes_calificados=$num_componentes_calificados+1;
								}
							}
							if($nc['ID_COMPONENTE']==3){//calificacion componente examen
								$componente_examen=$nc['CALIFICACION'];
							}
						}
						//if(count($componentes)==count($notas_componente)){
						$asistencia=$this->academico_model->get_asistencia_materia($estudiante_carrera_materia);
						$supletorio=$this->academico_model->get_supletorio_materia($estudiante_carrera_materia);
						if($supletorio<0){
							$supletorio='';
						}
						$estado='';
						if($num_componentes==$num_componentes_calificados and $asistencia>=0 and $nota!=''){
							$nota_final=$nota_etapa+$nota*$componente[2]/10;
							$v_notamin=$this->academico_model->getparametro(utf8_encode('Nota m�nima'));
							$notamin=$v_notamin['VALOR'];
							$v_notamax=$this->academico_model->getparametro(utf8_encode('Nota m�xima'));
							$notamax=$v_notamax['VALOR'];
							$min_componente_examen=5;
							$v_notamax_asis=$this->academico_model->getparametro('Asistencia');
							$notamax_asis=$v_notamax_asis['VALOR'];
							$v_notamin_asis=$this->academico_model->getparametro('Asistencia minima');
							$notamin_asis=$v_notamin_asis['VALOR'];
							$v_nota_pierde=$this->academico_model->getparametro('Nota pierde');
							$nota_pierde=$v_nota_pierde['VALOR'];
							//calcular estado materia
							if($nota_final>=$notamin && $nota_final<=$notamax && $componente_examen>=$min_componente_examen){
								if($asistencia>=$notamax_asis){
									$estado=1;
								}elseif($asistencia>=$notamin_asis && $asistencia<$notamax_asis){
									$estado='0';
								}else{
									$estado=2;
								}
							}elseif(($nota_final>=$nota_pierde && $nota_final<$notamin) or ($componente_examen<$min_componente_examen && $nota_final>=$nota_pierde)){
								if($asistencia>=$notamax_asis){
									$estado='0';
								}elseif($asistencia>=$notamin_asis && $asistencia<$notamax_asis && $componente_examen>=$min_componente_examen){
									$estado='0';
								}else{
									$estado=2;
								}
							}elseif($nota_final<$nota_pierde){
								$estado=2;
							}
							//$this->academico_model->updatePromediototal($estudiante_carrera_materia,$nota_etapa,$nota_etapa,$asistencia,$estado);
							if($supletorio!=''){
								$nota_final=round(($nota_final+$supletorio)/2,2);
								if($nota_final>=$notamin){
									$estado=1;
								}else{
									$estado=2;
								}
							}
							$this->academico_model->updateAsistenciaSupletorioNotaFinal($estudiante_carrera_materia,$asistencia,$supletorio,$nota_final,$estado,$id_periodo_academico);
						}else{
							$nota_final='';
							if($asistencia<0){
								$asistencia='';
							}
							$supletorio='';
							$estado=-1;
							$this->academico_model->updateAsistenciaSupletorioNotaFinal($estudiante_carrera_materia,$asistencia,$supletorio,$nota_final,$estado,$id_periodo_academico);
						}

						/////enviar supletorio a VLC//////////
						if($estado==0){
							$supletorio_vlc=$this->academico_model->get_estudiante_supletorio($estudiante_carrera_materia);
							if($supletorio_vlc==NULL or $supletorio_vlc['ID_SUPLETORIO_VLC']==0){
								if($supletorio_vlc==NULL){
									$this->academico_model->crear_estudiante_supletorio(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$estudiante_carrera_materia));
								}
								$this->sendSupletorioVlc($estudiante_carrera_materia,'crear');
							}
						}elseif($estado>0 and ($supletorio=='' or $supletorio==NULL)){
							$supletorio_vlc=$this->academico_model->get_estudiante_supletorio($estudiante_carrera_materia);
							if($supletorio_vlc!=NULL){
								$this->sendSupletorioVlc($estudiante_carrera_materia,'borrar');
								$this->academico_model->borrar_estudiante_supletorio($estudiante_carrera_materia);
							}
						}

						$etapas=1;
						if($estudiante_carrera_materia>0){
							if($num_componentes==$num_componentes_calificados and $nota!=''){
								$nota_etapa=$nota_etapa+$nota*$componente[2]/10;
							}else{
								$nota_etapa='';
							}
							$this->academico_model->calificar_componentes($estudiante_carrera_materia, $etapa,$cadena_componente,$cadena_valor,$nota_etapa,$etapas,$id_periodo_academico);
							$res= 'Registro Realizado';
						}else{
							$res= 'Error:Materia No existe';
						}
					}else{
						$res='Error:Materia fue HCH';
					}
				}else{
					$res= 'Error:Periodo Cerrado';
				}
			}else{
				$res= 'Error:Calificacion Incorrecta';
			}
			if(count($materias)<=0){
				$res='Estudiante No Matriculado';
			}elseif($id_docente!=NULL){
				$doc_docente = $this->academico_model->get_datos_persona($id_docente);
				if($doc_docente!=NULL and $doc_docente['CEDULA']!=$cedula_docente){
					$res.=':Docente Incorrecto';
				}
			}
			//guardar log vlc
			$dat=array();
			$dat['IP']=$ip;
			$dat['ID_MATERIA']=$id_materia;
			$dat['CALIFICACION']=$nota;
			$dat['CEDULA_ESTUDIANTE']=$cedula;
			$dat['FECHA']=date('Y-m-d H:i:s');
			$dat['ESTADO']=$res;
			$dat['CEDULA_DOCENTE']=$cedula_docente;
			$dat['TIPO']='Taller';
			$this->academico_model->crearLogVlc($dat);
			if(stripos($res, 'Registro Realizado')!== false){
				http_response_code(200);
			}else{
				http_response_code(422);
			}
			echo $res;

		//}else{
		//	echo 'Acceso Denegado';
		//}
	}

	/////////////////////////////////////////////////////////////////////////
	//funcion que guarda la nota de asistencia enviada desde un sistema externo
	public function promedio_asistencia()
	{
		$this->load->model('admin/usuarios_model');
		$this->load->module('admin/login');
		$ip=$_SERVER['REMOTE_ADDR'];
		$id_carrera = trim($this->input->post('id_carrera'));
		$id_materia = trim($this->input->post('id_materia'));
		$cedula = trim($this->input->post('cedula'));
		$nota = trim($this->input->post('calificacion'));
		$cedula_docente = trim($this->input->post('cedula_docente'));
		$res='';
		$this->session->set_userdata('loggeado', array('ID_USUARIO'=>0));

		//if ($ip=='158.69.60.207' or $ip=='186.71.53.194' or $ip=='::1' or $ip=='200.58.110.26')
		//{
			//$id_periodo_academico = $this->academico_model->get_periodo_activado();
			$id_periodo_academico = 11;
			$usuario              = $this->usuarios_model->verificar_usuario_cedula($cedula);
			$materias             = $this->academico_model->get_materias_estudiante($usuario['ID_PERSONA'],$id_periodo_academico);

			$id_materias=$this->academico_model->get_materias_conversion($id_materia);
			$vector_materias=explode('+',$id_materias);
			$estudiante_carrera_materia = 0;
			$id_grupo                   = 0;
			$id_carrera_materia         = 0;
			$asistencia_justificada     = 0;
			$id_docente     = 0;
			$homologado     = 0;
			$convalidado     = 0;
			$historial     = 0;
			foreach($materias as $materia){
				//if($materia['ID_CARRERA_MATERIA']==$id_materia){
				if(in_array($materia['ID_CARRERA_MATERIA'],$vector_materias)){
					$estudiante_carrera_materia = $materia['ID_ESTUDIANTE_CARRERA_MATERIA'];
					$id_grupo                   = $materia['ID_GRUPO'];
					$id_carrera_materia         = $materia['ID_CARRERA_MATERIA'];
					$asistencia_justificada     = $materia['ASISTENCIA_JUSTIFICADA'];
					$periodo_academico          = $materia['ID_PERIODO_ACADEMICO'];
					$id_docente          = $materia['ID_PERSONA_DOCENTE'];
					$homologado          = $materia['FUE_HOMOLOGADA'];
					$convalidado          = $materia['FUE_CONVALIDADA'];
					$historial          = $materia['FUE_HISTORIAL'];
				}
			}
			// print_r($materias);
			// 	echo "<br>";
			///////////////////////////////////PROCESAMIENTO DE COPIA//////////////////////////////////////
				$ch  = curl_init();
				$url = $this->url_copia . 'promedio_asistencia/';
				curl_setopt($ch, CURLOPT_URL, $url);
				// $data_copia['estudiante_carrera_materia'] = $estudiante_carrera_materia;
				$data_copia['id_grupo']                   = $id_grupo;
				$data_copia['id_carrera_materia']         = $id_carrera_materia;
				$data_copia['asistencia_justificada']     = $asistencia_justificada;
				$data_copia['id_persona']                 = $usuario['ID_PERSONA'];
				$data_copia['id_periodo_academico']       = $id_periodo_academico;
				$data_copia['calificacion']               = $nota;
				$elements                                 = $data_copia;
				curl_setopt($ch, CURLOPT_POST,true);
				// curl_setopt($ch, CURLOPT_POSTFIELDS, $elements);
				// curl_setopt($ch, CURLOPT_HEADER, false);
				// curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode(array($elements)));
				curl_setopt($ch, CURLOPT_POSTFIELDS, $elements);
				curl_setopt($ch, CURLOPT_HEADER, false);
				// curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json'));
				curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);
				$resultado = curl_exec($ch);
				$error     = curl_error($ch);
				curl_close($ch);
			/////////////////////////////////////////////////////////////////////////
			//verificar periodo de calificacion
			$v_grupo=$this->academico_model->get_grupo($id_grupo);
			$grupo=$v_grupo['NOMBRE'];
			$v_materia=$this->academico_model->obtener_datos_materia($id_carrera_materia);
			$materia=$v_materia['NOMBRE'];
			$fechaCierre=$this->academico_model->get_fecha_cierre(array('ID_GRUPO'=>$id_grupo,'ID_MATERIA'=>$id_carrera_materia,'ID_PERIODO_ACADEMICO'=>$id_periodo_academico));
			$calificacion_cerrada=0;
			/*if(count($fechaCierre)>0){
				if($fechaCierre['FECHA_APLAZADO']!='0000-00-00'){
					$datetime1 = date_create($fechaCierre['FECHA_APLAZADO'].' 23:59:59');
				}else{
					$datetime1 = date_create($fechaCierre['FECHA_CIERRE'].' 23:59:59');
				}
				$datetime2 = date_create(date('Y-m-d H:i:s'));
				if($datetime1<$datetime2){
					$calificacion_cerrada=1;
				}
			}*/
			if($nota!='' and $nota>=0 and $nota<=100){
				if($calificacion_cerrada==0){
					if($homologado==0 and $convalidado==0 and $historial==0){
						if($asistencia_justificada<=0){
							$componentes=$this->academico_model->get_componentes();
							foreach($componentes as $v){
								$componente[$v['ID_COMPONENTE']]=$v['VALOR'];
								if($asistencia_justificada==1 and $v['ID_COMPONENTE']==3){
									$componente[$v['ID_COMPONENTE']]=$v['VALOR']*2;
								}
							}
							$op['ID_ESTUDIANTE_CARRERA_MATERIA']=$estudiante_carrera_materia;
							$op['ID_TIPO_CALIFICACION']=1;
							$op['ETAPA']=1;
							$notas_componente=$this->academico_model->get_calificaciones($op);
							$nota_etapa=0;
							$num_componentes=count($componentes);//total componentes
							$num_componentes_calificados=0;//total componentes ya calificados
							foreach($notas_componente as $nc){
								if($nc['CALIFICACION']!=NULL and $nc['CALIFICACION']!=''){
									$nota_etapa=$nota_etapa+$nc['CALIFICACION']*$componente[$nc['ID_COMPONENTE']]/10;
									$num_componentes_calificados=$num_componentes_calificados+1;
								}
								if($nc['ID_COMPONENTE']==3){//calificacion componente examen
									$componente_examen=$nc['CALIFICACION'];
								}
							}
							$asistencia=$nota;
							if($num_componentes==$num_componentes_calificados and $asistencia>=0){
								$v_notamin=$this->academico_model->getparametro(utf8_encode('Nota m�nima'));
								$notamin=$v_notamin['VALOR'];
								$v_notamax=$this->academico_model->getparametro(utf8_encode('Nota m�xima'));
								$notamax=$v_notamax['VALOR'];
								$min_componente_examen=5;
								$v_notamax_asis=$this->academico_model->getparametro('Asistencia');
								$notamax_asis=$v_notamax_asis['VALOR'];
								$v_notamin_asis=$this->academico_model->getparametro('Asistencia minima');
								$notamin_asis=$v_notamin_asis['VALOR'];
								$v_nota_pierde=$this->academico_model->getparametro('Nota pierde');
								$nota_pierde=$v_nota_pierde['VALOR'];
								$estado='';
								//calcular estado materia
								if($nota_etapa>=$notamin && $nota_etapa<=$notamax && $componente_examen>=$min_componente_examen){
									if($asistencia>=$notamax_asis){
										$estado=1;
									}elseif($asistencia>=$notamin_asis && $asistencia<$notamax_asis){
										$estado='0';
									}else{
										$estado=2;
									}
								}elseif(($nota_etapa>=$nota_pierde && $nota_etapa<$notamin) or ($componente_examen<$min_componente_examen && $nota_etapa>=$nota_pierde)){
									if($asistencia>=$notamax_asis){
										$estado='0';
									}elseif($asistencia>=$notamin_asis && $asistencia<$notamax_asis && $componente_examen>=$min_componente_examen){
										$estado='0';
									}else{
										$estado=2;
									}
								}elseif($nota_etapa<$nota_pierde){
									$estado=2;
								}
							}else{
								$nota_etapa='';
								$estado='';
							}
							$supletorio=$this->academico_model->get_supletorio_materia($estudiante_carrera_materia);
							if($supletorio<0){
								$supletorio='';
							}
							if($estudiante_carrera_materia>0){
								$this->academico_model->updateAsistenciaSupletorioNotaFinal($estudiante_carrera_materia,$asistencia,$supletorio,$nota_etapa,$estado,$id_periodo_academico);

								/////enviar supletorio a VLC//////////
								if($estado==0){
									$supletorio_vlc=$this->academico_model->get_estudiante_supletorio($estudiante_carrera_materia);
									if($supletorio_vlc==NULL or $supletorio_vlc['ID_SUPLETORIO_VLC']==0){
										if($supletorio_vlc==NULL){
											$this->academico_model->crear_estudiante_supletorio(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$estudiante_carrera_materia));
										}
										$this->sendSupletorioVlc($estudiante_carrera_materia,'crear');
									}
								}elseif($estado>0 and ($supletorio=='' or $supletorio==NULL)){
									$supletorio_vlc=$this->academico_model->get_estudiante_supletorio($estudiante_carrera_materia);
									if($supletorio_vlc!=NULL){
										$this->sendSupletorioVlc($estudiante_carrera_materia,'borrar');
										$this->academico_model->borrar_estudiante_supletorio($estudiante_carrera_materia);
									}
								}

								$res= 'Registro Realizado';
							}else{
								$res= 'Error:Materia No Existe';
							}
						}else{
							$res= 'Error:Asistencia Justificada';
						}
					}else{
						$res='Error:Materia fue HCH';
					}
				}else{
					$res= 'Error:Periodo Cerrado';
				}
			}else{
				$res= 'Error:Calificacion Incorrecta';
			}

			if(count($materias)<=0){
				$res='Error:Estudiante No Matriculado';
			}elseif($id_docente!=NULL){
				$doc_docente = $this->academico_model->get_datos_persona($id_docente);
				if($doc_docente!=NULL and $doc_docente['CEDULA']!=$cedula_docente){
					$res.=':Docente Incorrecto';
				}
			}
			//guardar log vlc
			$dat=array();
			$dat['IP']=$ip;
			$dat['ID_MATERIA']=$id_materia;
			$dat['CALIFICACION']=$nota;
			$dat['CEDULA_ESTUDIANTE']=$cedula;
			$dat['FECHA']=date('Y-m-d H:i:s');
			$dat['ESTADO']=$res;
			$dat['CEDULA_DOCENTE']=$cedula_docente;
			$dat['TIPO']='Asistencia';
			$this->academico_model->crearLogVlc($dat);
			if(stripos($res, 'Registro Realizado')!== false){
				http_response_code(200);
			}else{
				http_response_code(422);
			}
			echo $res;
			//echo $res.'-'.$doc_docente['NRO_DOCUMENTO'].'-'.$cedula_docente;
		//}else{
		//	echo 'Acceso Denegado';
		//}
	}

	//////////////////////////////////////////////////////
	public function borrar_matricula($id_matricula=null,$idCliente)
    {
        $idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,83)){
			$matricula=$this->academico_model->obtener_datos_matricula($idCliente,$id_matricula);
			//revisar si no tiene calificaciones
			$materias=$this->academico_model->get_materias_estudiante($matricula['ID_PERSONA'],$matricula['ID_PERIODO_ACADEMICO'],null,null,$matricula['ID_CARRERA']);
			$num_calificaciones=0;
			foreach($materias as $m){
				$calificaciones=$this->academico_model->get_calificaciones(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$m['ID_ESTUDIANTE_CARRERA_MATERIA']));
				$num_calificaciones+=count($calificaciones);
			}
			//Verificar si no tiene pagos realizados
			$abono=$this->academico_model->get_abono_matricula_actual($idCliente,$matricula['ID_PERIODO_ACADEMICO'],$id_matricula);
			//Proceso Borrar
			if($num_calificaciones<=0 and $abono==0){
				//enviar actualizacion matricula vlc
				if($matricula['ESTADO']!=3){//no enviar pre matricula
					foreach($materias as $m){
						//$this->sendMateriaVlc($m['ID_ESTUDIANTE_CARRERA_MATERIA'],'borrar');
					}
					//$this->sendMatriculaVlc($idCliente,'borrado');
				}
				//borrar archivo comprobante de pago si existe
				if($matricula['ARCHIVO_PAGO']!=NULL and $matricula['ARCHIVO_PAGO']!=''){
					//unlink(FCPATH.'archivos/'.$matricula['ARCHIVO_PAGO']);
				}

				$this->academico_model->borrar_matricula($id_matricula,$idCliente);
				$respuesta='<span class="text-primary">BORRADO</span>';
			}else{
				$respuesta='<span class="text-danger">No se puede borrar matricula. Estudiante ya tiene Calificacion o Pago realizado</span>';
			}
			echo $respuesta;
        }else{
            //redirect('admin/login', 'refresh');
			echo "Sesion Terminada";
        }
    }

	//////////////////////////////////////////////////////
	public function verificarDocumento(){
		// $this->load->view('verificarDocumento',$datos);
		$this->load->view('verificarDocumento');
	}

	/////////////////////////////////////////////////////////////////////////
	//funcion que guarda las calificaciones de un estudiante enviadas desde un sistema externo
	public function calificaciones_estudiante()
	{
		$this->load->model('admin/usuarios_model');
		$this->load->module('admin/login');
		$ip=$_SERVER['REMOTE_ADDR'];
		$id_carrera = trim($this->input->post('id_carrera'));
		$id_materia = trim($this->input->post('subject_id'));
		$cedula = trim($this->input->post('student_identification_number'));
		$cedula_docente = trim($this->input->post('teacher_identification_number'));
		$nota_taller = trim($this->input->post('student_classwork_score'));
		$nota_retos = trim($this->input->post('student_online_activities_score'));
		$nota_examen = trim($this->input->post('student_exam_score'));
		$nota_asistencia = trim($this->input->post('student_assist_score'));
		$res='';
		$this->session->set_userdata('loggeado', array('ID_USUARIO'=>0));

		//if ($ip=='158.69.60.207' or $ip=='186.71.53.194' or $ip=='::1' or $ip=='200.58.110.26')
		//{
			$id_periodo_academico = $this->academico_model->get_periodo_activado();
			$usuario              = $this->usuarios_model->verificar_usuario_cedula($cedula);
			$materias             = $this->academico_model->get_materias_estudiante($usuario['ID_PERSONA'],$id_periodo_academico);
			$id_materias=$this->academico_model->get_materias_conversion($id_materia);
			$vector_materias=explode('+',$id_materias);
			$estudiante_carrera_materia = 0;
			$id_grupo                   = 0;
			$id_carrera_materia         = 0;
			$asistencia_justificada     = 0;
			$id_docente     = 0;
			$homologado     = 0;
			$convalidado     = 0;
			$historial     = 0;
			foreach($materias as $materia){
				//if($materia['ID_CARRERA_MATERIA']==$id_materia){
				if(in_array($materia['ID_CARRERA_MATERIA'],$vector_materias)){
					$estudiante_carrera_materia = $materia['ID_ESTUDIANTE_CARRERA_MATERIA'];
					$id_grupo                   = $materia['ID_GRUPO'];
					$id_carrera_materia         = $materia['ID_CARRERA_MATERIA'];
					$asistencia_justificada     = $materia['ASISTENCIA_JUSTIFICADA'];
					$periodo_academico          = $materia['ID_PERIODO_ACADEMICO'];
					$id_docente          = $materia['ID_PERSONA_DOCENTE'];
					$homologado          = $materia['FUE_HOMOLOGADA'];
					$convalidado          = $materia['FUE_CONVALIDADA'];
					$historial          = $materia['FUE_HISTORIAL'];
				}
			}
			// print_r($materias);
			// 	echo "<br>";
			///////////////////////////////////PROCESAMIENTO DE COPIA//////////////////////////////////////
				$ch  = curl_init();
				$url = $this->url_copia . 'calificaciones_estudiante/';
				curl_setopt($ch, CURLOPT_URL, $url);
				// $data_copia['estudiante_carrera_materia'] = $estudiante_carrera_materia;
				$data_copia['id_grupo']                   = $id_grupo;
				$data_copia['id_carrera_materia']         = $id_carrera_materia;
				$data_copia['asistencia_justificada']     = $asistencia_justificada;
				$data_copia['id_persona']                 = $usuario['ID_PERSONA'];
				$data_copia['id_periodo_academico']       = $periodo_academico;
				$data_copia['nota_taller']                = $nota_taller;
				$data_copia['nota_retos']                 = $nota_retos;
				$data_copia['nota_examen']                = $nota_examen;
				$data_copia['nota_asistencia']            = $nota_asistencia;
				$elements                                 = $data_copia;
				curl_setopt($ch, CURLOPT_POST,true);
				// curl_setopt($ch, CURLOPT_POSTFIELDS, $elements);
				// curl_setopt($ch, CURLOPT_HEADER, false);
				// curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode(array($elements)));
				curl_setopt($ch, CURLOPT_POSTFIELDS, $elements);
				curl_setopt($ch, CURLOPT_HEADER, false);
				// curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json'));
				curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);
				$resultado = curl_exec($ch);
				$error     = curl_error($ch);
				curl_close($ch);
			/////////////////////////////////////////////////////////////////////////
			//verificar periodo de calificacion
			$v_grupo=$this->academico_model->get_grupo($id_grupo);
			$grupo=$v_grupo['NOMBRE'];
			$v_materia=$this->academico_model->obtener_datos_materia($id_carrera_materia);
			$materia=$v_materia['NOMBRE'];
			$fechaCierre=$this->academico_model->get_fecha_cierre(array('GRUPO'=>$grupo,'MATERIA'=>$materia,'ID_PERIODO_ACADEMICO'=>$id_periodo_academico));
			$calificacion_cerrada=0;
			if(count($fechaCierre)>0){
				$datetime1 = date_create($fechaCierre['FECHA_CIERRE'].' 23:59:59');
				$datetime2 = date_create(date('Y-m-d H:i:s'));
				if($datetime1<$datetime2){
					$calificacion_cerrada=1;
				}
			}
			if($calificacion_cerrada==0){
				if($homologado==0 and $convalidado==0 and $historial==0){
					$etapa=1;
					$cadena_componente='1';//id componente retos y proyectos
					$cadena_valor=$nota_retos;
					$componentes=$this->academico_model->get_componentes();
					foreach($componentes as $v){
						$componente[$v['ID_COMPONENTE']]=$v['VALOR'];
						if($asistencia_justificada==1 and $v['ID_COMPONENTE']==3){
							$componente[$v['ID_COMPONENTE']]=$v['VALOR']*2;
						}
					}
					$op['ID_ESTUDIANTE_CARRERA_MATERIA']=$estudiante_carrera_materia;
					$op['ID_TIPO_CALIFICACION']=1;
					$op['ETAPA']=1;
					$notas_componente=$this->academico_model->get_calificaciones($op);
					$nota_etapa=0;
					$num_componentes=count($componentes)-1;//total componentes menos el componente retos
					$num_componentes_calificados=0;//total componentes ya calificados
					foreach($notas_componente as $nc){
						if($nc['ID_COMPONENTE']!=1){//si no es componente de taras
							if($nc['CALIFICACION']!=NULL and $nc['CALIFICACION']!=''){
								$nota_etapa=$nota_etapa+$nc['CALIFICACION']*$componente[$nc['ID_COMPONENTE']]/10;
								$num_componentes_calificados=$num_componentes_calificados+1;
							}
						}
						if($nc['ID_COMPONENTE']==3){//calificacion componente examen
							$componente_examen=$nc['CALIFICACION'];
						}
					}
					//if(count($componentes)==count($notas_componente)){
					$asistencia=$this->academico_model->get_asistencia_materia($estudiante_carrera_materia);
					$supletorio=$this->academico_model->get_supletorio_materia($estudiante_carrera_materia);
					if($supletorio<0){
						$supletorio='';
					}
					$estado='';
					if($num_componentes==$num_componentes_calificados and $asistencia>=0 and $nota_retos!=''){
						$nota_final=$nota_etapa+$nota_retos*$componente[1]/10;
						$v_notamin=$this->academico_model->getparametro(utf8_encode('Nota m�nima'));
						$notamin=$v_notamin['VALOR'];
						$v_notamax=$this->academico_model->getparametro(utf8_encode('Nota m�xima'));
						$notamax=$v_notamax['VALOR'];
						$min_componente_examen=5;
						$v_notamax_asis=$this->academico_model->getparametro('Asistencia');
						$notamax_asis=$v_notamax_asis['VALOR'];
						$v_notamin_asis=$this->academico_model->getparametro('Asistencia minima');
						$notamin_asis=$v_notamin_asis['VALOR'];
						$v_nota_pierde=$this->academico_model->getparametro('Nota pierde');
						$nota_pierde=$v_nota_pierde['VALOR'];
						//calcular estado materia
						if($nota_final>=$notamin && $nota_final<=$notamax && $componente_examen>=$min_componente_examen){
							if($asistencia>=$notamax_asis){
								$estado=1;
							}elseif($asistencia>=$notamin_asis && $asistencia<$notamax_asis){
								$estado='0';
							}else{
								$estado=2;
							}
						}elseif(($nota_final>=$nota_pierde && $nota_final<$notamin) or ($componente_examen<$min_componente_examen && $nota_final>=$nota_pierde)){
							if($asistencia>=$notamax_asis){
								$estado='0';
							}elseif($asistencia>=$notamin_asis && $asistencia<$notamax_asis && $componente_examen>=$min_componente_examen){
								$estado='0';
							}else{
								$estado=2;
							}
						}elseif($nota_final<$nota_pierde){
							$estado=2;
						}
						//$this->academico_model->updatePromediototal($estudiante_carrera_materia,$nota_etapa,$nota_etapa,$asistencia,$estado);
						if($supletorio!=''){
							$nota_final=round(($nota_final+$supletorio)/2,2);
							if($nota_final>=$notamin){
								$estado=1;
							}else{
								$estado=2;
							}
						}
						$this->academico_model->updateAsistenciaSupletorioNotaFinal($estudiante_carrera_materia,$asistencia,$supletorio,$nota_final,$estado);
					}else{
						$nota_final='';
						if($asistencia<0){
							$asistencia='';
						}
						$supletorio='';
						$estado=-1;
						$this->academico_model->updateAsistenciaSupletorioNotaFinal($estudiante_carrera_materia,$asistencia,$supletorio,$nota_final,$estado);
					}

					/////enviar supletorio a VLC//////////
					if($estado==0){
						$supletorio_vlc=$this->academico_model->get_estudiante_supletorio($estudiante_carrera_materia);
						if($supletorio_vlc==NULL or $supletorio_vlc['ID_SUPLETORIO_VLC']==0){
							if($supletorio_vlc==NULL){
								$this->academico_model->crear_estudiante_supletorio(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$estudiante_carrera_materia));
							}
							$this->sendSupletorioVlc($estudiante_carrera_materia,'crear');
						}
					}elseif($estado>0 and ($supletorio=='' or $supletorio==NULL)){
						$supletorio_vlc=$this->academico_model->get_estudiante_supletorio($estudiante_carrera_materia);
						if($supletorio_vlc!=NULL){
							$this->sendSupletorioVlc($estudiante_carrera_materia,'borrar');
							$this->academico_model->borrar_estudiante_supletorio($estudiante_carrera_materia);
						}
					}

					$etapas=1;
					if($estudiante_carrera_materia>0){
						if($num_componentes==$num_componentes_calificados and $nota_retos!=''){
							$nota_etapa=$nota_etapa+$nota_retos*$componente[1]/10;
						}else{
							$nota_etapa='';
						}
						$this->academico_model->calificar_componentes($estudiante_carrera_materia, $etapa,$cadena_componente,$cadena_valor,$nota_etapa,$etapas);
						$res= 'Registro Realizado';
					}else{
						$res= 'Error:Materia No existe';
					}
				}else{
					$res='Error:Materia fue HCH';
				}
			}else{
				$res= 'Error:Periodo Cerrado';
			}

			if(count($materias)<=0){
				$res='Estudiante No Matriculado';
			}elseif($id_docente!=NULL){
				$doc_docente = $this->academico_model->get_datos_persona($id_docente);
				if($doc_docente!=NULL and $doc_docente['CEDULA']!=$cedula_docente){
					$res.=':Docente Incorrecto';
				}
			}
			//guardar log vlc
			$dat=array();
			$dat['IP']=$ip;
			$dat['ID_MATERIA']=$id_materia;
			$dat['TALLER']=$nota_taller;
			$dat['RETOS']=$nota_retos;
			$dat['EXAMEN']=$nota_examen;
			$dat['ASISTENCIA']=$nota_asistencia;
			$dat['CEDULA_ESTUDIANTE']=$cedula;
			$dat['FECHA']=date('Y-m-d H:i:s');
			$dat['ESTADO']=$res;
			$dat['CEDULA_DOCENTE']=$cedula_docente;
			$dat['TIPO']='Todo';
			$this->academico_model->crearLogVlc($dat);
			echo $res;
		//}
	}

	/* /////////////////////////////////////////////////////////////////////////
	//funcion que guarda las calificaciones de un estudiante enviadas desde un sistema externo
	public function calificaciones_estudiante()
	{
		$this->load->model('admin/usuarios_model');
		$this->load->module('admin/login');
		$ip=$_SERVER['REMOTE_ADDR'];
		$id_carrera = trim($this->input->post('id_carrera'));
		$id_materia = trim($this->input->post('subject_id'));
		$cedula = trim($this->input->post('student_identification_number'));
		$cedula_docente = trim($this->input->post('teacher_identification_number'));
		$nota_taller = trim($this->input->post('student_classwork_score'));
		$nota_retos = trim($this->input->post('student_online_activities_score'));
		$nota_examen = trim($this->input->post('student_exam_score'));
		$nota_asistencia = trim($this->input->post('student_assist_score'));
		$res='';
		$this->session->set_userdata('loggeado', array('ID_USUARIO'=>0));

		//if ($ip=='158.69.60.207' or $ip=='186.71.53.194' or $ip=='::1' or $ip=='200.58.110.26')
		//{
			$id_periodo_academico = $this->academico_model->get_periodo_activado();
			$usuario              = $this->usuarios_model->verificar_usuario_cedula($cedula);
			$materias             = $this->academico_model->get_materias_estudiante($usuario['ID_PERSONA'],$id_periodo_academico);
			$id_materias=$this->academico_model->get_materias_conversion($id_materia);
			$vector_materias=explode('+',$id_materias);
			$estudiante_carrera_materia = 0;
			$id_grupo                   = 0;
			$id_carrera_materia         = 0;
			$asistencia_justificada     = 0;
			$id_docente     = 0;
			$homologado     = 0;
			$convalidado     = 0;
			$historial     = 0;
			foreach($materias as $materia){
				//if($materia['ID_CARRERA_MATERIA']==$id_materia){
				if(in_array($materia['ID_CARRERA_MATERIA'],$vector_materias)){
					$estudiante_carrera_materia = $materia['ID_ESTUDIANTE_CARRERA_MATERIA'];
					$id_grupo                   = $materia['ID_GRUPO'];
					$id_carrera_materia         = $materia['ID_CARRERA_MATERIA'];
					$asistencia_justificada     = $materia['ASISTENCIA_JUSTIFICADA'];
					$periodo_academico          = $materia['ID_PERIODO_ACADEMICO'];
					$id_docente          = $materia['ID_PERSONA_DOCENTE'];
					$homologado          = $materia['FUE_HOMOLOGADA'];
					$convalidado          = $materia['FUE_CONVALIDADA'];
					$historial          = $materia['FUE_HISTORIAL'];
				}
			}
			// print_r($materias);
			// 	echo "<br>";
			///////////////////////////////////PROCESAMIENTO DE COPIA//////////////////////////////////////
				$ch  = curl_init();
				$url = $this->url_copia . 'calificaciones_estudiante/';
				curl_setopt($ch, CURLOPT_URL, $url);
				// $data_copia['estudiante_carrera_materia'] = $estudiante_carrera_materia;
				$data_copia['id_grupo']                   = $id_grupo;
				$data_copia['id_carrera_materia']         = $id_carrera_materia;
				$data_copia['asistencia_justificada']     = $asistencia_justificada;
				$data_copia['id_persona']                 = $usuario['ID_PERSONA'];
				$data_copia['id_periodo_academico']       = $periodo_academico;
				$data_copia['nota_taller']                = $nota_taller;
				$data_copia['nota_retos']                 = $nota_retos;
				$data_copia['nota_examen']                = $nota_examen;
				$data_copia['nota_asistencia']            = $nota_asistencia;
				$elements                                 = $data_copia;
				curl_setopt($ch, CURLOPT_POST,true);
				// curl_setopt($ch, CURLOPT_POSTFIELDS, $elements);
				// curl_setopt($ch, CURLOPT_HEADER, false);
				// curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode(array($elements)));
				curl_setopt($ch, CURLOPT_POSTFIELDS, $elements);
				curl_setopt($ch, CURLOPT_HEADER, false);
				// curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json'));
				curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);
				$resultado = curl_exec($ch);
				$error     = curl_error($ch);
				curl_close($ch);
			/////////////////////////////////////////////////////////////////////////
			//verificar periodo de calificacion
			$v_grupo=$this->academico_model->get_grupo($id_grupo);
			$grupo=$v_grupo['NOMBRE'];
			$v_materia=$this->academico_model->obtener_datos_materia($id_carrera_materia);
			$materia=$v_materia['NOMBRE'];
			$fechaCierre=$this->academico_model->get_fecha_cierre(array('GRUPO'=>$grupo,'MATERIA'=>$materia,'ID_PERIODO_ACADEMICO'=>$id_periodo_academico));
			$calificacion_cerrada=0;
			if(count($fechaCierre)>0){
				$datetime1 = date_create($fechaCierre['FECHA_CIERRE'].' 23:59:59');
				$datetime2 = date_create(date('Y-m-d H:i:s'));
				if($datetime1<$datetime2){
					$calificacion_cerrada=1;
				}
			}
			if($calificacion_cerrada==0){
				if($homologado==0 and $convalidado==0 and $historial==0){
					if($asistencia_justificada==1){
						$nota_taller=0;
						$nota_asistencia=100;
					}else{
						//$res= 'Error:Asistencia Justificada';
					}
					//guardar asistencia
					if($nota_asistencia!='' and $nota_asistencia!=NULL){
						$asistencia=$nota_asistencia;
						$nota_etapa='';
						$estado='';
						$supletorio=$this->academico_model->get_supletorio_materia($estudiante_carrera_materia);
						if($supletorio<0){
							$supletorio='';
						}
						if($estudiante_carrera_materia>0){
							$this->academico_model->updateAsistenciaSupletorioNotaFinal($estudiante_carrera_materia,$asistencia,$supletorio,$nota_etapa,$estado);
						}
					}
					//guardar componentes
					$etapa=1;
					$cadena_componente='2&1&3';//id componente taller-retos-examen
					$cadena_valor=$nota_taller.'&'.$nota_retos.'&'.$nota_examen;
					$componentes=$this->academico_model->get_componentes();
					$num_componentes=count($componentes);
					foreach($componentes as $v){
						$componente[$v['ID_COMPONENTE']]=$v['VALOR'];
						if($asistencia_justificada==1 and $v['ID_COMPONENTE']==3){
							$componente[$v['ID_COMPONENTE']]=$v['VALOR']*2;
							$num_componentes=$num_componentes-1;
						}
					}
					$nota_etapa='';
					$componente_examen=$nota_examen;
					$num_notas=0;
					if($nota_taller!=''){
						$num_notas=$num_notas+1;
					}
					if($nota_retos!=''){
						$num_notas=$num_notas+1;
					}
					if($nota_examen!=''){
						$num_notas=$num_notas+1;
					}
					if($num_componentes==$num_notas){
						$nota_etapa=round($nota_taller*$componente[2]/10+$nota_retos*$componente[1]/10+$nota_examen*$componente[3]/10,2);
					}
					$asistencia=$this->academico_model->get_asistencia_materia($estudiante_carrera_materia);
					if($asistencia<0){
						$asistencia='';
					}
					$v_notamin=$this->academico_model->getparametro(utf8_encode('Nota m�nima'));
					$notamin=$v_notamin['VALOR'];
					$v_notamax=$this->academico_model->getparametro(utf8_encode('Nota m�xima'));
					$notamax=$v_notamax['VALOR'];
					$min_componente_examen=5;
					$v_notamax_asis=$this->academico_model->getparametro('Asistencia');
					$notamax_asis=$v_notamax_asis['VALOR'];
					$v_notamin_asis=$this->academico_model->getparametro('Asistencia minima');
					$notamin_asis=$v_notamin_asis['VALOR'];
					$v_nota_pierde=$this->academico_model->getparametro('Nota pierde');
					$nota_pierde=$v_nota_pierde['VALOR'];
					$estado='';
					$supletorio='';
					//calcular estado materia
					if($asistencia!='' and $nota_etapa!=''){
						if($nota_etapa>=$notamin && $nota_etapa<=$notamax && $componente_examen>=$min_componente_examen){
							if($asistencia>=$notamax_asis){
								$estado=1;
							}elseif($asistencia>=$notamin_asis && $asistencia<$notamax_asis){
								$estado='0';
							}else{
								$estado=2;
							}
						}elseif(($nota_etapa>=$nota_pierde && $nota_etapa<$notamin) or ($componente_examen<$min_componente_examen && $nota_etapa>=$nota_pierde)){
							if($asistencia>=$notamax_asis){
								$estado='0';
							}elseif($asistencia>=$notamin_asis && $asistencia<$notamax_asis && $componente_examen>=$min_componente_examen){
								$estado='0';
							}else{
								$estado=2;
							}
						}elseif($nota_etapa<$nota_pierde){
							$estado=2;
						}
					}
					$etapas=1;
					if($estudiante_carrera_materia>0){
						$this->academico_model->calificar_componentes($estudiante_carrera_materia, $etapa,$cadena_componente,$cadena_valor,$nota_etapa,$etapas);
						if($asistencia!='' and $nota_etapa!=''){
							$supletorio=$this->academico_model->get_supletorio_materia($estudiante_carrera_materia);
							if($supletorio<0 or $supletorio==''){
								$supletorio='';
							}else{
								$nota_etapa=round(($nota_etapa+$supletorio)/2,2);
								if($nota_etapa>=$notamin){
									$estado=1;
								}else{
									$estado=2;
								}
							}
							$this->academico_model->updateAsistenciaSupletorioNotaFinal($estudiante_carrera_materia,$asistencia,$supletorio,$nota_etapa,$estado);
						}
						$res.= 'Registro Realizado';
					}else{
						$res= 'Error:Materia No existe';
					}
				}else{
					$res='Error:Materia fue HCH';
				}
			}else{
				$res= 'Error:Periodo Cerrado';
			}

			if(count($materias)<=0){
				$res='Estudiante No Matriculado';
			}elseif($id_docente!=NULL){
				$doc_docente = $this->academico_model->get_datos_persona($id_docente);
				if($doc_docente!=NULL and $doc_docente['CEDULA']!=$cedula_docente){
					$res.=':Docente Incorrecto';
				}
			}
			//guardar log vlc
			$dat=array();
			$dat['IP']=$ip;
			$dat['ID_MATERIA']=$id_materia;
			$dat['TALLER']=$nota_taller;
			$dat['RETOS']=$nota_retos;
			$dat['EXAMEN']=$nota_examen;
			$dat['ASISTENCIA']=$nota_asistencia;
			$dat['CEDULA_ESTUDIANTE']=$cedula;
			$dat['FECHA']=date('Y-m-d H:i:s');
			$dat['ESTADO']=$res;
			$dat['CEDULA_DOCENTE']=$cedula_docente;
			$dat['TIPO']='Todo';
			$this->academico_model->crearLogVlc($dat);
			echo $res;
		//}
	} */

	////////////////////////////////////////////////////////////////////
	public function logVlc()
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,84)){
			$this->load->model('admin/usuarios_model');
			$perfil = $this->usuarios_model->get_perfil_usuario($idusuario);
			if(!$this->input->is_ajax_request()){
				$datos=array();
				$datos['carreras'] = $this->academico_model->get_carreras();
				$datos['niveles'] = $this->academico_model->get_niveles();
				$datos['periodos'] = $this->academico_model->getPeriodos();
				$grupos=$this->academico_model->buscarGruposEst();
				$grupos = explode(" - ", $grupos);
				$datos['grupos'] = $grupos;
				$datos1=$this->perfil_model->cabecera($idusuario);
				$this->load->view('templates/header',$datos1);
				$this->load->view('reporteLogVlc',$datos);
				$this->load->view('templates/footer');
			}else{
				$nro_documento = trim($this->input->post('nroDocumento'));
				$fechai = trim($this->input->post('fechai'));
				$fechaf = trim($this->input->post('fechaf'));
				$estado = trim($this->input->post('estado'));
				$carrera = trim($this->input->post('carrera'));
				$nivel = trim($this->input->post('nivel'));
				$grupo = trim($this->input->post('grupo'));
				$logs=$this->academico_model->buscar_vlog(array('CEDULA_ESTUDIANTE'=>$nro_documento,'FECHAI'=>$fechai,'FECHAF'=>$fechaf));
				$id_periodo_academico = $this->academico_model->get_periodo_activado();
				$vlog=array();
				$i=0;
				foreach($logs as $k=>$log){
					$usuario = $this->usuarios_model->verificar_usuario_cedula($log['CEDULA_ESTUDIANTE']);
					$estudiante_carrera_materia =0;
					if($usuario!=NULL){
						$materias  = $this->academico_model->get_materias_estudiante($usuario['ID_PERSONA'],$id_periodo_academico,NULL,NULL,$carrera,$nivel,$grupo);
						$id_materias=$this->academico_model->get_materias_conversion($log['ID_MATERIA']);
						$vector_materias=explode('+',$id_materias);
						foreach($materias as $materia){
							if(in_array($materia['ID_CARRERA_MATERIA'],$vector_materias)){
								$estudiante_carrera_materia = $materia['ID_ESTUDIANTE_CARRERA_MATERIA'];
							}
						}
					}
					$logs[$k]['matricula']=$this->academico_model->get_materias_estudianteAll($estudiante_carrera_materia);
					if($logs[$k]['matricula']==null and ($carrera!='' or $nivel!='' or $grupo!='')){
						//unset($logs[$k]);
					}else{
						$vlog[$i]=$logs[$k];
						$i++;
					}
				}
				echo json_encode($vlog);
			}
		}else{
			redirect('admin/login', 'refresh');
		}
	}

	////////////////////////////////////////////////////////////////////
	public function planificacion()
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,85)){
			$this->load->model('admin/usuarios_model');
			$perfil = $this->usuarios_model->get_perfil_usuario($idusuario);
			if(!$this->input->is_ajax_request()){
				$datos=array();
				$datos['carreras'] = $this->academico_model->get_carreras();
				$datos['niveles'] = $this->academico_model->get_niveles();
				$datos['periodos'] = $this->academico_model->getPeriodos();
				$datos['grupos']=$this->academico_model->buscar_grupos_estudiantes();
				$datos['sedes'] = $this->academico_model->buscar_sedes();
				$datos1=$this->perfil_model->cabecera($idusuario);
				$this->load->view('templates/header',$datos1);
				$this->load->view('grupoMateriaDocente',$datos);
				$this->load->view('templates/footer');
			}else{
				$vector_horas=[4,3,3,3,3,3,8];//vector de horas de tutoria domingo a sabado
				$vector_valor=[13.75,10,10,10,10,10,13.75];//vector de valor por hora de tutoria domingo a sabado
				$id_carrera = trim($this->input->post('carrera'));
				$id_nivel = trim($this->input->post('nivel'));
				$grupo = trim($this->input->post('grupo'));
				$niveles=array();
				if($id_nivel!=NULL and $id_nivel!=''){
					$niveles[]=$id_nivel;
				}else{
					$carrera=$this->academico_model->obtener_datos_carrera($id_carrera);
					if(isset($carrera['DURACION_EN_NIVELES'])){
						for($i=1;$i<=$carrera['DURACION_EN_NIVELES'];$i++){
							$niveles[]=$i;
						}
					}
				}
				$materias_total=array();
				foreach($niveles as $id_nivel){
					$id_grupo=$this->academico_model->get_id_grupo($grupo,$id_carrera,$id_nivel);
					$id_periodo_academico = $this->academico_model->get_periodo_activado();
					$materias_pla  = $this->academico_model->buscarPlanificaciones(array('ID_CARRERA'=>$id_carrera,'ID_NIVEL'=>$id_nivel,'ID_GRUPO'=>$id_grupo,'ID_PERIODO_ACADEMICO'=>$id_periodo_academico));
					//if(count($materias)<=0){
						$materias_carrera  = $this->academico_model->getMateriasPorCarreraNivel($id_carrera, $id_nivel);
						foreach($materias_pla as $kmp=>$mp){
							foreach($materias_carrera as $k=>$m){
								$materias_carrera[$k]['ID_PLANTILLA']=0;
								if($m['ID_CARRERA_MATERIA']==$mp['ID_CARRERA_MATERIA']){
									//$materias[$k]=$mp;
									unset($materias_carrera[$k]);
									break;
								}
							}
							if($mp['ID_PLANTILLA']>0){
								$plantilla=$this->academico_model->get_plantilla($mp['ID_PLANTILLA']);
								if($plantilla!=NULL){
									$materias_pla[$kmp]['NOMBRE']=$mp['NOMBRE'].'<br><span style="color:#337ab7; font-size:11px">'.$plantilla['PLANTILLA'].'</span>';
								}
							}
						}
						if(count($materias_carrera)>0){
							foreach($materias_carrera as $km=>$m){
								$materias_carrera[$km]['ID_PLANTILLA']=0;
							}
						}
						$materias=array_merge($materias_pla,$materias_carrera);
					//}
					foreach($materias as $k=>$materia){
						$docentes = $this->academico_model->getDocentesDeMateria($materia['ID_CARRERA_MATERIA']);
						if(!isset($materia['ID_PLANTILLA'])){
							$materia['ID_PLANTILLA']=0;
						}
						$planificacion = $this->academico_model->getPlanificacion($id_grupo,$materia['ID_CARRERA_MATERIA'],null,$materia['ID_PLANTILLA']);
						if($planificacion!=NULL){
							foreach($docentes as $j=>$docente){
								$ocupado=0;
								$fechas_externo='';
								for($i=1;$i<=4;$i++){
									if($planificacion['FECHA_TUTORIA'.$i]!='0000-00-00'){
										$fechas_externo.=$planificacion['FECHA_TUTORIA'.$i].'+';
										$estado_ocupado=$this->academico_model->verificaDocenteOcupado($docente['ID_PERSONA'],$planificacion['FECHA_TUTORIA'.$i],$id_grupo,$materia['NOMBRE'],$planificacion['GRUPO']);
										if($estado_ocupado>0){
											$ocupado=$estado_ocupado;
										}
										if($estado_ocupado==1){
											break;
										}
									}
								}
								//buscar en fechas de tutoria adicionales
								if($ocupado!=1 and $planificacion['FECHAS_TUTORIA']!=''){
									$fechas=explode('+',$planificacion['FECHAS_TUTORIA']);
									foreach($fechas as $f){
										$fechas_externo.=$f.'+';
										$estado_ocupado=$this->academico_model->verificaDocenteOcupado($docente['ID_PERSONA'],$f,$id_grupo,$materia['NOMBRE'],$planificacion['GRUPO']);
										if($estado_ocupado>0){
											$ocupado=$estado_ocupado;
										}
										if($estado_ocupado==1){
											break;
										}
									}
								}
								//buscar en Ligen si docente esta ocupado
								if($ocupado!=1 and $fechas_externo!=''){
									$ch  = curl_init();
									//curl_setopt($ch, CURLOPT_URL, 'http://localhost/ligen/index.php/cursos/cursos/verifica_docente_ocupado');
									curl_setopt($ch, CURLOPT_URL, 'https://ligenconsulting.com/biacademos/index.php/cursos/cursos/verifica_docente_ocupado');
									$data_copia['cedula'] = $docente['NRO_DOCUMENTO'];
									$data_copia['fechas'] = trim($fechas_externo,'+');
									$elements                = $data_copia;
									curl_setopt($ch, CURLOPT_POST,true);
									curl_setopt($ch, CURLOPT_POSTFIELDS, $elements);
									curl_setopt($ch, CURLOPT_HEADER, false);
									curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
									curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);

									$resultado = curl_exec($ch);
									$error     = curl_error($ch);
									curl_close($ch);
									if($resultado==1){
										$ocupado=3;
									}
								}
								$docentes[$j]['ocupado']=$ocupado;
							}
							//calcular valores por defecto si no existe
							if($planificacion['TOTAL_HORAS']==NULL or $planificacion['TOTAL_HORAS']==''){
								$total_horas=NULL;
								$valor_horas=NULL;
								if($planificacion['PLATAFORMA']==1){
									$total_horas=0;
									$valor_horas=40;
								}else{
									$fechast=$planificacion['FECHA_TUTORIA1'].'+'.$planificacion['FECHA_TUTORIA2'].'+'.$planificacion['FECHA_TUTORIA3'].'+'.$planificacion['FECHA_TUTORIA4'].'+'.$planificacion['FECHAS_TUTORIA'];
									$vector_ft=explode('+',$fechast);
									foreach($vector_ft as $ft){
										if($ft!='' and $ft!='0000-00-00'){
											$num_dia=date("w", strtotime($ft));
											$total_horas+=$vector_horas[$num_dia];
											$valor_horas+=$vector_horas[$num_dia]*$vector_valor[$num_dia];
										}
									}
								}
								$planificacion['TOTAL_HORAS']=$total_horas;
								$planificacion['TOTAL_VALOR']=$valor_horas;
							}
						}
						$materias[$k]['docentes']=$docentes;
						$materias[$k]['planificacion']=$planificacion;
						$materias_total[]=$materias[$k];
					}
					//echo json_encode($materias);
				}
				echo json_encode($materias_total);
			}
		}else{
			redirect('admin/login', 'refresh');
		}
	}

	////////////////////////////////////////////////////////////////////
	public function gestionPlanificacion()
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,85)){
			$id_carrera = trim($this->input->post('carrera'));
			$id_nivel = trim($this->input->post('nivel'));
			$grupo = trim($this->input->post('grupo'));
			$docente_carrera_materia=$this->input->post('docente_carrera_materia');
			$fecha_tutoria1=$this->input->post('fecha_tutoria1');
			$fecha_tutoria2=$this->input->post('fecha_tutoria2');
			$fecha_tutoria3=$this->input->post('fecha_tutoria3');
			$fecha_tutoria4=$this->input->post('fecha_tutoria4');
			$fechas_tutoria=$this->input->post('fechas_tutoria');
			$fecha_examen=$this->input->post('fecha_examen');
			$hora_examen=$this->input->post('hora_examen');
			$fecha_cierre=$this->input->post('fecha_cierre');
			$fecha_supletorio=$this->input->post('fecha_supletorio');
			$hora_supletorio=$this->input->post('hora_supletorio');
			$id_planificacion=$this->input->post('id_planificacion');
			$plataforma=$this->input->post('plataforma');
			$horas=$this->input->post('horas');
			$valores=$this->input->post('valores');
			$id_periodo_academico = $this->academico_model->get_periodo_activado();
			if($id_nivel=='' or $id_nivel==NULL){
				$id_grupo_temp=0;
			}else{
				$id_grupo_temp=$this->academico_model->get_id_grupo($grupo,$id_carrera,$id_nivel);
			}
			//$id_grupo=$this->academico_model->get_id_grupo($grupo,$id_carrera,$id_nivel);
			$datos='';
			foreach($docente_carrera_materia as $k=>$dcm){
				$ids=explode('_',$k);
				$id_materia=$ids[0];
				$id_plantilla=$ids[1];
				if($id_planificacion[$k]>0 or $dcm!='' or $fecha_tutoria1[$k]!='' or $fecha_tutoria2[$k]!='' or $fecha_tutoria3[$k]!='' or $fecha_tutoria4[$k]!='' or $fecha_examen[$k]!='' or $fecha_cierre[$k]!='' or $fecha_supletorio[$k]!='' or isset($plataforma[$k])){
					if($id_grupo_temp==0){
						$mat=$this->academico_model->obtener_datos_materia($id_materia);
						$id_grupo=$this->academico_model->get_id_grupo($grupo,$id_carrera,$mat['NIVEL_MATERIA']);
					}else{
						$id_grupo=$id_grupo_temp;
					}
					$dat=array();
					$dat['ID_GRUPO']=$id_grupo;
					$dat['ID_PERSONA']=$dcm;
					$dat['ID_CARRERA_MATERIA']=$id_materia;
					$dat['ID_PERIODO_ACADEMICO']=$id_periodo_academico;
					if($fecha_tutoria1[$k]!=''){
						$fecha = DateTime::createFromFormat('d/m/Y', $fecha_tutoria1[$k]);
						$dat['FECHA_TUTORIA1']=$fecha->format('Y-m-d');
					}else{
						$dat['FECHA_TUTORIA1']='0000-00-00';
					}
					if($fecha_tutoria2[$k]!=''){
						$fecha = DateTime::createFromFormat('d/m/Y', $fecha_tutoria2[$k]);
						$dat['FECHA_TUTORIA2']=$fecha->format('Y-m-d');
					}else{
						$dat['FECHA_TUTORIA2']='0000-00-00';
					}
					if($fecha_tutoria3[$k]!=''){
						$fecha = DateTime::createFromFormat('d/m/Y', $fecha_tutoria3[$k]);
						$dat['FECHA_TUTORIA3']=$fecha->format('Y-m-d');
					}else{
						$dat['FECHA_TUTORIA3']='0000-00-00';
					}
					if($fecha_tutoria4[$k]!=''){
						$fecha = DateTime::createFromFormat('d/m/Y', $fecha_tutoria4[$k]);
						$dat['FECHA_TUTORIA4']=$fecha->format('Y-m-d');
					}else{
						$dat['FECHA_TUTORIA4']='0000-00-00';
					}
					$dat['FECHAS_TUTORIA']='';
					if(isset($fechas_tutoria[$k]) and count($fechas_tutoria[$k])>0){
						foreach($fechas_tutoria[$k] as $ft){
							if($ft!=''){
								$fecha = DateTime::createFromFormat('d/m/Y', $ft);
								$dat['FECHAS_TUTORIA'].=$fecha->format('Y-m-d').'+';
							}
						}
						$dat['FECHAS_TUTORIA']=trim($dat['FECHAS_TUTORIA'],'+');
					}
					if($fecha_examen[$k]!=''){
						$fecha = DateTime::createFromFormat('d/m/Y', $fecha_examen[$k]);
						$dat['FECHA_EXAMEN']=$fecha->format('Y-m-d');
					}else{
						$dat['FECHA_EXAMEN']='0000-00-00';
					}
					$id_fecha_cierre=0;
					if($fecha_cierre[$k]!=''){
						$fecha = DateTime::createFromFormat('d/m/Y', $fecha_cierre[$k]);
						$dat['FECHA_CIERRE']=$fecha->format('Y-m-d');
						//gestion fecha cierre califiaciones
						$num_dias=$this->academico_model->getparametro('dias_cierre');
						$fc=explode('-',$dat['FECHA_CIERRE']);
						$fec= mktime(0,0,0,$fc[1],($fc[2]+$num_dias['VALOR']),$fc[0]);
						$fecha_cierre_calificacion=date("Y-m-d", $fec);
						$datc['ID_GRUPO']= $id_grupo;
						$datc['GRUPO']= '';
						$datc['ID_MATERIA']= $id_materia;
						$datc['ID_PLANTILLA']= $id_plantilla;
						$datc['MATERIA']= '';
						$datc['FECHA_CIERRE']= $fecha_cierre_calificacion;
						$datc['ID_PERIODO_ACADEMICO']= $id_periodo_academico;
						$fechaCierre=$this->academico_model->get_fecha_cierre(array('ID_GRUPO'=>$id_grupo,'ID_MATERIA'=>$id_materia,'ID_PERIODO_ACADEMICO'=>$id_periodo_academico,'ID_PLANTILLA'=>$id_plantilla));
						if(count($fechaCierre)<=0){
							$id_fecha_cierre=$this->academico_model->crear_fecha_cierre($datc);
						}else{
							$this->academico_model->actualizar_fecha_cierre($datc,$fechaCierre['ID_CIERRE_CALIFICACION']);
						}
					}else{
						$dat['FECHA_CIERRE']='0000-00-00';
					}
					if($fecha_supletorio[$k]!=''){
						$fecha = DateTime::createFromFormat('d/m/Y', $fecha_supletorio[$k]);
						$dat['FECHA_SUPLETORIO']=$fecha->format('Y-m-d');
					}else{
						$dat['FECHA_SUPLETORIO']='0000-00-00';
					}
					$dat['PLATAFORMA']='0';
					if(isset($plataforma[$k])){
						$dat['PLATAFORMA']=$plataforma[$k];
					}
					$dat['HORA_EXAMEN']=NULL;
					$dat['HORA_SUPLETORIO']=NULL;
					if(isset($hora_examen[$k]) and $hora_examen[$k]!=''){
						$dat['HORA_EXAMEN']=$hora_examen[$k];
					}
					if(isset($hora_supletorio[$k]) and $hora_supletorio[$k]!=''){
						$dat['HORA_SUPLETORIO']=$hora_supletorio[$k];
					}
					$dat['TOTAL_HORAS']=NULL;
					$dat['TOTAL_VALOR']=NULL;
					if(isset($horas[$k]) and $horas[$k]!=''){
						$dat['TOTAL_HORAS']=$horas[$k];
					}
					if(isset($valores[$k]) and $valores[$k]!=''){
						$dat['TOTAL_VALOR']=$valores[$k];
					}

					//$this->academico_model->borraPlanificacion($id_grupo,$k);
					$actualizados=0;
					if($id_planificacion[$k]==0){
						$dat['FECHA_CREACION']=date("Y-m-d H:i:s");
						$dat['ID_USUARIO']=$idusuario;
						$idp=$this->academico_model->crearPlanificacion($dat);
						//verificar si tiene mas de una plantilla
						$mat=$this->academico_model->obtener_datos_materia($id_materia);
						if(isset($mat['IDS_PLANTILLA']) and stripos($mat['IDS_PLANTILLA'], '+') !== false){
							$ids_pla=explode('+',$mat['IDS_PLANTILLA']);
							foreach($ids_pla as $kv=>$idpla){
								if($kv==0){
									$this->academico_model->actualizarPlanificacion(array('ID_PLANTILLA'=>$idpla),$idp);
									if($id_fecha_cierre>0){
										$this->academico_model->actualizar_fecha_cierre(array('ID_PLANTILLA'=>$idpla),$id_fecha_cierre);
									}
								}elseif($idpla>0){
									$dat['ID_PLANTILLA']=$idpla;
									$this->academico_model->crearPlanificacion($dat);
								}
							}
						}
					}else{
						$actualizados=$this->academico_model->actualizarPlanificacion($dat,$id_planificacion[$k]);
						if($actualizados>0){
							$dat1['FECHA_ACTUALIZACION']=date("Y-m-d H:i:s");
							$dat1['ID_USUARIO_ACTUALIZA']=$idusuario;
							$actualizados=$this->academico_model->actualizarPlanificacion($dat1,$id_planificacion[$k]);
						}
					}
					//reasignar docente
					if($dcm>0 and $dcm!=''){
						$r=$this->academico_model->reasignarDocente($dcm,0,$id_materia,$id_grupo);
					}
					//enviar datos a VLC
					/*if($id_planificacion[$k]==0 or $actualizados>0){
						$estudiantes_materia=$this->academico_model->buscar_materias_matriculados(array('ID_CARRERA_MATERIA'=>$k,'ID_PERIODO_ACADEMICO'=>$id_periodo_academico,'ID_GRUPO'=>$id_grupo));
						foreach($estudiantes_materia as $em){
							//$this->sendMateriaVlc($em['ID_ESTUDIANTE_CARRERA_MATERIA'],'actualizar');
						}
					}*/
				}
			}
			echo '1';
		}else{
			echo 'Acceso Denegado';
		}
	}

	////////////////////////////////////////////////////////////////////
	public function getPlanificacion()
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado')){
			$id_carrera = trim($this->input->post('carrera'));
			$id_periodo = trim($this->input->post('periodo'));
			$grupo = trim($this->input->post('grupo'));
			$planificacion=$this->academico_model->buscarPlanificacion($grupo,$id_carrera,$id_periodo);
			echo json_encode($planificacion);
		}else{
			echo 'Acceso Denegado';
		}
	}

	////////////////////////////////////////////////////////////////////
	/*public function sendMatriculaVlc($idCliente,$estado)
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado')){
			$matricula=$this->academico_model->obtener_datos_matricula($idCliente);
			$materias=$this->academico_model->get_materias_estudiante($matricula['ID_PERSONA'],$matricula['ID_PERIODO_ACADEMICO']);
			$sendMaterias=array();
			foreach($materias as $k=>$materia){
				$dat_materia=$this->academico_model->get_materias_estudianteAll($materia['ID_ESTUDIANTE_CARRERA_MATERIA']);
				$sendMaterias[$k]['id_materia']=$this->academico_model->get_id_materia_conversion($materia['ID_CARRERA_MATERIA']);
				$sendMaterias[$k]['nombre_materia']=$dat_materia['MATERIA'];
				$sendMaterias[$k]['grupo']=$dat_materia['GRUPO'];
				$sendMaterias[$k]['nivel_materia']=$materia['NIVEL_MATERIA'];
				$sendMaterias[$k]['cedula_docente']=$dat_materia['CEDULA_DOCENTE'];
			}
			$estudiante['cedula_estudiante']=$matricula['NRO_DOCUMENTO'];
			$estudiante['id_carrera']=$matricula['ID_CARRERA'];
			$estudiante['nombre_carrera']=$matricula['CARRERA'];
			$estudiante['id_periodo']=$matricula['ID_PERIODO_ACADEMICO'];
			$estudiante['periodo']=$matricula['PERIODO'];
			$estudiante['estado']=$estado;
			if($estado=='activo'){
				$estudiante['materias']=$sendMaterias;
			}
			$ch  = curl_init();
			$url = 'http://localhost/Deming/index.php/academico/academico/recibeMatriculaVlc';
			curl_setopt($ch, CURLOPT_URL, $url);
			curl_setopt($ch, CURLOPT_POST,true);
			curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode(array('matricula'=>$estudiante)));
			curl_setopt($ch, CURLOPT_HEADER, false);
			curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json'));
			curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
			curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);
			$resultado = curl_exec($ch);
			$error     = curl_error($ch);
			curl_close($ch);
			//log de envio
			$dat['CEDULA']=$estudiante['cedula_estudiante'];
			$dat['ESTADO']=$estado;
			$dat['MSJ_JSON']=json_encode(array('matricula'=>$estudiante));
			$dat['RESULTADO']=$resultado;
			$dat['ERROR']=$error;
			$dat['FECHA']=date('Y-m-d H:i:s');
			$this->academico_model->crear_log_send_vlc($dat);
			//echo json_encode(array('matricula'=>$estudiante));
		}else{
			echo 'Acceso Denegado';
		}
	}
	*/

	////////////////////////////////////////////////////////////////////
	public function sendMateriaVlc($idEstudianteCarreraMateria,$opcion,$automatico=null)
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if(($idusuario>0 or $automatico==1) and stripos($_SERVER['HTTP_HOST'],'binary.ec')!==FALSE){
		//if($idusuario>0 or $automatico==1){
			$sendMateria=array();
			$resultado='';
			$error='';
			$dat_materia=$this->academico_model->get_materias_estudianteAll($idEstudianteCarreraMateria);
			$sendMateria['group_name']=$dat_materia['GRUPO'];
			$sendMateria['subject_id']=(int)$this->academico_model->get_id_materia_conversion($dat_materia['ID_CARRERA_MATERIA']);
			$sendMateria['student_identification_number']=$dat_materia['CEDULA_ESTUDIANTE'];
			$sendMateria['teacher_identification_number']=$dat_materia['CEDULA_DOCENTE'];
			$sendMateria['subject_class_date']='';
			if($dat_materia['FECHA_TUTORIA1']!='0000-00-00' and $dat_materia['FECHA_TUTORIA1']!=NULL){
				$sendMateria['subject_class_date']=$dat_materia['FECHA_TUTORIA1'];
			}
			$sendMateria['subject_exam_date']='';
			if($dat_materia['FECHA_EXAMEN']!='0000-00-00' and $dat_materia['FECHA_EXAMEN']!=NULL){
				$sendMateria['subject_exam_date']=$dat_materia['FECHA_EXAMEN'];
			}
			$sendMateria['subject_extension_exam_date']='';
			if($dat_materia['FECHA_SUPLETORIO']!='0000-00-00' and $dat_materia['FECHA_SUPLETORIO']!=NULL){
				$sendMateria['subject_extension_exam_date']=$dat_materia['FECHA_SUPLETORIO'];
			}
			if($dat_materia['FECHA_TUTORIA3']!='0000-00-00' and $dat_materia['FECHA_TUTORIA3']!=NULL){
				$sendMateria['has_double_class']=true;
				$sendMateria['has_double_class_date']=$dat_materia['FECHA_TUTORIA3'];
			}else{
				$sendMateria['has_double_class']=false;
				$sendMateria['has_double_class_date']='';
			}
			$sendMateria['subject_due_date']='';
			if($dat_materia['FECHA_CIERRE']!='0000-00-00' and $dat_materia['FECHA_CIERRE']!=NULL){
				$sendMateria['subject_due_date']=$dat_materia['FECHA_CIERRE'];
			}
			if($opcion=='crear' and $dat_materia['ID_VLC']<=0){
				//$sendMateria=array_merge(array('id'=>1), $sendMateria);
				$ch  = curl_init();
				//$url = 'http://localhost/Deming/index.php/academico/academico/recibeMatriculaVlc';
				$url = $this->url_vlc;
				curl_setopt($ch, CURLOPT_URL, $url);
				curl_setopt($ch, CURLOPT_POST,true);
				curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($sendMateria));
				curl_setopt($ch, CURLOPT_HEADER, false);
				curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json'));
				curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
				curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);
				$resultado = curl_exec($ch);
				$error     = curl_error($ch);
				curl_close($ch);
				//actualizar id de registro en vlc
				if($resultado!=''){
					$res = json_decode($resultado, true);
					if(isset($res['id'])){
						$this->academico_model->actualizar_acad_estudiante_carrera_materia(array('ID_VLC'=>$res['id']),$idEstudianteCarreraMateria);
					}
				}
			}
			if($opcion=='actualizar' and $dat_materia['ID_VLC']>=0){
				$sendMateria=array_merge(array('id'=>(int)$dat_materia['ID_VLC']), $sendMateria);
				$ch  = curl_init();
				//$url = 'http://localhost/Deming/index.php/academico/academico/recibeMatriculaVlc';
				$url = $this->url_vlc.'/'.$dat_materia['ID_VLC'];
				curl_setopt($ch, CURLOPT_URL, $url);
				//curl_setopt($ch, CURLOPT_POST,true);
				curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');
				curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($sendMateria));
				curl_setopt($ch, CURLOPT_HEADER, false);
				curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json'));
				curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
				curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);
				$resultado = curl_exec($ch);
				$error     = curl_error($ch);
				curl_close($ch);
			}
			if($opcion=='borrar' and $dat_materia['ID_VLC']>=0){
				$sendMateria=array_merge(array('id'=>(int)$dat_materia['ID_VLC']), $sendMateria);
				$ch  = curl_init();
				//$url = 'http://localhost/Deming/index.php/academico/academico/recibeMatriculaVlc';
				$url = $this->url_vlc.'/'.$dat_materia['ID_VLC'];
				curl_setopt($ch, CURLOPT_URL, $url);
				//curl_setopt($ch, CURLOPT_POST,true);
				curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
				curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($sendMateria));
				curl_setopt($ch, CURLOPT_HEADER, false);
				curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json'));
				curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
				curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);
				$resultado = curl_exec($ch);
				$error     = curl_error($ch);
				curl_close($ch);
			}
			if($opcion=='leer' and $dat_materia['ID_VLC']>=0){
				$sendMateria=array_merge(array('id'=>(int)$dat_materia['ID_VLC']), $sendMateria);
				$ch  = curl_init();
				//$url = 'http://localhost/Deming/index.php/academico/academico/recibeMatriculaVlc';
				$url = $this->url_vlc.'/'.$dat_materia['ID_VLC'];
				curl_setopt($ch, CURLOPT_URL, $url);
				//curl_setopt($ch, CURLOPT_POST,true);
				curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
				curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($sendMateria));
				curl_setopt($ch, CURLOPT_HEADER, false);
				curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json'));
				curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
				curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);
				$resultado = curl_exec($ch);
				$error     = curl_error($ch);
				curl_close($ch);
			}
			//log de envio
			$dat['CEDULA']=$dat_materia['CEDULA_ESTUDIANTE'];
			$dat['ESTADO']=$opcion;
			$dat['MSJ_JSON']=json_encode($sendMateria);
			$dat['RESULTADO']=$resultado;
			$dat['ERROR']=$error;
			$dat['FECHA']=date('Y-m-d H:i:s');
			$this->academico_model->crear_log_send_vlc($dat);
		}else{
			//echo 'Acceso Denegado';
		}
	}

	public function recibeMatriculaVlc()
	{
		$data = json_decode(file_get_contents('php://input'), true);
		//$matricula=$data['matricula'];
		$ip=$_SERVER['REMOTE_ADDR'];
		/*$recibido='<br>cedula_estudiante:'.$matricula['cedula_estudiante'];
		$recibido.='<br>id_carrera:'.$matricula['id_carrera'];
		$recibido.='<br>nombre_carrera:'.$matricula['nombre_carrera'];
		$recibido.='<br>id_periodo:'.$matricula['id_periodo'];
		$recibido.='<br>periodo:'.$matricula['periodo'];
		$recibido.='<br>estado:'.$matricula['estado'];
		if(isset($matricula['materias'])){
			foreach($matricula['materias'] as $m){
				$recibido.='<br><br>id_materia:'.$m['id_materia'];
				$recibido.='<br>nombre_materia:'.$m['nombre_materia'];
				$recibido.='<br>grupo:'.$m['grupo'];
				$recibido.='<br>nivel_materia:'.$m['nivel_materia'];
				$recibido.='<br>cedula_docente:'.$m['cedula_docente'];
			}
		}*/
		echo 'recibido desde '.$ip.$data;
	}

	////////////////////////////////////////////////////////////////////
	public function sendPlanificacionVlc($id_carrera,$id_nivel,$id_grupo)
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado')){
			$id_periodo_academico = $this->academico_model->get_periodo_activado();
			$materias  = $this->academico_model->buscarPlanificaciones(array('ID_CARRERA'=>$id_carrera,'ID_NIVEL'=>$id_nivel,'ID_GRUPO'=>$id_grupo,'ID_PERIODO_ACADEMICO'=>$id_periodo_academico));
			foreach($materias as $k=>$materia){
				$planificacion = $this->academico_model->getPlanificacion($id_grupo,$materia['ID_CARRERA_MATERIA']);
				$sendMaterias[$k]['id_materia']=$this->academico_model->get_id_materia_conversion($materia['ID_CARRERA_MATERIA']);
				$sendMaterias[$k]['nombre_materia']=$dat_materia['NOMBRE'];
				$sendMaterias[$k]['cedula_docente']=$planificacion['NRO_DOCUMENTO'];
				$sendMaterias[$k]['fecha_tutoria1']=$planificacion['FECHA_TUTORIA1'];
				$sendMaterias[$k]['fecha_tutoria2']=$planificacion['FECHA_TUTORIA2'];
				$sendMaterias[$k]['fecha_tutoria3']=$planificacion['FECHA_TUTORIA3'];
				$sendMaterias[$k]['fecha_tutoria4']=$planificacion['FECHA_TUTORIA4'];
				$sendMaterias[$k]['fecha_examen']=$planificacion['FECHA_EXAMEN'];
				$sendMaterias[$k]['fecha_cierre']=$planificacion['FECHA_CIERRE'];
				$sendMaterias[$k]['fecha_supletorio']=$planificacion['FECHA_SUPLETORIO'];
			}
			$plan['id_carrera']=$id_carrera;
			$plan['nombre_carrera']=$matricula['CARRERA'];
			$plan['nivel']=$id_nivel;
			$plan['grupo']=$matricula['PERIODO'];
			$plan['id_periodo']=$matricula['ID_PERIODO_ACADEMICO'];
			$plan['periodo']=$matricula['PERIODO'];
			$plan['materias']=$sendMaterias;






			$matricula=$this->academico_model->obtener_datos_matricula($idCliente);
			$materias=$this->academico_model->get_materias_estudiante($matricula['ID_PERSONA'],$matricula['ID_PERIODO_ACADEMICO']);
			$sendMaterias=array();
			foreach($materias as $k=>$materia){
				$dat_materia=$this->academico_model->get_materias_estudianteAll($materia['ID_ESTUDIANTE_CARRERA_MATERIA']);
				$sendMaterias[$k]['id_materia']=$this->academico_model->get_id_materia_conversion($materia['ID_CARRERA_MATERIA']);
				$sendMaterias[$k]['nombre_materia']=$dat_materia['MATERIA'];
				$sendMaterias[$k]['grupo']=$dat_materia['GRUPO'];
				$sendMaterias[$k]['nivel_materia']=$materia['NIVEL_MATERIA'];
				$sendMaterias[$k]['cedula_docente']=$dat_materia['CEDULA_DOCENTE'];
			}
			$estudiante['cedula_estudiante']=$matricula['NRO_DOCUMENTO'];
			$estudiante['id_carrera']=$matricula['ID_CARRERA'];
			$estudiante['nombre_carrera']=$matricula['CARRERA'];
			$estudiante['id_periodo']=$matricula['ID_PERIODO_ACADEMICO'];
			$estudiante['periodo']=$matricula['PERIODO'];
			$estudiante['estado']=$estado;
			if($estado=='activo'){
				$estudiante['materias']=$sendMaterias;
			}
			$ch  = curl_init();
			$url = 'http://localhost/Deming/index.php/academico/academico/recibeMatriculaVlc';
			curl_setopt($ch, CURLOPT_URL, $url);
			curl_setopt($ch, CURLOPT_POST,true);
			curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode(array('matricula'=>$estudiante)));
			curl_setopt($ch, CURLOPT_HEADER, false);
			curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json'));
			curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
			curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);
			$resultado = curl_exec($ch);
			$error     = curl_error($ch);
			curl_close($ch);
			//log de envio
			$dat['CEDULA']=$estudiante['cedula_estudiante'];
			$dat['ESTADO']=$estado;
			$dat['MSJ_JSON']=json_encode(array('matricula'=>$estudiante));
			$dat['RESULTADO']=$resultado;
			$dat['ERROR']=$error;
			$dat['FECHA']=date('Y-m-d H:i:s');
			$this->academico_model->crear_log_send_vlc($dat);
			//echo json_encode(array('matricula'=>$estudiante));
		}else{
			echo 'Acceso Denegado';
		}
	}

	///////////////////////////////////////////////////////////////////
	public function matriculaEstudiante()
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,86)){
			$id_persona=$this->session->userdata('loggeado')['ID_PERSONA'];
			//$id_periodo_activado = $this->academico_model->get_periodo_activado();
			$id_periodo_activado = $this->academico_model->get_periodo_matricula();
			$id_cliente=$this->academico_model->get_id_cliente($id_persona);
			//$matricula = $this->academico_model->obtener_matricula(array('ID_PERSONA'=>$id_persona,'ID_PERIODO_ACADEMICO'=>$id_periodo_activado));
			$matriculas = $this->academico_model->buscar_matricula(array('ID_PERSONA'=>$id_persona,'ID_PERIODO_ACADEMICO'=>$id_periodo_activado));
			//if($matricula!=NULL){
			if(count($matriculas)>0){
				foreach($matriculas as $km=>$m){
					$matricula=$m;
					$matriculas[$km]['matricula'] = $this->academico_model->obtener_datos_matricula($id_cliente,$matricula['ID_MATRICULA'],$id_periodo_activado);
					//$materias=$this->academico_model->get_materias_estudiante($id_persona,$id_periodo_activado);//todas las materias del alumno en el periodo vigente
					$materias=$this->academico_model->get_materias_estudiante($id_persona,$id_periodo_activado,null,null,$matricula['ID_CARRERA']);//todas las materias del alumno en el periodo vigente en la carrera
					foreach($materias as $k=>$materia){
						$materias[$k]=$this->academico_model->get_materias_estudianteAll($materia['ID_ESTUDIANTE_CARRERA_MATERIA']);
					}
					$matriculas[$km]['materias']=$materias;
				}
			}else{
				$ultima_matricula=$this->academico_model->datos_ultima_matricula_estudiante($id_cliente);
				if(isset($ultima_matricula['ID_CARRERA']) and $ultima_matricula['ID_CARRERA']>0){//si existe datos de ultima matricula
					$materias=$this->academico_model->get_materias_estudiante($id_persona,0,1,$ultima_matricula['ID_PERIODO_ACADEMICO']);//todas las materias del alumno hasta el periodo de consulta
					$pensum_nivel=$this->academico_model->getMateriasPorCarreraNivel($ultima_matricula['ID_CARRERA'],$ultima_matricula['ID_NIVEL']);
					$todo_nivel=0;
					foreach($pensum_nivel as $pn){
						foreach($materias as $m){
							$aprobo=0;
							if($m['FUE_HOMOLOGADA']==1 or $m['FUE_CONVALIDADA']==1 or $m['FUE_HISTORIAL']==1){
								$aprobo=1;
							}else{
								$estado=$this->academico_model->get_calificaciones(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$m['ID_ESTUDIANTE_CARRERA_MATERIA'],'ID_TIPO_CALIFICACION'=>6));
								if(isset($estado[0]) and $estado[0]['ESTADO_CALIFICACION']==1){
									$aprobo=1;
								}
							}
							if($pn['ID_CARRERA_MATERIA']==$m['ID_CARRERA_MATERIA'] and $aprobo==1){
								$todo_nivel=$todo_nivel+1;
							}
						}
					}
					$matricula = $this->academico_model->obtener_datos_matricula($id_cliente,$ultima_matricula['ID_MATRICULA'],$ultima_matricula['ID_PERIODO_ACADEMICO']);
					//cambio de grupo de 608B a 608A
					if(isset($matricula['GRUPO']) and $matricula['GRUPO']=='608B'){
						$matricula['GRUPO']='608A';
					}
					$matricula['NIVEL']='';
					$matricula['ESTADO']='-1';
					$aprobo_nivel=0;
					$aun_por_aprobar=count($pensum_nivel)-$todo_nivel;
					$materias=array();
					$pago_pendiente = $this->automatica_model->get_total_por_pagar($ultima_matricula['ID_MATRICULA']);
					if($pago_pendiente<=0){//revisar si existe arancel de pension atrasada
						$id_rubro_saldo=39;
						$dataArancel['ID_MATRICULA']=$ultima_matricula['ID_MATRICULA'];
						$dataArancel['ID_RUBRO']=$id_rubro_saldo;
						$arancel = $this->facturacion_model->buscarArancel($dataArancel);
						/*if(count($arancel)>0 and $arancel[0]['ESTADO']<2){
							$pago_pendiente=1;
						}*/
						foreach($arancel as $ar){
							if($ar['ESTADO']<2){
								$pago_pendiente=1;
							}
						}
					}
					if($aun_por_aprobar==0 and $ultima_matricula['ID_NIVEL']<6){
						$aprobo_nivel=1;
						$id_siguiente_nivel=$ultima_matricula['ID_NIVEL']+1;
						$id_nuevo_grupo=$this->academico_model->get_id_grupo($matricula['GRUPO'],$matricula['ID_CARRERA'],$id_siguiente_nivel);
						if($id_nuevo_grupo>0){
							//$materias  = $this->academico_model->buscarPlanificaciones(array('ID_CARRERA'=>$matricula['ID_CARRERA'],'ID_NIVEL'=>$id_siguiente_nivel,'ID_GRUPO'=>$id_nuevo_grupo,'ID_PERIODO_ACADEMICO'=>$id_periodo_activado));
							$materias_carrera_nivel  = $this->academico_model->getMateriasPorCarreraNivel($matricula['ID_CARRERA'], $id_siguiente_nivel);
							foreach($materias_carrera_nivel as $k=>$mcn){
								$materias[$k]['ID_CARRERA_MATERIA']=$mcn['ID_CARRERA_MATERIA'];
								$materias[$k]['MATERIA']=$mcn['NOMBRE'];
								$materias[$k]['DOCENTE']='';
								$materias[$k]['FECHA_TUTORIA1']=NULL;
								$materias[$k]['FECHA_TUTORIA2']=NULL;
								$materias[$k]['FECHA_TUTORIA3']=NULL;
								$materias[$k]['FECHA_TUTORIA4']=NULL;
								$materias[$k]['FECHAS_TUTORIA']=NULL;
								$materias[$k]['FECHA_EXAMEN']=NULL;
								$materias[$k]['FECHA_CIERRE']=NULL;
								$materias[$k]['FECHA_SUPLETORIO']=NULL;
								$planificacion  = $this->academico_model->getPlanificacion($id_nuevo_grupo,$mcn['ID_CARRERA_MATERIA'],$id_periodo_activado);
								if($planificacion!=NULL){
									$materias[$k]['FECHA_TUTORIA1']=$planificacion['FECHA_TUTORIA1'];
									$materias[$k]['FECHA_TUTORIA2']=$planificacion['FECHA_TUTORIA2'];
									$materias[$k]['FECHA_TUTORIA3']=$planificacion['FECHA_TUTORIA3'];
									$materias[$k]['FECHA_TUTORIA4']=$planificacion['FECHA_TUTORIA4'];
									$materias[$k]['FECHAS_TUTORIA']=$planificacion['FECHAS_TUTORIA'];
									$materias[$k]['FECHA_EXAMEN']=$planificacion['FECHA_EXAMEN'];
									$materias[$k]['FECHA_CIERRE']=$planificacion['FECHA_CIERRE'];
									$materias[$k]['FECHA_SUPLETORIO']=$planificacion['FECHA_SUPLETORIO'];
								}
							}
						}
						$niveles  = $this->academico_model->get_niveles($id_siguiente_nivel);
						$convalidadas = $this->academico_model->get_materias_conv($id_cliente);
						$vector_convalidadas=array();
						foreach($convalidadas as $convalidada){
							$vector_convalidadas[]=$convalidada['ID_CARRERA_MATERIA'];
						}
						$homologadas = $this->academico_model->get_materias_homo($id_cliente);
						$vector_homologadas=array();
						foreach($homologadas as $homologada){
							$vector_homologadas[]=$homologada['ID_CARRERA_MATERIA'];
						}
						$historiales = $this->academico_model->get_materias_historial($id_cliente);
						$vector_historiales=array();
						foreach($historiales as $historial){
							$vector_historiales[]=$historial['ID_CARRERA_MATERIA'];
						}
						$aprobadas = $this->academico_model->get_materias_periodos($id_cliente,$id_periodo_activado);
						$vector_aprobadas=array();
						foreach($aprobadas as $aprobada){
							$vector_aprobadas[]=$aprobada['ID_CARRERA_MATERIA'];
						}
						$num_materias_pensun=count($materias);
						//filtrar materias convalidadas,homologadas,historiales y aprobadas
						foreach($materias as $k=>$materia){
							if(in_array($materia['ID_CARRERA_MATERIA'],$vector_convalidadas) or in_array($materia['ID_CARRERA_MATERIA'],$vector_homologadas) or in_array($materia['ID_CARRERA_MATERIA'],$vector_historiales) or in_array($materia['ID_CARRERA_MATERIA'],$vector_aprobadas)){
								unset($materias[$k]);
							}
						}
						$num_materias_matricula=count($materias);
						if($num_materias_pensun!=$num_materias_matricula){//solo pueden matricularse si se inscriben en todas las materias del nivel
							$materias=array();
						}
						$matricula['NIVEL']=$niveles[0]['NIVEL'];
						if($aun_por_aprobar==0){
							//revisar si es egresado
							$this->load->model('titulacion/titulacion_model');
							$dg['ID_PERSONA']=$ultima_matricula['ID_PERSONA'];
							$dg['ID_CARRERA']=$ultima_matricula['ID_CARRERA'];
							$graduados=$this->titulacion_model->buscar_graduacion($dg);
							if(count($graduados)>0){
								$matricula['ESTADO']=10;//egresado
								if($graduados[0]['CALIFICACION_GRADO']>=7){
									$matricula['ESTADO']=11;//graduado
								}
								$matricula['NIVEL']='';
							}
						}
						//$pago_pendiente = $this->automatica_model->get_total_por_pagar($ultima_matricula['ID_MATRICULA']);
					}
					$matricula['matricula'] =$matricula;
					$matricula['aprobo_nivel']=$aprobo_nivel;
					$matricula['pago_pendiente']=$pago_pendiente;
					$matricula['materias'] =$materias;
					$matriculas[0]=$matricula;
				}else{//revisar si esta inscrito
					/*$inscripcion = $this->academico_model->obtener_datos_inscripcion($id_cliente);
					if($inscripcion!=NULL){
						$matricula['GRUPO']='';
						$matricula['NIVEL']='1';
						$matricula['ESTADO']='-1';
						//$matricula['matricula'] =$matricula;
						$matricula['aprobo_nivel']=1;
						$matricula['materias'] =$materias;
					}*/
				}
			}
			$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			$datos1=$this->perfil_model->cabecera($idusuario);
			$this->load->view('templates/header',$datos1);
			//$this->load->view('matricula_estudiante',$matricula);
			$this->load->view('matricula_estudiante',array('matriculas'=>$matriculas));
			$this->load->view('templates/footer');
		}else{
			redirect('admin/login', 'refresh');
		}
	}

	///////////////////////////////////////////////////////////////////
	public function procesarMatriculaEstudiante($id_persona=null,$grupo=null)
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and ($this->academico_model->verificar_usuario_funcionalidad($idusuario,86) or $id_persona!=null)){
			if($id_persona==null){
				$id_persona=$this->session->userdata('loggeado')['ID_PERSONA'];
			}
			//$id_periodo_activado = $this->academico_model->get_periodo_activado();
			$id_periodo_activado = $this->academico_model->get_periodo_matricula();
			$id_cliente=$this->academico_model->get_id_cliente($id_persona);
			$matricula = $this->academico_model->obtener_matricula(array('ID_PERSONA'=>$id_persona,'ID_PERIODO_ACADEMICO'=>$id_periodo_activado));
			if($matricula!=NULL){
				$respuesta=array('resultado'=>'Estudiante ya está matriculado','numero'=>'');
			}else{
				$datos   = $this->academico_model->get_datos_cliente_para_crear_usuario($id_cliente);
				$this->load->model('admin/usuarios_model');
				//verificar si existe usuario
				$usuario = $this->usuarios_model->buscar_usuarios(array('ID_PERSONA'=>$datos['ID_PERSONA']));
				if(count($usuario)<=0){
					$data_usuario['ID_PERSONA'] = $datos['ID_PERSONA'];
					$data_usuario['USUARIO']    = $datos['NRO_DOCUMENTO'];
					$data_usuario['CLAVE']      = md5($datos['NRO_DOCUMENTO']);
					$data_usuario['ESTADO']     = 1;
					$data_usuario['NOMBRE_COMPLETO']   = $datos['PRIMER_NOMBRE']." ".$datos['SEGUNDO_NOMBRE']." ".$datos['APELLIDO_PATERNO']." ".$datos['APELLIDO_MATERNO'];
					$data_usuario['NRO_DOCUMENTO']     = $datos['NRO_DOCUMENTO'];
					$id_usuario                        = $this->usuarios_model->crearUsuario($data_usuario);
					$data_usuario_perfil['id_usuario'] = $id_usuario;
					$data_usuario_perfil['id_perfil']  = 5;//perfil alumno
					$this->usuarios_model->crearUsuarioPerfil($data_usuario_perfil);
				}
				///////////
				//notifico al mail
				//$this->enviarCorreoElectronico($dir_correo_e, $usuario_generado, $pass );
				//////////

				$ultima_matricula=$this->academico_model->datos_ultima_matricula_estudiante($id_cliente);
				if(isset($ultima_matricula['ID_CARRERA']) and $ultima_matricula['ID_CARRERA']>0){//si existe datos de ultima matricula
					$matricula = $this->academico_model->obtener_datos_matricula($id_cliente,$ultima_matricula['ID_MATRICULA'],$ultima_matricula['ID_PERIODO_ACADEMICO']);
					//cambio de grupo de 608B a 608A
					if(isset($matricula['GRUPO']) and $matricula['GRUPO']=='608B'){
						$matricula['GRUPO']='608A';
					}
					$id_siguiente_nivel=$ultima_matricula['ID_NIVEL']+1;
					//datos para matricula
					$data['ID_CLIENTE']=$id_cliente;
					$data['ID_MATRICULA']=NULL;
					$data['ID_CARRERA']=$ultima_matricula['ID_CARRERA'];
					$data['GRUPO_ASIGNADO']=$matricula['GRUPO'];
					$data['ID_NIVEL']=$id_siguiente_nivel;
					$data['ID_PERIODO_ACADEMICO']=$id_periodo_activado;
					$data['ID_RUBRO_OPCIONAL']=0;
					$data['ID_MODALIDAD']=$matricula['ID_MODALIDAD'];
					$data['OPCION_PAGO']='CUARTA';
					$data['ESTADO']=3;
					$id_nuevo_grupo=$this->academico_model->get_id_grupo($matricula['GRUPO'],$matricula['ID_CARRERA'],$id_siguiente_nivel);
					$convalidadas = $this->academico_model->get_materias_conv($id_cliente);
					$vector_convalidadas=array();
					foreach($convalidadas as $convalidada){
						$vector_convalidadas[]=$convalidada['ID_CARRERA_MATERIA'];
					}
					$homologadas = $this->academico_model->get_materias_homo($id_cliente);
					$vector_homologadas=array();
					foreach($homologadas as $homologada){
						$vector_homologadas[]=$homologada['ID_CARRERA_MATERIA'];
					}
					$historiales = $this->academico_model->get_materias_historial($id_cliente);
					$vector_historiales=array();
					foreach($historiales as $historial){
						$vector_historiales[]=$historial['ID_CARRERA_MATERIA'];
					}
					$aprobadas = $this->academico_model->get_materias_periodos($id_cliente,$id_periodo_activado);
					$vector_aprobadas=array();
					foreach($aprobadas as $aprobada){
						$vector_aprobadas[]=$aprobada['ID_CARRERA_MATERIA'];
					}

					//$materias  = $this->academico_model->buscarPlanificaciones(array('ID_CARRERA'=>$matricula['ID_CARRERA'],'ID_NIVEL'=>$id_siguiente_nivel,'ID_GRUPO'=>$id_nuevo_grupo,'ID_PERIODO_ACADEMICO'=>$id_periodo_activado));
					$materias  = $this->academico_model->getMateriasPorCarreraNivel($matricula['ID_CARRERA'], $id_siguiente_nivel);
					foreach($materias as $materia){
						if(in_array($materia['ID_CARRERA_MATERIA'],$vector_convalidadas) or in_array($materia['ID_CARRERA_MATERIA'],$vector_homologadas) or in_array($materia['ID_CARRERA_MATERIA'],$vector_historiales) or in_array($materia['ID_CARRERA_MATERIA'],$vector_aprobadas)){//filtrar materias convalidadas,homologadas,historiales y aprobadas
						}else{

							$id_docente=0;
							if($id_nuevo_grupo>0){
								$planificacion  = $this->academico_model->getPlanificacion($id_nuevo_grupo,$materia['ID_CARRERA_MATERIA'],$id_periodo_activado);
								if($planificacion!=NULL){
									$id_docente=$planificacion['ID_PERSONA'];
								}
							}

							$data['MATERIAS_ASIGNADAS'][$materia['ID_CARRERA_MATERIA']]=$materia['ID_CARRERA_MATERIA'];
							$data['DOCENTES_ASIGNADOS'][$materia['ID_CARRERA_MATERIA']]=$id_docente;
							$data['GRUPO'][$materia['ID_CARRERA_MATERIA']]=$matricula['GRUPO'];
						}
					}
					//carga de archivo
					$archivo= $_FILES['pago']['name'];
					if($archivo!=''){
						//crear carpeta documentos
						$carpeta = FCPATH.'/archivos/documentos/'.$datos['NRO_DOCUMENTO'];
						if(!file_exists($carpeta) and $datos['NRO_DOCUMENTO']!=''){
							mkdir($carpeta, 0777, true);
						}
						$dato_archivo=$this->cargar_archivo('pago',1100,'documentos/'.$datos['NRO_DOCUMENTO'].'/');
						if($dato_archivo['error']==''){
							$data['ARCHIVO_PAGO']='documentos/'.$datos['NRO_DOCUMENTO'].'/'.$dato_archivo['file_name'];
							$respuesta = $this->academico_model->crearActualizarMatricula($data);
						}else{
							$respuesta=array('resultado'=>$dato_archivo['error'],'numero'=>'');
						}
					}else{
						$respuesta=array('resultado'=>'Archivo no especificado','numero'=>'');
					}
				}else{
					$inscripcion=$this->academico_model->obtener_datos_inscripcion($id_cliente);
					if($inscripcion!=NULL){
						//datos para matricula
						$data['ID_CLIENTE']=$id_cliente;
						$data['ID_MATRICULA']=NULL;
						$data['ID_CARRERA']=$inscripcion['ID_CARRERA'];
						$data['GRUPO_ASIGNADO']='N/A';
						if($grupo!=null){
							$data['GRUPO_ASIGNADO']=$grupo;
						}
						$data['ID_NIVEL']=1;
						$data['ID_PERIODO_ACADEMICO']=$id_periodo_activado;
						$data['ID_RUBRO_OPCIONAL']=0;
						$data['ID_MODALIDAD']=$inscripcion['ID_MODALIDAD'];
						$data['OPCION_PAGO']='CUARTA';
						$data['ESTADO']=3;
						$id_grupo=0;
						if($grupo!=null){
							$id_grupo=$this->academico_model->get_id_grupo($grupo,$data['ID_CARRERA'],$data['ID_NIVEL']);
						}
						$materias  = $this->academico_model->getMateriasPorCarreraNivel($inscripcion['ID_CARRERA'], 1);
						foreach($materias as $materia){
							$id_docente=0;
							if($id_grupo>0){
								$planificacion  = $this->academico_model->getPlanificacion($id_grupo,$materia['ID_CARRERA_MATERIA'],$id_periodo_activado);
								if($planificacion!=NULL){
									$id_docente=$planificacion['ID_PERSONA'];
								}
							}
							$data['MATERIAS_ASIGNADAS'][$materia['ID_CARRERA_MATERIA']]=$materia['ID_CARRERA_MATERIA'];
							$data['DOCENTES_ASIGNADOS'][$materia['ID_CARRERA_MATERIA']]=$id_docente;
							$data['GRUPO'][$materia['ID_CARRERA_MATERIA']]=$data['GRUPO_ASIGNADO'];
						}
						$this->load->model('clientes/clientes_model');
						$datos_archivos = $this->clientes_model->obtener_datos_archivos($id_persona);
						$data['ARCHIVO_PAGO']='documentos/'.$datos['NRO_DOCUMENTO'].'/'.$datos_archivos['PAGO'];
						$respuesta = $this->academico_model->crearActualizarMatricula($data);
						//return;
					}else{
						$respuesta=array('resultado'=>'Error en proceso','numero'=>'');
					}
				}

				if(isset($respuesta['numero']) and $respuesta['numero']!=''){
					$plan=$this->academico_model->seleccionado_plan_de_pago($data['ID_CLIENTE'],$data['ID_CARRERA'],$data['ID_PERIODO_ACADEMICO']);
					//si no tiene plan de pago genero el plan personalizado de Deming
					if($plan==0){
						//aplicar plan de pagos
						//$plan_pago='6-6';//6 Cuotas A
						$plan_pago='10-6';//6 Cuotas B
						$plan_pago=explode('-',$plan_pago);
						$id_plan_pago=$plan_pago[0];
						$cuotas=$plan_pago[1];
						$rubros_matricula=$this->automatica_model->get_datos_cliente_rubro($datos['NRO_DOCUMENTO'],$data['ID_PERIODO_ACADEMICO'],$data['ID_CARRERA']);
						foreach($rubros_matricula as $rubro){
							$id_cliente_rubro=$rubro['ID_CLIENTE_RUBRO'];
							$valor_primera_cuota=$rubro['VALOR_PRIMERA_CUOTA'];
							$valor_cuota_regular=$rubro['VALOR_CUOTA_REGULAR'];
							$valor_recargo_generacion=$rubro['VALOR_RECARGO_GENERACION'];
							$descuento_pronta_matricula=0;
							$descuento_beca=0;
							$plan_pago=4;
							//aplicar descuento Pronta Matr�cula
							if($data['ID_RUBRO_OPCIONAL']==-1){
								if($rubro['ID_RUBRO']==17){//semestre
									//$descuento = $this->rubros_model->buscar_rubros(array('rubro'=>'DESCUENTO SEMESTRE'));
									//$descuento_pronta_matricula=round(($descuento[0]['PRECIO']-15.5)/5,2);
								}
							}
							if($rubro['ID_RUBRO']==16 or $rubro['ID_RUBRO']==17){
								$plan_pago=$id_plan_pago;
							}
							if($rubro['ID_RUBRO']==17){//aplicar plan a semestre
								if($rubro['VALOR_PRIMERA_CUOTA']>=210 and $id_plan_pago==6){
									$valor_primera_cuota=210;
									$valor_cuota_regular=round(($rubro['VALOR_PRIMERA_CUOTA']-210)/($cuotas-1),2);
								}elseif($rubro['VALOR_PRIMERA_CUOTA']>=110 and $id_plan_pago==10){
									$valor_primera_cuota=110;
									$valor_cuota_regular=round(($rubro['VALOR_PRIMERA_CUOTA']-110)/($cuotas-1),2);
								}else{
									$valor_primera_cuota=round($rubro['VALOR_PRIMERA_CUOTA']/$cuotas,2);
									$valor_cuota_regular=round($rubro['VALOR_PRIMERA_CUOTA']/$cuotas,2);
								}
								if($descuento_pronta_matricula>$valor_cuota_regular){
									$descuento_pronta_matricula=$valor_cuota_regular;
								}
							}
							//aplicar beca
							/*if(isset($beca)){
								$rubros_aplica='+'.$beca['RUBROS_APLICA'].'+';
								$pos_rubro = strpos($rubros_aplica, '+'.$rubro['ID_RUBRO'].'+');
								if($pos_rubro!==false){//si a este rubro se aplica el descuento beca
									$descuento_beca=round($valor_cuota_regular*$beca['PORCENTAJE']/100,2);
								}
							}*/
							//datos matrcula
							$mat=$this->academico_model->buscar_matricula(array('ID_CLIENTE'=>$data['ID_CLIENTE'],'ID_CARRERA'=>$data['ID_CARRERA'],'ID_PERIODO_ACADEMICO'=>$data['ID_PERIODO_ACADEMICO']));
							$id_matricula=$mat[0]['ID_MATRICULA'];
							//eliminar de clientes-rubros-cuotas
							$this->automatica_model->elimiar_cuotas($id_cliente_rubro);
							$this->automatica_model->generar_nuevas_cuotas($id_cliente_rubro, $plan_pago,$valor_primera_cuota,$valor_cuota_regular, $valor_recargo_generacion,$id_cliente,$descuento_pronta_matricula,$descuento_beca,$id_matricula,$data['ID_PERIODO_ACADEMICO']);
						}//fin foreach($rubros_matricula as $rubro){

						//generar pago estudiante
						if(isset($id_matricula) and $id_matricula>0){
							$pago['ID_USUARIO']=$idusuario;
							$pago['FECHA_CREACION']=date('Y-m-d H:i:s');
							$pago['TIPO']=1;//amortización
							if($grupo!=null){
								$datos_archivos = $this->clientes_model->obtener_datos_archivos($id_persona);
								$pago['ARCHIVO']=$datos_archivos['PAGO'];
							}else{
								$file=explode('/',$data['ARCHIVO_PAGO']);
								$pago['ARCHIVO']=$file[count($file)-1];
							}
							$pago['ESTADO']=0;
							$pago['ID_MATRICULA']=$id_matricula;
							$idpago=$this->facturacion_model->crearPagoEstudiante($pago);
							if($grupo!=null){
								$this->clientes_model->actualizarArchivoPersona(array('ID_PAGO_ESTUDIANTE'=>$idpago), $id_persona);
							}
						}
						//colocar beca si es el caso
						if(isset($datos['ES_BECADO']) and $datos['ES_BECADO']==1){
							$this->actualizacionMatriculaBeca($id_cliente,$datos['ID_TIPO_BECA'],$data['ID_PERIODO_ACADEMICO']);
						}
					}//fin de if($plan==0)
					if($grupo!=null){
						return;
					}
				}
			}
			echo json_encode($respuesta);
		}else{
			redirect('admin/login', 'refresh');
		}
	}

	////////////////////////////////////////////////////////////////////
	public function reportePlanificacion()
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,87)){
			$this->load->model('admin/usuarios_model');
			$usuario=$this->session->userdata('loggeado');
			$perfil = $this->usuarios_model->get_perfil_usuario($idusuario);
			if(!$this->input->is_ajax_request()){
				$datos=array();
				$datos['carreras'] = $this->academico_model->get_carreras();
				$datos['niveles'] = $this->academico_model->get_niveles();
				$datos['periodos'] = $this->academico_model->getPeriodos();
				$grupos=$this->academico_model->buscar_grupos_estudiantes();
				$datos['sedes'] = $this->academico_model->buscar_sedes();
				$datos['id_periodo']= $this->academico_model->get_periodo_activado();
				if($usuario['ID_PERFIL']==12){//filtrar grupos para coordinadores
					$gruposc=$this->usuarios_model->grupos_usuario_academico(array('ID_USUARIO_ACADEMICO'=>$idusuario));
					$vector_grupos=array();
					foreach($gruposc as $g){
						$vector_grupos[]=$g['GRUPO'];
					}
					$vector_us[]='0';
					foreach($grupos as $k=>$g){
						if(!in_array($g['NOMBRE'],$vector_grupos)){
							unset($grupos[$k]);
						}else{
							$vector_us[]=$g['ID_SEDE'];
						}
					}
					$datos['sedes'] = $this->academico_model->buscar_sedes($vector_us);
				}
				$datos['grupos']=$grupos;
				$datos['periodos'] = $this->academico_model->getPeriodos();
				$datos1=$this->perfil_model->cabecera($idusuario);
				$this->load->view('templates/header',$datos1);
				$this->load->view('reportePlanificacion',$datos);
				$this->load->view('templates/footer');
			}else{
				$id_carrera = trim($this->input->post('carrera'));
				$id_nivel = trim($this->input->post('nivel'));
				$id_sede = trim($this->input->post('sede'));
				$grupo = trim($this->input->post('grupo'));
				$periodo = trim($this->input->post('periodo'));
				$nro_docente = trim($this->input->post('docente'));
				$fecha_desde = trim($this->input->post('fecha_desde'));
				$fecha_hasta = trim($this->input->post('fecha_hasta'));
				if($grupo!='' and $id_carrera!='' and $id_nivel!=''){
					$id_grupo=$this->academico_model->get_id_grupo($grupo,$id_carrera,$id_nivel);
				}
				$dat['ID_PERIODO_ACADEMICO']=$periodo;
				$dat['ID_CARRERA']=$id_carrera;
				$dat['ID_NIVEL']=$id_nivel;
				$dat['ID_SEDE']=$id_sede;
				$dat['GRUPO']=$grupo;
				$dat['NRO_DOCUMENTO']=$nro_docente;
				//$dat['FECHA_DESDE']=$fecha_desde;
				//$dat['FECHA_HASTA']=$fecha_hasta;
				if($this->session->userdata('loggeado')['ID_PERFIL']==4){//filtrar para perfil docente
					$dat['ID_PERSONA']=$this->session->userdata('loggeado')['ID_PERSONA'];
					$dat['NRO_DOCUMENTO']='';
				}
				$materias  = $this->academico_model->buscarPlanificacionTotal($dat);
				if($usuario['ID_PERFIL']==12 and $grupo==''){//filtrar grupos para coordinadores
					$datos_temp=array();
					$gruposc=$this->usuarios_model->grupos_usuario_academico(array('ID_USUARIO_ACADEMICO'=>$idusuario));
					$vector_grupos=array();
					foreach($gruposc as $g){
						$vector_grupos[]=$g['GRUPO'];
					}


					foreach($materias as $dat){
						if(in_array($dat['GRUPO'],$vector_grupos)){
							$datos_temp[]=$dat;
						}
					}
					$materias=$datos_temp;
				}
				//buscar planificacion docente si filtrar este dato
				if($nro_docente!='' and $nro_docente!=NULL){
					if(isset($periodo) and $periodo>0){
						$id_p=$periodo;
					}else{
						$id_p=$this->academico_model->get_periodo_activado();
					}

					$dat_periodo=$this->academico_model->getPeriodos($id_p);
					$ch  = curl_init();
					//curl_setopt($ch, CURLOPT_URL, 'http://localhost/ligen/index.php/cursos/cursos/planificacion_ligen');
					curl_setopt($ch, CURLOPT_URL, 'https://ligenconsulting.com/biacademos/index.php/cursos/cursos/planificacion_ligen');
					$data_copia['cedula'] = $nro_docente;
					if(isset($fecha_desde) and $fecha_desde!=''){
						$data_copia['fecha_desde'] = $fecha_desde;
					}else{
						$data_copia['fecha_desde'] = $dat_periodo[0]['FECHA_INICIO'];
					}
					if(isset($fecha_hasta) and $fecha_hasta!=''){
						$data_copia['fecha_hasta'] = $fecha_hasta;
					}else{
						$data_copia['fecha_hasta'] = $dat_periodo[0]['FECHA_FIN'];
					}
					$elements                = $data_copia;
					curl_setopt($ch, CURLOPT_POST,true);
					curl_setopt($ch, CURLOPT_POSTFIELDS, $elements);
					curl_setopt($ch, CURLOPT_HEADER, false);
					curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
					curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);
					$resultado = curl_exec($ch);
					$error     = curl_error($ch);
					curl_close($ch);
					if($resultado!=''){
						$materias_ligen=json_decode($resultado,true);
						if(count($materias_ligen)>0){
							foreach($materias_ligen as $ml){
								$fc=explode('+',$ml['clases']);
								$ft1='0000-00-00';
								$fechas='';
								foreach($fc as $k=>$f){
									if($k==0){
										$ft1=$f;
									}else{
										$fechas.=$f.'+';
									}
								}
								$materias[]=array('FECHA_TUTORIA1'=>$ft1,'FECHA_TUTORIA2'=>'0000-00-00','FECHA_TUTORIA3'=>'0000-00-00','FECHA_TUTORIA4'=>'0000-00-00','FECHAS_TUTORIA'=>trim($fechas,'+'),'FECHA_EXAMEN'=>'0000-00-00','FECHA_CIERRE'=>'0000-00-00','FECHA_SUPLETORIO'=>'0000-00-00','GRUPO'=>$ml['CODIGO'],'SEDE'=>strtoupper($ml['SEDE']),'NIVEL'=>'LIGEN','MATERIA'=>$ml['NOMBRE'],'DOCENTE'=>$ml['NOMBRE_DOCENTE']);
							}
							//$materias=array_merge($materias,$materias_ligen);
						}
					}
				}

				/*foreach($materias as $k=>$materia){
					$planificacion = $this->academico_model->getPlanificacion($id_grupo,$materia['ID_CARRERA_MATERIA']);
					if($planificacion!=NULL){
						foreach($docentes as $j=>$docente){
							$ocupado=0;
							for($i=1;$i<=4;$i++){
								if($planificacion['FECHA_TUTORIA'.$i]!='0000-00-00'){
									$ocupado=$this->academico_model->verificaDocenteOcupado($docente['ID_PERSONA'],$planificacion['FECHA_TUTORIA'.$i],$id_grupo);
									if($ocupado==1){
										break;
									}
								}
							}
							//buscar en fechas de tutoria adicionales
							if($ocupado==0 and $planificacion['FECHAS_TUTORIA']!=''){
								$fechas=explode('+',$planificacion['FECHAS_TUTORIA']);
								foreach($fechas as $f){
									$ocupado=$this->academico_model->verificaDocenteOcupado($docente['ID_PERSONA'],$f,$id_grupo);
									if($ocupado==1){
										break;
									}
								}
							}
							$docentes[$j]['ocupado']=$ocupado;
						}
					}
					$materias[$k]['docentes']=$docentes;
					$materias[$k]['planificacion']=$planificacion;
				}*/
				//filtro de fechas de tutoria para incluir todas las fechas de la tutoria en el reporte
				if($fecha_desde!='' or $fecha_hasta!=''){
					if($fecha_desde!=''){
						$fd=date_create($fecha_desde.' 00:00:00');
					}
					if($fecha_hasta!=''){
						$fh=date_create($fecha_hasta.' 23:59:59');
					}
					$vec_mat=array();
					foreach($materias as $m){
						$fechast=$m['FECHA_TUTORIA1'].'+'.$m['FECHA_TUTORIA2'].'+'.$m['FECHA_TUTORIA3'].'+'.$m['FECHA_TUTORIA4'].'+'.$m['FECHAS_TUTORIA'];
						$vector_ft=explode('+',$fechast);
						foreach($vector_ft as $ft){
							if($ft!=''){
								$ftutoria = date_create($ft.' 00:00:00');
								if($fecha_desde!='' and $fecha_hasta!=''){
									if($ftutoria>=$fd and $ftutoria<=$fh){
										$vec_mat[]=$m;
										break;
									}
								}elseif($fecha_desde!=''){
									if($ftutoria>=$fd){
										$vec_mat[]=$m;
										break;
									}
								}elseif($fecha_hasta!=''){
									if($ftutoria<=$fd){
										$vec_mat[]=$m;
										break;
									}
								}
							}
						}
					}
					$materias=$vec_mat;
				}
				echo json_encode($materias);
			}
		}else{
			redirect('admin/login', 'refresh');
		}
	}

	//*****************************************************************
    //Actualizar datos financierosde matricula de acuerdo a cambio en beca
    public function actualizacionMatriculaBeca($id_cliente=null,$id_beca=null, $id_periodo=null)
    {
        $idUsuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado')){
			$matricula = $this->academico_model->obtener_datos_matricula($id_cliente,null,$id_periodo);
			//veriricar si esta existe matricula activa en el periodo actual y exista cambio de beca
			if($matricula!=NULL and ($matricula['ESTADO']==0 or $matricula['ESTADO']==3) and $matricula['ID_BECA']!=$id_beca){
				$this->load->model('automatica/automatica_model');
				$this->load->model('clientes/clientes_model');
				$rubros_aplica='';
				if($id_beca>0){
					$dat_beca = $this->academico_model->buscar_beca(array('ID_BECA'=>$id_beca));
					$beca=$dat_beca[0];
					$rubros_aplica='+'.$beca['RUBROS_APLICA'].'+';
				}
				//datos para obtener porcentaje de beca por cada rubro y cuota
				$cliente=$this->clientes_model->obtener_datos_cliente_natural($id_cliente);
				$rautomaticos_asociados = $this->automatica_model->buscarRubrosAutomaticos($cliente['NRO_DOCUMENTO'],$matricula['ID_PERIODO_ACADEMICO'],$matricula['ID_MATRICULA']);
				foreach($rautomaticos_asociados as $key=>$rubro){
					$rubros_cuota=$this->automatica_model->get_cliente_rubros_cuotas($rubro['ID_CLIENTE_RUBRO']);
					foreach($rubros_cuota as $rubro_cuota){
						//if($rubro_cuota['ESTADO']==1){//si rubro-cuota aun no esta pagada
						$rubro_cuota_pagado=$rubro_cuota['VALOR_SALDADO_POR_PAGO']+$rubro_cuota['VALOR_SALDADO_POR_PAGO_SIN_CONFIRMAR'];
						if($rubro_cuota['ESTADO']==1 and $rubro_cuota_pagado<=0){//si rubro-cuota aun no esta pagada y no tiene nada pagado
							$id_cliente_rubro_cuota=$rubro_cuota['ID_CLIENTE_RUBRO_CUOTA'];
							$pos_rubro = strpos($rubros_aplica, '+'.$rubro['ID_RUBRO'].'+');
							if($pos_rubro!==false){//si a este rubro se aplica el descuento beca
								$data_crc['DESCUENTO_BECA']=round($rubro_cuota['PRECIO']*$beca['PORCENTAJE']/100,2);
							}else{
								$data_crc['DESCUENTO_BECA']=0;
							}
							$total_cuota = round($rubro_cuota['PRECIO']+$rubro_cuota['RECARGO_POR_ATRAZO_EN_PAGO']+$rubro_cuota['RECARGO_POR_GENERACION_RUBRO']-$rubro_cuota['VALOR_SALDADO_POR_PAGO']-$rubro_cuota['VALOR_SALDADO_POR_PAGO_SIN_CONFIRMAR']-$data_crc['DESCUENTO_BECA']-$rubro_cuota['DESCUENTO_PRONTA_MATRICULA'],2);
							if($total_cuota<=0 and isset($beca['PORCENTAJE']) and $beca['PORCENTAJE']<100){
								$data_crc['ESTADO']=0;
							}
							$this->automatica_model->actualizar_cliente_rubro_cuotas($id_cliente_rubro_cuota,$data_crc);
						}else{
							$data_crc['DESCUENTO_BECA']=$rubro_cuota['DESCUENTO_BECA'];
						}
						if(isset($precio[$rubro_cuota['CUOTA']])){
							$precio[$rubro_cuota['CUOTA']]+=round($rubro_cuota['PRECIO']-$rubro_cuota['DESCUENTO_PRONTA_MATRICULA']-$data_crc['DESCUENTO_BECA']+$rubro_cuota['RECARGO_POR_GENERACION_RUBRO']+$rubro_cuota['RECARGO_POR_ATRAZO_EN_PAGO'],2);
						}else{
							$precio[$rubro_cuota['CUOTA']]=round($rubro_cuota['PRECIO']-$rubro_cuota['DESCUENTO_PRONTA_MATRICULA']-$data_crc['DESCUENTO_BECA']+$rubro_cuota['RECARGO_POR_GENERACION_RUBRO']+$rubro_cuota['RECARGO_POR_ATRAZO_EN_PAGO'],2);
						}
					}
				}
				$cuotas_generales = $this->automatica_model->get_cuotas_generales($id_cliente,$matricula['ID_PERIODO_ACADEMICO'],$matricula['ID_MATRICULA']);
				//actualizar tabla cuotas generales
				$total_pagado=0;
				$cuotas_actualizadas=0;
				foreach($cuotas_generales as $cuota_general){
					//if($cuota_general['ESTADO']==0){//si aun no esta completo el pago de la cuota
					if($cuota_general['ESTADO']==0 and $cuota_general['TOTAL_PAGADO']<=0){//si aun no esta completo el pago de la cuota
						$data_cg=array();
						$data_cg['PRECIO_CUOTA']=$precio[$cuota_general['CUOTA']];
						$data_cg['POR_PAGAR']=round($data_cg['PRECIO_CUOTA']-$cuota_general['TOTAL_PAGADO'],2);
						if($data_cg['POR_PAGAR']<=0 and isset($beca['PORCENTAJE']) and $beca['PORCENTAJE']<100){
							$data_cg['ESTADO']=1;
						}
						$this->automatica_model->actualizar_cuotas_generales($cuota_general['ID_CUOTA_GENERAL'],$data_cg);
						//$total_pagado+=$data_cg['TOTAL_PAGADO'];
						$cuotas_actualizadas+=1;
					}
				}

				if($id_beca!=$matricula['ID_BECA'] and $cuotas_actualizadas>0){
				//if($id_beca>0 and $cuotas_actualizadas>0){
					$this->academico_model->actualizarMatricula(array('ID_BECA'=>$id_beca),$matricula['ID_MATRICULA']);
				}
				//actualizar tabla fac_clientes_rubros_cuota
				/*$id_crc = $this->input->post('id_cliente_rubro_cuotas');
				$id_cliente_rubro_cuotas=explode('+',$id_crc);
				foreach($id_cliente_rubro_cuotas as $id_cliente_rubro_cuota){
					$data_crc=array();
					$dat_cliente_rubro_cuota=$this->automatica_model->get_cliente_rubro_cuota($id_cliente_rubro_cuota);
					$dat_cliente_rubro=$this->automatica_model->get_cliente_rubro($dat_cliente_rubro_cuota['ID_CLIENTE_RUBRO']);
					if($dat_cliente_rubro_cuota['CUOTA']==1 and $dat_cliente_rubro['ID_RUBRO']==17 and $rubro_recargo!=NULL){//sonlo en primera cuota de rubro semestre
						$data_crc['RECARGO_POR_GENERACION_RUBRO']=$rubro_recargo;
					}
					if($dat_cliente_rubro['ID_RUBRO']==156 and isset($pronta_matricula) and $pronta_matricula[1]!=NULL and $dat_cliente_rubro_cuota['CUOTA']==1){
						$data_crc['DESCUENTO_PRONTA_MATRICULA']=$pronta_matricula[1];
					}
					if($dat_cliente_rubro['ID_RUBRO']==17 and isset($pronta_matricula) and $pronta_matricula[2]!=NULL and $dat_cliente_rubro_cuota['CUOTA']>1){
						$data_crc['DESCUENTO_PRONTA_MATRICULA']=$pronta_matricula[$dat_cliente_rubro_cuota['CUOTA']];
					}
					if(isset($beca_total[$dat_cliente_rubro_cuota['CUOTA']]) and isset($porcentaje_beca[$dat_cliente_rubro_cuota['CUOTA']][$dat_cliente_rubro['ID_RUBRO']])){
						$data_crc['DESCUENTO_BECA']=round($beca_total[$dat_cliente_rubro_cuota['CUOTA']]*$porcentaje_beca[$dat_cliente_rubro_cuota['CUOTA']][$dat_cliente_rubro['ID_RUBRO']]/100,2);
					}
					$data_crc['PRECIO']=$this->input->post('rubro_'.$id_cliente_rubro_cuota);
					$this->automatica_model->actualizar_cliente_rubro_cuotas($id_cliente_rubro_cuota,$data_crc);
				}
				//actualizar monto pagado en cuotas rubros
				$cuotas_rubros_prioridad=$this->automatica_model->get_cuotas_rubros_prioridad($id_cliente_rubro_cuotas);
				foreach($cuotas_rubros_prioridad as $cuota_rubro_prioridad){
					if($total_pagado>0){
						$saldo_total_pagado=$total_pagado+$cuota_rubro_prioridad['DESCUENTO_PRONTA_MATRICULA']+$cuota_rubro_prioridad['DESCUENTO_BECA']-$cuota_rubro_prioridad['PRECIO']-$cuota_rubro_prioridad['RECARGO_POR_GENERACION_RUBRO']-$cuota_rubro_prioridad['RECARGO_POR_ATRAZO_EN_PAGO'];
						if($saldo_total_pagado>=0){
							$data_crc1['VALOR_SALDADO_POR_PAGO']=$cuota_rubro_prioridad['PRECIO']+$cuota_rubro_prioridad['RECARGO_POR_GENERACION_RUBRO']+$cuota_rubro_prioridad['RECARGO_POR_ATRAZO_EN_PAGO']-$cuota_rubro_prioridad['DESCUENTO_PRONTA_MATRICULA']-$cuota_rubro_prioridad['DESCUENTO_BECA'];
							$data_crc1['ESTADO']=0;
						}else{
							$data_crc1['VALOR_SALDADO_POR_PAGO']=$total_pagado;
							$data_crc1['ESTADO']=1;
						}
						$total_pagado=$saldo_total_pagado;
					}else{
						$data_crc1['VALOR_SALDADO_POR_PAGO']=0;
						$data_crc1['ESTADO']=1;
					}
					$this->automatica_model->actualizar_cliente_rubro_cuotas($cuota_rubro_prioridad['ID_CLIENTE_RUBRO_CUOTA'],$data_crc1);
					//datos para actulizar tabla cliente_rubro
					$dat_cliente_rubro=$this->automatica_model->get_cliente_rubro($cuota_rubro_prioridad['ID_CLIENTE_RUBRO']);
					if(isset($data_cr[$cuota_rubro_prioridad['ID_CLIENTE_RUBRO']])){
						$data_cr[$cuota_rubro_prioridad['ID_CLIENTE_RUBRO']]['PRECIO_UNITARIO_RUBRO']+=$cuota_rubro_prioridad['PRECIO'];
						$data_cr[$cuota_rubro_prioridad['ID_CLIENTE_RUBRO']]['VALOR_SALDADO_POR_PAGO']+=$data_crc1['VALOR_SALDADO_POR_PAGO'];
						$data_cr[$cuota_rubro_prioridad['ID_CLIENTE_RUBRO']]['ESTADO']=$data_crc1['ESTADO'];
					}else{
						$data_cr[$cuota_rubro_prioridad['ID_CLIENTE_RUBRO']]['PRECIO_UNITARIO_RUBRO']=$cuota_rubro_prioridad['PRECIO'];
						$data_cr[$cuota_rubro_prioridad['ID_CLIENTE_RUBRO']]['VALOR_SALDADO_POR_PAGO']=$data_crc1['VALOR_SALDADO_POR_PAGO'];
						$data_cr[$cuota_rubro_prioridad['ID_CLIENTE_RUBRO']]['ESTADO']=$data_crc1['ESTADO'];
						if($dat_cliente_rubro['ID_RUBRO']==17 and $rubro_recargo!=NULL){//si es rubro semestre
							$data_cr[$cuota_rubro_prioridad['ID_CLIENTE_RUBRO']]['RECARGO_POR_GENERACION_RUBRO']=$rubro_recargo;
							$data_cr[$cuota_rubro_prioridad['ID_CLIENTE_RUBRO']]['VALOR_RECARGO_GENERACION']=$rubro_recargo;
						}
					}
				}

				//actualizar tabla fac_clientes_rubros
				foreach($data_cr as $key=>$cr){
					$cr['PRECIO_X_NRO_ITEMS']=$cr['PRECIO_UNITARIO_RUBRO'];
					$this->automatica_model->actualizar_cliente_rubro($key,$cr);
				}
				*/
				//echo 'Tabla Actualizada';
			}
        }else{
            redirect('admin/login', 'refresh');
        }
    }

	////////////////////////////////////////////////////////////////////
	public function verifica_envio_vlc()
	{
		$ip=$_SERVER['REMOTE_ADDR'];
		if($ip=='162.241.192.186' and stripos($_SERVER['HTTP_HOST'],'binary.ec')!==FALSE){
			//enviar datos a VLC de materias que no tienen codigo de vlc
			$id_periodo= $this->academico_model->get_periodo_activado();
			$estudiantes_materia=$this->academico_model->buscar_materias_matriculados(array('ID_PERIODO_ACADEMICO'=>$id_periodo));
			$i=0;
			$msj="Proceso Inicio:".date('Y-m-d H:i:s')."\n";
			foreach($estudiantes_materia as $em){
				$matricula=$this->academico_model->obtener_matricula(array('ID_PERIODO_ACADEMICO'=>$id_periodo,'ID_PERSONA'=>$em['ID_PERSONA'],'ID_CARRERA'=>$em['ID_CARRERA']));
				if($matricula==NULL){
					$matricula['ESTADO']=1;
				}
				if($em['FUE_CONVALIDADA']==0 and $em['FUE_HOMOLOGADA']==0 and $em['FUE_HISTORIAL']==0 and $em['ID_VLC']==0 and $matricula['ESTADO']==0){
					//$this->sendMateriaVlc($em['ID_ESTUDIANTE_CARRERA_MATERIA'],'crear',1);
					$i++;
				}
			}
			$msj.="Proceso Fin:".date('Y-m-d H:i:s')."\n";
			$msj.='Materias Reenviadas:'.$i;
			echo $msj;
		}else{
			echo 'Acceso Denegado';
		}
	}

	////////////////////////////////////////////////////////////////////
	/////retorna respuesta a Ligen/////////////////////////////////////
	public function verifica_docente_ocupado()
	{
		//verificar si docente esta ocupado en Deming
		$nro_documento = trim($this->input->post('cedula'));
		$fecha = trim($this->input->post('fecha'));
		$estado= $this->academico_model->verificaDocenteOcupadoExterno($nro_documento,$fecha);
		echo $estado;
	}

	public function redirect(){
		$ch  = curl_init();
		curl_setopt($ch, CURLOPT_URL, 'http://localhost/Deming/index.php/admin/login/login_automatico/');
		$data_copia['cedula'] = '1713544326';
		$elements                = $data_copia;
		curl_setopt($ch, CURLOPT_POST,true);
		// curl_setopt($ch, CURLOPT_POSTFIELDS, $elements);
		// curl_setopt($ch, CURLOPT_HEADER, false);
		// curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode(array($elements)));
		curl_setopt($ch, CURLOPT_POSTFIELDS, $elements);
		curl_setopt($ch, CURLOPT_HEADER, false);
		// curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json'));
		curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);
		curl_setopt ($ch, CURLOPT_FOLLOWLOCATION, true);
		$resultado = curl_exec($ch);
		$error     = curl_error($ch);
		curl_close($ch);
		echo $resultado;
	}


	public function imprimirCalificacionAsistencia($id_grupo,$id_materia,$id_persona_docente,$tipo)
	{
		if($this->session->userdata('loggeado')){
			$datos= $this->academico_model->buscar_grupo_de_estdiantes_calificar($id_grupo,$id_materia,$id_persona_docente,1);
			$datos['activado_periodo_calificaciones']=$this->academico_model->perido_calificaciones_activo();
			//var_dump($datos['estudiantes'][0]);
			$datos['id_grupo'] = $id_grupo;
			$datos['id_materia'] = $id_materia;
			$datos['id_persona_docente'] = $id_persona_docente;
			$idPeriodo = $this->academico_model->get_periodo_activado();
			$idusuario = $this->session->userdata('loggeado')['ID_USUARIO'];
			$datos1=$this->perfil_model->cabecera($idusuario);
			// $this->load->view('templates/header',$datos1);
			if ($tipo == "asistencia"){
				$datosCarreraMateria = $this->academico_model->obtener_datos_materia($id_materia);
				$datos['planificacion'] = $this->academico_model->getPlanificacion($id_grupo,$datosCarreraMateria['ID_CARRERA_MATERIA'],$idPeriodo);
				$this->load->view('imprimirListadoAsistencia',$datos);
			}else if($tipo == "calificacion"){
				$this->load->view('imprimirCalificacion',$datos);
			}else{
				$this->load->view('imprimirCalificacionFinal',$datos);
			}
		}else{
			redirect('admin/login', 'refresh');
		}
	}

	////////////////////////////////////////////////////////////////////
	public function copiarPlanificacion()
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,85)){
			$id_carrera = trim($this->input->post('id_carrera_copia'));
			$id_nivel = trim($this->input->post('nivel'));
			$grupo = trim($this->input->post('grupo'));
			$docente_carrera_materia=$this->input->post('docente_carrera_materia');
			$fecha_tutoria1=$this->input->post('fecha_tutoria1');
			$fecha_tutoria2=$this->input->post('fecha_tutoria2');
			$fecha_tutoria3=$this->input->post('fecha_tutoria3');
			$fecha_tutoria4=$this->input->post('fecha_tutoria4');
			$fechas_tutoria=$this->input->post('fechas_tutoria');
			$fecha_examen=$this->input->post('fecha_examen');
			$hora_examen=$this->input->post('hora_examen');
			$fecha_cierre=$this->input->post('fecha_cierre');
			$fecha_supletorio=$this->input->post('fecha_supletorio');
			$hora_supletorio=$this->input->post('hora_supletorio');
			$id_planificacion=$this->input->post('id_planificacion');
			$plataforma=$this->input->post('plataforma');
			$horas=$this->input->post('horas');
			$valores=$this->input->post('valores');
			$id_periodo_academico = $this->academico_model->get_periodo_activado();
			//$id_grupo=$this->academico_model->get_id_grupo($grupo,$id_carrera,$id_nivel);
			if($id_nivel=='' or $id_nivel==NULL){
				$id_grupo_temp=0;
			}else{
				$id_grupo_temp=$this->academico_model->get_id_grupo($grupo,$id_carrera,$id_nivel);
			}
			//ids carrera_materia de la carrera copia
			$materias=$this->academico_model->getMateriasPorCarreraNivel($id_carrera, $id_nivel);
			$datos='';
			foreach($docente_carrera_materia as $k=>$dcm){
				if($dcm!='' or $fecha_tutoria1[$k]!='' or $fecha_tutoria2[$k]!='' or $fecha_tutoria3[$k]!='' or $fecha_tutoria4[$k]!='' or $fecha_examen[$k]!='' or $fecha_cierre[$k]!='' or $fecha_supletorio[$k]!='' or isset($plataforma[$k])){
					//reemplazar $id_carrera_materia
					$k_idm=0;
					$materia=$this->academico_model->obtener_datos_materia($k);
					foreach($materias as $m){
						if($m['NOMBRE']==$materia['NOMBRE']){
							$k_idm=$m['ID_CARRERA_MATERIA'];
							break;
						}
					}
					if($k_idm>0){
						//verificar si docente esta asignado en nueva carrera materia
						$docentes = $this->academico_model->getDocentesDeMateria($k_idm);
						$id_dcm=0;
						foreach($docentes as $d){
							if($d['ID_PERSONA']==$dcm){
								$id_dcm=$dcm;
								break;
							}
						}
						$dat=array();
						if($id_grupo_temp==0){
							$mat=$this->academico_model->obtener_datos_materia($k_idm);
							$id_grupo=$this->academico_model->get_id_grupo($grupo,$id_carrera,$mat['NIVEL_MATERIA']);
						}else{
							$id_grupo=$id_grupo_temp;
						}
						$dat['ID_GRUPO']=$id_grupo;
						$dat['ID_PERSONA']=$id_dcm;
						$dat['ID_CARRERA_MATERIA']=$k_idm;
						$dat['ID_PERIODO_ACADEMICO']=$id_periodo_academico;
						if($fecha_tutoria1[$k]!=''){
							$fecha = DateTime::createFromFormat('d/m/Y', $fecha_tutoria1[$k]);
							$dat['FECHA_TUTORIA1']=$fecha->format('Y-m-d');
						}else{
							$dat['FECHA_TUTORIA1']='0000-00-00';
						}
						if($fecha_tutoria2[$k]!=''){
							$fecha = DateTime::createFromFormat('d/m/Y', $fecha_tutoria2[$k]);
							$dat['FECHA_TUTORIA2']=$fecha->format('Y-m-d');
						}else{
							$dat['FECHA_TUTORIA2']='0000-00-00';
						}
						if($fecha_tutoria3[$k]!=''){
							$fecha = DateTime::createFromFormat('d/m/Y', $fecha_tutoria3[$k]);
							$dat['FECHA_TUTORIA3']=$fecha->format('Y-m-d');
						}else{
							$dat['FECHA_TUTORIA3']='0000-00-00';
						}
						if($fecha_tutoria4[$k]!=''){
							$fecha = DateTime::createFromFormat('d/m/Y', $fecha_tutoria4[$k]);
							$dat['FECHA_TUTORIA4']=$fecha->format('Y-m-d');
						}else{
							$dat['FECHA_TUTORIA4']='0000-00-00';
						}
						$dat['FECHAS_TUTORIA']='';
						if(isset($fechas_tutoria[$k]) and count($fechas_tutoria[$k])>0){
							foreach($fechas_tutoria[$k] as $ft){
								if($ft!=''){
									$fecha = DateTime::createFromFormat('d/m/Y', $ft);
									$dat['FECHAS_TUTORIA'].=$fecha->format('Y-m-d').'+';
								}
							}
							$dat['FECHAS_TUTORIA']=trim($dat['FECHAS_TUTORIA'],'+');
						}
						if($fecha_examen[$k]!=''){
							$fecha = DateTime::createFromFormat('d/m/Y', $fecha_examen[$k]);
							$dat['FECHA_EXAMEN']=$fecha->format('Y-m-d');
						}else{
							$dat['FECHA_EXAMEN']='0000-00-00';
						}
						if($fecha_cierre[$k]!=''){
							$fecha = DateTime::createFromFormat('d/m/Y', $fecha_cierre[$k]);
							$dat['FECHA_CIERRE']=$fecha->format('Y-m-d');
							//gestion fecha cierre califiaciones
							$num_dias=$this->academico_model->getparametro('dias_cierre');
							$fc=explode('-',$dat['FECHA_CIERRE']);
							$fec= mktime(0,0,0,$fc[1],($fc[2]+$num_dias['VALOR']),$fc[0]);
							$fecha_cierre_calificacion=date("Y-m-d", $fec);
							$datc['ID_GRUPO']= $id_grupo;
							$datc['GRUPO']= '';
							$datc['ID_MATERIA']= $k_idm;
							$datc['MATERIA']= '';
							$datc['FECHA_CIERRE']= $fecha_cierre_calificacion;
							$datc['ID_PERIODO_ACADEMICO']= $id_periodo_academico;
							$fechaCierre=$this->academico_model->get_fecha_cierre(array('ID_GRUPO'=>$id_grupo,'ID_MATERIA'=>$k_idm,'ID_PERIODO_ACADEMICO'=>$id_periodo_academico));
							if(count($fechaCierre)<=0){
								$this->academico_model->crear_fecha_cierre($datc);
							}else{
								$this->academico_model->actualizar_fecha_cierre($datc,$fechaCierre['ID_CIERRE_CALIFICACION']);
							}
						}else{
							$dat['FECHA_CIERRE']='0000-00-00';
						}
						if($fecha_supletorio[$k]!=''){
							$fecha = DateTime::createFromFormat('d/m/Y', $fecha_supletorio[$k]);
							$dat['FECHA_SUPLETORIO']=$fecha->format('Y-m-d');
						}else{
							$dat['FECHA_SUPLETORIO']='0000-00-00';
						}
						$dat['PLATAFORMA']='0';
						if(isset($plataforma[$k])){
							$dat['PLATAFORMA']=$plataforma[$k];
						}
						$dat['HORA_EXAMEN']=NULL;
						$dat['HORA_SUPLETORIO']=NULL;
						if(isset($hora_examen[$k]) and $hora_examen[$k]!=''){
							$dat['HORA_EXAMEN']=$hora_examen[$k];
						}
						if(isset($hora_supletorio[$k]) and $hora_supletorio[$k]!=''){
							$dat['HORA_SUPLETORIO']=$hora_supletorio[$k];
						}
						$dat['TOTAL_HORAS']=NULL;
						$dat['TOTAL_VALOR']=NULL;
						if(isset($horas[$k]) and $horas[$k]!=''){
							$dat['TOTAL_HORAS']=$horas[$k];
						}
						if(isset($valores[$k]) and $valores[$k]!=''){
							$dat['TOTAL_VALOR']=$valores[$k];
						}

						$planificacion=$this->academico_model->getPlanificacion($id_grupo,$k_idm,$id_periodo_academico);
						$actualizados=0;
						if($planificacion==NULL){
							$dat['FECHA_CREACION']=date("Y-m-d H:i:s");
							$dat['ID_USUARIO']=$idusuario;
							$this->academico_model->crearPlanificacion($dat);
						}else{
							$actualizados=$this->academico_model->actualizarPlanificacion($dat,$planificacion['ID_PLANIFICACION']);
							if($actualizados>0){
								$dat1['FECHA_ACTUALIZACION']=date("Y-m-d H:i:s");
								$dat1['ID_USUARIO_ACTUALIZA']=$idusuario;
								$actualizados=$this->academico_model->actualizarPlanificacion($dat1,$planificacion['ID_PLANIFICACION']);
							}
						}
						//reasignar docente
						if($id_dcm>0 and $id_dcm!=''){
							$r=$this->academico_model->reasignarDocente($id_dcm,0,$k_idm,$id_grupo);
						}
						//enviar datos a VLC
						if($planificacion==NULL or $actualizados>0){
							$estudiantes_materia=$this->academico_model->buscar_materias_matriculados(array('ID_CARRERA_MATERIA'=>$k_idm,'ID_PERIODO_ACADEMICO'=>$id_periodo_academico,'ID_GRUPO'=>$id_grupo));
							foreach($estudiantes_materia as $em){
								//$this->sendMateriaVlc($em['ID_ESTUDIANTE_CARRERA_MATERIA'],'actualizar');
							}
						}
					}
				}
			}
			echo '1';
		}else{
			echo 'Acceso Denegado';
		}
	}


	public function inscripcion_estudiante1()
	{
		echo json_encode(array('estado'=>'error'));
	}

	//////////////////////////////////////////////////////////////////////////////
	/////creacion, inscripcion y pre-matricula de un estuciante desde VLC/////////
	public function inscripcion_estudiante()
	{
		$JSONData = file_get_contents("php://input");
		$estudiante = json_decode($JSONData,true);
		//print_r($estudiante);
		//return 0;
		$respuesta=array();
		//log vlc
		$dat=array();
		$dat['CEDULA']='';
		$dat['ID_CARRERA']='';
		$dat['MSJ_JSON']=$JSONData;
		if(is_array($estudiante)){
			$this->load->model('clientes/clientes_model');
			$obligatorios=array('primer_nombre','primer_apellido','tipo_documento','nro_documento','id_nacionalidad','fecha_nacimiento','id_pais_nacimiento','id_estado_civil','genero','colegio_graduacion','anio_graduacion','id_pais_graduacion','titulo_bachiller','id_tipo_colegio','telefono','email','id_pais_domicilio','id_provincia_domicilio','id_ciudad_domicilio','barrio','calle_principal','id_carrera');
			$dato_obligatorio='';
			foreach($estudiante as $k=>$e){
				if($k=='contacto'){
					foreach($e as $k1=>$e1){
						if(in_array($k1,$obligatorios) and $e1==''){
							$dato_obligatorio.='contacto-'.$k1.',';
						}
					}
				}else{
					if(in_array($k,$obligatorios) and $e==''){
						$dato_obligatorio.=$k.',';
					}
				}
			}
			$error='';
			$persona=$this->clientes_model->buscar_persona_x_cedula(array('CEDULA'=>$estudiante['nro_documento']));
			//si cumple los requisitos
			if($dato_obligatorio!=''){
				$error='Error: datos Obligatorios '.$dato_obligatorio;
			}elseif($estudiante['id_carrera']<=0){
				$error='Error: id_carrera incorrecto';
			}elseif($persona!=NULL){
				$error='Error: estudiante ya existe';
			}else{
				$data['PRIMER_NOMBRE']= $estudiante['primer_nombre'];
				$data['SEGUNDO_NOMBRE']= $estudiante['segundo_nombre'];
				$data['APELLIDO_PATERNO']= $estudiante['primer_apellido'];
				$data['APELLIDO_MATERNO']= $estudiante['segundo_apellido'];
				$data['ID_TIPO_CONTRIBUYENTE']= 1;
				$data['TIPO_DOCUMENTO']= $estudiante['tipo_documento'];
				$data['NRO_DOCUMENTO']= $estudiante['nro_documento'];
				$data['NUMERO_RUC']= '';
				$data['NOMBRE_COMERCIAL']= '';
				$data['ID_TIPO_BECA']= '';
				$nacionalidad=0;
				if(isset($estudiante['id_nacionalidad']) and $estudiante['id_nacionalidad']!=''){
					$nac=$this->clientes_model->obtener_id_nacionalidad($estudiante['id_nacionalidad']);
					if($nac!=NULL){
						$nacionalidad=$nac['ID_NACIONALIDAD'];
					}
				}
				//$data['ID_NACIONALIDAD']= $estudiante['id_nacionalidad'];
				$data['ID_NACIONALIDAD']= $nacionalidad;
				$data['FECHA_NACIMIENTO']= $estudiante['fecha_nacimiento'];
				$pais_nacimiento=0;
				if(isset($estudiante['id_pais_nacimiento']) and $estudiante['id_pais_nacimiento']!=''){
					$pais=$this->clientes_model->obtener_id_pais($estudiante['id_pais_nacimiento']);
					if($pais!=NULL){
						$pais_nacimiento=$pais['ID_PAIS'];
					}
				}
				//$data['ID_PAIS_NACIMIENTO']= $estudiante['id_pais_nacimiento'];
				$data['ID_PAIS_NACIMIENTO']= $pais_nacimiento;
				$data['ID_PROVINCIA_NACIMIENTO']= '';
				$data['ID_CANTON_NACIMIENTO']= '';
				$estado_civil=0;
				if(isset($estudiante['id_estado_civil']) and $estudiante['id_estado_civil']!=''){
					$est=$this->clientes_model->obtener_id_estadoCivil($estudiante['id_estado_civil']);
					if($est!=NULL){
						$estado_civil=$est['ID_ESTADO_CIVIL'];
					}
				}
				//$data['ID_ESTADO_CIVIL']= $estudiante['id_estado_civil'];
				$data['ID_ESTADO_CIVIL']= $estado_civil;
				$data['TIPO_SANGRE']= $estudiante['tipo_sangre'];
				$data['GENERO']= $estudiante['genero'];
				$data['ID_GRUPO_CULTURAL']= $estudiante['id_grupo_cultural'];
				$data['NRO_DOCUMENTO_MILITAR']= '';
				$data['TRATO_PERSONAL']= '';
				$data['ID_PROFESION']= '';
				$data['OCUPACION']= 1;
				$data['EST_COLEGIO_GRADUACION']= $estudiante['colegio_graduacion'];
				$data['EST_ANO_GRADUACION']= $estudiante['anio_graduacion'];
				$pais_graduacion=0;
				if(isset($estudiante['id_pais_graduacion']) and $estudiante['id_pais_graduacion']!=''){
					$pais=$this->clientes_model->obtener_id_pais($estudiante['id_pais_graduacion']);
					if($pais!=NULL){
						$pais_graduacion=$pais['ID_PAIS'];
					}
				}
				//$data['EST_PAIS_GRADUACION']= $estudiante['id_pais_graduacion'];
				$data['EST_PAIS_GRADUACION']= $pais_graduacion;
				$data['EST_TITULO_BACHILLER']= $estudiante['titulo_bachiller'];
				$data['EST_COLEGIO_SECTOR']= $estudiante['sector_estudio'];
				$tipo_colegio=0;
				if(isset($estudiante['id_tipo_colegio']) and $estudiante['id_tipo_colegio']!=''){
					$tip_col=$this->clientes_model->obtener_id_tipoColegio($estudiante['id_tipo_colegio']);
					if($tip_col!=NULL){
						$tipo_colegio=$tip_col['ID_TIPO_COLEGIO'];
					}
				}
				//$data['EST_ID_TIPO_COLEGIO']= $estudiante['id_tipo_colegio'];
				$data['EST_ID_TIPO_COLEGIO']= $tipo_colegio;
				$data['EST_UNIVERSIDAD']= '';
				$data['EST_UNIVERSIDAD_GRADUACION']= '';
				$data['EST_UNIVERSIDAD_ESPECIALIDAD']= '';
				$data['EST_UNIVERSIDAD_SECTOR']= '';
				$data['CONTRASENA']= '';
				$data['CONTACTO_DOMICILIO']['ID_OPERADOR_TELEFONICO']= $estudiante['contacto']['id_operador_telefonico'];
				$data['CONTACTO_DOMICILIO']['CELULAR']= $estudiante['contacto']['celular'];
				$data['CONTACTO_DOMICILIO']['TELEFONO']= $estudiante['contacto']['telefono'];
				$data['CONTACTO_DOMICILIO']['CORREO_ELECTRONICO']= $estudiante['contacto']['email'];
				$pais_domicilio=0;
				if(isset($estudiante['contacto']['id_pais_domicilio']) and $estudiante['contacto']['id_pais_domicilio']!=''){
					$pais=$this->clientes_model->obtener_id_pais($estudiante['contacto']['id_pais_domicilio']);
					if($pais!=NULL){
						$pais_domicilio=$pais['ID_PAIS'];
					}
				}
				//$data['CONTACTO_DOMICILIO']['ID_PAIS']= $estudiante['contacto']['id_pais_domicilio'];
				$data['CONTACTO_DOMICILIO']['ID_PAIS']= $pais_domicilio;
				$provincia_domicilio=0;
				if(isset($estudiante['contacto']['id_provincia_domicilio']) and $estudiante['contacto']['id_provincia_domicilio']!=''){
					$prov=$this->clientes_model->obtener_id_provincia($estudiante['contacto']['id_provincia_domicilio']);
					if($prov!=NULL){
						$provincia_domicilio=$prov['ID_PROVINCIA'];
					}
				}
				//$data['CONTACTO_DOMICILIO']['ID_PROVINCIA']= $estudiante['contacto']['id_provincia_domicilio'];
				$data['CONTACTO_DOMICILIO']['ID_PROVINCIA']= $provincia_domicilio;
				$ciudad_domicilio=0;
				if(isset($estudiante['contacto']['id_ciudad_domicilio']) and $estudiante['contacto']['id_ciudad_domicilio']!=''){
					$ciu=$this->clientes_model->obtener_id_ciudad($estudiante['contacto']['id_ciudad_domicilio']);
					if($ciu!=NULL){
						$ciudad_domicilio=$ciu['ID_CANTON'];
					}
				}
				//$data['CONTACTO_DOMICILIO']['ID_CANTON']= $estudiante['contacto']['id_ciudad_domicilio'];
				$data['CONTACTO_DOMICILIO']['ID_CANTON']= $ciudad_domicilio;
				$data['CONTACTO_DOMICILIO']['ID_PARROQUIA']= '';
				$data['CONTACTO_DOMICILIO']['BARRIO']= $estudiante['contacto']['barrio'];
				$data['CONTACTO_DOMICILIO']['SECTOR']= '';
				$data['CONTACTO_DOMICILIO']['DIRECCION_CALLE_PRINCIPAL']= $estudiante['contacto']['calle_principal'];
				$data['CONTACTO_DOMICILIO']['DIRECCION_NUMERO']= $estudiante['contacto']['numero_casa'];
				$data['CONTACTO_DOMICILIO']['DIRECCION_CALLE_SECUNDARIA1']= $estudiante['contacto']['calle_secundaria'];
				$data['CONTACTO_DOMICILIO']['DIRECCION_CALLE_SECUNDARIA2']='';
				$data['CONTACTO_DOMICILIO']['DIRECCION_REFERENCIA']= '';
				$data['CONTACTO_DOMICILIO']['DESCRIPCION']= '';
				$data['FINANCIERO']['EMPRESA']= $estudiante['laboral']['empresa'];
				$data['FINANCIERO']['INDUSTRIA']= '';
				$data['FINANCIERO']['CARGO']= $estudiante['laboral']['cargo'];
				$data['FINANCIERO']['TIEMPO_TRABAJO']= $estudiante['laboral']['tiempo'];
				$data['ID_CONTACTO_LABORAL']['ID_OPERADOR_TELEFONICO']='';
				$data['ID_CONTACTO_LABORAL']['CELULAR']= '';
				$data['ID_CONTACTO_LABORAL']['TELEFONO']= $estudiante['laboral']['telefono'];
				$data['ID_CONTACTO_LABORAL']['CORREO_ELECTRONICO']= $estudiante['laboral']['email'];
				$pais1=0;
				if(isset($estudiante['laboral']['id_pais']) and $estudiante['laboral']['id_pais']!=''){
					$pais=$this->clientes_model->obtener_id_pais($estudiante['laboral']['id_pais']);
					if($pais!=NULL){
						$pais1=$pais['ID_PAIS'];
					}
				}
				//$data['ID_CONTACTO_LABORAL']['ID_PAIS']= $estudiante['laboral']['id_pais'];
				$data['ID_CONTACTO_LABORAL']['ID_PAIS']= $pais1;
				$provincia=0;
				if(isset($estudiante['laboral']['id_provincia']) and $estudiante['laboral']['id_provincia']!=''){
					$prov=$this->clientes_model->obtener_id_provincia($estudiante['laboral']['id_provincia']);
					if($prov!=NULL){
						$provincia=$prov['ID_PROVINCIA'];
					}
				}
				//$data['ID_CONTACTO_LABORAL']['ID_PROVINCIA']= $estudiante['laboral']['id_provincia'];
				$data['ID_CONTACTO_LABORAL']['ID_PROVINCIA']= $provincia;
				$ciudad=0;
				if(isset($estudiante['laboral']['id_ciudad']) and $estudiante['laboral']['id_ciudad']!=''){
					$ciu=$this->clientes_model->obtener_id_ciudad($estudiante['laboral']['id_ciudad']);
					if($ciu!=NULL){
						$ciudad=$ciu['ID_CANTON'];
					}
				}
				//$data['ID_CONTACTO_LABORAL']['ID_CANTON']= $estudiante['laboral']['id_ciudad'];
				$data['ID_CONTACTO_LABORAL']['ID_CANTON']= $ciudad;
				$data['ID_CONTACTO_LABORAL']['ID_PARROQUIA']= '';
				$data['ID_CONTACTO_LABORAL']['BARRIO']= '';
				$data['ID_CONTACTO_LABORAL']['SECTOR']= '';
				$data['ID_CONTACTO_LABORAL']['DIRECCION_CALLE_PRINCIPAL']= $estudiante['laboral']['calle_principal'];
				$data['ID_CONTACTO_LABORAL']['DIRECCION_NUMERO']= $estudiante['laboral']['numero_casa'];
				$data['ID_CONTACTO_LABORAL']['DIRECCION_CALLE_SECUNDARIA1']= $estudiante['laboral']['calle_secundaria'];
				$data['ID_CONTACTO_LABORAL']['DIRECCION_CALLE_SECUNDARIA2']= '';
				$data['ID_CONTACTO_LABORAL']['DIRECCION_REFERENCIA']= '';
				$data['ID_CONTACTO_LABORAL']['DESCRIPCION']= '';
				$data['REFERENCIA_FAMILIAR']['ID_PERSONA_FAMILIAR']= '';
				$data['REFERENCIA_FAMILIAR']['NOMBRES']= $estudiante['referencia']['familiar_nombre'];
				$data['REFERENCIA_FAMILIAR']['EMPRESA']= $estudiante['referencia']['familiar_empresa'];
				$data['REFERENCIA_FAMILIAR']['CARGO_OCUPACION']= $estudiante['referencia']['familiar_cargo_ocupacion'];
				$data['REFERENCIA_FAMILIAR']['TELEFONO']= $estudiante['referencia']['familiar_telefono'];
				$data['REFERENCIA_LABORAL']['ID_PERSONA_FAMILIAR']= '';
				$data['REFERENCIA_LABORAL']['NOMBRES']= $estudiante['referencia']['laboral_nombres'];
				$data['REFERENCIA_LABORAL']['EMPRESA']= $estudiante['referencia']['laboral_empresa'];
				$data['REFERENCIA_LABORAL']['CARGO_OCUPACION']= $estudiante['referencia']['laboral_cargo_ocupacion'];
				$data['REFERENCIA_LABORAL']['TELEFONO']= $estudiante['referencia']['laboral_telefono'];
				$data['PADRE']['ID_PERSONA_FAMILIAR']='';
				$data['PADRE']['APELLIDO_PATERNO']= '';
				$data['PADRE']['APELLIDO_MATERNO']= '';
				$data['PADRE']['NOMBRES']= $estudiante['familia']['padre_nombre'];
				$data['PADRE']['CARGO_OCUPACION']= $estudiante['familia']['padre_cargo_ocupacion'];
				$data['MADRE']['ID_PERSONA_FAMILIAR']= '';
				$data['MADRE']['APELLIDO_PATERNO']= '';
				$data['MADRE']['APELLIDO_MATERNO']= '';
				$data['MADRE']['NOMBRES']= $estudiante['familia']['madre_nombre'];
				$data['MADRE']['CARGO_OCUPACION']= $estudiante['familia']['madre_cargo_ocupacion'];
				$data['CONYUGE']['ID_PERSONA_FAMILIAR']= '';
				$data['CONYUGE']['APELLIDO_PATERNO']= '';
				$data['CONYUGE']['APELLIDO_MATERNO']= '';
				$data['CONYUGE']['NOMBRES']= $estudiante['familia']['conyuge_nombre'];
				$data['CONYUGE']['CARGO_OCUPACION']= $estudiante['familia']['conyuge_cargo_ocupacion'];
				$data['FINANCIERO']['NRO_HIJOS']= $estudiante['familia']['numero_hijos'];
				$data['FINANCIERO']['ID_PERSONA_FINANCIERO']= '';
				$data['FINANCIERO']['DEPENDIENTE_PADRES']= $estudiante['economia']['dependiente_padres'];
				$data['FINANCIERO']['AUTO']= $estudiante['economia']['auto'];
				$data['FINANCIERO']['CASA']= $estudiante['economia']['casa'];
				$data['FINANCIERO']['SUELDO_PROMEDIO']= $estudiante['economia']['sueldo'];
				$data['CARNET_CONADIS']= $estudiante['discapacidad']['carnet_conadis'];
				$tip_dis=0;
				if(isset($estudiante['discapacidad']['tipo']) and $estudiante['discapacidad']['tipo']!=''){
					$tipo=$this->clientes_model->obtener_id_discapacidad($estudiante['discapacidad']['tipo']);
					if($tipo!=NULL){
						$tip_dis=$tipo['ID_TIPO_DISCAPACIDAD'];
					}
				}
				//$data['TIPO_DISCAPACIDAD']= $estudiante['discapacidad']['tipo'];
				$data['TIPO_DISCAPACIDAD']= $tip_dis;
				$data['PORCENTAJE_DICAPACIDAD']= $estudiante['discapacidad']['porcentaje'];
				$data['DESCRIPCION_DISCAPACIDAD']= $estudiante['discapacidad']['descripcion'];

				/* TRABAJO CON LOS CHECKS */
				if (!isset($data['ES_BECADO'])) {
					$data['ES_BECADO'] = 0;
				}
				if (!isset($data['TIENE_RUC'])) {
					$data['TIENE_RUC'] = 0;
				}
				if (!isset($data['ES_DISCAPACITADO'])) {
					$data['ES_DISCAPACITADO'] = 0;
				}
				if (!isset($data['ES_CONTRIBUYENTE_ESPECIAL'])) {
					$data['ES_CONTRIBUYENTE_ESPECIAL'] = 0;
				}
				/*--------------------- TRABAJO CON LOS CONTACTOS ---------------------*/
				$contactoLaboral = $data['ID_CONTACTO_LABORAL'];
				$contactoDomiciliar = $data['CONTACTO_DOMICILIO'];
				unset($data['CONTACTO_DOMICILIO']);
				unset($data['ID_CONTACTO_LABORAL']);
				/*---------------------------TRABAJO CON LOS DATOS DE CLIENTE------------------------------------*/
				$cliente = array();
				$cliente['TIPO_DOCUMENTO']=$data['TIPO_DOCUMENTO'];
				$cliente['NRO_DOCUMENTO']=$data['NRO_DOCUMENTO'];
				$cliente['ID_TIPO_CONTRIBUYENTE']=$data['ID_TIPO_CONTRIBUYENTE'];
				$cliente['ES_CONTRIBUYENTE_ESPECIAL']=$data['ES_CONTRIBUYENTE_ESPECIAL'];

				unset($data['TIPO_DOCUMENTO']);
				unset($data['NRO_DOCUMENTO']);
				unset($data['ID_TIPO_CONTRIBUYENTE']);
				unset($data['ES_CONTRIBUYENTE_ESPECIAL']);

				/*--------------------- TRABAJO CON LOS datos familiares adicionales ---------------------*/
				$referenciaFamiliar = $data['REFERENCIA_FAMILIAR'];
				unset($data['REFERENCIA_FAMILIAR']);
				$referenciaLaboral = $data['REFERENCIA_LABORAL'];
				unset($data['REFERENCIA_LABORAL']);
				$padre = $data['PADRE'];
				unset($data['PADRE']);
				$madre = $data['MADRE'];
				unset($data['MADRE']);
				$conyuge = $data['CONYUGE'];
				unset($data['CONYUGE']);

				/*--------------------- TRABAJO CON LOS datos financieros adicionales ---------------------*/
				$financiero = $data['FINANCIERO'];
				unset($data['FINANCIERO']);
				/*-------------------------------------------------------------------------------------------------*/

				/* SE CONVIERTE A NULL TODOS LOS CAMPOS QUE VENGAN DEL FORMULARIO CON CADENA VACIA DE VALOR */
				foreach ($contactoLaboral as $key => $value) {
					if ($value === '') {
						$contactoLaboral[$key] = NULL;
					}
				}
				foreach ($contactoDomiciliar as $key => $value) {
					if ($value === '') {
						$contactoDomiciliar[$key] = NULL;
					}
				}
				foreach ($cliente as $key => $value) {
					if ($value === '') {
						$cliente[$key] = NULL;
					}
				}
				foreach ($data as $key => $value) {
					if ($value === '') {
						$data[$key] = NULL;
					}
				}
				$persona=NULL;
				////////////////////////////////////////////////////////////////////////////////////////
				$this->clientes_model->crearActualizarClienteNaturalTransaccional($persona,$data,$cliente,$contactoLaboral,$contactoDomiciliar,$referenciaFamiliar,$referenciaLaboral,$padre,$madre,$conyuge,$financiero);
				$this->load->model('admin/usuarios_model');
				//verificar si existe usuario
				$persona=$this->clientes_model->buscar_persona_x_cedula(array('CEDULA'=>$estudiante['nro_documento']));
				$usuario = $this->usuarios_model->buscar_usuarios(array('ID_PERSONA'=>$persona['ID_PERSONA']));
				if(count($usuario)<=0){
					$data_usuario['ID_PERSONA'] = $persona['ID_PERSONA'];
					$data_usuario['USUARIO']    = $estudiante['nro_documento'];
					$data_usuario['CLAVE']      = md5($estudiante['nro_documento']);
					$data_usuario['ESTADO']     = 1;
					$data_usuario['NOMBRE_COMPLETO']   = $data['PRIMER_NOMBRE']." ".$data['SEGUNDO_NOMBRE']." ".$data['APELLIDO_PATERNO']." ".$data['APELLIDO_MATERNO'];
					$data_usuario['NRO_DOCUMENTO']     = $estudiante['nro_documento'];
					$id_usuario                        = $this->usuarios_model->crearUsuario($data_usuario);
					$data_usuario_perfil['id_usuario'] = $id_usuario;
					$data_usuario_perfil['id_perfil']  = 5;//perfil alumno
					$this->usuarios_model->crearUsuarioPerfil($data_usuario_perfil);
				}
				///////////
				//notifico al mail
				//$this->enviarCorreoElectronico($dir_correo_e, $usuario_generado, $pass );
				//////////
				///Realizar inscripci�n en carrera
				$data_inscripcion['ID_CLIENTE']=$persona['ID_CLIENTE'];
				$data_inscripcion['ID_CARRERA']=$estudiante['id_carrera'];
				$data_inscripcion["ID_NIVEL"]=1;
				$data_inscripcion["ID_PERIODO_ACADEMICO"]=$this->academico_model->get_periodo_activado();
				$data_inscripcion["ID_MODALIDAD"]=1;
				$carrera=$this->academico_model->get_carreras($estudiante['id_carrera']);
				if(count($carrera)>0){
					$data_inscripcion["ID_MODALIDAD"]=$carrera[0]['ID_MODALIDAD'];
				}
				$this->academico_model->crearActualizarInscripcion($data_inscripcion);
			}
			//header('Access-Control-Allow-Origin: *');
			//header('Access-Control-Allow-Headers: Origin, X-Requested-With, Content-Type, Accept');
			//header("Content-type: application/json");
			if($error==''){
				$respuesta['estado']='procesado';
				$respuesta['adicional']='';
			}else{
				$respuesta['estado']='error';
				$respuesta['adicional']=$error;
			}
			//log vlc
			$dat['CEDULA']=$estudiante['nro_documento'];
			$dat['ID_CARRERA']=$estudiante['id_carrera'];
			//$dat['MSJ_JSON']=$JSONData;
		}
		//guardar log vlc
		$dat['RESULTADO']=json_encode($respuesta);
		$dat['FECHA']=date('Y-m-d H:i:s');
		$this->academico_model->crearLogInscripcionVlc($dat);
		//echo json_encode($datos);
		echo json_encode($respuesta);
	}

	/////////////////////////////////////////////////////////////////////////
	//funcion que guarda la nota de supletorio enviada desde un sistema externo VLC
	public function promedio_supletorio()
	{
		$this->load->model('admin/usuarios_model');
		$this->load->module('admin/login');
		$ip=$_SERVER['REMOTE_ADDR'];
		$id_carrera = trim($this->input->post('id_carrera'));
		$id_materia = trim($this->input->post('id_materia'));
		$cedula = trim($this->input->post('cedula'));
		$nota = trim($this->input->post('calificacion'));
		$cedula_docente = trim($this->input->post('cedula_docente'));
		$res='';
		$this->session->set_userdata('loggeado', array('ID_USUARIO'=>0));

		//if ($ip=='158.69.60.207' or $ip=='186.71.53.194' or $ip=='::1' or $ip=='200.58.110.26')
		//{
			//$id_periodo_academico = $this->academico_model->get_periodo_activado();
			$id_periodo_academico = 11;
			$usuario              = $this->usuarios_model->verificar_usuario_cedula($cedula);
			$materias             = $this->academico_model->get_materias_estudiante($usuario['ID_PERSONA'],$id_periodo_academico);

			$id_materias=$this->academico_model->get_materias_conversion($id_materia);
			$vector_materias=explode('+',$id_materias);
			$estudiante_carrera_materia = 0;
			$id_grupo                   = 0;
			$id_carrera_materia         = 0;
			$asistencia_justificada     = 0;
			$id_docente     = 0;
			$homologado     = 0;
			$convalidado     = 0;
			$historial     = 0;
			foreach($materias as $materia){
				//if($materia['ID_CARRERA_MATERIA']==$id_materia){
				if(in_array($materia['ID_CARRERA_MATERIA'],$vector_materias)){
					$estudiante_carrera_materia = $materia['ID_ESTUDIANTE_CARRERA_MATERIA'];
					$id_grupo                   = $materia['ID_GRUPO'];
					$id_carrera_materia         = $materia['ID_CARRERA_MATERIA'];
					$asistencia_justificada     = $materia['ASISTENCIA_JUSTIFICADA'];
					$periodo_academico          = $materia['ID_PERIODO_ACADEMICO'];
					$id_docente          = $materia['ID_PERSONA_DOCENTE'];
					$homologado          = $materia['FUE_HOMOLOGADA'];
					$convalidado          = $materia['FUE_CONVALIDADA'];
					$historial          = $materia['FUE_HISTORIAL'];
				}
			}
			if($nota!='' and $nota>=0 and $nota<=10){
				if($estudiante_carrera_materia>0){
					if($homologado==0 and $convalidado==0 and $historial==0){
						$op['ID_ESTUDIANTE_CARRERA_MATERIA']=$estudiante_carrera_materia;
						$op['ID_TIPO_CALIFICACION']=6;
						$op['ETAPA']=0;
						$nota_final=$this->academico_model->get_calificaciones($op);
						$op['ID_ESTUDIANTE_CARRERA_MATERIA']=$estudiante_carrera_materia;
						$op['ID_TIPO_CALIFICACION']=5;
						$op['ETAPA']=0;
						$supletorio=$this->academico_model->get_calificaciones($op);
						//if(count($nota_final)>0 and $nota_final[0]['ESTADO_CALIFICACION']==0){
						if((count($nota_final)>0 and $nota_final[0]['ESTADO_CALIFICACION']==0) or (count($nota_final)>0 and $nota_final[0]['ESTADO_CALIFICACION']==2 and count($supletorio)>0 and $supletorio[0]['CALIFICACION']!='')){
							$op['ID_ESTUDIANTE_CARRERA_MATERIA']=$estudiante_carrera_materia;
							$op['ID_TIPO_CALIFICACION']=3;
							$op['ETAPA']=0;
							$promedio_final=$this->academico_model->get_calificaciones($op);
							if(count($promedio_final)>0){
								$v_notamin=$this->academico_model->getparametro(utf8_encode('Nota m�nima'));
								$notamin=$v_notamin['VALOR'];
								$calificacion_final=round(($promedio_final[0]['CALIFICACION']+$nota)/2,2);
								if($calificacion_final>=$notamin or $calificacion_final>=6.5){
									$estado=1;
									if($calificacion_final>=6.5 and $calificacion_final<$notamin){
										$calificacion_final=$notamin;
									}
								}else{
									$estado=2;
								}
								$asistencia='';
								$this->academico_model->updateAsistenciaSupletorioNotaFinal($estudiante_carrera_materia,$asistencia,$nota,$calificacion_final,$estado,$id_periodo_academico);
								$res= 'Registro Realizado';
							}else{
								$res= 'Error:Estudiante no tiene calificacion etapas';
							}
						}else{
							$res= 'Error:Estudiante no esta en supletorio';
						}
					}else{
						$res='Error:Materia fue HCH';
					}
				}else{
					$res= 'Error:Materia No Existe';
				}
			}else{
				$res= 'Error:Calificacion Incorrecta';
			}
			if(count($materias)<=0){
				$res='Error:Estudiante No Matriculado';
			}
			//guardar log vlc
			$dat=array();
			$dat['IP']=$ip;
			$dat['ID_MATERIA']=$id_materia;
			$dat['CALIFICACION']=$nota;
			$dat['CEDULA_ESTUDIANTE']=$cedula;
			$dat['FECHA']=date('Y-m-d H:i:s');
			$dat['ESTADO']=$res;
			$dat['CEDULA_DOCENTE']=$cedula_docente;
			$dat['TIPO']='Supletorio';
			$this->academico_model->crearLogVlc($dat);
			echo $res;

		//}else{
		//	echo 'Acceso Denegado';
		//}
	}

	////////////////////////////////////////////////////////////////////
	public function calcularFechasCierre()
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado')){
			$id_periodo_academico = $this->academico_model->get_periodo_activado();
			$materias_pla  = $this->academico_model->buscarPlanificaciones(array('ID_PERIODO_ACADEMICO'=>$id_periodo_academico));
			$i=0;
			foreach($materias_pla as $mp){
				if($mp['FECHA_CIERRE']!='0000-00-00'){
					//gestion fecha cierre califiaciones
					$num_dias=$this->academico_model->getparametro('dias_cierre');
					$fc=explode('-',$mp['FECHA_CIERRE']);
					$fec= mktime(0,0,0,$fc[1],($fc[2]+$num_dias['VALOR']),$fc[0]);
					$fecha_cierre_calificacion=date("Y-m-d", $fec);
					$datc['ID_GRUPO']= $mp['ID_GRUPO'];
					$datc['GRUPO']= '';
					$datc['ID_MATERIA']= $mp['ID_CARRERA_MATERIA'];
					$datc['MATERIA']= '';
					$datc['FECHA_CIERRE']= $fecha_cierre_calificacion;
					$datc['ID_PERIODO_ACADEMICO']= $id_periodo_academico;
					$fechaCierre=$this->academico_model->get_fecha_cierre(array('ID_GRUPO'=>$mp['ID_GRUPO'],'ID_MATERIA'=>$mp['ID_CARRERA_MATERIA'],'ID_PERIODO_ACADEMICO'=>$id_periodo_academico));
					if(count($fechaCierre)<=0){
						$this->academico_model->crear_fecha_cierre($datc);
					}else{
						$this->academico_model->actualizar_fecha_cierre($datc,$fechaCierre['ID_CIERRE_CALIFICACION']);
					}
					$i++;
				}
			}
			echo 'Fechas Realizadas: '.$i;
		}
	}

	//////////////////////////////////////////////////////////////
	public function guardarInforme()
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado')){
			//print_r($_POST);
			$dati['ID_PERIODO_ACADEMICO']=$this->academico_model->get_periodo_activado();
			$dati['ID_MATERIA']=trim($this->input->post('id_materia'));
			$dati['ID_GRUPO']=trim($this->input->post('id_grupo'));
			$dati['ID_PLANTILLA']=trim($this->input->post('id_plantilla'));
			$informe=$this->academico_model->get_informe($dati);
			$dati['OBSERVACION']=trim($this->input->post('observacion'));
			if(count($informe)<=0){
				$dati['ID_USUARIO']=$idusuario;
				$dati['FECHA_CREACION']=date('Y-m-d H:i:s');
				$id_informe=$this->academico_model->crearInforme($dati);
			}else{
				$dati['ID_USUARIO_ACTUALIZA']=$idusuario;
				$dati['FECHA_ACTUALIZACION']=date('Y-m-d H:i:s');
				$id_informe=$informe[0]['ID_INFORME'];
				$this->academico_model->actualizarInforme($dati,$id_informe);
			}
			$temas=$this->input->post('tema');
			$subtemas=$this->input->post('subtema');
			foreach($temas as $k=>$tema){
				$datt['ID_INFORME']=$id_informe;
				$datt['TEMA']=$tema['TEMA'];
				if($tema['ID_TEMA']>0){
					$id_tema=$tema['ID_TEMA'];
					$this->academico_model->actualizarTema($datt,$id_tema);
				}else{
					$id_tema=$this->academico_model->crearTema($datt);
				}
				foreach($subtemas[$k] as $subtema){
					$dats['ID_INFORME_TEMA']=$id_tema;
					$dats['SUBTEMA']=$subtema['SUBTEMA'];
					$dats['TALLER_TAREA']=$subtema['TALLER_TAREA'];
					$dats['OBSERVACION']=$subtema['OBSERVACION'];
					if($subtema['ID_SUBTEMA']>0){
						$id_subtema=$subtema['ID_SUBTEMA'];
						$this->academico_model->actualizarSubtema($dats,$id_subtema);
					}else{
						$this->academico_model->crearSubtema($dats);
					}
				}
			}
			//borrar temas y subtemas si existe el caso
			$ids_temas_borrar=$this->input->post('ids_temas_borrar');
			$ids_subtemas_borrar=$this->input->post('ids_subtemas_borrar');
			$ids_temas_borrar=trim($ids_temas_borrar,'+');
			$ids_subtemas_borrar=trim($ids_subtemas_borrar,'+');
			if($ids_temas_borrar!=''){
				$ids_tb=explode('+',$ids_temas_borrar);
				foreach($ids_tb as $idt){
					$this->academico_model->borrarInformeTema($idt);
				}
			}
			if($ids_subtemas_borrar!=''){
				$ids_sb=explode('+',$ids_subtemas_borrar);
				foreach($ids_sb as $ids){
					$this->academico_model->borrarInformeSubtema($ids);
				}
			}
			echo 'Registro Realizado';
		}else{
			echo 'Acceso Denegado';
		}
	}

	//////////////////////////////////////////////////////////////
	public function getInforme($tipo=null)
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado')){
			//print_r($_POST);
			$dati['ID_PERIODO_ACADEMICO']=trim($this->input->post('id_periodo'));
			if($dati['ID_PERIODO_ACADEMICO']<=0){
				$dati['ID_PERIODO_ACADEMICO']=$this->academico_model->get_periodo_activado();
			}
			$dati['ID_MATERIA']=trim($this->input->post('id_materia'));
			$dati['ID_GRUPO']=trim($this->input->post('id_grupo'));
			$dati['ID_PLANTILLA']=trim($this->input->post('id_plantilla'));
			$dati['TIPO']=$tipo;
			$informes=$this->academico_model->get_informe($dati);
			if(count($informes)>0){
				$informe=$informes[0];
				$temas=$this->academico_model->get_tema($informe['ID_INFORME']);
				foreach($temas as $k=>$tema){
					$temas[$k]['subtemas']=$this->academico_model->get_subtema($tema['ID_INFORME_TEMA']);
				}
				$informe['temas']=$temas;
				$informe['prerequisito'] = $this->academico_model->get_prerequisitos($dati['ID_MATERIA']);
			}else{
				$informe=NULL;
			}
			echo json_encode($informe);
		}else{
			echo 'Acceso Denegado';
		}
	}

	//////////////////////////////////////////////////////////////
	//////calificar a cero en componente taller(id:2) y asistencia
	public function calculaCalificacionCierre()
	{
		$this->session->set_userdata('loggeado', array('ID_USUARIO'=>-1));
		$id_periodo=$this->academico_model->get_periodo_activado();
		$v_notamin=$this->academico_model->getparametro(utf8_encode('Nota m�nima'));
		$notamin=$v_notamin['VALOR'];
		$v_notamax=$this->academico_model->getparametro(utf8_encode('Nota m�xima'));
		$notamax=$v_notamax['VALOR'];
		$min_componente_examen=5;
		$v_notamax_asis=$this->academico_model->getparametro('Asistencia');
		$notamax_asis=$v_notamax_asis['VALOR'];
		$v_notamin_asis=$this->academico_model->getparametro('Asistencia minima');
		$notamin_asis=$v_notamin_asis['VALOR'];
		$v_nota_pierde=$this->academico_model->getparametro('Nota pierde');
		$nota_pierde=$v_nota_pierde['VALOR'];
		$componentes=$this->academico_model->get_componentes();
		$fecha=date('Y-m-d');
		$fechas_cierre=$this->academico_model->get_fechas_cierre(array('FECHA_CIERRE'=>$fecha));
		$nota_taller_registrado=0;
		$nota_asistencia_registrado=0;
		//print_r($fechas_cierre);
		//break;
		foreach($fechas_cierre as $fc){
			$estudiantes_materia=$this->academico_model->buscar_materias_matriculados(array('ID_PERIODO_ACADEMICO'=>$fc['ID_PERIODO_ACADEMICO'],'ID_CARRERA_MATERIA'=>$fc['ID_MATERIA'],'ID_GRUPO'=>$fc['ID_GRUPO']));
			foreach($estudiantes_materia as $em){
				$asistencia_justificada=$em['ASISTENCIA_JUSTIFICADA'];
				$estudiante_carrera_materia=$em['ID_ESTUDIANTE_CARRERA_MATERIA'];
				foreach($componentes as $v){
					$componente[$v['ID_COMPONENTE']]=$v['VALOR'];
					if($asistencia_justificada==1 and $v['ID_COMPONENTE']==3){
						$componente[$v['ID_COMPONENTE']]=$v['VALOR']*2;
					}
				}
				if($em['FUE_HOMOLOGADA']==0 and $em['FUE_CONVALIDADA']==0 and $em['FUE_HISTORIAL']==0){
					//revisar si tiene componente taller
					$op_taller['ID_ESTUDIANTE_CARRERA_MATERIA']=$em['ID_ESTUDIANTE_CARRERA_MATERIA'];
					$op_taller['ID_TIPO_CALIFICACION']=1;
					$op_taller['ETAPA']=1;
					$op_taller['ID_COMPONENTE']=2;
					$nota_taller=$this->academico_model->get_calificaciones($op_taller);
					if(count($nota_taller)<=0 or $nota_taller[0]['CALIFICACION']==''){
						$etapa=1;
						$nota=0;
						$cadena_componente='2';//id componente taller
						$cadena_valor=$nota;
						$op['ID_ESTUDIANTE_CARRERA_MATERIA']=$estudiante_carrera_materia;
						$op['ID_TIPO_CALIFICACION']=1;
						$op['ETAPA']=1;
						$notas_componente=$this->academico_model->get_calificaciones($op);
						$nota_etapa=0;
						$num_componentes=count($componentes)-1;//total componentes menos el componente taller
						$num_componentes_calificados=0;//total componentes ya calificados
						foreach($notas_componente as $nc){
							if($nc['ID_COMPONENTE']!=2){//si no es componente de taller
								$nota_etapa=$nota_etapa+$nc['CALIFICACION']*$componente[$nc['ID_COMPONENTE']]/10;
								$num_componentes_calificados=$num_componentes_calificados+1;
							}
							if($nc['ID_COMPONENTE']==3){//calificacion componente examen
								$componente_examen=$nc['CALIFICACION'];
							}
						}
						if($num_componentes==$num_componentes_calificados){
							$nota_etapa=$nota_etapa+$nota*$componente[2]/10;
							$asistencia=$this->academico_model->get_asistencia_materia($estudiante_carrera_materia);
							if($asistencia>=0){
								$estado='';
								//calcular estado materia
								if($nota_etapa>=$notamin && $nota_etapa<=$notamax && $componente_examen>=$min_componente_examen){
									if($asistencia>=$notamax_asis){
										$estado=1;
									}elseif($asistencia>=$notamin_asis && $asistencia<$notamax_asis){
										$estado=0;
									}else{
										$estado=2;
									}
								}elseif(($nota_etapa>=$nota_pierde && $nota_etapa<$notamin) or ($componente_examen<$min_componente_examen && $nota_etapa>=$nota_pierde)){
									if($asistencia>=$notamax_asis){
										$estado=0;
									}elseif($asistencia>=$notamin_asis && $asistencia<$notamax_asis && $componente_examen>=$min_componente_examen){
										$estado=0;
									}else{
										$estado=2;
									}
								}elseif($nota_etapa<$nota_pierde){
									$estado=2;
								}
								$supletorio=$this->academico_model->get_supletorio_materia($estudiante_carrera_materia);
								if($supletorio<0){
									$supletorio='';
								}
								$this->academico_model->updateAsistenciaSupletorioNotaFinal($estudiante_carrera_materia,$asistencia,$supletorio,$nota_etapa,$estado,$em['ID_PERIODO_ACADEMICO']);

								/////enviar supletorio a VLC//////////
								if($estado==0){
									$supletorio_vlc=$this->academico_model->get_estudiante_supletorio($estudiante_carrera_materia);
									if($supletorio_vlc==NULL or $supletorio_vlc['ID_SUPLETORIO_VLC']==0){
										if($supletorio_vlc==NULL){
											$this->academico_model->crear_estudiante_supletorio(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$estudiante_carrera_materia));
										}
										$this->sendSupletorioVlc($estudiante_carrera_materia,'crear');
									}
								}elseif($estado>0 and ($supletorio=='' or $supletorio==NULL)){
									$supletorio_vlc=$this->academico_model->get_estudiante_supletorio($estudiante_carrera_materia);
									if($supletorio_vlc!=NULL){
										$this->sendSupletorioVlc($estudiante_carrera_materia,'borrar');
										$this->academico_model->borrar_estudiante_supletorio($estudiante_carrera_materia);
									}
								}
							}

						}else{
							$nota_etapa='';
						}
						$etapas=1;
						$this->academico_model->calificar_componentes($estudiante_carrera_materia, $etapa,$cadena_componente,$cadena_valor,$nota_etapa,$etapas,$em['ID_PERIODO_ACADEMICO']);
						$nota_taller_registrado++;
					}
					//revisar si tiene asistencia
					$asistencia=$this->academico_model->get_asistencia_materia($estudiante_carrera_materia);
					if($asistencia<0 or $asistencia==''){
						$nota='0';
						if($asistencia_justificada<=0){
							$op['ID_ESTUDIANTE_CARRERA_MATERIA']=$estudiante_carrera_materia;
							$op['ID_TIPO_CALIFICACION']=1;
							$op['ETAPA']=1;
							$notas_componente=$this->academico_model->get_calificaciones($op);
							$nota_etapa=0;
							$num_componentes=count($componentes);//total componentes
							$num_componentes_calificados=0;//total componentes ya calificados
							foreach($notas_componente as $nc){
								$nota_etapa=$nota_etapa+$nc['CALIFICACION']*$componente[$nc['ID_COMPONENTE']]/10;
								$num_componentes_calificados=$num_componentes_calificados+1;
								if($nc['ID_COMPONENTE']==3){//calificacion componente examen
									$componente_examen=$nc['CALIFICACION'];
								}
							}
							$asistencia=$nota;
							if($num_componentes==$num_componentes_calificados and $asistencia>=0){
								$estado='';
								//calcular estado materia
								if($nota_etapa>=$notamin && $nota_etapa<=$notamax && $componente_examen>=$min_componente_examen){
									if($asistencia>=$notamax_asis){
										$estado=1;
									}elseif($asistencia>=$notamin_asis && $asistencia<$notamax_asis){
										$estado=0;
									}else{
										$estado=2;
									}
								}elseif(($nota_etapa>=$nota_pierde && $nota_etapa<$notamin) or ($componente_examen<$min_componente_examen && $nota_etapa>=$nota_pierde)){
									if($asistencia>=$notamax_asis){
										$estado=0;
									}elseif($asistencia>=$notamin_asis && $asistencia<$notamax_asis && $componente_examen>=$min_componente_examen){
										$estado=0;
									}else{
										$estado=2;
									}
								}elseif($nota_etapa<$nota_pierde){
									$estado=2;
								}
							}else{
								$nota_etapa='';
								$estado='';
							}
							$supletorio=$this->academico_model->get_supletorio_materia($estudiante_carrera_materia);
							if($supletorio<0){
								$supletorio='';
							}
							$this->academico_model->updateAsistenciaSupletorioNotaFinal($estudiante_carrera_materia,$asistencia,$supletorio,$nota_etapa,$estado,$em['ID_PERIODO_ACADEMICO']);

							/////enviar supletorio a VLC//////////
							if($estado==0){
								$supletorio_vlc=$this->academico_model->get_estudiante_supletorio($estudiante_carrera_materia);
								if($supletorio_vlc==NULL or $supletorio_vlc['ID_SUPLETORIO_VLC']==0){
									if($supletorio_vlc==NULL){
										$this->academico_model->crear_estudiante_supletorio(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$estudiante_carrera_materia));
									}
									$this->sendSupletorioVlc($estudiante_carrera_materia,'crear');
								}
							}elseif($estado>0 and ($supletorio=='' or $supletorio==NULL)){
								$supletorio_vlc=$this->academico_model->get_estudiante_supletorio($estudiante_carrera_materia);
								if($supletorio_vlc!=NULL){
									$this->sendSupletorioVlc($estudiante_carrera_materia,'borrar');
									$this->academico_model->borrar_estudiante_supletorio($estudiante_carrera_materia);
								}
							}

							$nota_asistencia_registrado++;
						}
					}
				}
			}
		}
		echo 'Componente Taller Registrados: '.$nota_taller_registrado.'  Componente Asistencia Registrado: '.$nota_asistencia_registrado;
	}

	public function reporteAlumnosPromedio(){
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,94)){

			$datos=array();
			$datos['niveles']  = $this->academico_model->get_niveles();
			$datos['carreras'] = $this->academico_model->get_carreras();
			$datos['periodos'] = $this->academico_model->getPeriodos();
			//$datos['perfil'] = $perfil;
			$datos1=$this->perfil_model->cabecera($idusuario);

			$this->load->view('templates/header',$datos1);
			$this->load->view('buscar_alumnos_promedio',$datos);
			$this->load->view('templates/footer');


		}else{
			redirect('admin/login', 'refresh');
		}
	}
	public function buscarAlumnosPromedio(){
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,94)){
			$promedioBase = $this->input->post('s_promedio');
			$data['id_periodo_academico'] = trim($this->input->post('s_period'));
			$data['id_carrera'] = trim($this->input->post('s_carrera'));
			$data['id_nivel']   = trim($this->input->post('s_nivel'));
			$data['grupo']   = null;
			// $data['ID_PERIODO_ACADEMICO'] = trim($this->input->post('id_periodo'));
			//$alumnos = $this->academico_model->buscar_matriculas($data);
			$alumnos = array();
			$datos = $this->academico_model->buscarAlumnoMateria($data);
			if ($datos!=false) {


				foreach ($datos as $key => $alumno) {
					$num_materias_matricula=0;
					$tota_notas=0;
					$materias = $this->academico_model->buscar_certificado_estudiante($alumno['ID_PERSONA'],$alumno['ID_GRUPO'],$alumno['ID_NIVEL'],$alumno['ID_CARRERA'],$alumno['ID_PERIODO_ACADEMICO']);
					foreach ($materias['estudiantes'] as $km => $est) {
						if ($est['FUE_HOMOLOGADA']==1) {
							$tota_notas+=$est['NOTA_HOMOLOGACION'];
						}elseif ($est['FUE_CONVALIDADA']==1) {

							$tota_notas+=$est['NOTA_CONVALIDACION'];
						}elseif ($est['FUE_HISTORIAL']==1) {

							$tota_notas+=$est['NOTA_HISTORIAL'];
						}else{
						   $tota_notas+=$est['FINAL'];
						}
						$num_materias_matricula=$num_materias_matricula+1;
					}
					if ($num_materias_matricula>0) {


						$datos[$key]['promedio'] = number_format(floatval($tota_notas)/$num_materias_matricula,2);
					}else{
						$datos[$key]['promedio'] =0;
					}
					$datos[$key]['NIVEL'] = $materias['cabecera']['NIVEL'];
					$datos[$key]['GRUPO'] = $materias['cabecera']['GRUPO'];
					$dat_grupo=$this->academico_model->get_grupo($alumno['ID_GRUPO']);
					$dat_sede=$this->academico_model->get_sede($dat_grupo['ID_SEDE']);
					$datos[$key]['SEDE'] = $dat_sede['SEDE'];
					$datos[$key]['materias'] = $materias;
					if ($datos[$key]['promedio'] >= $promedioBase){
						array_push($alumnos, $datos[$key]);
					}

				}
			}
			echo json_encode($alumnos);
			//$this->load->view('resultadoAlumnosPromedio',$datos);
		}else{
			redirect('admin/login', 'refresh');
		}
	}

	///////////////////////////////////////////////
	public function prueba_inscripcion_vlc()
	{
		$elements['primer_nombre']='GALO';
		$elements['segundo_nombre']='FERNANDO';
		$elements['primer_apellido']='MALES';
		$elements['segundo_apellido']='MALDONADO';
		$elements['tipo_documento']='C';
		$elements['nro_documento']='1003070446';
		//$elements['id_nacionalidad']=18;
		$elements['id_nacionalidad']='ECUATORIANA';
		$elements['fecha_nacimiento']='1998-02-06';
		//$elements['id_pais_nacimiento']=1;
		$elements['id_pais_nacimiento']='ECUADOR';
		//$elements['id_estado_civil']=1;
		$elements['id_estado_civil']='UNION LIBRE';
		$elements['tipo_sangre']='AB+';
		$elements['genero']='M';
		$elements['id_grupo_cultural']=1;
		$elements['colegio_graduacion']='EL CHACO';
		$elements['anio_graduacion']='2015';
		//$elements['id_pais_graduacion']=1;
		$elements['id_pais_graduacion']='ECUADOR';
		$elements['titulo_bachiller']='POLIVALENTE CONTABILIDAD Y ADMINISTRACION';
		$elements['sector_estudio']='CIENCIAS';
		//$elements['id_tipo_colegio']=2;
		$elements['id_tipo_colegio']='FISCOMISIONAL';
		$elements['contacto']['id_operador_telefonico']=2;
		$elements['contacto']['celular']='09-8681-6689';
		$elements['contacto']['telefono']='06-232-9764';
		$elements['contacto']['email']='gm@gmail.com';
		//$elements['contacto']['id_pais_domicilio']=1;
		$elements['contacto']['id_pais_domicilio']='ECUADOR';
		//$elements['contacto']['id_provincia_domicilio']=16;
		$elements['contacto']['id_provincia_domicilio']='NAPO';
		//$elements['contacto']['id_ciudad_domicilio']=174;
		$elements['contacto']['id_ciudad_domicilio']='EL CHACO';
		$elements['contacto']['barrio']='CARCELEN';
		$elements['contacto']['calle_principal']='EL PORVENIR';
		$elements['contacto']['calle_secundaria']='CALLE A';
		$elements['contacto']['numero_casa']='589';
		$elements['laboral']['empresa']='EL JURI';
		$elements['laboral']['cargo']='VENDEDORA';
		$elements['laboral']['tiempo']="2 MESES";
		$elements['laboral']['telefono']='02-511-8974';
		$elements['laboral']['email']='prueba@g.com';
		//$elements['laboral']['id_pais']=1;
		$elements['laboral']['id_pais']='ECUADOR';
		//$elements['laboral']['id_provincia']=19;
		$elements['laboral']['id_provincia']='PICHINCHA';
		//$elements['laboral']['id_ciudad']=190;
		$elements['laboral']['id_ciudad']='QUITO';
		$elements['laboral']['calle_principal']='Av. Amazonas';
		$elements['laboral']['calle_secundaria']='Av. Republica';
		$elements['laboral']['numero_casa']='N34-54';
		$elements['referencia']['familiar_nombre']='JORGE REYES';
		$elements['referencia']['familiar_empresa']='EL COMERCIO';
		$elements['referencia']['familiar_cargo_ocupacion']='ADMINISTRADOR';
		$elements['referencia']['familiar_telefono']='09-845-6845';
		$elements['referencia']['laboral_nombres']='HUGO LOPEZ';
		$elements['referencia']['laboral_empresa']='BANCO PICHINCHA';
		$elements['referencia']['laboral_cargo_ocupacion']='CAJERO';
		$elements['referencia']['laboral_telefono']='09-845-1325';
		$elements['familia']['padre_nombre']='JOSE PUEDMA';
		$elements['familia']['padre_cargo_ocupacion']='COMERCIANTE';
		$elements['familia']['madre_nombre']='MARIA ROSERO';
		$elements['familia']['madre_cargo_ocupacion']='AMA DE CASA';
		$elements['familia']['conyuge_nombre']='FEDERICO RODRIGUEZ';
		$elements['familia']['conyuge_cargo_ocupacion']='BOMBERO';
		$elements['familia']['numero_hijos']='2';
		$elements['economia']['dependiente_padres']=0;
		$elements['economia']['auto']=0;
		$elements['economia']['casa']=0;
		$elements['economia']['sueldo']='100';
		$elements['discapacidad']['carnet_conadis']='12456884511';
		//$elements['discapacidad']['tipo']=3;
		$elements['discapacidad']['tipo']='VISUAL';
		$elements['discapacidad']['porcentaje']='10';
		$elements['discapacidad']['descripcion']='MIOPIA';
		$elements['id_carrera']=1;
		//$url='http://binaryecuadorserver.com/deming/index.php/academico/academico/inscripcion_estudiante';
		$url='http://localhost/Deming/index.php/academico/academico/inscripcion_estudiante';
		$ch  = curl_init($url);
		curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($elements));
		curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json'));
		curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);
		$resultado = curl_exec($ch);
		$error     = curl_error($ch);
		curl_close($ch);
		echo $resultado.'-'.$error;
	}

	//////////////////////////////////////////////////////////////////
	public function materiasEstudiante($id_persona, $id_carrera=null)
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado')){
			$id_periodo=$this->academico_model->get_periodo_activado();
			$materias=$this->academico_model->get_materias_estudiante($id_persona,$id_periodo,null,null,$id_carrera);//todas las materias del alumno en el periodo vigente
			$materias_asistencia=array();
			foreach($materias as $k=>$materia){
				if($materia['ASISTENCIA_JUSTIFICADA']==0){
					$justificacion=$this->academico_model->get_justificacion($materia['ID_ESTUDIANTE_CARRERA_MATERIA']);
					if($justificacion==NULL){
						$dm=$this->academico_model->obtener_datos_materia($materia['ID_CARRERA_MATERIA']);

						$planificacion=$this->academico_model->getPlanificacion($materia['ID_GRUPO'],$materia['ID_CARRERA_MATERIA'],$materia['ID_PERIODO_ACADEMICO']);
						$periodo_tutoria=$planificacion['FECHA_TUTORIA1'];
						$fecha_fin='';
						$fechast=$planificacion['FECHA_TUTORIA2'].'+'.$planificacion['FECHA_TUTORIA3'].'+'.$planificacion['FECHA_TUTORIA4'].'+'.$planificacion['FECHAS_TUTORIA'];
						$vector_ft=explode('+',$fechast);
						foreach($vector_ft as $ft){
							if($ft!='' and $ft!=NULL and $ft!='0000-00-00'){
								$fecha_fin=$ft;
							}
						}
						if($fecha_fin!=''){
							$periodo_tutoria.=' / '.$fecha_fin;
						}

						$materias_asistencia[]=array('id_ecm'=>$materia['ID_ESTUDIANTE_CARRERA_MATERIA'],'materia'=>$dm['NOMBRE'],'tutoria'=>$periodo_tutoria);
					}
				}
			}
			echo json_encode($materias_asistencia);
		}else{
			redirect('admin/login', 'refresh');
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////
	public function procesarJustificacionAsistencia()
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,80)){
			$dato_usuario=$this->session->userdata('loggeado');
			$id_estudiante_carrera_materia= trim($this->input->post('id_estudiante_carrera_materia'));
			$justificacion = trim($this->input->post('justificacion'));
			$id_justificacion = trim($this->input->post('id_justificacion'));
			$observacion = trim($this->input->post('observacion'));
			$estado = trim($this->input->post('estado'));
			if($id_justificacion==0){//ingresar solicitud del estudiante
				//carga de archivo
				$archivo='';
				if(isset($_FILES['archivo'])){
					$archivo= $_FILES['archivo']['name'];
				}
				$ingreso_archivo='';
				$nombre_archivo='';
				if($archivo!=''){
					$dato_archivo=$this->cargar_archivo('archivo',0,'justificaciones');
					if($dato_archivo['error']==''){
						$nombre_archivo=$dato_archivo['file_name'];
					}else{
						$ingreso_archivo=$dato_archivo['error'];
					}
				}
				if($nombre_archivo!='' or $archivo==''){
					$data['ID_ESTUDIANTE_CARRERA_MATERIA']=$id_estudiante_carrera_materia;
					$data['FECHA_CREACION']=date('Y-m-d H:i:s');
					if($this->session->userdata('loggeado')['ID_PERFIL']==5){
						$data['JUSTIFICACION']=$justificacion;
						$data['ARCHIVO']=$nombre_archivo;
					}else{
						$data['OBSERVACION']=$observacion;
						$data['ESTADO']=1;
						$data['FECHA_RESPUESTA']=date('Y-m-d H:i:s');
						$data['ID_USUARIO_PROCESA']=$this->session->userdata('loggeado')['ID_USUARIO'];
						$this->academico_model->actualizar_acad_estudiante_carrera_materia(array('ASISTENCIA_JUSTIFICADA'=>1),$id_estudiante_carrera_materia);
						$this->notaAsistencia(100,$id_estudiante_carrera_materia,1);
					}
					$this->academico_model->crearJustificacionAsistencia($data);
					$res=1;
					$mensaje='Registro Realizado';
				}else{
					$res=0;
					$mensaje='Fallo Ingreso :'.$ingreso_archivo;
				}
				$respuesta['respuesta']=$res;
				$respuesta['mensaje']=$mensaje;
				$respuesta['archivo']=$nombre_archivo;
				echo json_encode($respuesta);
			}elseif($this->session->userdata('loggeado')['ID_PERFIL']!=5){
				$data['OBSERVACION']=$observacion;
				$data['ESTADO']=$estado;
				$data['FECHA_RESPUESTA']=date('Y-m-d H:i:s');
				$data['ID_USUARIO_PROCESA']=$this->session->userdata('loggeado')['ID_USUARIO'];
				$this->academico_model->actualizarJustificacionAsistencia($data,$id_justificacion);
				//crear registro de asistencia
				if($estado==1){
					$this->academico_model->actualizar_acad_estudiante_carrera_materia(array('ASISTENCIA_JUSTIFICADA'=>1),$id_estudiante_carrera_materia);
					$this->notaAsistencia(100,$id_estudiante_carrera_materia,1);
				}
				$respuesta['respuesta']=1;
				$respuesta['mensaje']='Registro Realizado';
				echo json_encode($respuesta);
			}elseif($this->session->userdata('loggeado')['ID_PERFIL']==5){
				//carga de archivo
				$archivo='';
				if(isset($_FILES['archivo'])){
					$archivo= $_FILES['archivo']['name'];
				}
				$ingreso_archivo='';
				$nombre_archivo='';
				if($archivo!=''){
					$dato_archivo=$this->cargar_archivo('archivo',0,'justificaciones');
					if($dato_archivo['error']==''){
						$nombre_archivo=$dato_archivo['file_name'];
					}else{
						$ingreso_archivo=$dato_archivo['error'];
					}
				}
				if($nombre_archivo!='' or $archivo==''){
					$data['FECHA_CREACION']=date('Y-m-d H:i:s');
					$data['JUSTIFICACION']=$justificacion;
					$data['ARCHIVO']=$nombre_archivo;
					$data['ESTADO']=0;
					$justificacion=$this->academico_model->get_justificacion($id_estudiante_carrera_materia);
					if(isset($justificacion['ARCHIVO']) and $justificacion['ARCHIVO']!=''){
						@unlink(FCPATH.'archivos/justificaciones/'.$justificacion['ARCHIVO']);;
					}
					$this->academico_model->actualizarJustificacionAsistencia($data,$id_justificacion);
					$res=1;
					$mensaje='Registro Realizado';
				}else{
					$res=0;
					$mensaje='Fallo Ingreso :'.$ingreso_archivo;
				}
				$respuesta['respuesta']=$res;
				$respuesta['mensaje']=$mensaje;
				$respuesta['archivo']=$nombre_archivo;
				echo json_encode($respuesta);
			}
		}else{
			echo 'Sesi�n Terminada';
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////
	public function getJustificacionAsistencia()
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,80)){
			$id_estudiante_carrera_materia = trim($this->input->post('id_estudiante_carrera_materia'));
			$justificacion = $justificacion=$this->academico_model->get_justificacion($id_estudiante_carrera_materia);

			$ecm=$this->academico_model->get_estudiante_carrera_materia($id_estudiante_carrera_materia);
			$planificacion=$this->academico_model->getPlanificacion($ecm['ID_GRUPO'],$ecm['ID_CARRERA_MATERIA'],$ecm['ID_PERIODO_ACADEMICO']);
			$justificacion['PERIODO']=$planificacion['FECHA_TUTORIA1'];
			$fecha_fin='';
			$fechast=$planificacion['FECHA_TUTORIA2'].'+'.$planificacion['FECHA_TUTORIA3'].'+'.$planificacion['FECHA_TUTORIA4'].'+'.$planificacion['FECHAS_TUTORIA'];
			$vector_ft=explode('+',$fechast);
			foreach($vector_ft as $ft){
				if($ft!='' and $ft!=NULL and $ft!='0000-00-00'){
					$fecha_fin=$ft;
				}
			}
			if($fecha_fin!=''){
				$justificacion['PERIODO'].=' / '.$fecha_fin;
			}

			echo json_encode($justificacion);
		}else{
			echo 'Sesi�n Terminada';
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////
	public function matriculaNroDocumento($nroDocumento)
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado')){
			$matriculas = $this->academico_model->get_matricula_nroDocumento($nroDocumento);
			$matricula=array();
			foreach($matriculas as $m){
				if($m['ESTADO']==0){
					$matricula[]=$m;
				}
			}
			echo json_encode($matricula);
		}else{
			echo 'Sesi�n Terminada';
		}
	}

	//Codigo para corregir calificaciones rechazadas a VLC por error en cierre periodo calificacion
	public function correccionCierrePeriodo()
	{
		$query = $this->db->query("select * from tab_log_vlc where ESTADO='Error:Periodo Cerrado'");
		$total=0;
		$apis['Retos']='promedio_retos_proyectos';
		$apis['Examen']='promedio_examen';
		$apis['Taller']='promedio_taller';
		$apis['Asistencia']='promedio_asistencia';
		$realizado=0;
		foreach ($query->result_array() as $row)
	   	{
			$total++;
			$ch  = curl_init();
			//$url = 'https://binary.ec/ACADEMOS/deming/index.php/academico/academico/'.$apis[$row['TIPO']];
			$url = 'http://localhost/deming/index.php/academico/academico/'.$apis[$row['TIPO']];
			$elements['id_materia']=$row['ID_MATERIA'];
			$elements['calificacion']=$row['CALIFICACION'];
			$elements['cedula']=$row['CEDULA_ESTUDIANTE'];
			$elements['cedula_docente']=$row['CEDULA_DOCENTE'];
			curl_setopt($ch, CURLOPT_URL, $url);
			curl_setopt($ch, CURLOPT_POST,true);
			curl_setopt($ch, CURLOPT_POSTFIELDS, $elements);
			curl_setopt($ch, CURLOPT_HEADER, false);
			curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);
			$resultado = curl_exec($ch);
			$error = curl_error($ch);
			curl_close($ch);
			if(stripos($resultado, 'Registro Realizado')){
				$realizado++;
			}
			//echo $resultado.'<br>';
	   	}
		echo 'REENVIADOS:'.$total;
	}

	//Codigo para generar reportes para el Ceaaces
	public function reporteCeaaces($op=0,$p=null)
	{
		if($op==1){
			$nombre='EST01';
			$this->db->select("DISTINCT(cli.NRO_DOCUMENTO) as CEDULA, CONCAT_WS(' ',p.PRIMER_NOMBRE, p.SEGUNDO_NOMBRE) as NOMBRES, p.APELLIDO_PATERNO, p.APELLIDO_MATERNO, cli.TIPO_DOCUMENTO, p.FECHA_NACIMIENTO, p.GENERO, td.DISCAPACIDAD as TIPO_DISCAPACIDAD, p.CARNET_CONADIS, cont.CORREO_ELECTRONICO, tgc.GRUPO_CULTURAL AS ETNIA, pai_n.PAIS as PAIS_NAC",false);
			$this->db->from('acad_matricula m');
			$this->db->join('tab_personas p', 'p.id_PERSONA=m.id_PERSONA ','LEFT');
			$this->db->join('tab_clientes_naturales b', 'b.id_PERSONA= m.id_PERSONA','LEFT');
			$this->db->join('tab_clientes cli', 'cli.ID_CLIENTE=b.ID_CLIENTE','LEFT');
			$this->db->join('tab_contactos cont', 'cont.id_CLIENTE=cli.id_cliente and cont.ESTADO=1','LEFT');
			$this->db->join('tab_grupos_culturales tgc', 'tgc.ID_GRUPO_CULTURAL =p.ID_GRUPO_CULTURAL ','LEFT');
			$this->db->join('tab_paises pai_n', 'pai_n.ID_PAIS=p.ID_PAIS_NACIMIENTO','LEFT');
			$this->db->join('tab_tipos_discapacidad td', 'td.ID_TIPO_DISCAPACIDAD=p.TIPO_DISCAPACIDAD','LEFT');
			$this->db->where('cont.ID_TIPO_CONTACTO',2);
			$this->db->where('m.ESTADO','0');//filtrar matriculas normales
			$this->db->where_in('m.ID_PERIODO_ACADEMICO',array(6,7));
			$this->db->order_by("APELLIDO_PATERNO","asc");
			$query= $this->db->get();
			$ds= $query->result_array();
			$discapacidades=array('AUDITIVA','FISICA','INTELECTUAL','LENGUAJE','PSICOL�GICA','VISUAL','SUSTITUTO','NINGUNA');
			$etnias=array('INDIGENA','BLANCO','MESTIZO','MULATO','AFROECUATORIANO','MONTUBIO','OTRO');
			$filtro=array('�','�','�','�','�','�','�','�','�','�','�','�');
			$filtro1=array('a','A','e','E','i','I','o','O','u','U','n','N');
			$tabla='<table>';
			$tabla.='<tr>';
			$tabla.='<td>TIPO IDENTIFICACION</td>';
			$tabla.='<td>IDENTIFICACION</td>';
			$tabla.='<td>NOMBRES</td>';
			$tabla.='<td>PRIMER APELLIDO</td>';
			$tabla.='<td>SEGUNDO APELLIDO</td>';
			$tabla.='<td>FECHA NACIMIENTO</td>';
			$tabla.='<td>SEXO</td>';
			$tabla.='<td>DISCAPACIDAD</td>';
			$tabla.='<td>NUMERO CONADIS</td>';
			$tabla.='<td>EMAIL PERSONAL</td>';
			$tabla.='<td>ETNIA</td>';
			$tabla.='<td>PAIS ORIGEN</td>';
			$tabla.='<td>EMAIL INSTITUCIONAL</td>';
			$tabla.='</tr>';
			foreach($ds as $k=>$v){
				if($v['TIPO_DOCUMENTO']=='C'){
					$v['TIPO_DOCUMENTO']='CEDULA';
				}else{
					$v['TIPO_DOCUMENTO']='PASAPORTE';
				}
				if($v['FECHA_NACIMIENTO']!=NULL){
					$f=explode('-',$v['FECHA_NACIMIENTO']);
					$v['FECHA_NACIMIENTO']=$f[2].'/'.$f[1].'/'.$f[0];
				}
				if($v['GENERO']=='F'){
					$v['GENERO']='MUJER';
				}else{
					$v['GENERO']='HOMBRE';
				}
				if(!in_array($v['TIPO_DISCAPACIDAD'],$discapacidades)){
					$v['TIPO_DISCAPACIDAD']='NINGUNA';
					$v['CARNET_CONADIS']='';
				}
				if(!in_array($v['ETNIA'],$etnias)){
					$v['ETNIA']='OTRO';
				}
				if($v['PAIS_NAC']==NULL or $v['PAIS_NAC']==''){
					$v['PAIS_NAC']='ECUADOR';
				}
				if($v['APELLIDO_MATERNO']==NULL or $v['APELLIDO_MATERNO']==''){
					$v['APELLIDO_MATERNO']='NA';
				}
				$tabla.='<tr>';
				$tabla.='<td>'.$v['TIPO_DOCUMENTO'].'</td>';
				$tabla.='<td style="mso-number-format:\'@\';">'.$v['CEDULA'].'</td>';
				$tabla.='<td>'.str_replace($filtro,$filtro1,utf8_decode($v['NOMBRES'])).'</td>';
				$tabla.='<td>'.str_replace($filtro,$filtro1,utf8_decode($v['APELLIDO_PATERNO'])).'</td>';
				$tabla.='<td>'.str_replace($filtro,$filtro1,utf8_decode($v['APELLIDO_MATERNO'])).'</td>';
				$tabla.='<td style="mso-number-format:\'@\';">'.$v['FECHA_NACIMIENTO'].'</td>';
				$tabla.='<td>'.$v['GENERO'].'</td>';
				$tabla.='<td>'.$v['TIPO_DISCAPACIDAD'].'</td>';
				$tabla.='<td>'.$v['CARNET_CONADIS'].'</td>';
				$tabla.='<td>'.strtolower(str_replace($filtro,$filtro1,utf8_decode($v['CORREO_ELECTRONICO']))).'</td>';
				$tabla.='<td>'.$v['ETNIA'].'</td>';
				$tabla.='<td>'.str_replace($filtro,$filtro1,utf8_decode($v['PAIS_NAC'])).'</td>';
				//$tabla.='<td>info@deming.com</td>';
				$tabla.='<td></td>';
				$tabla.='</tr>';
			}
			$tabla.='<table>';
		}
		if($op==2){
			$nombre='CPE01';
			$this->db->select("DISTINCT(cli.NRO_DOCUMENTO) as CEDULA, carr.CODIGO, m.ID_PERSONA, m.ID_CARRERA",false);
			$this->db->from('acad_matricula m');
			$this->db->join('tab_personas p', 'p.id_PERSONA=m.id_PERSONA ','LEFT');
			$this->db->join('tab_clientes_naturales b', 'b.id_PERSONA= m.id_PERSONA','LEFT');
			$this->db->join('tab_clientes cli', 'cli.ID_CLIENTE=b.ID_CLIENTE','LEFT');
			$this->db->join('acad_carrera carr', 'carr.ID_CARRERA=m.id_CARRERA','LEFT');
			$this->db->where('m.ESTADO','0');//filtrar matriculas normales
			$this->db->where_in('m.ID_PERIODO_ACADEMICO',array(6,7));
			$query= $this->db->get();
			$ds= $query->result_array();
			$tabla='<table>';
			$tabla.='<tr>';
			$tabla.='<td>IDENTIFICACION</td>';
			$tabla.='<td>CODIGO CARRERA</td>';
			$tabla.='<td>FECHA INICIO PRIMER NIVEL</td>';
			$tabla.='<td>FECHA CONVALIDACION</td>';
			$tabla.='<td>FECHA GRADUACION</td>';
			$tabla.='<td>NUMERO REGISTRO SENESCYT</td>';
			$tabla.='<td></td>';
			$tabla.='</tr>';
			foreach($ds as $k=>$v){
				$fecha_inicio='';
				$fecha_convalida='';
				$fecha_grado='';
				$this->db->select("p.FECHA_INICIO");
				$this->db->from('acad_matricula m');
				$this->db->join('acad_periodo_academico p', 'p.ID_PERIODO_ACADEMICO=m.ID_PERIODO_ACADEMICO');
				$this->db->where('m.ESTADO','0');//filtrar matriculas normales
				$this->db->where('m.ID_PERIODO_ACADEMICO<',11);
				$this->db->where('m.ID_NIVEL',1);
				$this->db->where('m.ID_PERSONA',$v['ID_PERSONA']);
				$this->db->where('m.ID_CARRERA',$v['ID_CARRERA']);
				$query1= $this->db->get();
				$ds1= $query1->row_array();
				if($ds1==NULL){
					//buscar si se registro primer nivel pot historial
					$this->db->select("p.FECHA_INICIO,ecm.NIVEL_MATERIA");
					$this->db->from('acad_estudiante_carrera_materia ecm');
					$this->db->join('acad_periodo_academico p', 'p.ID_PERIODO_ACADEMICO=ecm.ID_PERIODO_ACADEMICO');
					$this->db->where('ecm.FUE_HISTORIAL',1);
					$this->db->where('ecm.ID_PERIODO_ACADEMICO<',11);
					//$this->db->where('ecm.NIVEL_MATERIA',1);
					$this->db->where('ecm.ID_PERSONA',$v['ID_PERSONA']);
					$this->db->where('ecm.ID_CARRERA',$v['ID_CARRERA']);
					$query3= $this->db->get();
					$ds3= $query3->result_array();
					//$ds3= $query3->row_array();
					//if($ds3==NULL){
					if(count($ds3)<=0){
						$this->db->select("p.FECHA_INICIO");
						$this->db->from('acad_matricula m');
						$this->db->join('acad_periodo_academico p', 'p.ID_PERIODO_ACADEMICO=m.ID_PERIODO_ACADEMICO');
						$this->db->where('m.ESTADO','0');//filtrar matriculas anuladas
						$this->db->where('m.ID_PERIODO_ACADEMICO<',11);
						$this->db->where('m.ID_PERSONA',$v['ID_PERSONA']);
						$this->db->where('m.ID_CARRERA',$v['ID_CARRERA']);
						$this->db->order_by('m.ID_MATRICULA','ASC');
						$query2= $this->db->get();
						$ds2= $query2->row_array();
						$f=explode('-',$ds2['FECHA_INICIO']);
						$fecha_convalida=$f[2].'/'.$f[1].'/'.$f[0];
					}else{
						foreach($ds3 as $r3){
							if($r3['NIVEL_MATERIA']==1){
								$f=explode('-',$r3['FECHA_INICIO']);
								$fecha_inicio=$f[2].'/'.$f[1].'/'.$f[0];
								break;
							}
						}
						//$f=explode('-',$ds3['FECHA_INICIO']);
						//$fecha_inicio=$f[2].'/'.$f[1].'/'.$f[0];
					}
				}else{
					$f=explode('-',$ds1['FECHA_INICIO']);
					$fecha_inicio=$f[2].'/'.$f[1].'/'.$f[0];
				}
				//$this->db->select("p.FECHA_INICIO");
				$this->db->select("g.FECHA_CREACION,g.FECHA_ACTUALIZACION");
				$this->db->from('tit_graduacion g');
				//$this->db->join('acad_periodo_academico p', 'p.ID_PERIODO_ACADEMICO=g.ID_PERIODO_GRADUACION');
				$this->db->where('g.ID_PERSONA',$v['ID_PERSONA']);
				$this->db->where('g.ID_CARRERA',$v['ID_CARRERA']);
				$this->db->where('g.CALIFICACION_EXAMEN>=',7);
				$query4= $this->db->get();
				$ds4= $query4->row_array();
				if($ds4!=NULL){
					//$f=explode('-',$ds4['FECHA_INICIO']);
					$f_temp=explode(' ',$ds4['FECHA_ACTUALIZACION']);
					if($f_temp[0]=='0000-00-00'){
						$f_temp=explode(' ',$ds4['FECHA_CREACION']);
					}
					$f=explode('-',$f_temp[0]);
					$fecha_grado=$f[2].'/'.$f[1].'/'.$f[0];
				}
				$quinto='';
				$this->db->select("ID_MATRICULA");
				$this->db->from('acad_matricula');
				$this->db->where('ESTADO','0');//filtrar matriculas normales
				$this->db->where('ID_NIVEL',5);
				$this->db->where('ID_PERSONA',$v['ID_PERSONA']);
				$this->db->where('ID_CARRERA',$v['ID_CARRERA']);
				$this->db->where_in('ID_PERIODO_ACADEMICO',array(6,7));
				$query5= $this->db->get();
				$ds5= $query5->row_array();
				if($ds5!=NULL){
					$quinto='5';
				}

				$tabla.='<tr>';
				$tabla.='<td style="mso-number-format:\'@\';">'.$v['CEDULA'].'</td>';
				$tabla.='<td style="mso-number-format:\'@\';">'.$v['CODIGO'].'</td>';
				$tabla.='<td style="mso-number-format:\'@\';">'.$fecha_inicio.'</td>';
				$tabla.='<td style="mso-number-format:\'@\';">'.$fecha_convalida.'</td>';
				$tabla.='<td style="mso-number-format:\'@\';">'.$fecha_grado.'</td>';
				$tabla.='<td></td>';
				$tabla.='<td>'.$quinto.'</td>';
				$tabla.='</tr>';
			}
			$tabla.='<table>';
		}
		if($op==3){
			$id_periodo=$p;
			$nombre='MAT01';
			$this->db->select("DISTINCT(cli.NRO_DOCUMENTO) as CEDULA, carr.CODIGO, m.ID_PERSONA, m.ID_CARRERA, m.NUMERO, m.ID_MODALIDAD",false);
			$this->db->from('acad_matricula m');
			$this->db->join('tab_personas p', 'p.id_PERSONA=m.id_PERSONA ','LEFT');
			$this->db->join('tab_clientes_naturales b', 'b.id_PERSONA= m.id_PERSONA','LEFT');
			$this->db->join('tab_clientes cli', 'cli.ID_CLIENTE=b.ID_CLIENTE','LEFT');
			$this->db->join('acad_carrera carr', 'carr.ID_CARRERA=m.id_CARRERA','LEFT');
			$this->db->where('m.ESTADO','0');//filtrar matriculas anuladas
			$this->db->where('m.ID_PERIODO_ACADEMICO',$p);
			$query= $this->db->get();
			$ds= $query->result_array();
			$tabla='<table>';
			$tabla.='<tr>';
			$tabla.='<td>IDENTIFICACION</td>';
			$tabla.='<td>CODIGO CARRERA</td>';
			$tabla.='<td>CODIGO MATRICULA</td>';
			$tabla.='<td>NUMERO CREDITOS APROBADOS</td>';
			$tabla.='<td>SECCION</td>';
			$tabla.='</tr>';
			foreach($ds as $k=>$v){
				//sumatoria de creditos hasta el periodo de consulta
			  	$query1 = $this->db->query("select sum(CREDITOS_MATERIA) as credito_aprobado from acad_estudiante_carrera_materia where ID_PERSONA=".$v['ID_PERSONA']." and ID_CARRERA=".$v['ID_CARRERA']." and ID_ESTUDIANTE_CARRERA_MATERIA in (select ID_ESTUDIANTE_CARRERA_MATERIA from acad_calificacion where ID_TIPO_CALIFICACION=6 and ESTADO_CALIFICACION=1) and ID_PERIODO_ACADEMICO=".$p);
			  	$ds1 = $query1->row_array();
			  	if($ds1==NULL){
				  	$credito=0;
			  	}else{
				  	$credito=$ds1['credito_aprobado'];
			  	}
			  	$query2 = $this->db->query("select sum(CREDITOS_MATERIA) as credito_aprobado from acad_estudiante_carrera_materia where ID_PERSONA=".$v['ID_PERSONA']." and ID_CARRERA=".$v['ID_CARRERA']." and (FUE_CONVALIDADA=1 or FUE_HOMOLOGADA=1 or FUE_HISTORIAL=1) and ID_PERIODO_ACADEMICO=".$p);
			  	$ds2 = $query2->row_array();
			  	if($ds2==NULL){
			  	}else{
				  	$credito+=$ds2['credito_aprobado'];
			  	}
				if($v['ID_MODALIDAD']==3){
					$seccion='MATUTINA_VESPERTINA';
				}else{
					$seccion='VESPERTINA_NOCTURNA';
				}
				$tabla.='<tr>';
				$tabla.='<td style="mso-number-format:\'@\';">'.$v['CEDULA'].'</td>';
				$tabla.='<td style="mso-number-format:\'@\';">'.$v['CODIGO'].'</td>';
				$tabla.='<td style="mso-number-format:\'@\';">'.$v['NUMERO'].'</td>';
				$tabla.='<td>'.$credito.'</td>';
				$tabla.='<td>'.$seccion.'</td>';
				$tabla.='</tr>';
			}
			$tabla.='<table>';
		}
		header("Content-Type: application/vnd.ms-excel");
		header("Content-Disposition: filename=".$nombre.".xls");
		header("Pragma: no-cache");
		header("Expires: 0");
		//echo utf8_encode($tabla);
		echo utf8_decode($tabla);
	}

	//Codigo para generar reportes para el sniese
	public function reporteSniese($op=0,$p=null)
	{
		if($op==1){
			$nombre='Docentes';
			//depurar planificacion borrar si no tiene estudiantes
			$this->db->select('*');
			$this->db->from('acad_planificacion');
			$this->db->where('PLATAFORMA', 0);
			$this->db->where('ID_PERSONA>', 0);
			$this->db->where_in('ID_PERIODO_ACADEMICO', array(6,7));
			$query = $this->db->get();
			$ds = $query->result_array();
			$b=0;
			foreach($ds as $v){
				$materia['ID_PERIODO_ACADEMICO']=$v['ID_PERIODO_ACADEMICO'];
				$materia['ID_PERSONA']=$v['ID_PERSONA'];
				$materia['ID_CARRERA_MATERIA']=$v['ID_CARRERA_MATERIA'];
				$materia['ID_GRUPO']=$v['ID_GRUPO'];
				if($this->academico_model->verificar_si_tiene_estudiantes($materia)==0){
					$this->db->where('ID_PLANIFICACION', $v['ID_PLANIFICACION']);
					$this->db->delete('acad_planificacion');
					$b++;
				}
			}
			//echo 'BORRADOS: '.$b;


			$this->db->distinct();
			$this->db->select('p.PLATAFORMA,p.ID_PERSONA,p.FECHA_TUTORIA1, p.FECHA_TUTORIA2, p.FECHA_TUTORIA3, p.FECHA_TUTORIA4, p.FECHAS_TUTORIA, m.NOMBRE as MATERIA, CONCAT_WS(" ", per.PRIMER_NOMBRE, per.SEGUNDO_NOMBRE) as NOMBRES, CONCAT_WS(" ", per.APELLIDO_PATERNO, per.APELLIDO_MATERNO) as APELLIDOS, pa.FECHA_INICIO, pa.FECHA_FIN, c.NRO_DOCUMENTO',false);
			$this->db->from('acad_planificacion p');
			//$this->db->join('acad_grupo g','g.ID_GRUPO=p.ID_GRUPO');
			$this->db->join('acad_carrera_materia cm','cm.ID_CARRERA_MATERIA=p.ID_CARRERA_MATERIA');
			//$this->db->join('acad_carrera car','car.ID_CARRERA=cm.ID_CARRERA');
			//$this->db->join('acad_sede s','s.ID_SEDE=g.ID_SEDE');
			//$this->db->join('acad_nivel n','n.ID_NIVEL=cm.NIVEL_MATERIA');
			$this->db->join('acad_materia m','m.ID_MATERIA=cm.ID_MATERIA');
			$this->db->join('tab_personas per','per.ID_PERSONA=p.ID_PERSONA');
			$this->db->join('tab_clientes_naturales cn','cn.ID_PERSONA=p.ID_PERSONA');
			$this->db->join('tab_clientes c','c.ID_CLIENTE=cn.ID_CLIENTE');
			$this->db->join('acad_periodo_academico pa','pa.ID_PERIODO_ACADEMICO=p.ID_PERIODO_ACADEMICO');
			//$this->db->order_by('p.FECHA_TUTORIA1');
			$this->db->where('p.PLATAFORMA', 0);
			$this->db->where('p.ID_PERSONA>', 0);
			$this->db->where_in('p.ID_PERIODO_ACADEMICO', array(6,7));
			$this->db->order_by('APELLIDOS');
			$this->db->order_by('NOMBRES');
			$this->db->order_by('MATERIA');
			$query = $this->db->get();
			$ds = $query->result_array();

			$filtro=array('�','�','�','�','�','�','�','�','�','�','�','�');
			$filtro1=array('a','A','e','E','i','I','o','O','u','U','n','N');
			//indice 0 para domingo hasta 6 para s�bado
			$horas_dia=array(4,3,3,3,3,3,8);
			$tabla='<table>';
			$tabla.='<tr>';
			$tabla.='<td>#</td>';
			$tabla.='<td>IDENTIFICACION</td>';
			$tabla.='<td>APELLIDOS</td>';
			$tabla.='<td>NOMBRES</td>';
			$tabla.='<td>TIEMPO DEDICADO</td>';
			$tabla.='<td>MATERIA</td>';
			$tabla.='<td>FECHA INICIO</td>';
			$tabla.='<td>FECHA FIN</td>';
			$tabla.='<td>SEMANAS</td>';
			$tabla.='<td>DURACION (min)</td>';
			$tabla.='<td>TOTAL HORAS</td>';
			//$tabla.='<td></td>';
			$tabla.='</tr>';
			$docentes=array();
			foreach($ds as $k=>$v){
				//verificar si tiene estudiantes
				//$materia['ID_PERIODO_ACADEMICO']=
				//if($this->academico_model->verificar_si_tiene_estudiantes($materia)==1){
					$horas=0;
					//calcular horas de clase
					$fechast=$v['FECHA_TUTORIA1'].'+'.$v['FECHA_TUTORIA2'].'+'.$v['FECHA_TUTORIA3'].'+'.$v['FECHA_TUTORIA4'].'+'.$v['FECHAS_TUTORIA'];
					$vector_ft=explode('+',$fechast);
					foreach($vector_ft as $ft){
						if($ft!='' and $ft!='0000-00-00'){
							$horas+=$horas_dia[date('w',strtotime($ft))];
						}
					}
					if(isset($docentes[$v['NRO_DOCUMENTO'].$v['APELLIDOS'].$v['NOMBRES'].$v['MATERIA'].$v['FECHA_INICIO'].$v['FECHA_FIN']])){
						$docentes[$v['NRO_DOCUMENTO'].$v['APELLIDOS'].$v['NOMBRES'].$v['MATERIA'].$v['FECHA_INICIO'].$v['FECHA_FIN']]['HORAS']+=$horas;
					}else{
						$v['HORAS']=$horas;
						$docentes[$v['NRO_DOCUMENTO'].$v['APELLIDOS'].$v['NOMBRES'].$v['MATERIA'].$v['FECHA_INICIO'].$v['FECHA_FIN']]=$v;
					}
					/*$v['HORAS']=$horas;
					$docentes[]=$v;*/
				//}
			}
			$i=1;
			foreach($docentes as $k=>$v){
				$f=explode('-',$v['FECHA_INICIO']);
				$fi=$f[2].'/'.$f[1].'/'.$f[0];
				$f=explode('-',$v['FECHA_FIN']);
				$ff=$f[2].'/'.$f[1].'/'.$f[0];
				$tabla.='<tr>';
				$tabla.='<td>'.$i.'</td>';
				$tabla.='<td style="mso-number-format:\'@\';">'.$v['NRO_DOCUMENTO'].'</td>';
				$tabla.='<td>'.$v['APELLIDOS'].'</td>';
				$tabla.='<td>'.$v['NOMBRES'].'</td>';
				$tabla.='<td align="center"></td>';
				$tabla.='<td>'.$v['MATERIA'].'</td>';
				$tabla.='<td style="mso-number-format:\'@\';">'.$fi.'</td>';
				$tabla.='<td style="mso-number-format:\'@\';">'.$ff.'</td>';
				$tabla.='<td align="center">25</td>';
				$tabla.='<td align="center">60</td>';
				$tabla.='<td align="center">'.$v['HORAS'].'</td>';
				//$tabla.='<td>'.print_r($v,true).'</td>';
				$tabla.='</tr>';
				$i++;
			}
			$tabla.='<table>';
		}
		if($op==2){
			$nombre='Docentes';
			//depurar planificacion borrar si no tiene estudiantes
			$this->db->select('*');
			$this->db->from('acad_planificacion');
			$this->db->where('PLATAFORMA', 0);
			$this->db->where('ID_PERSONA>', 0);
			$this->db->where_in('ID_PERIODO_ACADEMICO', array(6,7));
			$query = $this->db->get();
			$ds = $query->result_array();
			$b=0;
			foreach($ds as $v){
				$materia['ID_PERIODO_ACADEMICO']=$v['ID_PERIODO_ACADEMICO'];
				$materia['ID_PERSONA']=$v['ID_PERSONA'];
				$materia['ID_CARRERA_MATERIA']=$v['ID_CARRERA_MATERIA'];
				$materia['ID_GRUPO']=$v['ID_GRUPO'];
				if($this->academico_model->verificar_si_tiene_estudiantes($materia)==0){
					$this->db->where('ID_PLANIFICACION', $v['ID_PLANIFICACION']);
					$this->db->delete('acad_planificacion');
					$b++;
				}
			}
			//echo 'BORRADOS: '.$b;


			$this->db->distinct();
			$this->db->select('p.PLATAFORMA,p.ID_PERSONA,p.FECHA_TUTORIA1, p.FECHA_TUTORIA2, p.FECHA_TUTORIA3, p.FECHA_TUTORIA4, p.FECHAS_TUTORIA, m.NOMBRE as MATERIA, CONCAT_WS(" ", per.PRIMER_NOMBRE, per.SEGUNDO_NOMBRE) as NOMBRES, CONCAT_WS(" ", per.APELLIDO_PATERNO, per.APELLIDO_MATERNO) as APELLIDOS, pa.FECHA_INICIO, pa.FECHA_FIN, c.NRO_DOCUMENTO, g.NOMBRE as GRUPO, car.NOMBRE as CARRERA',false);
			$this->db->from('acad_planificacion p');
			$this->db->join('acad_grupo g','g.ID_GRUPO=p.ID_GRUPO');
			$this->db->join('acad_carrera_materia cm','cm.ID_CARRERA_MATERIA=p.ID_CARRERA_MATERIA');
			$this->db->join('acad_carrera car','car.ID_CARRERA=cm.ID_CARRERA');
			//$this->db->join('acad_sede s','s.ID_SEDE=g.ID_SEDE');
			//$this->db->join('acad_nivel n','n.ID_NIVEL=cm.NIVEL_MATERIA');
			$this->db->join('acad_materia m','m.ID_MATERIA=cm.ID_MATERIA');
			$this->db->join('tab_personas per','per.ID_PERSONA=p.ID_PERSONA');
			$this->db->join('tab_clientes_naturales cn','cn.ID_PERSONA=p.ID_PERSONA');
			$this->db->join('tab_clientes c','c.ID_CLIENTE=cn.ID_CLIENTE');
			$this->db->join('acad_periodo_academico pa','pa.ID_PERIODO_ACADEMICO=p.ID_PERIODO_ACADEMICO');
			//$this->db->order_by('p.FECHA_TUTORIA1');
			$this->db->where('p.PLATAFORMA', 0);
			$this->db->where('p.ID_PERSONA>', 0);
			$this->db->where_in('p.ID_PERIODO_ACADEMICO', array(6,7));
			$this->db->order_by('APELLIDOS');
			$this->db->order_by('NOMBRES');
			$this->db->order_by('MATERIA');
			$this->db->order_by('GRUPO');
			$query = $this->db->get();
			$ds = $query->result_array();

			$filtro=array('�','�','�','�','�','�','�','�','�','�','�','�');
			$filtro1=array('a','A','e','E','i','I','o','O','u','U','n','N');
			//indice 0 para domingo hasta 6 para s�bado
			$horas_dia=array(4,3,3,3,3,3,8);
			$tabla='<table>';
			$tabla.='<tr>';
			$tabla.='<td>#</td>';
			$tabla.='<td>IDENTIFICACION</td>';
			$tabla.='<td>APELLIDOS</td>';
			$tabla.='<td>NOMBRES</td>';
			$tabla.='<td>TIEMPO DEDICADO</td>';
			$tabla.='<td>MATERIA</td>';
			$tabla.='<td>GRUPO</td>';
			$tabla.='<td>CARRERA</td>';
			$tabla.='<td>FECHA INICIO</td>';
			$tabla.='<td>FECHA FIN</td>';
			$tabla.='<td>SEMANAS</td>';
			$tabla.='<td>DURACION (min)</td>';
			$tabla.='<td>TOTAL HORAS</td>';
			//$tabla.='<td></td>';
			$tabla.='</tr>';
			$docentes=array();
			foreach($ds as $k=>$v){
				//verificar si tiene estudiantes
				//$materia['ID_PERIODO_ACADEMICO']=
				//if($this->academico_model->verificar_si_tiene_estudiantes($materia)==1){
					$horas=0;
					//calcular horas de clase
					$fechast=$v['FECHA_TUTORIA1'].'+'.$v['FECHA_TUTORIA2'].'+'.$v['FECHA_TUTORIA3'].'+'.$v['FECHA_TUTORIA4'].'+'.$v['FECHAS_TUTORIA'];
					$vector_ft=explode('+',$fechast);
					foreach($vector_ft as $ft){
						if($ft!='' and $ft!='0000-00-00'){
							$horas+=$horas_dia[date('w',strtotime($ft))];
						}
					}
					/*if(isset($docentes[$v['NRO_DOCUMENTO'].$v['APELLIDOS'].$v['NOMBRES'].$v['MATERIA'].$v['FECHA_INICIO'].$v['FECHA_FIN']])){
						$docentes[$v['NRO_DOCUMENTO'].$v['APELLIDOS'].$v['NOMBRES'].$v['MATERIA'].$v['FECHA_INICIO'].$v['FECHA_FIN']]['HORAS']+=$horas;
					}else{
						$v['HORAS']=$horas;
						$docentes[$v['NRO_DOCUMENTO'].$v['APELLIDOS'].$v['NOMBRES'].$v['MATERIA'].$v['FECHA_INICIO'].$v['FECHA_FIN']]=$v;
					}*/
					$v['HORAS']=$horas;
					$docentes[]=$v;
				//}
			}
			$i=1;
			foreach($docentes as $k=>$v){
				$f=explode('-',$v['FECHA_INICIO']);
				$fi=$f[2].'/'.$f[1].'/'.$f[0];
				$f=explode('-',$v['FECHA_FIN']);
				$ff=$f[2].'/'.$f[1].'/'.$f[0];
				$tabla.='<tr>';
				$tabla.='<td>'.$i.'</td>';
				$tabla.='<td style="mso-number-format:\'@\';">'.$v['NRO_DOCUMENTO'].'</td>';
				$tabla.='<td>'.$v['APELLIDOS'].'</td>';
				$tabla.='<td>'.$v['NOMBRES'].'</td>';
				$tabla.='<td align="center"></td>';
				$tabla.='<td>'.$v['MATERIA'].'</td>';
				$tabla.='<td>'.$v['GRUPO'].'</td>';
				$tabla.='<td>'.$v['CARRERA'].'</td>';
				$tabla.='<td style="mso-number-format:\'@\';">'.$fi.'</td>';
				$tabla.='<td style="mso-number-format:\'@\';">'.$ff.'</td>';
				$tabla.='<td align="center">25</td>';
				$tabla.='<td align="center">60</td>';
				$tabla.='<td align="center">'.$v['HORAS'].'</td>';
				//$tabla.='<td>'.print_r($v,true).'</td>';
				$tabla.='</tr>';
				$i++;
			}
			$tabla.='<table>';
		}
		header("Content-Type: application/vnd.ms-excel");
		header("Content-Disposition: filename=".$nombre.".xls");
		header("Pragma: no-cache");
		header("Expires: 0");
		//echo utf8_encode($tabla);
		echo utf8_decode($tabla);
		//echo $tabla;
	}

	//Codigo para generar reportes especiales solicitados
	public function reporteEspecial($op=0,$p=null)
	{
		if($op==1){
			$nombre='DocentesMateria';
			$periodos=$this->academico_model->getPeriodos($p);
			$periodo=$periodos[0];

			$this->db->select('dcm.*, CONCAT_WS(" ", p.PRIMER_NOMBRE, p.SEGUNDO_NOMBRE, p.APELLIDO_PATERNO, p.APELLIDO_MATERNO) as DOCENTE, c.NOMBRE as CARRERA, m.NOMBRE as MATERIA, m.ID_MATERIA, n.NIVEL, n.ID_NIVEL, cli.NRO_DOCUMENTO',false);
			$this->db->from('acad_docente_carrera_materia dcm');
			$this->db->join('acad_carrera_materia cm', 'cm.ID_CARRERA_MATERIA = dcm.ID_CARRERA_MATERIA');
			$this->db->join('tab_personas p', 'p.ID_PERSONA = dcm.ID_PERSONA');
			$this->db->join('tab_clientes_naturales cn','cn.ID_PERSONA=p.ID_PERSONA');
			$this->db->join('tab_clientes cli','cli.ID_CLIENTE=cn.ID_CLIENTE');
			$this->db->join('acad_carrera c', 'c.ID_CARRERA = cm.ID_CARRERA');
			$this->db->join('acad_materia m', 'm.ID_MATERIA = cm.ID_MATERIA');
			$this->db->join('acad_nivel n', 'n.ID_NIVEL = cm.NIVEL_MATERIA');
			$this->db->where('dcm.ID_PERIODO_ACADEMICO', $p);
			$this->db->order_by("DOCENTE", "asc");
			$this->db->order_by("CARRERA", "asc");
			$this->db->order_by("n.ID_NIVEL", "asc");
			$this->db->order_by("MATERIA", "asc");
			$query = $this->db->get();
			$ds = $query->result_array();

			$filtro=array('�','�','�','�','�','�','�','�','�','�','�','�');
			$filtro1=array('a','A','e','E','i','I','o','O','u','U','n','N');
			$tabla='<table>';
			$tabla.='<tr>';
			$tabla.='<td><strong>PERIODO '.$periodo['FECHA_INICIO'].' / '.$periodo['FECHA_FIN'].'</strong></td>';
			$tabla.='</tr>';
			$tabla.='</table>';
			$tabla.='<table>';
			$tabla.='<tr>';
			$tabla.='<td>#</td>';
			$tabla.='<td>IDENTIFICACION</td>';
			$tabla.='<td>DOCENTE</td>';
			$tabla.='<td>CARRERA</td>';
			$tabla.='<td>NIVEL</td>';
			$tabla.='<td>MATERIA</td>';
			$tabla.='</tr>';
			$docentes=array();
			$i=1;
			foreach($ds as $k=>$v){
				//verificar si tiene estudiantes
				$materia['ID_PERIODO_ACADEMICO']=$v['ID_PERIODO_ACADEMICO'];
				$materia['ID_PERSONA']=$v['ID_PERSONA'];
				$materia['ID_CARRERA_MATERIA']=$v['ID_CARRERA_MATERIA'];
				$materia['NIVEL_MATERIA']=$v['NIVEL_MATERIA'];
				if($this->academico_model->verificar_si_tiene_estudiantes($materia)==1){
					$tabla.='<tr>';
					$tabla.='<td>'.$i.'</td>';
					$tabla.='<td style="mso-number-format:\'@\';">'.$v['NRO_DOCUMENTO'].'</td>';
					$tabla.='<td>'.$v['DOCENTE'].'</td>';
					$tabla.='<td>'.$v['CARRERA'].'</td>';
					$tabla.='<td align="center">'.$v['NIVEL'].'</td>';
					$tabla.='<td>'.$v['MATERIA'].'</td>';
					$tabla.='</tr>';
					$i++;
				}
			}

			$tabla.='<table>';
			header("Content-Type: application/vnd.ms-excel");
			header("Content-Disposition: filename=".$nombre.".xls");
			header("Pragma: no-cache");
			header("Expires: 0");
			//echo utf8_encode($tabla);
			echo utf8_decode($tabla);
			//echo $tabla;
		}
		if($op==2){//datos generales de estudiantes graduados
			$this->db->select("*");
			$this->db->from('acad_matricula m');
			$this->db->join('tit_graduacion g','g.ID_PERSONA=m.ID_PERSONA and g.ID_CARRERA=m.ID_CARRERA','Inner');
			$this->db->where('m.ESTADO','0');
			$this->db->where('g.CALIFICACION_EXAMEN>',0);
			$this->db->group_by(array('m.ID_PERSONA','m.ID_CARRERA'));
			$query= $this->db->get();
			$ds= $query->result_array();
			$graduados['estudiantes']=array();
			foreach($ds as $k=>$v){
				$data['ID_MATRICULA']=$v['ID_MATRICULA'];
				$data['ID_PERIODO_ACADEMICO']=$v['ID_PERIODO_ACADEMICO'];
				$datos=$this->academico_model->buscarEstudiantesMatriculadosAll($data);
				if(count($datos['estudiantes'])>0){
					$graduados['estudiantes'][]=$datos['estudiantes'][0];
				}
			}
			$graduados['tipo_reporte']=1;
			$this->load->view('reporte_matriculados_excel',$graduados);
		}
		if($op==3){
			$nombre='CarrerasMateriasDeming';
			$this->db->select('c.CODIGO as CODIGO_CARRERA, c.NOMBRE as CARRERA, cm.CODIGO_MATERIA, m.NOMBRE as MATERIA, cm.CREDITOS_MATERIA, cm.NIVEL_MATERIA, cm.PRECIO',false);
			$this->db->from('acad_carrera_materia cm');
			$this->db->join('acad_carrera c', 'c.ID_CARRERA=cm.ID_CARRERA');
			$this->db->join('acad_materia m', 'm.ID_MATERIA=cm.ID_MATERIA');
			$query = $this->db->get();
			$ds = $query->result_array();
			$tabla='<table>';
			$tabla.='<tr>';
			$tabla.='<td>CODIGO_CARRERA</td>';
			$tabla.='<td>CARRERA</td>';
			$tabla.='<td>CODIGO_MATERIA</td>';
			$tabla.='<td>MATERIA</td>';
			$tabla.='<td>CREDITOS_MATERIA</td>';
			$tabla.='<td>NIVEL_MATERIA</td>';
			$tabla.='<td>PRECIO</td>';
			$tabla.='</tr>';
			$i=1;
			foreach($ds as $k=>$v){
				$tabla.='<tr>';
				$tabla.='<td style="mso-number-format:\'@\';">'.$v['CODIGO_CARRERA'].'</td>';
				$tabla.='<td>'.$v['CARRERA'].'</td>';
				$tabla.='<td style="mso-number-format:\'@\';">'.$v['CODIGO_MATERIA'].'</td>';
				$tabla.='<td>'.$v['MATERIA'].'</td>';
				$tabla.='<td>'.$v['CREDITOS_MATERIA'].'</td>';
				$tabla.='<td>'.$v['NIVEL_MATERIA'].'</td>';
				$tabla.='<td>'.$v['PRECIO'].'</td>';
				$tabla.='</tr>';
			}

			$tabla.='<table>';
			header("Content-Type: application/vnd.ms-excel");
			header("Content-Disposition: filename=".$nombre.".xls");
			header("Pragma: no-cache");
			header("Expires: 0");
			//echo utf8_encode($tabla);
			echo utf8_decode($tabla);
			//echo $tabla;
		}
		if($op==4){
			$nombre='DocentesMateriaPlanificacion';
			$periodos=$this->academico_model->getPeriodos($p);
			$periodo=$periodos[0];
			$this->db->select('pla.*, CONCAT_WS(" ", p.PRIMER_NOMBRE, p.SEGUNDO_NOMBRE, p.APELLIDO_PATERNO, p.APELLIDO_MATERNO) as DOCENTE, c.NOMBRE as CARRERA, m.NOMBRE as MATERIA, m.ID_MATERIA, n.NIVEL, n.ID_NIVEL, cli.NRO_DOCUMENTO, g.NOMBRE as GRUPO',false);
			$this->db->from('acad_planificacion pla');
			$this->db->join('acad_carrera_materia cm', 'cm.ID_CARRERA_MATERIA = pla.ID_CARRERA_MATERIA');
			$this->db->join('tab_personas p', 'p.ID_PERSONA = pla.ID_PERSONA');
			$this->db->join('tab_clientes_naturales cn','cn.ID_PERSONA=p.ID_PERSONA');
			$this->db->join('tab_clientes cli','cli.ID_CLIENTE=cn.ID_CLIENTE');
			$this->db->join('acad_carrera c', 'c.ID_CARRERA = cm.ID_CARRERA');
			$this->db->join('acad_materia m', 'm.ID_MATERIA = cm.ID_MATERIA');
			$this->db->join('acad_nivel n', 'n.ID_NIVEL = cm.NIVEL_MATERIA');
			$this->db->join('acad_grupo g', 'g.ID_GRUPO = pla.ID_GRUPO');
			$this->db->where('pla.ID_PERIODO_ACADEMICO', $p);
			$this->db->order_by("DOCENTE", "asc");
			$this->db->order_by("CARRERA", "asc");
			$this->db->order_by("n.ID_NIVEL", "asc");
			$this->db->order_by("MATERIA", "asc");
			$query = $this->db->get();
			$ds = $query->result_array();

			$filtro=array('�','�','�','�','�','�','�','�','�','�','�','�');
			$filtro1=array('a','A','e','E','i','I','o','O','u','U','n','N');
			$tabla='<table>';
			$tabla.='<tr>';
			$tabla.='<td colspan="7"><strong>PERIODO '.$periodo['FECHA_INICIO'].' / '.$periodo['FECHA_FIN'].'</strong></td>';
			$tabla.='</tr>';
			$tabla.='</table>';
			$tabla.='<table>';
			$tabla.='<tr>';
			$tabla.='<td><strong>#</strong></td>';
			$tabla.='<td><strong>IDENTIFICACION</strong></td>';
			$tabla.='<td><strong>DOCENTE</strong></td>';
			$tabla.='<td><strong>CARRERA</strong></td>';
			$tabla.='<td><strong>NIVEL</strong></td>';
			$tabla.='<td><strong>MATERIA</strong></td>';
			$tabla.='<td><strong>GRUPO</strong></td>';
			$tabla.='</tr>';
			$docentes=array();
			$i=1;
			foreach($ds as $k=>$v){
				//verificar si tiene estudiantes
				$materia['ID_PERIODO_ACADEMICO']=$v['ID_PERIODO_ACADEMICO'];
				$materia['ID_PERSONA']=$v['ID_PERSONA'];
				$materia['ID_CARRERA_MATERIA']=$v['ID_CARRERA_MATERIA'];
				$materia['NIVEL_MATERIA']=$v['ID_NIVEL'];
				if($this->academico_model->verificar_si_tiene_estudiantes($materia)==1){
					$tabla.='<tr>';
					$tabla.='<td>'.$i.'</td>';
					$tabla.='<td style="mso-number-format:\'@\';">'.$v['NRO_DOCUMENTO'].'</td>';
					$tabla.='<td>'.$v['DOCENTE'].'</td>';
					$tabla.='<td>'.$v['CARRERA'].'</td>';
					$tabla.='<td align="center">'.$v['NIVEL'].'</td>';
					$tabla.='<td>'.$v['MATERIA'].'</td>';
					$tabla.='<td align="right">'.$v['GRUPO'].'</td>';
					$tabla.='</tr>';
					$i++;
				}
			}
			$tabla.='<table>';
			header("Content-Type: application/vnd.ms-excel");
			header("Content-Disposition: filename=".$nombre.".xls");
			header("Pragma: no-cache");
			header("Expires: 0");
			//echo utf8_encode($tabla);
			echo utf8_decode($tabla);
			//echo $tabla;
		}
		if($op==5){//docentes sin informe
			$nombre='DocentesSinInforme';
			$periodos=$this->academico_model->getPeriodos($p);
			$periodo=$periodos[0];
			$this->db->select('pla.*, CONCAT_WS(" ", p.PRIMER_NOMBRE, p.SEGUNDO_NOMBRE, p.APELLIDO_PATERNO, p.APELLIDO_MATERNO) as DOCENTE, c.NOMBRE as CARRERA, m.NOMBRE as MATERIA, m.ID_MATERIA, n.NIVEL, n.ID_NIVEL, cli.NRO_DOCUMENTO, g.NOMBRE as GRUPO',false);
			$this->db->from('acad_planificacion pla');
			$this->db->join('acad_carrera_materia cm', 'cm.ID_CARRERA_MATERIA = pla.ID_CARRERA_MATERIA');
			$this->db->join('tab_personas p', 'p.ID_PERSONA = pla.ID_PERSONA');
			$this->db->join('tab_clientes_naturales cn','cn.ID_PERSONA=p.ID_PERSONA');
			$this->db->join('tab_clientes cli','cli.ID_CLIENTE=cn.ID_CLIENTE');
			$this->db->join('acad_carrera c', 'c.ID_CARRERA = cm.ID_CARRERA');
			$this->db->join('acad_materia m', 'm.ID_MATERIA = cm.ID_MATERIA');
			$this->db->join('acad_nivel n', 'n.ID_NIVEL = cm.NIVEL_MATERIA');
			$this->db->join('acad_grupo g', 'g.ID_GRUPO = pla.ID_GRUPO');
			$this->db->where('pla.ID_PERIODO_ACADEMICO', $p);
			$this->db->group_by("GRUPO,MATERIA");
			$this->db->order_by("DOCENTE", "asc");
			$this->db->order_by("CARRERA", "asc");
			$this->db->order_by("n.ID_NIVEL", "asc");
			$this->db->order_by("MATERIA", "asc");
			$query = $this->db->get();
			$ds = $query->result_array();
			$tabla='<table>';
			$tabla.='<tr>';
			$tabla.='<td colspan="5"><strong>PERIODO '.$periodo['FECHA_INICIO'].' / '.$periodo['FECHA_FIN'].'</strong></td>';
			$tabla.='</tr>';
			$tabla.='</table>';
			$tabla.='<table>';
			$tabla.='<tr>';
			$tabla.='<td>NRO.</td>';
			$tabla.='<td>DOCENTE</td>';
			$tabla.='<td>GRUPO</td>';
			$tabla.='<td>NIVEL</td>';
			$tabla.='<td>MATERIA</td>';
			$tabla.='</tr>';
			$i=1;
			foreach($ds as $k=>$v){
				//verificar si tiene estudiantes
				$materia['ID_PERIODO_ACADEMICO']=$v['ID_PERIODO_ACADEMICO'];
				$materia['ID_PERSONA']=$v['ID_PERSONA'];
				$materia['ID_CARRERA_MATERIA']=$v['ID_CARRERA_MATERIA'];
				$materia['NIVEL_MATERIA']=$v['ID_NIVEL'];
				//if($this->academico_model->verificar_si_tiene_estudiantes($materia)==1){
					$dati['ID_PERIODO_ACADEMICO']=$p;
					$dati['ID_MATERIA']=$v['ID_CARRERA_MATERIA'];
					$dati['ID_GRUPO']=$v['ID_GRUPO'];
					$dati['TIPO']=1;
					$informe=$this->academico_model->get_informe($dati);
					if(count($informe)<=0){
						$tabla.='<tr>';
						$tabla.='<td>'.$i.'</td>';
						//$tabla.='<td style="mso-number-format:\'@\';">'.$v['NRO_DOCUMENTO'].'</td>';
						$tabla.='<td>'.$v['DOCENTE'].'</td>';
						$tabla.='<td align="center">'.$v['GRUPO'].'</td>';
						$tabla.='<td align="center">'.$v['NIVEL'].'</td>';
						$tabla.='<td>'.$v['MATERIA'].'</td>';
						$tabla.='</tr>';
						$i++;
					}
				//}
			}
			$tabla.='<table>';
			header("Content-Type: application/vnd.ms-excel");
			header("Content-Disposition: filename=".$nombre.".xls");
			header("Pragma: no-cache");
			header("Expires: 0");
			//echo utf8_encode($tabla);
			//echo $tabla;
			echo utf8_decode($tabla);
		}

		if($op==6){//archivo team docentes
			$nombre='docentes_deming.csv';
			$periodos=$this->academico_model->getPeriodos($p);
			$periodo=$periodos[0];

			$this->db->select('dcm.*, CONCAT_WS(" ", p.APELLIDO_PATERNO, p.APELLIDO_MATERNO,p.PRIMER_NOMBRE, p.SEGUNDO_NOMBRE) as DOCENTE, CONCAT_WS(" ",p.PRIMER_NOMBRE, p.SEGUNDO_NOMBRE) as NOMBRES, CONCAT_WS(" ", p.APELLIDO_PATERNO, p.APELLIDO_MATERNO) as APELLIDOS, c.NOMBRE as CARRERA, m.NOMBRE as MATERIA, m.ID_MATERIA, n.NIVEL, n.ID_NIVEL, cli.NRO_DOCUMENTO, p.CORREO_INSTITUCIONAL',false);
			$this->db->from('acad_docente_carrera_materia dcm');
			$this->db->join('acad_carrera_materia cm', 'cm.ID_CARRERA_MATERIA = dcm.ID_CARRERA_MATERIA');
			$this->db->join('tab_personas p', 'p.ID_PERSONA = dcm.ID_PERSONA');
			$this->db->join('tab_clientes_naturales cn','cn.ID_PERSONA=p.ID_PERSONA');
			$this->db->join('tab_clientes cli','cli.ID_CLIENTE=cn.ID_CLIENTE');
			$this->db->join('acad_carrera c', 'c.ID_CARRERA = cm.ID_CARRERA');
			$this->db->join('acad_materia m', 'm.ID_MATERIA = cm.ID_MATERIA');
			$this->db->join('acad_nivel n', 'n.ID_NIVEL = cm.NIVEL_MATERIA');
			$this->db->where('dcm.ID_PERIODO_ACADEMICO', $p);
			$this->db->group_by("NRO_DOCUMENTO");
			$this->db->order_by("DOCENTE", "asc");
			$query = $this->db->get();
			$ds = $query->result_array();
			//$archivo='Nombre de usuario,Nombre,Apellidos,Nombre para mostrar,Puesto,Departamento,N�mero del trabajo,Tel�fono del trabajo,Tel�fono m�vil,N�mero de fax,Direcci�n,Ciudad,Estado o provincia,C�digo postal,Pa�s o regi�n'.PHP_EOL;
			$archivo='Nombre de usuario,Nombre,Apellido,Nombre para mostrar,Puesto,Departamento,N�mero del trabajo,Tel�fono de la oficina,Tel�fono m�vil,Fax,Direcci�n de correo electr�nico alternativa,Direcci�n,Ciudad,Estado o provincia,C�digo postal,Pa�s o regi�n'.PHP_EOL;
			foreach($ds as $k=>$v){
				//verificar si tiene estudiantes
				$materia['ID_PERIODO_ACADEMICO']=$v['ID_PERIODO_ACADEMICO'];
				$materia['ID_PERSONA']=$v['ID_PERSONA'];
				if($this->academico_model->verificar_si_tiene_estudiantes($materia)==1){
					if($v['CORREO_INSTITUCIONAL']!=NULL and $v['CORREO_INSTITUCIONAL']!=''){
						$archivo.=utf8_encode($v['CORREO_INSTITUCIONAL'].','.$v['NOMBRES'].','.$v['APELLIDOS'].','.$v['DOCENTE'].',,,,,,,,,,,,Ecuador').PHP_EOL;
					}
				}
			}
			//print_r($datos);
			header('Content-Encoding: UTF-8');
			header('Content-Description: File Transfer');
			header('Content-Type: application/octet-stream');
			header('Content-Disposition: attachment; filename='.$nombre);
			header('Content-Transfer-Encoding: binary');
			header('Expires: 0');
			header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
			header('Pragma: public');
			//echo "\xEF\xBB\xBF"; // utf-8 BOM
			echo utf8_decode($archivo);
			exit();
		}

		if($op==7){//archivo docentes sin completar calificaciones
			$nombre='docentes_incompleto.xls';
			$tabla='<table><tr><td>DOCENTE</td><td>MATERIA</td><td>GRUPO</td></tr>';
			$id_periodo_academico=$this->academico_model->get_periodo_activado();
			$data['ID_PERIODO_ACADEMICO'] = $id_periodo_academico;
			$contenidos = $this->academico_model->listado_contenido($data);
			foreach($contenidos as $contenido){
				$fechaLimite=$this->academico_model->get_fecha_cierre(array('ID_GRUPO'=>$contenido['ID_GRUPO'],'ID_MATERIA'=>$contenido['ID_CARRERA_MATERIA'],'ID_PERIODO_ACADEMICO'=>$contenido['ID_PERIODO_ACADEMICO']));
				if(count($fechaLimite)>0){
					$flimite= date_create($fechaLimite['FECHA_CIERRE'].' 23:59:59');
					$factual= date_create(date('Y-m-d H:i:s'));
					if($flimite<$factual){
						$dato_contenido=$this->academico_model->getContenidoMateria($contenido['ID_CARRERA_MATERIA'],$contenido['ID_PERIODO_ACADEMICO']);
						$estudiantes=$this->academico_model->get_estudiantes(array('ID_CARRERA_MATERIA'=>$contenido['ID_CARRERA_MATERIA'],'ID_PERIODO_ACADEMICO'=>$contenido['ID_PERIODO_ACADEMICO'],'ID_GRUPO'=>$contenido['ID_GRUPO']));
						$dat['ID_CONTENIDO']=$dato_contenido['ID_CONTENIDO'];
						$dat['TIPO']=1;
						$num_proyectos=count($this->academico_model->getRetosProyectosContenido($dat));
						foreach($estudiantes as $estudiante){
							$opc=array();
							$opc['ID_ESTUDIANTE_CARRERA_MATERIA']=$estudiante['ID_ESTUDIANTE_CARRERA_MATERIA'];
							//$op['ID_TIPO_CALIFICACION']=1;
							if($estudiante['ASISTENCIA_JUSTIFICADA']==0){
								$opc['ID_COMPONENTE']=2;//componente taller
								$nota_taller = $this->academico_model->get_calificaciones($opc);
								if(count($nota_taller)>0){
									if($nota_taller[0]['CALIFICACION']==NULL or $nota_taller[0]['CALIFICACION']==''){
										$tabla.='<tr><td>'.$contenido['DOCENTE'].'</td><td>'.$contenido['MATERIA'].'</td><td>'.$contenido['GRUPO'].'</td></tr>';
										break;
									}
								}else{
									$tabla.='<tr><td>'.$contenido['DOCENTE'].'</td><td>'.$contenido['MATERIA'].'</td><td>'.$contenido['GRUPO'].'</td></tr>';
									break;
								}
							}
							$opc['ID_COMPONENTE']=1;//componente proyecto
							$nota_reto_proyecto = $this->academico_model->get_calificaciones($opc);
							if(count($nota_reto_proyecto)>0){
								if($nota_reto_proyecto[0]['CALIFICACION']==NULL or $nota_reto_proyecto[0]['CALIFICACION']==''){
									$tabla.='<tr><td>'.$contenido['DOCENTE'].'</td><td>'.$contenido['MATERIA'].'</td><td>'.$contenido['GRUPO'].'</td></tr>';
									break;
								}else{
									$proyectos_realizados=$this->academico_model->proyectos_realizados_estudiante($estudiante['ID_PERSONA'],$dato_contenido['ID_CONTENIDO']);
									$num_proyectos_calificados=0;
									foreach($proyectos_realizados as $proyecto_realizado){
										if($proyecto_realizado['CALIFICACION']!=NULL and $proyecto_realizado['CALIFICACION']!=''){
											$num_proyectos_calificados+=1;
										}
									}
									if($num_proyectos_calificados!=$num_proyectos){
										$tabla.='<tr><td>'.$contenido['DOCENTE'].'</td><td>'.$contenido['MATERIA'].'</td><td>'.$contenido['GRUPO'].'</td></tr>';
										break;
									}
								}
							}else{
								$tabla.='<tr><td>'.$contenido['DOCENTE'].'</td><td>'.$contenido['MATERIA'].'</td><td>'.$contenido['GRUPO'].'</td></tr>';
								break;
							}
							$opc['ID_COMPONENTE']=0;
							$opc['ID_TIPO_CALIFICACION']=4;//asistencia
							$nota_asistencia = $this->academico_model->get_calificaciones($opc);
							if(count($nota_asistencia)>0){
								if($nota_asistencia[0]['CALIFICACION']==NULL or $nota_asistencia[0]['CALIFICACION']==''){
									$tabla.='<tr><td>'.$contenido['DOCENTE'].'</td><td>'.$contenido['MATERIA'].'</td><td>'.$contenido['GRUPO'].'</td></tr>';
									break;
								}
							}else{
								$tabla.='<tr><td>'.$contenido['DOCENTE'].'</td><td>'.$contenido['MATERIA'].'</td><td>'.$contenido['GRUPO'].'</td></tr>';
								break;
							}
						}
					}
				}
			}
			$tabla.='</table>';
			header("Content-Type: application/vnd.ms-excel");
			header("Content-Disposition: filename=".$nombre);
			header("Pragma: no-cache");
			header("Expires: 0");
			//echo utf8_encode($tabla);
			//echo $tabla;
			echo utf8_decode($tabla);
		}
		if($op==8){//archivo estudiantes y docentes migrar a contifico
			$nombre='estudiantes_docentes.xls';
			$tabla='<table><tr>';
			$tabla.='<td>TIPO</td>';
			$tabla.='<td>RUC</td>';
			$tabla.='<td>CEDULA</td>';
			$tabla.='<td>NOMBRE</td>';
			$tabla.='<td>NOMBRE COMERCIAL</td>';
			$tabla.='<td>TELEFONOS</td>';
			$tabla.='<td>DIRECCION</td>';
			$tabla.='<td>EMAIL</td>';
			$tabla.='<td>EXTRANJERO</td>';
			$tabla.='<td>ES_CLIENTE</td>';
			$tabla.='<td>CUENTA POR COBRAR</td>';
			$tabla.='<td>ES_PROVEDDOR</td>';
			$tabla.='<td>CUENTA POR PAGAR</td>';
			$tabla.='<td>CAMPO 1C</td>';
			$tabla.='<td>CAMPO 2C</td>';
			$tabla.='<td>CAMPO 3C</td>';
			$tabla.='<td>CAMPO 4C</td>';
			$tabla.='<td>CAMPO 1P</td>';
			$tabla.='<td>CAMPO 2P</td>';
			$tabla.='<td>CAMPO 3P</td>';
			$tabla.='<td>CAMPO 4P</td>';
			$tabla.='<td>SALDO CLIENTE</td>';
			$tabla.='<td>SALDO PROVEEDOR</td>';
			$tabla.='<td>CUENTA CONCURRENTE</td>';
			$tabla.='<td>DIAS_CREDITO</td>';
			$tabla.='<td>CUPO_CREDITO</td>';
			$tabla.='<td>CANTON</td>';
			$tabla.='<td>ES_CONTRIBUYENTE_ESPECIAL</td>';
			$tabla.='<td>CATEGORIA</td>';
			$tabla.='<td>PVP_X_DEFECTO_CLIENTE</td>';
			$tabla.='<td>PERSONA ASOCIADA</td>';
			$tabla.='<td>VENDEDOR</td>';
			$tabla.='</tr>';
			$this->db->select("p.OCUPACION,CONCAT_WS(' ',p.PRIMER_NOMBRE, p.SEGUNDO_NOMBRE,p.APELLIDO_PATERNO, p.APELLIDO_MATERNO) as NOMBRE_COMPLETO, cli.nro_documento as CEDULA, cnt.CORREO_ELECTRONICO, p.CORREO_INSTITUCIONAL, CONCAT_WS('/',cnt.TELEFONO, cnt.CELULAR) AS TELEFONO, CONCAT_WS(' ',cnt.DIRECCION_CALLE_PRINCIPAL,cnt.DIRECCION_NUMERO) AS DIRECCION, can.CANTON, p.ID_PERSONA ",false);
			$this->db->from('tab_personas p');
			$this->db->join('tab_clientes_naturales cn', 'cn.ID_PERSONA = p.ID_PERSONA ');
			$this->db->join('tab_clientes cli', 'cli.ID_CLIENTE =cn.ID_CLIENTE ');
			$this->db->join('tab_contactos cnt', 'cnt.ID_CLIENTE=cli.ID_CLIENTE ');
			$this->db->join('tab_cantones can', 'can.ID_CANTON=cnt.ID_CANTON ');
			$this->db->where_in('p.OCUPACION',array(1,2));
			$this->db->where('p.ESTADO',1);
			$this->db->where('cnt.ESTADO',1 );
			$this->db->where('cnt.ID_TIPO_CONTACTO',2 );
			$this->db->order_by("NOMBRE_COMPLETO","asc");
			$query = $this->db->get();
			$ds = $query->result_array();
			$es_cliente=array(1=>'Si',2=>'No');
			$es_proveedor=array(1=>'No',2=>'Si');
			foreach($ds as $r){
				$this->db->select("ID_CARRERA");
				$this->db->from('acad_matricula');
				$this->db->where('ID_PERSONA',$r['ID_PERSONA']);
				$this->db->order_by('ID_MATRICULA','desc');
				$query1 = $this->db->get();
				$ds1 = $query1->row_array();
				$CUENTACONTABLE = "Tecno. Administracion de Sistemas de Calidad ER";
			 	if ($ds1 != null) {
					if ($ds1['ID_CARRERA'] == 10 or $ds1['ID_CARRERA'] == 11) {
						$CUENTACONTABLE = "Tecno. Seguridad y Prevencion de Riesgos Laborales ER";
					}
					if ($ds1['ID_CARRERA'] == 1 or $ds1['ID_CARRERA'] == 2 or $ds1['ID_CARRERA'] == 3 ) {
						$CUENTACONTABLE = "Tecno. Administracion de Sistemas de Calidad ER";
					}
					if ($ds1['ID_CARRERA'] == 12) {
						$CUENTACONTABLE = "Tecno. Logistica y Transporte ER";
					}
					if ($ds1['ID_CARRERA'] == 4 or $ds1['ID_CARRERA'] == 5 or $ds1['ID_CARRERA'] == 6) {
						$CUENTACONTABLE = "Tecno. en Marketing ER";
					}
					if ($ds1['ID_CARRERA'] == 8) {
						$CUENTACONTABLE = "Tecni. Superior en Marketing ER";
					}
					if ($ds1['ID_CARRERA'] == 7) {
						$CUENTACONTABLE = "Tecni. Superior en Administracion de Empresas ER";
					}
					if ($ds1['ID_CARRERA'] == 13) {
						$CUENTACONTABLE = "Tecni. Superior en Ventas ER";
					}
					// Verficiar si es estudiante homologado
					$this->db->select("ID_CARRERA");
					$this->db->from('acad_estudiante_carrera_materia');
					$this->db->where('ID_PERSONA',$r['ID_PERSONA']);
					$this->db->where('ID_CARRERA',$ds1['ID_CARRERA']);
					$this->db->where('FUE_HOMOLOGADA',1);
					$query2 = $this->db->get();
					$ds2 = $query2->row_array();
					if ($ds2 != null) {
						if ($ds2['ID_CARRERA'] == 10 or $ds2['ID_CARRERA'] == 11) {
							$CUENTACONTABLE = "Tecno. Seguridad y Prevencion de Riesgos Laborales EH";
						}
						if ($ds2['ID_CARRERA'] == 1 or $ds2['ID_CARRERA'] == 2 or $ds2['ID_CARRERA'] == 3 ) {
							$CUENTACONTABLE = "Tecno. Administracion de Sistemas de Calidad EH";
						}
						if ($ds2['ID_CARRERA'] == 12) {
							$CUENTACONTABLE = "Tecno. Logistica y Transporte EH";
						}
						if ($ds2['ID_CARRERA'] == 4 or $ds2['ID_CARRERA'] == 5 or $ds2['ID_CARRERA'] == 6) {
							$CUENTACONTABLE = "Tecno. en Marketing EH";
						}
						if ($ds2['ID_CARRERA'] == 8) {
							$CUENTACONTABLE = "Tecni. Superior en Marketing EH";
						}
						if ($ds2['ID_CARRERA'] == 7) {
							$CUENTACONTABLE = "Tecni. Superior en Administracion de Empresas EH";
						}
						if ($ds2['ID_CARRERA'] == 13) {
							$CUENTACONTABLE = "Tecni. Superior en Ventas EH";
						}

					}
					// Verficiar si es Estudiantes Validacion de Conocimientos
					$this->db->select("ID_CARRERA");
					$this->db->from('acad_estudiante_carrera_materia');
					$this->db->where('ID_PERSONA',$r['ID_PERSONA']);
					$this->db->where('ID_CARRERA',$ds1['ID_CARRERA']);
					$this->db->where('FUE_CONVALIDADA',1);
					$query3 = $this->db->get();
					$ds3 = $query3->row_array();
					if ($ds3 != null) {
						if ($ds3['ID_CARRERA'] == 10 or $ds3['ID_CARRERA'] == 11) {
							$CUENTACONTABLE = "Tecno. Seguridad y Prevencion de Riesgos Laborales EVC";
						}
						if ($ds3['ID_CARRERA'] == 1 or $ds3['ID_CARRERA'] == 2 or $ds3['ID_CARRERA'] == 3 ) {
							$CUENTACONTABLE = "Tecno. Administracion de Sistemas de Calidad EVC";
						}
						if ($ds3['ID_CARRERA'] == 12) {
							$CUENTACONTABLE = "Tecno. Logistica y Transporte EVC";
						}
						if ($ds3['ID_CARRERA'] == 4 or $ds3['ID_CARRERA'] == 5 or $ds3['ID_CARRERA'] == 6) {
							$CUENTACONTABLE = "Tecno. en Marketing EVC";
						}
						if ($ds3['ID_CARRERA'] == 8) {
							$CUENTACONTABLE = "Tecni. Superior en Marketing EVC";
						}
						if ($ds3['ID_CARRERA'] == 7) {
							$CUENTACONTABLE = "Tecni. Superior en Administracion de Empresas EVC";
						}
						if ($ds3['ID_CARRERA'] == 13) {
							$CUENTACONTABLE = "Tecni. Superior en Ventas EVC";
						}

					}
				}
				$CUENTACONTABLE_PROVEEDOR = "";
				if($r['OCUPACION']==2){
					$CUENTACONTABLE = "";
					$CUENTACONTABLE_PROVEEDOR = "Cuentas por Pagar Docentes";
				}
				$tabla.='<tr>';
				$tabla.='<td>N</td>';
				$tabla.='<td></td>';
				$tabla.='<td style="mso-number-format:\'@\';">'.$r['CEDULA'].'</td>';
				$tabla.='<td>'.$r['NOMBRE_COMPLETO'].'</td>';
				$tabla.='<td></td>';
				$tabla.='<td style="mso-number-format:\'@\';">'.str_replace('-','',$r['TELEFONO']).'</td>';
				$tabla.='<td>'.$r['DIRECCION'].'</td>';
				$tabla.='<td>'.$r['CORREO_INSTITUCIONAL'].'</td>';
				$tabla.='<td>NO</td>';
				$tabla.='<td>'.$es_cliente[$r['OCUPACION']].'</td>';
				$tabla.='<td>' .$CUENTACONTABLE.'</td>';//CUENTA POR COBRAR
				$tabla.='<td>'.$es_proveedor[$r['OCUPACION']].'</td>';
				$tabla.='<td>'.$CUENTACONTABLE_PROVEEDOR.'</td>';//CUENTA POR PAGAR
				$tabla.='<td></td>';//CAMPO 1C
				$tabla.='<td></td>';//CAMPO 2C
				$tabla.='<td></td>';//CAMPO 3C
				$tabla.='<td></td>';//CAMPO 4C
				$tabla.='<td></td>';//CAMPO 1P
				$tabla.='<td></td>';//CAMPO 2P
				$tabla.='<td></td>';//CAMPO 3P
				$tabla.='<td></td>';//CAMPO 4P
				$tabla.='<td>0</td>';//SALDO CLIENTE
				$tabla.='<td>0</td>';//SALDO PROVEEDOR
				$tabla.='<td></td>';//CUENTA CONCURRENTE
				$tabla.='<td></td>';//DIAS_CREDITO
				$tabla.='<td></td>';//CUPO_CREDITO
				$tabla.='<td>'.$r['CANTON'].'</td>';
				$tabla.='<td>No</td>';//ES_CONTRIBUYENTE_ESPECIAL
				$tabla.='<td></td>';//CATEGORIA
				$tabla.='<td>pvp1</td>';//PVP_X_DEFECTO_CLIENTE
				$tabla.='<td></td>';//PERSONA ASOCIADA
				$tabla.='<td></td>';//VENDEDOR
				$tabla.='</tr>';
			}
			$tabla.='</table>';
			header("Content-Type: application/vnd.ms-excel");
			header("Content-Disposition: filename=".$nombre);
			header("Pragma: no-cache");
			header("Expires: 0");
			//echo utf8_encode($tabla);
			//echo $tabla;
			echo utf8_decode($tabla);
		}

		if($op==9){//archivo estudiantes CACES
			if($p==null){
				$p=$this->academico_model->get_periodo_activado();
			}
			$periodos=$this->academico_model->getPeriodos($p);
			$periodo=$periodos[0];
			$fi=explode('-',$periodo['FECHA_INICIO']);
			$ff=explode('-',$periodo['FECHA_FIN']);
			//$nombre='Estudiantes_'.$fi[0].'_'.$ff[0].'.csv';
			//$nombre='Estudiantes_'.date('Y_m_d').'.csv';
			$nombre='Estudiantes_'.date('Y_m_d').'.xls';
			//$this->db->select("DISTINCT(cli.NRO_DOCUMENTO) as CEDULA, CONCAT_WS(' ',p.PRIMER_NOMBRE, p.SEGUNDO_NOMBRE) as NOMBRES, p.APELLIDO_PATERNO, p.APELLIDO_MATERNO, cli.TIPO_DOCUMENTO, p.FECHA_NACIMIENTO, p.GENERO, td.DISCAPACIDAD,p.TIPO_DISCAPACIDAD, p.PORCENTAJE_DICAPACIDAD, p.CARNET_CONADIS, cont.CORREO_ELECTRONICO, tgc.GRUPO_CULTURAL AS ETNIA, pai_n.PAIS as PAIS_NAC, carr.CODIGO, s.SEDE, CONCAT_WS(' ',cont.DIRECCION_CALLE_PRINCIPAL,cont.DIRECCION_NUMERO,cont.DIRECCION_CALLE_SECUNDARIA1) as DIRECCION, p.CORREO_INSTITUCIONAL, pai_r.PAIS as PAIS_REC, pro_r.PROVINCIA as PROVINCIA_REC, can_r.CANTON as CANTON_REC, cont.CELULAR, pf.NUM_MIEMBROS_FAMILIA, tc.TIPO_COLEGIO, p.ID_GRUPO_CULTURAL, p.ID_PERSONA, m.ID_CARRERA",false);
			$this->db->select("DISTINCT(cli.NRO_DOCUMENTO) as CEDULA, CONCAT_WS(' ',p.PRIMER_NOMBRE, p.SEGUNDO_NOMBRE) as NOMBRES, p.APELLIDO_PATERNO, p.APELLIDO_MATERNO, cli.TIPO_DOCUMENTO, p.FECHA_NACIMIENTO, p.GENERO, td.DISCAPACIDAD,p.TIPO_DISCAPACIDAD, p.PORCENTAJE_DICAPACIDAD, p.CARNET_CONADIS, cont.CORREO_ELECTRONICO, tgc.GRUPO_CULTURAL AS ETNIA, pai_n.PAIS as PAIS_NAC, carr.CODIGO, CONCAT_WS(' ',cont.DIRECCION_CALLE_PRINCIPAL,cont.DIRECCION_NUMERO,cont.DIRECCION_CALLE_SECUNDARIA1) as DIRECCION, p.CORREO_INSTITUCIONAL, pai_r.PAIS as PAIS_REC, pro_r.PROVINCIA as PROVINCIA_REC, can_r.CANTON as CANTON_REC, cont.CELULAR, pf.NUM_MIEMBROS_FAMILIA, tc.TIPO_COLEGIO, p.ID_GRUPO_CULTURAL, p.ID_PERSONA, m.ID_CARRERA",false);
			$this->db->from('acad_matricula m');
			$this->db->join('tab_personas p', 'p.id_PERSONA=m.id_PERSONA ','LEFT');
			$this->db->join('tab_clientes_naturales b', 'b.id_PERSONA= m.id_PERSONA','LEFT');
			$this->db->join('tab_clientes cli', 'cli.ID_CLIENTE=b.ID_CLIENTE','LEFT');
			$this->db->join('tab_contactos cont', 'cont.id_CLIENTE=cli.id_cliente and cont.ESTADO=1','LEFT');
			$this->db->join('tab_grupos_culturales tgc', 'tgc.ID_GRUPO_CULTURAL =p.ID_GRUPO_CULTURAL ','LEFT');
			$this->db->join('tab_paises pai_n', 'pai_n.ID_PAIS=p.ID_PAIS_NACIMIENTO','LEFT');
			$this->db->join('tab_paises pai_r', 'pai_r.ID_PAIS=cont.ID_PAIS','LEFT');
			$this->db->join('tab_provincias pro_r', 'pro_r.ID_PROVINCIA=cont.ID_PROVINCIA','LEFT');
			$this->db->join('tab_cantones can_r', 'can_r.ID_CANTON=cont.ID_CANTON','LEFT');
			$this->db->join('tab_tipos_discapacidad td', 'td.ID_TIPO_DISCAPACIDAD=p.TIPO_DISCAPACIDAD','LEFT');
			$this->db->join('acad_carrera carr', 'carr.ID_CARRERA=m.id_CARRERA','LEFT');
			//$this->db->join('acad_grupo g', 'g.ID_GRUPO=m.ID_GRUPO','LEFT');
			//$this->db->join('acad_sede s', 's.ID_SEDE=g.ID_SEDE','LEFT');
			$this->db->join('tab_personas_financiero pf', 'pf.id_PERSONA=m.id_PERSONA ','LEFT');
			$this->db->join('tab_tipos_colegio tc', 'tc.ID_TIPO_COLEGIO=p.EST_ID_TIPO_COLEGIO ','LEFT');
			$this->db->where('cont.ID_TIPO_CONTACTO',2);
			//$this->db->where('m.ESTADO','0');//filtrar matriculas normales
			$this->db->where_in('m.ESTADO',array('0','2'));//filtrar matriculas normales y retirados
			//$this->db->where_in('m.ID_PERIODO_ACADEMICO',array(11,12));
			$this->db->where('p.ID_PERSONA not in (select ID_PERSONA from acad_matricula where ID_PERIODO_ACADEMICO in (11,12))');
			//$this->db->where('m.ID_PERIODO_ACADEMICO',$p);
			$this->db->order_by("APELLIDO_PATERNO","asc");
			$query= $this->db->get();
			$ds= $query->result_array();
			$discapacidades[1]='INTELECTUAL';
			$discapacidades[2]='FISICA MOTORA';
			$discapacidades[3]='VISUAL';
			$discapacidades[4]='AUDITIVA';
			$discapacidades[5]='MENTAL PSICOSOCIAL';
			$discapacidades[6]='NINGUNA';
			$discapacidades[7]='NINGUNA';
			$etnias[1]='MESTIZO/A';
			$etnias[2]='BLANCO/A';
			$etnias[3]='INDIGENA';
			$etnias[4]='NEGRO/A';
			$etnias[5]='MONTUBIO/A';
			$etnias[6]='OTRO';
			$etnias[7]='AFROECUATORIANO/A';
			$filtro=array('�','�','�','�','�','�','�','�','�','�','�','�');
			$filtro1=array('a','A','e','E','i','I','o','O','u','U','n','N');
			$ciudad_carrera=array('540413A01-L-1701','540416A01-L-1701','550725E01-L-1701','551022D-L-01','551041B-L-01');
			/*$archivo='CODIGO_IES;';
			$archivo.='CODIGO_CARRERA;';
			$archivo.='CIUDAD_CARRERA;';
			$archivo.='TIPO_IDENTIFICACION;';
			$archivo.='IDENTIFICACION;';
			$archivo.='PRIMER_APELLIDO;';
			$archivo.='SEGUNDO_APELLIDO;';
			$archivo.='NOMBRES;';
			$archivo.='SEXO;';
			$archivo.='FECHA_NACIMIENTO;';
			$archivo.='PAIS_ORIGEN;';
			$archivo.='DISCAPACIDAD;';
			$archivo.='PORCENTAJE_DISCAPACIDAD;';
			$archivo.='NUMERO_CONADIS;';
			$archivo.='ETNIA;';
			$archivo.='NACIONALIDAD;';
			$archivo.='DIRECCION;';
			$archivo.='EMAIL_PERSONAL;';
			$archivo.='EMAIL_INSTITUCIONAL;';
			$archivo.='FECHA_INICIO_PRIMER_NIVEL;';
			$archivo.='FECHA_INGRESO_CONVALIDACION;';
			$archivo.='PAIS_RESIDENCIA;';
			$archivo.='PROVINCIA_RESIDENCIA;';
			$archivo.='CANTON_RESIDENCIA;';
			$archivo.='CELULAR;';
			$archivo.='NIVEL_FORMACION_PADRE;';
			$archivo.='NIVEL_FORMACION_MADRE;';
			$archivo.='CANTIDAD_MIEMBROS_HOGAR;';
			$archivo.='TIPO_COLEGIO;';
			$archivo.='POLITICA_CUOTA';
			$archivo.=PHP_EOL;*/
			$archivo='<table><tr>';
			$archivo.='<td>CODIGO_IES</td>';
			$archivo.='<td>CODIGO_CARRERA</td>';
			$archivo.='<td>CIUDAD_CARRERA</td>';
			$archivo.='<td>TIPO_IDENTIFICACION</td>';
			$archivo.='<td>IDENTIFICACION</td>';
			$archivo.='<td>PRIMER_APELLIDO</td>';
			$archivo.='<td>SEGUNDO_APELLIDO</td>';
			$archivo.='<td>NOMBRES</td>';
			$archivo.='<td>SEXO</td>';
			$archivo.='<td>FECHA_NACIMIENTO</td>';
			$archivo.='<td>PAIS_ORIGEN</td>';
			$archivo.='<td>DISCAPACIDAD</td>';
			$archivo.='<td>PORCENTAJE_DISCAPACIDAD</td>';
			$archivo.='<td>NUMERO_CONADIS</td>';
			$archivo.='<td>ETNIA</td>';
			$archivo.='<td>NACIONALIDAD</td>';
			$archivo.='<td>DIRECCION</td>';
			$archivo.='<td>EMAIL_PERSONAL</td>';
			$archivo.='<td>EMAIL_INSTITUCIONAL</td>';
			$archivo.='<td>FECHA_INICIO_PRIMER_NIVEL</td>';
			$archivo.='<td>FECHA_INGRESO_CONVALIDACION</td>';
			$archivo.='<td>PAIS_RESIDENCIA</td>';
			$archivo.='<td>PROVINCIA_RESIDENCIA</td>';
			$archivo.='<td>CANTON_RESIDENCIA</td>';
			$archivo.='<td>CELULAR</td>';
			$archivo.='<td>NIVEL_FORMACION_PADRE</td>';
			$archivo.='<td>NIVEL_FORMACION_MADRE</td>';
			$archivo.='<td>CANTIDAD_MIEMBROS_HOGAR</td>';
			$archivo.='<td>TIPO_COLEGIO</td>';
			$archivo.='<td>POLITICA_CUOTA';
			$archivo.='</tr>';
			foreach($ds as $k=>$v){

				//consultar sede
				/*$query1 = $this->db->query("select SEDE from acad_sede where ID_SEDE in (select ID_SEDE from acad_grupo where ID_GRUPO in (select ID_GRUPO from acad_matricula where ID_PERSONA=".$v['ID_PERSONA']." and ID_CARRERA=".$v['ID_CARRERA']." and ESTADO in (0,2)))");
			  	$ds1 = $query1->row_array();
			  	if($ds1==NULL){
				  	$sede='QUITO';
			  	}else{
				  	$sede=$ds1['SEDE'];
			  	}*/

				$sede='DISTRITO METROPOLITANO DE QUITO';
				if(in_array($v['CODIGO'],$ciudad_carrera)){
					$sede='QUITO';
				}

				if($v['TIPO_DOCUMENTO']=='C'){
					$v['TIPO_DOCUMENTO']='CEDULA';
				}else{
					$v['TIPO_DOCUMENTO']='PASAPORTE';
				}
				if($v['FECHA_NACIMIENTO']!=NULL and $v['FECHA_NACIMIENTO']!='0000-00-00'){
					$f=explode('-',$v['FECHA_NACIMIENTO']);
					$v['FECHA_NACIMIENTO']=$f[2].'/'.$f[1].'/'.$f[0];
				}else{
					$v['FECHA_NACIMIENTO']='';
				}
				if($v['GENERO']=='F'){
					$v['GENERO']='MUJER';
				}else{
					$v['GENERO']='HOMBRE';
				}
				if(isset($discapacidades[$v['TIPO_DISCAPACIDAD']]) and $discapacidades[$v['TIPO_DISCAPACIDAD']]!='NINGUNA'){
					$v['TIPO_DISCAPACIDAD']=$discapacidades[$v['TIPO_DISCAPACIDAD']];
				}else{
					$v['TIPO_DISCAPACIDAD']='NINGUNA';
					$v['CARNET_CONADIS']='';
					$v['PORCENTAJE_DICAPACIDAD']=0;
				}
				if(isset($etnias[$v['ID_GRUPO_CULTURAL']])){
					$v['ETNIA']=$etnias[$v['ID_GRUPO_CULTURAL']];
				}else{
					$v['ETNIA']='NO REGISTRA';
				}
				$nacionalidad='NO APLICA';
				if($v['ETNIA']=='INDIGENA'){
					$nacionalidad='NO REGISTRA';
				}
				if($v['PAIS_NAC']==NULL or $v['PAIS_NAC']==''){
					$v['PAIS_NAC']='NO DEFINIDO';
				}
				if($v['APELLIDO_MATERNO']==NULL or $v['APELLIDO_MATERNO']==''){
					$v['APELLIDO_MATERNO']='';
				}
				if($v['PAIS_REC']==NULL or $v['PAIS_REC']==''){
					$v['PAIS_REC']='NO DEFINIDO';
				}
				if($v['PAIS_REC']!='ECUADOR' or $v['PROVINCIA_REC']==NULL or $v['PROVINCIA_REC']==''){
					$v['PROVINCIA_REC']='NO APLICA';
				}
				if($v['PAIS_REC']!='ECUADOR' or $v['CANTON_REC']==NULL or $v['CANTON_REC']==''){
					$v['CANTON_REC']='NO APLICA';
				}

				$fecha_inicio='';
				$fecha_convalida='';
				$this->db->select("p.FECHA_INICIO");
				$this->db->from('acad_matricula m');
				$this->db->join('acad_periodo_academico p', 'p.ID_PERIODO_ACADEMICO=m.ID_PERIODO_ACADEMICO');
				//$this->db->where('m.ESTADO','0');//filtrar matriculas normales
				$this->db->where_in('m.ESTADO',array('0','2'));//filtrar matriculas normales y retirados
				//$this->db->where('m.ID_PERIODO_ACADEMICO<',11);
				$this->db->where('m.ID_NIVEL',1);
				$this->db->where('m.ID_PERSONA',$v['ID_PERSONA']);
				$this->db->where('m.ID_CARRERA',$v['ID_CARRERA']);
				$query1= $this->db->get();
				$ds1= $query1->row_array();
				if($ds1==NULL){
					//buscar si se registro primer nivel pot historial
					$this->db->select("p.FECHA_INICIO,ecm.NIVEL_MATERIA");
					$this->db->from('acad_estudiante_carrera_materia ecm');
					$this->db->join('acad_periodo_academico p', 'p.ID_PERIODO_ACADEMICO=ecm.ID_PERIODO_ACADEMICO');
					$this->db->where('ecm.FUE_HISTORIAL',1);
					//$this->db->where('ecm.ID_PERIODO_ACADEMICO<',11);
					//$this->db->where('ecm.NIVEL_MATERIA',1);
					$this->db->where('ecm.ID_PERSONA',$v['ID_PERSONA']);
					$this->db->where('ecm.ID_CARRERA',$v['ID_CARRERA']);
					$query3= $this->db->get();
					$ds3= $query3->result_array();
					//$ds3= $query3->row_array();
					//if($ds3==NULL){
					if(count($ds3)<=0){
						$this->db->select("p.FECHA_INICIO");
						$this->db->from('acad_matricula m');
						$this->db->join('acad_periodo_academico p', 'p.ID_PERIODO_ACADEMICO=m.ID_PERIODO_ACADEMICO');
						//$this->db->where('m.ESTADO','0');//filtrar matriculas anuladas
						$this->db->where_in('m.ESTADO',array('0','2'));//filtrar matriculas normales y retirados
						//$this->db->where('m.ID_PERIODO_ACADEMICO<',11);
						$this->db->where('m.ID_PERSONA',$v['ID_PERSONA']);
						$this->db->where('m.ID_CARRERA',$v['ID_CARRERA']);
						$this->db->order_by('m.ID_MATRICULA','ASC');
						$query2= $this->db->get();
						$ds2= $query2->row_array();
						$f=explode('-',$ds2['FECHA_INICIO']);
						$fecha_convalida=$f[2].'/'.$f[1].'/'.$f[0];
					}else{
						foreach($ds3 as $r3){
							if($r3['NIVEL_MATERIA']==1){
								$f=explode('-',$r3['FECHA_INICIO']);
								$fecha_inicio=$f[2].'/'.$f[1].'/'.$f[0];
								break;
							}
						}
						//$f=explode('-',$ds3['FECHA_INICIO']);
						//$fecha_inicio=$f[2].'/'.$f[1].'/'.$f[0];
					}
				}else{
					$f=explode('-',$ds1['FECHA_INICIO']);
					$fecha_inicio=$f[2].'/'.$f[1].'/'.$f[0];
				}
				if($v['CELULAR']!=NULL and $v['CELULAR']!=''){
					$v['CELULAR']=sprintf("%'.010d",str_replace('-','',$v['CELULAR']));
				}

				if($v['TIPO_COLEGIO']==NULL or $v['TIPO_COLEGIO']==''){
					$v['TIPO_COLEGIO']='NO REGISTRA';
				}
				if($v['NUM_MIEMBROS_FAMILIA']<=0 or $v['NUM_MIEMBROS_FAMILIA']=='' or $v['NUM_MIEMBROS_FAMILIA']==NULL){
					$v['NUM_MIEMBROS_FAMILIA']=1;
				}
				/*$fila='2249;';
				$fila.=$v['CODIGO'].';';
				$fila.=$sede.';';
				$fila.=$v['TIPO_DOCUMENTO'].';';
				$fila.=$v['CEDULA'].';';
				//$fila.=str_replace($filtro,$filtro1,utf8_decode($v['APELLIDO_PATERNO'])).';';
				$fila.=trim($v['APELLIDO_PATERNO']).';';
				$fila.=trim($v['APELLIDO_MATERNO']).';';
				$fila.=trim($v['NOMBRES']).';';
				$fila.=$v['GENERO'].';';
				$fila.=$v['FECHA_NACIMIENTO'].';';
				$fila.=$v['PAIS_NAC'].';';
				$fila.=$v['TIPO_DISCAPACIDAD'].';';
				$fila.=$v['PORCENTAJE_DICAPACIDAD'].';';
				$fila.=$v['CARNET_CONADIS'].';';
				$fila.=$v['ETNIA'].';';
				$fila.=$nacionalidad.';';
				$fila.=trim($v['DIRECCION']).';';
				$fila.=strtolower($v['CORREO_ELECTRONICO']).';';
				$fila.=$v['CORREO_INSTITUCIONAL'].';';
				$fila.=$fecha_inicio.';';
				$fila.=$fecha_convalida.';';
				$fila.=$v['PAIS_REC'].';';
				$fila.=$v['PROVINCIA_REC'].';';
				$fila.=$v['CANTON_REC'].';';
				$fila.=$v['CELULAR'].';';
				$fila.='NO REGISTRA;';
				$fila.='NO REGISTRA;';
				$fila.=$v['NUM_MIEMBROS_FAMILIA'].';';
				$fila.=$v['TIPO_COLEGIO'].';';
				$fila.='NINGUNA';
				//$archivo.=utf8_encode($fila).PHP_EOL;
				$archivo.=$fila.PHP_EOL;*/
				$fila='<tr><td>2249</td>';
				$fila.='<td style="mso-number-format:\'@\';">'.$v['CODIGO'].'</td>';
				$fila.='<td>'.$sede.'</td>';
				$fila.='<td>'.$v['TIPO_DOCUMENTO'].'</td>';
				$fila.='<td style="mso-number-format:\'@\';">'.$v['CEDULA'].'</td>';
				//$fila.=str_replace($filtro,$filtro1,utf8_decode($v['APELLIDO_PATERNO'])).'</td>';
				$fila.='<td>'.trim($v['APELLIDO_PATERNO']).'</td>';
				$fila.='<td>'.trim($v['APELLIDO_MATERNO']).'</td>';
				$fila.='<td>'.trim($v['NOMBRES']).'</td>';
				$fila.='<td>'.$v['GENERO'].'</td>';
				$fila.='<td style="mso-number-format:\'@\';">'.$v['FECHA_NACIMIENTO'].'</td>';
				$fila.='<td>'.$v['PAIS_NAC'].'</td>';
				$fila.='<td>'.$v['TIPO_DISCAPACIDAD'].'</td>';
				$fila.='<td>'.$v['PORCENTAJE_DICAPACIDAD'].'</td>';
				$fila.='<td>'.$v['CARNET_CONADIS'].'</td>';
				$fila.='<td>'.$v['ETNIA'].'</td>';
				$fila.='<td>'.$nacionalidad.'</td>';
				$fila.='<td>'.trim($v['DIRECCION']).'</td>';
				$fila.='<td>'.strtolower($v['CORREO_ELECTRONICO']).'</td>';
				$fila.='<td>'.$v['CORREO_INSTITUCIONAL'].'</td>';
				$fila.='<td style="mso-number-format:\'@\';">'.$fecha_inicio.'</td>';
				$fila.='<td style="mso-number-format:\'@\';">'.$fecha_convalida.'</td>';
				$fila.='<td>'.$v['PAIS_REC'].'</td>';
				$fila.='<td>'.$v['PROVINCIA_REC'].'</td>';
				$fila.='<td>'.$v['CANTON_REC'].'</td>';
				$fila.='<td style="mso-number-format:\'@\';">'.$v['CELULAR'].'</td>';
				$fila.='<td>'.'NO REGISTRA</td>';
				$fila.='<td>'.'NO REGISTRA</td>';
				$fila.='<td>'.$v['NUM_MIEMBROS_FAMILIA'].'</td>';
				$fila.='<td>'.$v['TIPO_COLEGIO'].'</td>';
				$fila.='<td>'.'NINGUNA'.'</td>';
				$archivo.=$fila.'</tr>';
			}

			$archivo.='</table>';
			header("Content-Type: application/vnd.ms-excel");
			header("Content-Disposition: filename=".$nombre);
			header("Pragma: no-cache");
			header("Expires: 0");
			//echo utf8_encode($tabla);
			//echo $tabla;
			echo utf8_decode($archivo);

			/*header('Content-Encoding: UTF-8');
			header('Content-Description: File Transfer');
			header('Content-Type: application/octet-stream');
			header('Content-Disposition: attachment; filename='.$nombre);
			header('Content-Transfer-Encoding: binary');
			header('Expires: 0');
			header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
			header('Pragma: public');
			//echo "\xEF\xBB\xBF"; // utf-8 BOM
			//echo utf8_decode($archivo);
			echo $archivo;
			exit();*/
		}

		if($op==10){//archivo estudiantes por periodo CACES
			if($p==null){
				$p=$this->academico_model->get_periodo_activado();
			}
			$periodos=$this->academico_model->getPeriodos($p);
			$periodo=$periodos[0];
			$fi=explode('-',$periodo['FECHA_INICIO']);
			$ff=explode('-',$periodo['FECHA_FIN']);
			$nombre='Estudiantes_Matr�cula_Periodo_Academico_'.$fi[0].'_'.$ff[0].'.csv';
			$this->db->select("DISTINCT(cli.NRO_DOCUMENTO) as CEDULA, cli.TIPO_DOCUMENTO, carr.CODIGO, s.SEDE, m.ID_PERSONA, m.ID_CARRERA, m.ID_NIVEL, n.NIVEL, pf.SUELDO_PROMEDIO, m.ESTADO",false);
			$this->db->from('acad_matricula m');
			$this->db->join('tab_clientes_naturales b', 'b.ID_PERSONA= m.ID_PERSONA','LEFT');
			$this->db->join('tab_clientes cli', 'cli.ID_CLIENTE=b.ID_CLIENTE','LEFT');
			$this->db->join('acad_carrera carr', 'carr.ID_CARRERA=m.id_CARRERA','LEFT');
			$this->db->join('acad_nivel n', 'n.ID_NIVEL=m.ID_NIVEL','LEFT');
			$this->db->join('acad_grupo g', 'g.ID_GRUPO=m.ID_GRUPO','LEFT');
			$this->db->join('acad_sede s', 's.ID_SEDE=g.ID_SEDE','LEFT');
			$this->db->join('tab_personas_financiero pf', 'pf.id_PERSONA=m.id_PERSONA ','LEFT');
			$this->db->where_in('m.ESTADO',array('0','2'));//filtrar matriculas normales y retirados
			//$this->db->where_in('m.ID_PERIODO_ACADEMICO',array(11,12));
			$this->db->where('m.ID_PERIODO_ACADEMICO',$p);
			$query= $this->db->get();
			$ds= $query->result_array();
			$ciudad_carrera=array('540413A01-L-1701','540416A01-L-1701','550725E01-L-1701','551022D-L-01','551041B-L-01');
			$nivel[1]='1RO';
			$nivel[2]='2DO';
			$nivel[3]='3RO';
			$nivel[4]='4TO';
			$nivel[5]='5TO';
			$nivel[6]='6TO';
			$filtro=array('�','�','�','�','�','�','�','�','�','�','�','�');
			$filtro1=array('a','A','e','E','i','I','o','O','u','U','n','N');
			$archivo='CODIGO_IES;';
			$archivo.='CODIGO_CARRERA;';
			$archivo.='CIUDAD_CARRERA;';
			$archivo.='TIPO_IDENTIFICACION;';
			$archivo.='IDENTIFICACION;';
			$archivo.='TOTAL_CREDITOS_APROBADOS;';
			$archivo.='CREDITOS_APROBADOS;';
			$archivo.='TIPO_MATRICULA;';
			$archivo.='PARALELO;';
			$archivo.='NIVEL_ACADEMICO;';
			$archivo.='DURACION_PERIODO_ACADEMICO;';
			$archivo.='NUM_MATERIAS_SEGUNDA_MATRICULA;';
			$archivo.='NUM_MATERIAS_TERCERA_MATRICULA;';
			$archivo.='PERDIDA_GRATUIDAD;';
			$archivo.='PENSION_DIFERENCIADA;';
			$archivo.='PLAN_CONTINGENCIA;';
			$archivo.='INGRESO_TOTAL_HOGAR;';
			$archivo.='ORIGEN_RECURSOS_ESTUDIOS;';
			$archivo.='TERMINO_PERIODO;';
			$archivo.='TOTAL_HORAS_APROBADAS;';
			$archivo.='HORAS_APROBADAS_PERIODO;';
			$archivo.='MONTO_AYUDA_ECONOMICA;';
			$archivo.='MONTO_CREDITO_EDUCATIVO;';
			$archivo.='ESTADO';
			$archivo.=PHP_EOL;
			foreach($ds as $k=>$v){
				if($v['TIPO_DOCUMENTO']=='C'){
					$v['TIPO_DOCUMENTO']='CEDULA';
				}else{
					$v['TIPO_DOCUMENTO']='PASAPORTE';
				}
				if(isset($nivel[$v['ID_NIVEL']])){
					$nivel_academico=$nivel[$v['ID_NIVEL']];
				}else{
					$nivel_academico='';
				}
				//sumatoria de creditos hasta el periodo de consulta
			  	$query1 = $this->db->query("select sum(CREDITOS_MATERIA) as credito_aprobado from acad_estudiante_carrera_materia where ID_PERSONA=".$v['ID_PERSONA']." and ID_CARRERA=".$v['ID_CARRERA']." and ID_ESTUDIANTE_CARRERA_MATERIA in (select ID_ESTUDIANTE_CARRERA_MATERIA from acad_calificacion where ID_TIPO_CALIFICACION=6 and ESTADO_CALIFICACION=1) and ID_PERIODO_ACADEMICO<=".$p);
			  	$ds1 = $query1->row_array();
			  	if($ds1==NULL){
				  	$credito=0;
			  	}else{
				  	$credito=$ds1['credito_aprobado'];
			  	}
			  	$query2 = $this->db->query("select sum(CREDITOS_MATERIA) as credito_aprobado from acad_estudiante_carrera_materia where ID_PERSONA=".$v['ID_PERSONA']." and ID_CARRERA=".$v['ID_CARRERA']." and (FUE_CONVALIDADA=1 or FUE_HOMOLOGADA=1 or FUE_HISTORIAL=1) and ID_PERIODO_ACADEMICO<=".$p);
			  	$ds2 = $query2->row_array();
			  	if($ds2==NULL){
			  	}else{
				  	$credito+=$ds2['credito_aprobado'];
			  	}

				//sumatoria de creditos en el periodo de consulta
			  	$query3 = $this->db->query("select sum(CREDITOS_MATERIA) as credito_aprobado from acad_estudiante_carrera_materia where ID_PERSONA=".$v['ID_PERSONA']." and ID_CARRERA=".$v['ID_CARRERA']." and ID_ESTUDIANTE_CARRERA_MATERIA in (select ID_ESTUDIANTE_CARRERA_MATERIA from acad_calificacion where ID_TIPO_CALIFICACION=6 and ESTADO_CALIFICACION=1) and ID_PERIODO_ACADEMICO=".$p);
			  	$ds3 = $query3->row_array();
			  	if($ds3==NULL){
				  	$creditoPeriodo=0;
			  	}else{
				  	$creditoPeriodo=$ds3['credito_aprobado'];
			  	}
			  	$query4 = $this->db->query("select sum(CREDITOS_MATERIA) as credito_aprobado from acad_estudiante_carrera_materia where ID_PERSONA=".$v['ID_PERSONA']." and ID_CARRERA=".$v['ID_CARRERA']." and (FUE_CONVALIDADA=1 or FUE_HOMOLOGADA=1 or FUE_HISTORIAL=1) and ID_PERIODO_ACADEMICO=".$p);
			  	$ds4 = $query4->row_array();
			  	if($ds4==NULL){
			  	}else{
				  	$creditoPeriodo+=$ds4['credito_aprobado'];
			  	}

				//sumatoria de materias arrastre en el periodo de consulta
				$segunda=0;
				$tercera=0;
			  	$query5 = $this->db->query("select ID_CARRERA_MATERIA from acad_estudiante_carrera_materia where ID_PERSONA=".$v['ID_PERSONA']." and ID_CARRERA=".$v['ID_CARRERA']." and	ES_ARRASTRE=1 and ID_PERIODO_ACADEMICO=".$p);
			  	$ds5 = $query5->result_array();
			  	if(count($ds5)>0){
					foreach($ds5 as $rm){
						$query6 = $this->db->query("select ID_CARRERA_MATERIA from acad_estudiante_carrera_materia where ID_PERSONA=".$v['ID_PERSONA']." and ID_CARRERA=".$v['ID_CARRERA']." and ES_ARRASTRE=1 and ID_CARRERA_MATERIA=".$rm['ID_CARRERA_MATERIA']." and ID_PERIODO_ACADEMICO<".$p);
			  			$ds6 = $query6->row_array();
						if($ds6==NULL){
							$segunda++;
						}else{
							$tercera++;
						}
					}
			  	}
				$ingreso='NO REGISTRA';
				if($v['SUELDO_PROMEDIO']>0 and $v['SUELDO_PROMEDIO']<=400){
					$ingreso='RANGO1';
				}elseif($v['SUELDO_PROMEDIO']>400){
					for($j=2;$j<=10;$j++){
						$base=400*$j;
						if($v['SUELDO_PROMEDIO']<=$base or $j==10){
							$ingreso='RANGO'.$j;
							break;
						}
					}
				}
				$terminoPeriodo='SI';
				if($v['ESTADO']==2){
					$terminoPeriodo='NO';
				}
				$estadoMatricula='NO APLICA';
				/*if($v['ESTADO']==2){
					$estadoMatricula='RETIRADO';
				}else{
					//verificar si estudiante aprobo pensum carrera
					$materias  = $this->academico_model->get_materias_estudiante($v['ID_PERSONA'],0,1,$p,$v['ID_CARRERA']);//todas las materias del alumno hasta el periodo de consulta
					$pensum_nivel = $this->academico_model->getMateriasPorCarreraNivel($v['ID_CARRERA'],$v['ID_NIVEL']);
					$todo_nivel   = 0;
					foreach($pensum_nivel as $pn){
						foreach($materias as $m){
							$aprobo=0;
							if($m['FUE_HOMOLOGADA']==1 or $m['FUE_CONVALIDADA']==1 or $m['FUE_HISTORIAL']==1){
								$aprobo=1;
							}else{
								$estado=$this->academico_model->get_calificaciones(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$m['ID_ESTUDIANTE_CARRERA_MATERIA'],'ID_TIPO_CALIFICACION'=>6));
								if(isset($estado[0]) and $estado[0]['ESTADO_CALIFICACION']==1){
									$aprobo=1;
								}
							}
							if($pn['ID_CARRERA_MATERIA']==$m['ID_CARRERA_MATERIA'] and $aprobo==1){
								$todo_nivel=$todo_nivel+1;
							}
						}
					}
					$estadoMatricula='NO APROBADO';
					$aun_por_aprobar  = count($pensum_nivel)-$todo_nivel;
					if($aun_por_aprobar<=2){
						$estadoMatricula='APROBADO';
					}
				}*/
				$ciudad_c='DISTRITO METROPOLITANO DE QUITO';
				if(in_array($v['CODIGO'],$ciudad_carrera)){
					$ciudad_c='QUITO';
				}

				$fila='2249;';
				$fila.=$v['CODIGO'].';';
				//$fila.=$v['SEDE'].';';
				$fila.=$ciudad_c.';';
				$fila.=$v['TIPO_DOCUMENTO'].';';
				$fila.=$v['CEDULA'].';';
				$fila.=$credito.';';
				$fila.=$creditoPeriodo.';';
				$fila.='ORDINARIA;';
				$fila.=$v['NIVEL'].';';
				$fila.=$nivel_academico.';';
				$fila.='25;';
				$fila.=$segunda.';';
				$fila.=$tercera.';';
				$fila.='NO;';
				$fila.='NO;';
				$fila.='NO;';
				$fila.=$ingreso.';';
				$fila.='NO REGISTRA;';
				$fila.=$terminoPeriodo.';';
				$fila.=$credito.';';
				$fila.=$creditoPeriodo.';';
				$fila.='0;';
				$fila.='0;';
				$fila.=$estadoMatricula;
				//$archivo.=utf8_encode($fila).PHP_EOL;
				$archivo.=$fila.PHP_EOL;
			}
			header('Content-Encoding: UTF-8');
			header('Content-Description: File Transfer');
			header('Content-Type: application/octet-stream');
			header('Content-Disposition: attachment; filename='.$nombre);
			header('Content-Transfer-Encoding: binary');
			header('Expires: 0');
			header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
			header('Pragma: public');
			//echo "\xEF\xBB\xBF"; // utf-8 BOM
			//echo utf8_decode($archivo);
			echo $archivo;
			exit();
			//echo $tabla;
		}

		if($op==101){//archivo estudiantes por periodo CACES calculado periodo 1718
			if($p==null){
				$p=$this->academico_model->get_periodo_activado();
			}
			$p1=$p-2;
			$periodos=$this->academico_model->getPeriodos($p1);
			$periodo=$periodos[0];
			$fi=explode('-',$periodo['FECHA_INICIO']);
			$ff=explode('-',$periodo['FECHA_FIN']);
			$nombre='Estudiantes_Matr�cula_Periodo_Academico_'.$fi[0].'_'.$ff[0].'.csv';
			$this->db->select("DISTINCT(cli.NRO_DOCUMENTO) as CEDULA, cli.TIPO_DOCUMENTO, carr.CODIGO, s.SEDE, m.ID_PERSONA, m.ID_CARRERA, m.ID_NIVEL, n.NIVEL, pf.SUELDO_PROMEDIO, m.ESTADO",false);
			$this->db->from('acad_matricula m');
			$this->db->join('tab_clientes_naturales b', 'b.ID_PERSONA= m.ID_PERSONA','LEFT');
			$this->db->join('tab_clientes cli', 'cli.ID_CLIENTE=b.ID_CLIENTE','LEFT');
			$this->db->join('acad_carrera carr', 'carr.ID_CARRERA=m.id_CARRERA','LEFT');
			$this->db->join('acad_nivel n', 'n.ID_NIVEL=m.ID_NIVEL','LEFT');
			$this->db->join('acad_grupo g', 'g.ID_GRUPO=m.ID_GRUPO','LEFT');
			$this->db->join('acad_sede s', 's.ID_SEDE=g.ID_SEDE','LEFT');
			$this->db->join('tab_personas_financiero pf', 'pf.id_PERSONA=m.id_PERSONA ','LEFT');
			$this->db->where_in('m.ESTADO',array('0','2'));//filtrar matriculas normales y retirados
			$this->db->where('m.ID_PERIODO_ACADEMICO',$p);
			$this->db->where('m.ID_NIVEL>',2);
			$query= $this->db->get();
			$ds= $query->result_array();
			$ciudad_carrera=array('540413A01-L-1701','540416A01-L-1701','550725E01-L-1701','551022D-L-01','551041B-L-01');
			$nivel[1]='1RO';
			$nivel[2]='2DO';
			$nivel[3]='3RO';
			$nivel[4]='4TO';
			$nivel[5]='5TO';
			$nivel[6]='6TO';

			$niveltexto[1]='PRIMERO';
			$niveltexto[2]='SEGUNDO';
			$niveltexto[3]='TERCERO';
			$niveltexto[4]='CUARTO';
			$niveltexto[5]='QUINTO';
			$niveltexto[6]='SEXTO';

			//sumatoria de creditos carreras por nivel
			$query1 = $this->db->query("SELECT ID_CARRERA,NIVEL_MATERIA,SUM(CREDITOS_MATERIA) as CREDITOS_NIVEL FROM `acad_carrera_materia` WHERE ESTADO=1 GROUP BY ID_CARRERA,NIVEL_MATERIA");
			$ds1 = $query1->result_array();
			foreach($ds1 as $nc){
				$creditos_carrera_nivel[$nc['ID_CARRERA']][$nc['NIVEL_MATERIA']]=$nc['CREDITOS_NIVEL'];
			}

			$filtro=array('�','�','�','�','�','�','�','�','�','�','�','�');
			$filtro1=array('a','A','e','E','i','I','o','O','u','U','n','N');
			$archivo='CODIGO_IES;';
			$archivo.='CODIGO_CARRERA;';
			$archivo.='CIUDAD_CARRERA;';
			$archivo.='TIPO_IDENTIFICACION;';
			$archivo.='IDENTIFICACION;';
			$archivo.='TOTAL_CREDITOS_APROBADOS;';
			$archivo.='CREDITOS_APROBADOS;';
			$archivo.='TIPO_MATRICULA;';
			$archivo.='PARALELO;';
			$archivo.='NIVEL_ACADEMICO;';
			$archivo.='DURACION_PERIODO_ACADEMICO;';
			$archivo.='NUM_MATERIAS_SEGUNDA_MATRICULA;';
			$archivo.='NUM_MATERIAS_TERCERA_MATRICULA;';
			$archivo.='PERDIDA_GRATUIDAD;';
			$archivo.='PENSION_DIFERENCIADA;';
			$archivo.='PLAN_CONTINGENCIA;';
			$archivo.='INGRESO_TOTAL_HOGAR;';
			$archivo.='ORIGEN_RECURSOS_ESTUDIOS;';
			$archivo.='TERMINO_PERIODO;';
			$archivo.='TOTAL_HORAS_APROBADAS;';
			$archivo.='HORAS_APROBADAS_PERIODO;';
			$archivo.='MONTO_AYUDA_ECONOMICA;';
			$archivo.='MONTO_CREDITO_EDUCATIVO;';
			$archivo.='ESTADO';
			$archivo.=PHP_EOL;
			foreach($ds as $k=>$v){
				if($v['TIPO_DOCUMENTO']=='C'){
					$v['TIPO_DOCUMENTO']='CEDULA';
				}else{
					$v['TIPO_DOCUMENTO']='PASAPORTE';
				}
				if(isset($nivel[$v['ID_NIVEL']-2])){
					$nivel_academico=$nivel[($v['ID_NIVEL']-2)];
				}else{
					$nivel_academico='';
				}
				//sumatoria de creditos hasta el periodo de consulta
			  	$query1 = $this->db->query("select sum(CREDITOS_MATERIA) as credito_aprobado from acad_estudiante_carrera_materia where ID_PERSONA=".$v['ID_PERSONA']." and ID_CARRERA=".$v['ID_CARRERA']." and ID_ESTUDIANTE_CARRERA_MATERIA in (select ID_ESTUDIANTE_CARRERA_MATERIA from acad_calificacion where ID_TIPO_CALIFICACION=6 and ESTADO_CALIFICACION=1) and ID_PERIODO_ACADEMICO<=".$p);
			  	$ds1 = $query1->row_array();
			  	if($ds1==NULL){
				  	$credito=0;
			  	}else{
					$credito=$ds1['credito_aprobado'];
			  	}
			  	$query2 = $this->db->query("select sum(CREDITOS_MATERIA) as credito_aprobado from acad_estudiante_carrera_materia where ID_PERSONA=".$v['ID_PERSONA']." and ID_CARRERA=".$v['ID_CARRERA']." and (FUE_CONVALIDADA=1 or FUE_HOMOLOGADA=1 or FUE_HISTORIAL=1) and ID_PERIODO_ACADEMICO<=".$p);
			  	$ds2 = $query2->row_array();
			  	if($ds2==NULL){
			  	}else{
				  	$credito+=$ds2['credito_aprobado'];
			  	}
				$creditoPeriodo=0;
				if(isset($creditos_carrera_nivel[$v['ID_CARRERA']][$v['ID_NIVEL']])){
					$creditosBorrar=$creditos_carrera_nivel[$v['ID_CARRERA']][$v['ID_NIVEL']]*2;
					if($credito>$creditosBorrar){
						$credito=$credito-$creditosBorrar;
						if($credito>$creditos_carrera_nivel[$v['ID_CARRERA']][$v['ID_NIVEL']]){
							$creditoPeriodo=$creditos_carrera_nivel[$v['ID_CARRERA']][$v['ID_NIVEL']];
						}else{
							$creditoPeriodo=$credito;
						}
					}else{
						$creditoPeriodo=$credito;
					}
				}

				//sumatoria de materias arrastre en el periodo de consulta
				$segunda=0;
				$tercera=0;

				$ingreso='NO REGISTRA';
				if($v['SUELDO_PROMEDIO']>0 and $v['SUELDO_PROMEDIO']<=400){
					$ingreso='RANGO1';
				}elseif($v['SUELDO_PROMEDIO']>400){
					for($j=2;$j<=10;$j++){
						$base=400*$j;
						if($v['SUELDO_PROMEDIO']<=$base or $j==10){
							$ingreso='RANGO'.$j;
							break;
						}
					}
				}
				$terminoPeriodo='SI';
				if($v['ESTADO']==2){
					$terminoPeriodo='NO';
				}
				$estadoMatricula='NO APLICA';
				/*if($v['ESTADO']==2){
					$estadoMatricula='RETIRADO';
				}else{
					//verificar si estudiante aprobo pensum carrera
					$materias  = $this->academico_model->get_materias_estudiante($v['ID_PERSONA'],0,1,$p,$v['ID_CARRERA']);//todas las materias del alumno hasta el periodo de consulta
					$pensum_nivel = $this->academico_model->getMateriasPorCarreraNivel($v['ID_CARRERA'],$v['ID_NIVEL']);
					$todo_nivel   = 0;
					foreach($pensum_nivel as $pn){
						foreach($materias as $m){
							$aprobo=0;
							if($m['FUE_HOMOLOGADA']==1 or $m['FUE_CONVALIDADA']==1 or $m['FUE_HISTORIAL']==1){
								$aprobo=1;
							}else{
								$estado=$this->academico_model->get_calificaciones(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$m['ID_ESTUDIANTE_CARRERA_MATERIA'],'ID_TIPO_CALIFICACION'=>6));
								if(isset($estado[0]) and $estado[0]['ESTADO_CALIFICACION']==1){
									$aprobo=1;
								}
							}
							if($pn['ID_CARRERA_MATERIA']==$m['ID_CARRERA_MATERIA'] and $aprobo==1){
								$todo_nivel=$todo_nivel+1;
							}
						}
					}
					$estadoMatricula='NO APROBADO';
					$aun_por_aprobar  = count($pensum_nivel)-$todo_nivel;
					if($aun_por_aprobar<=2){
						$estadoMatricula='APROBADO';
					}
				}*/
				$ciudad_c='DISTRITO METROPOLITANO DE QUITO';
				if(in_array($v['CODIGO'],$ciudad_carrera)){
					$ciudad_c='QUITO';
				}

				$fila='2249;';
				$fila.=$v['CODIGO'].';';
				//$fila.=$v['SEDE'].';';
				$fila.=$ciudad_c.';';
				$fila.=$v['TIPO_DOCUMENTO'].';';
				$fila.=$v['CEDULA'].';';
				$fila.=$credito.';';
				$fila.=$creditoPeriodo.';';
				$fila.='ORDINARIA;';
				$fila.=$niveltexto[($v['ID_NIVEL']-2)].';';
				$fila.=$nivel_academico.';';
				$fila.='25;';
				$fila.=$segunda.';';
				$fila.=$tercera.';';
				$fila.='NO;';
				$fila.='NO;';
				$fila.='NO;';
				$fila.=$ingreso.';';
				$fila.='NO REGISTRA;';
				$fila.=$terminoPeriodo.';';
				$fila.=$credito.';';
				$fila.=$creditoPeriodo.';';
				$fila.='0;';
				$fila.='0;';
				$fila.=$estadoMatricula;
				//$archivo.=utf8_encode($fila).PHP_EOL;
				$archivo.=$fila.PHP_EOL;
			}
			header('Content-Encoding: UTF-8');
			header('Content-Description: File Transfer');
			header('Content-Type: application/octet-stream');
			header('Content-Disposition: attachment; filename='.$nombre);
			header('Content-Transfer-Encoding: binary');
			header('Expires: 0');
			header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
			header('Pragma: public');
			//echo "\xEF\xBB\xBF"; // utf-8 BOM
			//echo utf8_decode($archivo);
			echo $archivo;
			exit();
			//echo $tabla;
		}

		if($op==11){//archivo estudiantes practicas pre-profesionales CACES
			if($p==null){
				$p=$this->academico_model->get_periodo_activado();
			}
			$periodos=$this->academico_model->getPeriodos($p);
			$periodo=$periodos[0];
			$fi=explode('-',$periodo['FECHA_INICIO']);
			$ff=explode('-',$periodo['FECHA_FIN']);
			//$nombre='Estudiantes_Practicas_Preprofesionales_'.$fi[0].'_'.$ff[0].'.csv';
			//$nombre='Estudiantes_Practicas_Preprofesionales_'.date('Y_m_d').'.csv';
			$nombre='Estudiantes_Practicas_Preprofesionales_'.date('Y_m_d').'.xls';
			$this->db->select("DISTINCT(cli.NRO_DOCUMENTO) as CEDULA, cli.TIPO_DOCUMENTO, carr.CODIGO, pv.*",false);
			$this->db->from('tit_evaluacion_practica_vinculacion pv');
			$this->db->join('tab_clientes_naturales b', 'b.ID_PERSONA= pv.ID_PERSONA','LEFT');
			$this->db->join('tab_clientes cli', 'cli.ID_CLIENTE=b.ID_CLIENTE','LEFT');
			$this->db->join('acad_carrera carr', 'carr.ID_CARRERA=pv.ID_CARRERA','LEFT');
			//$this->db->where_in('pv.ID_PERIODO_ACADEMICO',array(11,12));
			$this->db->where_in('pv.ID_PERIODO_ACADEMICO',array(3,4));
			//$this->db->where('pv.ID_PERIODO_ACADEMICO',$p);
			$this->db->where('pv.TIPO',1);//tipo practicas preprofesionales
			$query= $this->db->get();
			$ds= $query->result_array();
			$filtro=array('�','�','�','�','�','�','�','�','�','�','�','�');
			$filtro1=array('a','A','e','E','i','I','o','O','u','U','n','N');
			$ciudad_carrera=array('540413A01-L-1701','540416A01-L-1701','550725E01-L-1701','551022D-L-01','551041B-L-01');
			/*$archivo='CODIGO_IES;';
			$archivo.='CODIGO_CARRERA;';
			$archivo.='CIUDAD_CARRERA;';
			$archivo.='TIPO_IDENTIFICACION;';
			$archivo.='IDENTIFICACION;';
			$archivo.='NOMBRE_INSTITUCION;';
			$archivo.='TIPO_INSTITUCION;';
			$archivo.='FECHA_INICIO;';
			$archivo.='FECHA_FIN;';
			$archivo.='NUMERO_HORAS;';
			$archivo.='CAMPO_ESPECIFICO;';
			$archivo.='IDENTIFICACION_DOCENTE_TUTOR';
			$archivo.=PHP_EOL;*/
			$archivo='<table><tr>';
			$archivo.='<td>CODIGO_IES</td>';
			$archivo.='<td>CODIGO_CARRERA</td>';
			$archivo.='<td>CIUDAD_CARRERA</td>';
			$archivo.='<td>TIPO_IDENTIFICACION</td>';
			$archivo.='<td>IDENTIFICACION</td>';
			$archivo.='<td>NOMBRE_INSTITUCION</td>';
			$archivo.='<td>TIPO_INSTITUCION</td>';
			$archivo.='<td>FECHA_INICIO</td>';
			$archivo.='<td>FECHA_FIN</td>';
			$archivo.='<td>NUMERO_HORAS</td>';
			$archivo.='<td>CAMPO_ESPECIFICO</td>';
			$archivo.='<td>IDENTIFICACION_DOCENTE_TUTOR</td>';
			$archivo.='</tr>';
			foreach($ds as $k=>$v){
				if($v['TIPO_DOCUMENTO']=='C'){
					$v['TIPO_DOCUMENTO']='CEDULA';
				}else{
					$v['TIPO_DOCUMENTO']='PASAPORTE';
				}
				/*//consultar sede
				$query1 = $this->db->query("select SEDE from acad_sede where ID_SEDE in (select ID_SEDE from acad_grupo where ID_GRUPO in (select ID_GRUPO from acad_matricula where ID_PERSONA=".$v['ID_PERSONA']." and ID_CARRERA=".$v['ID_CARRERA']." and ID_PERIODO_ACADEMICO=".$v['ID_PERIODO_ACADEMICO']."))");
			  	$ds1 = $query1->row_array();
			  	if($ds1==NULL){
				  	$sede='NO APLICA';
			  	}else{
				  	$sede=$ds1['SEDE'];
			  	}*/
				//consultar cam� especifico
				$campoEspecifico='';
				$query1 = $this->db->query("select NOMBRE from acad_carrera where CODIGO='".$v['CODIGO']."'");
			  	$ds1 = $query1->row_array();
			  	if($ds1!=NULL){
					if(stripos($ds1['NOMBRE'],'administra')!== false or stripos($ds1['NOMBRE'],'marketin')!== false or stripos($ds1['NOMBRE'],'venta')!== false){
						$campoEspecifico='1-4A';
					}elseif(stripos($ds1['NOMBRE'],'riesgo')!== false){
						$campoEspecifico='2-10A';
					}elseif(stripos($ds1['NOMBRE'],'transporte')!== false){
						$campoEspecifico='4-10A';
					}elseif(stripos($ds1['NOMBRE'],'calidad')!== false){
						$campoEspecifico='2-7A';
					}
			  	}

				$ciudad_c='DISTRITO METROPOLITANO DE QUITO';
				if(in_array($v['CODIGO'],$ciudad_carrera)){
					$ciudad_c='QUITO';
				}

				/*$fila='2249;';
				$fila.=$v['CODIGO'].';';
				//$fila.=$sede.';';
				$fila.=$ciudad_c.';';
				$fila.=$v['TIPO_DOCUMENTO'].';';
				$fila.=$v['CEDULA'].';';
				$fila.=$v['EMPRESA'].';';
				$fila.='OTRO;';
				$fila.=$v['FECHA_INICIO'].';';
				$fila.=$v['FECHA_FIN'].';';
				$fila.=$v['NUM_HORAS'].';';
				$fila.=$campoEspecifico.';';
				$fila.='1706895552';
				//$archivo.=utf8_encode($fila).PHP_EOL;
				$archivo.=$fila.PHP_EOL;*/
				$archivo.='<tr>';
				$archivo.='<td>2249</td>';
				$archivo.='<td style="mso-number-format:\'@\';">'.$v['CODIGO'].'</td>';
				$archivo.='<td>'.$ciudad_c.'</td>';
				$archivo.='<td>'.$v['TIPO_DOCUMENTO'].'</td>';
				$archivo.='<td style="mso-number-format:\'@\';">'.$v['CEDULA'].'</td>';
				$archivo.='<td>'.$v['EMPRESA'].'</td>';
				$archivo.='<td>'.'OTRO</td>';
				$archivo.='<td style="mso-number-format:\'@\';">'.$v['FECHA_INICIO'].'</td>';
				$archivo.='<td style="mso-number-format:\'@\';">'.$v['FECHA_FIN'].'</td>';
				$archivo.='<td>'.$v['NUM_HORAS'].'</td>';
				$archivo.='<td>'.$campoEspecifico.'</td>';
				$archivo.='<td>1706895552</td>';
				$archivo.='</tr>';
			}

			$archivo.='</table>';
			header("Content-Type: application/vnd.ms-excel");
			header("Content-Disposition: filename=".$nombre);
			header("Pragma: no-cache");
			header("Expires: 0");
			//echo utf8_encode($tabla);
			//echo $tabla;
			echo utf8_decode($archivo);
			/*header('Content-Encoding: UTF-8');
			header('Content-Description: File Transfer');
			header('Content-Type: application/octet-stream');
			header('Content-Disposition: attachment; filename='.$nombre);
			header('Content-Transfer-Encoding: binary');
			header('Expires: 0');
			header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
			header('Pragma: public');
			//echo "\xEF\xBB\xBF"; // utf-8 BOM
			//echo utf8_decode($archivo);
			echo $archivo;
			exit();*/
		}

		if($op==12){//archivo estudiantes graduados CACES
			if($p==null){
				$p=$this->academico_model->get_periodo_activado();
			}
			$periodos=$this->academico_model->getPeriodos($p);
			$periodo=$periodos[0];
			$fi=explode('-',$periodo['FECHA_INICIO']);
			$ff=explode('-',$periodo['FECHA_FIN']);
			//$nombre='Graduados_'.$fi[0].'_'.$ff[0].'.csv';
			$nombre='Graduados_'.date('Y_m_d').'.csv';
			$this->db->select("DISTINCT(cli.NRO_DOCUMENTO) as CEDULA, CONCAT_WS(' ',p.PRIMER_NOMBRE, p.SEGUNDO_NOMBRE) as NOMBRES, p.APELLIDO_PATERNO, p.APELLIDO_MATERNO, cli.TIPO_DOCUMENTO, p.FECHA_NACIMIENTO, p.GENERO, td.DISCAPACIDAD,p.TIPO_DISCAPACIDAD, p.PORCENTAJE_DICAPACIDAD, p.CARNET_CONADIS, cont.CORREO_ELECTRONICO, pai_n.PAIS as PAIS_NAC, carr.CODIGO, CONCAT_WS(' ',cont.DIRECCION_CALLE_PRINCIPAL,cont.DIRECCION_NUMERO,cont.DIRECCION_CALLE_SECUNDARIA1) as DIRECCION, p.CORREO_INSTITUCIONAL, g.*",false);
			$this->db->from('tit_graduacion g');
			$this->db->join('tab_personas p', 'p.ID_PERSONA=g.ID_PERSONA ','LEFT');
			$this->db->join('tab_clientes_naturales b', 'b.ID_PERSONA= g.ID_PERSONA','LEFT');
			$this->db->join('tab_clientes cli', 'cli.ID_CLIENTE=b.ID_CLIENTE','LEFT');
			$this->db->join('tab_contactos cont', 'cont.id_CLIENTE=cli.id_cliente and cont.ESTADO=1','LEFT');
			$this->db->join('tab_paises pai_n', 'pai_n.ID_PAIS=p.ID_PAIS_NACIMIENTO','LEFT');
			$this->db->join('tab_tipos_discapacidad td', 'td.ID_TIPO_DISCAPACIDAD=p.TIPO_DISCAPACIDAD','LEFT');
			$this->db->join('acad_carrera carr', 'carr.ID_CARRERA=g.id_CARRERA','LEFT');
			$this->db->where('cont.ID_TIPO_CONTACTO',2);
			//$this->db->where('m.ESTADO','0');//filtrar matriculas normales
			//$this->db->where_in('m.ESTADO',array('0','2'));//filtrar matriculas normales y retirados
			//$this->db->where_in('g.ID_PERIODO_GRADUACION',array(11,12));
			$this->db->where_in('g.ID_PERIODO_GRADUACION',array(3,4));
			//$this->db->where('g.ID_PERIODO_GRADUACION',$p);
			$this->db->where('g.CALIFICACION_GRADO>=',7);
			$this->db->order_by("APELLIDO_PATERNO","asc");
			$query= $this->db->get();
			$ds= $query->result_array();
			$discapacidades[1]='INTELECTUAL';
			$discapacidades[2]='FISICA MOTORA';
			$discapacidades[3]='VISUAL';
			$discapacidades[4]='AUDITIVA';
			$discapacidades[5]='MENTAL PSICOSOCIAL';
			$discapacidades[6]='NINGUNA';
			$discapacidades[7]='NINGUNA';
			$ciudad_carrera=array('540413A01-L-1701','540416A01-L-1701','550725E01-L-1701','551022D-L-01','551041B-L-01');
			$filtro=array('�','�','�','�','�','�','�','�','�','�','�','�');
			$filtro1=array('a','A','e','E','i','I','o','O','u','U','n','N');
			$archivo='CODIGO_IES;';
			$archivo.='CODIGO_CARRERA;';
			$archivo.='CIUDAD_CARRERA;';
			$archivo.='TIPO_IDENTIFICACION;';
			$archivo.='IDENTIFICACION;';
			$archivo.='PRIMER_APELLIDO;';
			$archivo.='SEGUNDO_APELLIDO;';
			$archivo.='NOMBRES;';
			$archivo.='SEXO;';
			$archivo.='FECHA_NACIMIENTO;';
			$archivo.='PAIS_ORIGEN;';
			$archivo.='DISCAPACIDAD;';
			$archivo.='NUMERO_CONADIS;';
			$archivo.='DIRECCION;';
			$archivo.='EMAIL_PERSONAL;';
			$archivo.='EMAIL_INSTITUCIONAL;';
			$archivo.='FECHA_INICIO_PRIMER_NIVEL;';
			$archivo.='FECHA_INGRESO_CONVALIDACION;';
			$archivo.='FECHA_GRADUACION;';
			$archivo.='MECANISMO_TITULACION';
			$archivo.=PHP_EOL;
			foreach($ds as $k=>$v){
				if($v['TIPO_DOCUMENTO']=='C'){
					$v['TIPO_DOCUMENTO']='CEDULA';
				}else{
					$v['TIPO_DOCUMENTO']='PASAPORTE';
				}
				if($v['FECHA_NACIMIENTO']!=NULL and $v['FECHA_NACIMIENTO']!='0000-00-00'){
					$f=explode('-',$v['FECHA_NACIMIENTO']);
					$v['FECHA_NACIMIENTO']=$f[2].'/'.$f[1].'/'.$f[0];
				}else{
					$v['FECHA_NACIMIENTO']='';
				}
				if($v['GENERO']=='F'){
					$v['GENERO']='MUJER';
				}else{
					$v['GENERO']='HOMBRE';
				}
				if(isset($discapacidades[$v['TIPO_DISCAPACIDAD']]) and $discapacidades[$v['TIPO_DISCAPACIDAD']]!='NINGUNA'){
					$v['TIPO_DISCAPACIDAD']=$discapacidades[$v['TIPO_DISCAPACIDAD']];
				}else{
					$v['TIPO_DISCAPACIDAD']='NINGUNA';
					$v['CARNET_CONADIS']='';
				}
				//consultar sede
				$query1 = $this->db->query("select SEDE from acad_sede where ID_SEDE in (select ID_SEDE from acad_grupo where ID_GRUPO in (select ID_GRUPO from acad_matricula where ID_PERSONA=".$v['ID_PERSONA']." and ID_CARRERA=".$v['ID_CARRERA']." order by ID_MATRICULA DESC))");
				//$query1 = $this->db->query("select SEDE from acad_sede where ID_SEDE in (select ID_SEDE from acad_grupo where ID_GRUPO in (select ID_GRUPO from acad_matricula where ID_PERSONA=".$v['ID_PERSONA']." and ID_CARRERA=".$v['ID_CARRERA']." and ID_PERIODO_ACADEMICO=".$p."))");
			  	$ds1 = $query1->row_array();
			  	if($ds1==NULL){
				  	$sede='NO APLICA';
			  	}else{
				  	$sede=$ds1['SEDE'];
			  	}
				if($v['PAIS_NAC']==NULL or $v['PAIS_NAC']==''){
					$v['PAIS_NAC']='NO DEFINIDO';
				}
				if($v['APELLIDO_MATERNO']==NULL or $v['APELLIDO_MATERNO']==''){
					$v['APELLIDO_MATERNO']='';
				}

				$fecha_inicio='';
				$fecha_convalida='';
				$this->db->select("p.FECHA_INICIO");
				$this->db->from('acad_matricula m');
				$this->db->join('acad_periodo_academico p', 'p.ID_PERIODO_ACADEMICO=m.ID_PERIODO_ACADEMICO');
				//$this->db->where('m.ESTADO','0');//filtrar matriculas normales
				$this->db->where_in('m.ESTADO',array('0','2'));//filtrar matriculas normales y retirados
				//$this->db->where('m.ID_PERIODO_ACADEMICO<',11);
				$this->db->where('m.ID_NIVEL',1);
				$this->db->where('m.ID_PERSONA',$v['ID_PERSONA']);
				$this->db->where('m.ID_CARRERA',$v['ID_CARRERA']);
				$query1= $this->db->get();
				$ds1= $query1->row_array();
				if($ds1==NULL){
					//buscar si se registro primer nivel pot historial
					$this->db->select("p.FECHA_INICIO,ecm.NIVEL_MATERIA");
					$this->db->from('acad_estudiante_carrera_materia ecm');
					$this->db->join('acad_periodo_academico p', 'p.ID_PERIODO_ACADEMICO=ecm.ID_PERIODO_ACADEMICO');
					$this->db->where('ecm.FUE_HISTORIAL',1);
					//$this->db->where('ecm.ID_PERIODO_ACADEMICO<',11);
					//$this->db->where('ecm.NIVEL_MATERIA',1);
					$this->db->where('ecm.ID_PERSONA',$v['ID_PERSONA']);
					$this->db->where('ecm.ID_CARRERA',$v['ID_CARRERA']);
					$query3= $this->db->get();
					$ds3= $query3->result_array();
					//$ds3= $query3->row_array();
					//if($ds3==NULL){
					if(count($ds3)<=0){
						$this->db->select("p.FECHA_INICIO");
						$this->db->from('acad_matricula m');
						$this->db->join('acad_periodo_academico p', 'p.ID_PERIODO_ACADEMICO=m.ID_PERIODO_ACADEMICO');
						//$this->db->where('m.ESTADO','0');//filtrar matriculas anuladas
						$this->db->where_in('m.ESTADO',array('0','2'));//filtrar matriculas normales y retirados
						//$this->db->where('m.ID_PERIODO_ACADEMICO<',11);
						$this->db->where('m.ID_PERSONA',$v['ID_PERSONA']);
						$this->db->where('m.ID_CARRERA',$v['ID_CARRERA']);
						$this->db->order_by('m.ID_MATRICULA','ASC');
						$query2= $this->db->get();
						$ds2= $query2->row_array();
						$f=explode('-',$ds2['FECHA_INICIO']);
						$fecha_convalida=$f[2].'/'.$f[1].'/'.$f[0];
					}else{
						foreach($ds3 as $r3){
							if($r3['NIVEL_MATERIA']==1){
								$f=explode('-',$r3['FECHA_INICIO']);
								$fecha_inicio=$f[2].'/'.$f[1].'/'.$f[0];
								break;
							}
						}
						//$f=explode('-',$ds3['FECHA_INICIO']);
						//$fecha_inicio=$f[2].'/'.$f[1].'/'.$f[0];
					}
				}else{
					$f=explode('-',$ds1['FECHA_INICIO']);
					$fecha_inicio=$f[2].'/'.$f[1].'/'.$f[0];
				}
				//cosulta fecha grado
				$query4 = $this->db->query("select FECHA from tit_examenes_estudiantes where ID_GRADUACION=".$v['ID_GRADUACION']." and ESTADO=1 order by ID_EXAMEN_ESTUDIANTE DESC");
			  	$ds4 = $query4->row_array();
				if($ds4==NULL){
					$f_temp=explode(' ',$v['FECHA_ACTUALIZACION']);
					if($f_temp[0]=='0000-00-00'){
						$f_temp=explode(' ',$v['FECHA_CREACION']);
					}
				}else{
					$f_temp[0]=$ds4['FECHA'];
				}

				$f=explode('-',$f_temp[0]);
				$fecha_grado=$f[2].'/'.$f[1].'/'.$f[0];
				$tipo='EXAMEN COMPLEXIVO';
				if($v['TIPO_EXAMEN']==2){
					$tipo='TRABAJO TITULACION';
				}

				$ciudad_c='DISTRITO METROPOLITANO DE QUITO';
				if(in_array($v['CODIGO'],$ciudad_carrera)){
					$ciudad_c='QUITO';
				}

				$fila='2249;';
				$fila.=$v['CODIGO'].';';
				//$fila.=$sede.';';
				$fila.=$ciudad_c.';';
				$fila.=$v['TIPO_DOCUMENTO'].';';
				$fila.=$v['CEDULA'].';';
				//$fila.=str_replace($filtro,$filtro1,utf8_decode($v['APELLIDO_PATERNO'])).';';
				$fila.=trim($v['APELLIDO_PATERNO']).';';
				$fila.=trim($v['APELLIDO_MATERNO']).';';
				$fila.=trim($v['NOMBRES']).';';
				$fila.=$v['GENERO'].';';
				$fila.=$v['FECHA_NACIMIENTO'].';';
				$fila.=$v['PAIS_NAC'].';';
				$fila.=$v['TIPO_DISCAPACIDAD'].';';
				$fila.=$v['CARNET_CONADIS'].';';
				$fila.=trim($v['DIRECCION']).';';
				$fila.=strtolower($v['CORREO_ELECTRONICO']).';';
				$fila.=$v['CORREO_INSTITUCIONAL'].';';
				$fila.=$fecha_inicio.';';
				$fila.=$fecha_convalida.';';
				$fila.=$fecha_grado.';';
				$fila.=$tipo;
				$archivo.=utf8_encode($fila).PHP_EOL;
				//$archivo.=$fila.PHP_EOL;
			}
			header('Content-Encoding: UTF-8');
			header('Content-Description: File Transfer');
			header('Content-Type: application/octet-stream');
			header('Content-Disposition: attachment; filename='.$nombre);
			header('Content-Transfer-Encoding: binary');
			header('Expires: 0');
			header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
			header('Pragma: public');
			//echo "\xEF\xBB\xBF"; // utf-8 BOM
			echo utf8_decode($archivo);
			//echo $archivo;
			exit();
			//echo $tabla;
		}

		if($op==13){//archivo estudiantes becas CACES
			if($p==null){
				$p=$this->academico_model->get_periodo_activado();
			}
			$periodos=$this->academico_model->getPeriodos($p);
			$periodo=$periodos[0];
			$fi=explode('-',$periodo['FECHA_INICIO']);
			$ff=explode('-',$periodo['FECHA_FIN']);
			//$nombre='Estudiantes_'.$fi[0].'_'.$ff[0].'.csv';
			$nombre='Estudiantes_Becas_'.date('Y_m_d').'.csv';
			$this->db->select("DISTINCT(cli.NRO_DOCUMENTO) as CEDULA, cli.TIPO_DOCUMENTO, carr.CODIGO, p.ID_PERSONA, m.ID_CARRERA, p.ID_TIPO_BECA, be.TIPO_BECA, be.PORCENTAJE, cli.ID_CLIENTE",false);
			$this->db->from('acad_matricula m');
			$this->db->join('tab_personas p', 'p.id_PERSONA=m.id_PERSONA ','LEFT');
			$this->db->join('tab_clientes_naturales b', 'b.id_PERSONA= m.id_PERSONA','LEFT');
			$this->db->join('tab_clientes cli', 'cli.ID_CLIENTE=b.ID_CLIENTE','LEFT');
			$this->db->join('tab_tipos_becas be', 'be.ID_TIPO_BECA=p.ID_TIPO_BECA','LEFT');
			$this->db->join('acad_carrera carr', 'carr.ID_CARRERA=m.id_CARRERA','LEFT');
			//$this->db->join('acad_grupo g', 'g.ID_GRUPO=m.ID_GRUPO','LEFT');
			//$this->db->join('acad_sede s', 's.ID_SEDE=g.ID_SEDE','LEFT');
			//$this->db->where('m.ESTADO','0');//filtrar matriculas normales
			$this->db->where_in('m.ESTADO',array('0','2'));//filtrar matriculas normales y retirados
			$this->db->where_in('m.ID_PERIODO_ACADEMICO',array(11,12));
			//$this->db->where('m.ID_PERIODO_ACADEMICO',$p);
			$this->db->where('p.ID_TIPO_BECA>',0);//filtrar estudiantes con beca
			$this->db->order_by("CEDULA","asc");
			$query= $this->db->get();
			$ds= $query->result_array();
			$filtro=array('�','�','�','�','�','�','�','�','�','�','�','�');
			$filtro1=array('a','A','e','E','i','I','o','O','u','U','n','N');
			$ciudad_carrera=array('540413A01-L-1701','540416A01-L-1701','550725E01-L-1701','551022D-L-01','551041B-L-01');
			$archivo='CODIGO_IES;';
			$archivo.='CODIGO_CARRERA;';
			$archivo.='CIUDAD_CARRERA;';
			$archivo.='TIPO_IDENTIFICACION;';
			$archivo.='IDENTIFICACION;';
			$archivo.='CODIGO_BECA;';
			$archivo.='ANIO;';
			$archivo.='FECHA_INICIO_PERIODO_ACADEMICO;';
			$archivo.='FECHA_FIN_PERIODO_ACADEMICO;';
			$archivo.='TIPO_AYUDA;';
			$archivo.='MOTIVO_BECA;';
			$archivo.='OTRO_MOTIVO;';
			$archivo.='MONTO_RECIBIDO;';
			$archivo.='PORCENTAJE_VALOR_ARANCEL;';
			$archivo.='PORCENTAJE_MANUTENCION;';
			$archivo.='TIPO_FINANCIAMIENTO';
			$archivo.=PHP_EOL;
			foreach($ds as $k=>$v){
				//consultar sede
				$query1 = $this->db->query("select SEDE from acad_sede where ID_SEDE in (select ID_SEDE from acad_grupo where ID_GRUPO in (select ID_GRUPO from acad_matricula where ID_PERSONA=".$v['ID_PERSONA']." and ID_CARRERA=".$v['ID_CARRERA']." and ESTADO in (0,2)))");
			  	$ds1 = $query1->row_array();
			  	if($ds1==NULL){
				  	$sede='QUITO';
			  	}else{
				  	$sede=$ds1['SEDE'];
			  	}
				if($v['TIPO_DOCUMENTO']=='C'){
					$v['TIPO_DOCUMENTO']='CEDULA';
				}else{
					$v['TIPO_DOCUMENTO']='PASAPORTE';
				}

				$fecha_inicio='';
				$this->db->select("p.FECHA_INICIO");
				$this->db->from('acad_matricula m');
				$this->db->join('acad_periodo_academico p', 'p.ID_PERIODO_ACADEMICO=m.ID_PERIODO_ACADEMICO');
				//$this->db->where('m.ESTADO','0');//filtrar matriculas normales
				$this->db->where_in('m.ESTADO',array('0','2'));//filtrar matriculas normales y retirados
				//$this->db->where('m.ID_PERIODO_ACADEMICO<',11);
				$this->db->where('m.ID_NIVEL',1);
				$this->db->where('m.ID_PERSONA',$v['ID_PERSONA']);
				$this->db->where('m.ID_CARRERA',$v['ID_CARRERA']);
				$query1= $this->db->get();
				$ds1= $query1->row_array();
				if($ds1==NULL){
					//buscar si se registro primer nivel pot historial
					$this->db->select("p.FECHA_INICIO,ecm.NIVEL_MATERIA");
					$this->db->from('acad_estudiante_carrera_materia ecm');
					$this->db->join('acad_periodo_academico p', 'p.ID_PERIODO_ACADEMICO=ecm.ID_PERIODO_ACADEMICO');
					$this->db->where('ecm.FUE_HISTORIAL',1);
					//$this->db->where('ecm.ID_PERIODO_ACADEMICO<',11);
					//$this->db->where('ecm.NIVEL_MATERIA',1);
					$this->db->where('ecm.ID_PERSONA',$v['ID_PERSONA']);
					$this->db->where('ecm.ID_CARRERA',$v['ID_CARRERA']);
					$query3= $this->db->get();
					$ds3= $query3->result_array();
					//$ds3= $query3->row_array();
					//if($ds3==NULL){
					if(count($ds3)<=0){
						$this->db->select("p.FECHA_INICIO");
						$this->db->from('acad_matricula m');
						$this->db->join('acad_periodo_academico p', 'p.ID_PERIODO_ACADEMICO=m.ID_PERIODO_ACADEMICO');
						//$this->db->where('m.ESTADO','0');//filtrar matriculas anuladas
						$this->db->where_in('m.ESTADO',array('0','2'));//filtrar matriculas normales y retirados
						//$this->db->where('m.ID_PERIODO_ACADEMICO<',11);
						$this->db->where('m.ID_PERSONA',$v['ID_PERSONA']);
						$this->db->where('m.ID_CARRERA',$v['ID_CARRERA']);
						$this->db->order_by('m.ID_MATRICULA','ASC');
						$query2= $this->db->get();
						$ds2= $query2->row_array();
						$f=explode('-',$ds2['FECHA_INICIO']);
						$fecha_inicio=$f[2].'/'.$f[1].'/'.$f[0];
					}else{
						foreach($ds3 as $r3){
							if($r3['NIVEL_MATERIA']==1){
								$f=explode('-',$r3['FECHA_INICIO']);
								$fecha_inicio=$f[2].'/'.$f[1].'/'.$f[0];
								break;
							}
						}
						//$f=explode('-',$ds3['FECHA_INICIO']);
						//$fecha_inicio=$f[2].'/'.$f[1].'/'.$f[0];
					}
				}else{
					$f=explode('-',$ds1['FECHA_INICIO']);
					$fecha_inicio=$f[2].'/'.$f[1].'/'.$f[0];
				}
				$cod_beca='';
				$tipo_ayuda='';
				$motivo_ayuda='';
				$otro_motivo='';
				$valor_beca='';
				if($v['ID_TIPO_BECA']!=NULL){
					$cod_beca=$v['ID_TIPO_BECA'];
					$tipo_ayuda='BECA PARCIAL';
					if($v['PORCENTAJE']>=100){
						$tipo_ayuda='BECA COMPLETA';
					}
					if(stripos($v['TIPO_BECA'],'socio')!==false){
						$motivo_ayuda='SITUACION SOCIO ECONOMICO';
					}elseif(stripos($v['TIPO_BECA'],'excelen')!==false){
						$motivo_ayuda='EXCELENCIA ACADEMICA';
					}elseif(stripos($v['TIPO_BECA'],'capacidad')!==false){
						$motivo_ayuda='DISCAPACIDAD';
					}elseif(stripos($v['TIPO_BECA'],'depor')!==false){
						$motivo_ayuda='DEPORTIVA';
					}else{
						$motivo_ayuda='OTRO';
						$otro_motivo=$v['TIPO_BECA'];
					}
					//consultar valor beca
					$query1 = $this->db->query("select SUM(DESCUENTO_BECA) as beca_total from fac_clientes_rubros_cuota where ID_CLIENTE_RUBRO in (select ID_CLIENTE_RUBRO from fac_clientes_rubros where ID_RUBRO in (16,17,19) and ID_CLIENTE=".$v['ID_CLIENTE']." and ID_CARRERA=".$v['ID_CARRERA'].")");

					$ds1 = $query1->row_array();
					if($ds1!=NULL){
						$valor_beca=round($ds1['beca_total'],2);
					}
				}
				if($fecha_inicio==''){
					$anio=date('Y');
				}else{
					$fi=explode('/',$fecha_inicio);
					$anio=$fi[2];
				}

				$ciudad_c='DISTRITO METROPOLITANO DE QUITO';
				if(in_array($v['CODIGO'],$ciudad_carrera)){
					$ciudad_c='QUITO';
				}

				$fila='2249;';
				$fila.=$v['CODIGO'].';';
				$fila.=$ciudad_c.';';
				$fila.=$v['TIPO_DOCUMENTO'].';';
				$fila.=$v['CEDULA'].';';
				$fila.=$cod_beca.';';
				$fila.=$anio.';';
				$fila.=';';
				$fila.=';';
				$fila.=$tipo_ayuda.';';
				$fila.=$motivo_ayuda.';';
				$fila.=$otro_motivo.';';
				$fila.=$valor_beca.';';
				$fila.='100;';
				$fila.='0;';
				$fila.='IES';
				$archivo.=$fila.PHP_EOL;
			}
			header('Content-Encoding: UTF-8');
			header('Content-Description: File Transfer');
			header('Content-Type: application/octet-stream');
			header('Content-Disposition: attachment; filename='.$nombre);
			header('Content-Transfer-Encoding: binary');
			header('Expires: 0');
			header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
			header('Pragma: public');
			//echo "\xEF\xBB\xBF"; // utf-8 BOM
			//echo utf8_decode($archivo);
			echo $archivo;
			exit();
			//echo $tabla;
		}

		if($op==14){//estudiantes con referido matriculados por primera vez
			$nombre='Estudiantes_Referidos';
			$periodos=$this->academico_model->getPeriodos($p);
			$periodo=$periodos[0];

			$this->db->select('cli.NRO_DOCUMENTO, CONCAT_WS(" ",p.APELLIDO_PATERNO, p.APELLIDO_MATERNO, p.PRIMER_NOMBRE, p.SEGUNDO_NOMBRE) as ESTUDIANTE, c.NOMBRE as CARRERA, g.NOMBRE as GRUPO, s.SEDE, n.NIVEL, p.REFERIDO, m.ESTADO, m.ID_PERIODO_ACADEMICO, m.ID_PERSONA',false);
			$this->db->from('acad_matricula m');
			$this->db->join('tab_personas p', 'p.ID_PERSONA = m.ID_PERSONA');
			$this->db->join('tab_clientes_naturales cn','cn.ID_PERSONA=p.ID_PERSONA');
			$this->db->join('tab_clientes cli','cli.ID_CLIENTE=cn.ID_CLIENTE');
			$this->db->join('acad_carrera c', 'c.ID_CARRERA = m.ID_CARRERA');
			$this->db->join('acad_nivel n', 'n.ID_NIVEL = m.ID_NIVEL');
			$this->db->join('acad_grupo g', 'g.ID_GRUPO = m.ID_GRUPO','left');
			$this->db->join('acad_sede s', 's.ID_SEDE = g.ID_SEDE','left');
			$this->db->where('m.ID_PERIODO_ACADEMICO', $p);
			//$this->db->where('m.ESTADO', 0);
			$this->db->order_by("ESTUDIANTE", "asc");
			$query = $this->db->get();
			$ds = $query->result_array();

			$filtro=array('�','�','�','�','�','�','�','�','�','�','�','�');
			$filtro1=array('a','A','e','E','i','I','o','O','u','U','n','N');
			$tabla='<table>';
			$tabla.='<tr>';
			$tabla.='<td colspan="9"><strong>PERIODO '.$periodo['FECHA_INICIO'].' / '.$periodo['FECHA_FIN'].'</strong></td>';
			$tabla.='</tr>';
			$tabla.='</table>';
			$tabla.='<table>';
			$tabla.='<tr>';
			$tabla.='<td>#</td>';
			$tabla.='<td>IDENTIFICACION</td>';
			$tabla.='<td>ESTUDIANTE</td>';
			$tabla.='<td>CARRERA</td>';
			$tabla.='<td>GRUPO</td>';
			$tabla.='<td>NIVEL</td>';
			$tabla.='<td>REFERIDO</td>';
			$tabla.='<td>SEDE</td>';
			$tabla.='<td>ESTADO</td>';
			$tabla.='</tr>';
			$estados=array('Activo', 'Anulado', 'Retirado', 'PreMatricula');
			$i=1;
			foreach($ds as $k=>$v){
				$this->db->select('ID_MATRICULA');
				$this->db->from('acad_matricula');
				$this->db->where('ID_PERIODO_ACADEMICO <', $v['ID_PERIODO_ACADEMICO']);
				$this->db->where('ID_PERSONA', $v['ID_PERSONA']);
				$query1 = $this->db->get();
				$ds1 = $query1->result_array();
				if(count($ds1)<=0){
					$tabla.='<tr>';
					$tabla.='<td>'.$i.'</td>';
					$tabla.='<td style="mso-number-format:\'@\';">'.$v['NRO_DOCUMENTO'].'</td>';
					$tabla.='<td>'.$v['ESTUDIANTE'].'</td>';
					$tabla.='<td>'.$v['CARRERA'].'</td>';
					$tabla.='<td>'.$v['GRUPO'].'</td>';
					$tabla.='<td align="center">'.$v['NIVEL'].'</td>';
					$tabla.='<td>'.$v['REFERIDO'].'</td>';
					$tabla.='<td align="center">'.$v['SEDE'].'</td>';
					$tabla.='<td>'.$estados[$v['ESTADO']].'</td>';
					$tabla.='</tr>';
					$i++;
				}
			}

			$tabla.='<table>';
			header("Content-Type: application/vnd.ms-excel");
			header("Content-Disposition: filename=".$nombre.".xls");
			header("Pragma: no-cache");
			header("Expires: 0");
			//echo utf8_encode($tabla);
			echo utf8_decode($tabla);
			//echo $tabla;
		}

		if($op==15){//archivo estudiantes creados en el sistema
			$nombre='Estudiantes_Deming_'.date('Y_m_d').'.xls';
			$this->db->select("DISTINCT(cli.NRO_DOCUMENTO) as CEDULA, CONCAT_WS(' ',p.PRIMER_NOMBRE, p.SEGUNDO_NOMBRE) as NOMBRES, p.APELLIDO_PATERNO, p.APELLIDO_MATERNO, cli.TIPO_DOCUMENTO, p.FECHA_NACIMIENTO, p.GENERO, td.DISCAPACIDAD,p.TIPO_DISCAPACIDAD, p.PORCENTAJE_DICAPACIDAD, p.CARNET_CONADIS, cont.CORREO_ELECTRONICO, tgc.GRUPO_CULTURAL AS ETNIA, pai_n.PAIS as PAIS_NAC, CONCAT_WS(' ',cont.DIRECCION_CALLE_PRINCIPAL,cont.DIRECCION_NUMERO,cont.DIRECCION_CALLE_SECUNDARIA1) as DIRECCION, p.CORREO_INSTITUCIONAL, pai_r.PAIS as PAIS_REC, pro_r.PROVINCIA as PROVINCIA_REC, can_r.CANTON as CANTON_REC, cont.CELULAR, pf.NUM_MIEMBROS_FAMILIA, tc.TIPO_COLEGIO, p.ID_GRUPO_CULTURAL, p.ID_PERSONA",false);
			$this->db->from('tab_personas p');
			$this->db->join('tab_clientes_naturales b', 'b.id_PERSONA= p.Id_PERSONA');
			$this->db->join('tab_clientes cli', 'cli.ID_CLIENTE=b.ID_CLIENTE');
			$this->db->join('tab_contactos cont', 'cont.id_CLIENTE=cli.id_cliente and cont.ESTADO=1','LEFT');
			$this->db->join('tab_grupos_culturales tgc', 'tgc.ID_GRUPO_CULTURAL =p.ID_GRUPO_CULTURAL ','LEFT');
			$this->db->join('tab_paises pai_n', 'pai_n.ID_PAIS=p.ID_PAIS_NACIMIENTO','LEFT');
			$this->db->join('tab_paises pai_r', 'pai_r.ID_PAIS=cont.ID_PAIS','LEFT');
			$this->db->join('tab_provincias pro_r', 'pro_r.ID_PROVINCIA=cont.ID_PROVINCIA','LEFT');
			$this->db->join('tab_cantones can_r', 'can_r.ID_CANTON=cont.ID_CANTON','LEFT');
			$this->db->join('tab_tipos_discapacidad td', 'td.ID_TIPO_DISCAPACIDAD=p.TIPO_DISCAPACIDAD','LEFT');
			$this->db->join('tab_personas_financiero pf', 'pf.id_PERSONA=p.ID_PERSONA ','LEFT');
			$this->db->join('tab_tipos_colegio tc', 'tc.ID_TIPO_COLEGIO=p.EST_ID_TIPO_COLEGIO ','LEFT');
			$this->db->where('cont.ID_TIPO_CONTACTO',2);
			$this->db->where('p.OCUPACION',1);
			$this->db->order_by("APELLIDO_PATERNO","asc");
			$query= $this->db->get();
			$ds= $query->result_array();
			$discapacidades[1]='INTELECTUAL';
			$discapacidades[2]='FISICA MOTORA';
			$discapacidades[3]='VISUAL';
			$discapacidades[4]='AUDITIVA';
			$discapacidades[5]='MENTAL PSICOSOCIAL';
			$discapacidades[6]='NINGUNA';
			$discapacidades[7]='NINGUNA';
			$etnias[1]='MESTIZO/A';
			$etnias[2]='BLANCO/A';
			$etnias[3]='INDIGENA';
			$etnias[4]='NEGRO/A';
			$etnias[5]='MONTUBIO/A';
			$etnias[6]='OTRO';
			$etnias[7]='AFROECUATORIANO/A';
			$filtro=array('�','�','�','�','�','�','�','�','�','�','�','�');
			$filtro1=array('a','A','e','E','i','I','o','O','u','U','n','N');
			$ciudad_carrera=array('540413A01-L-1701','540416A01-L-1701','550725E01-L-1701','551022D-L-01','551041B-L-01');
			$archivo='<table><tr>';
			$archivo.='<td>TIPO_IDENTIFICACION</td>';
			$archivo.='<td>IDENTIFICACION</td>';
			$archivo.='<td>PRIMER_APELLIDO</td>';
			$archivo.='<td>SEGUNDO_APELLIDO</td>';
			$archivo.='<td>NOMBRES</td>';
			$archivo.='<td>SEXO</td>';
			$archivo.='<td>FECHA_NACIMIENTO</td>';
			$archivo.='<td>PAIS_ORIGEN</td>';
			$archivo.='<td>DISCAPACIDAD</td>';
			$archivo.='<td>PORCENTAJE_DISCAPACIDAD</td>';
			$archivo.='<td>NUMERO_CONADIS</td>';
			$archivo.='<td>ETNIA</td>';
			$archivo.='<td>NACIONALIDAD</td>';
			$archivo.='<td>DIRECCION</td>';
			$archivo.='<td>EMAIL_PERSONAL</td>';
			$archivo.='<td>EMAIL_INSTITUCIONAL</td>';
			$archivo.='<td>PAIS_RESIDENCIA</td>';
			$archivo.='<td>PROVINCIA_RESIDENCIA</td>';
			$archivo.='<td>CANTON_RESIDENCIA</td>';
			$archivo.='<td>CELULAR</td>';
			$archivo.='<td>TIPO_COLEGIO</td>';
			$archivo.='</tr>';
			foreach($ds as $k=>$v){
				if($v['TIPO_DOCUMENTO']=='C'){
					$v['TIPO_DOCUMENTO']='CEDULA';
				}else{
					$v['TIPO_DOCUMENTO']='PASAPORTE';
				}
				if($v['FECHA_NACIMIENTO']!=NULL and $v['FECHA_NACIMIENTO']!='0000-00-00'){
					$f=explode('-',$v['FECHA_NACIMIENTO']);
					$v['FECHA_NACIMIENTO']=$f[2].'/'.$f[1].'/'.$f[0];
				}else{
					$v['FECHA_NACIMIENTO']='';
				}
				if($v['GENERO']=='F'){
					$v['GENERO']='MUJER';
				}else{
					$v['GENERO']='HOMBRE';
				}
				if(isset($discapacidades[$v['TIPO_DISCAPACIDAD']]) and $discapacidades[$v['TIPO_DISCAPACIDAD']]!='NINGUNA'){
					$v['TIPO_DISCAPACIDAD']=$discapacidades[$v['TIPO_DISCAPACIDAD']];
				}else{
					$v['TIPO_DISCAPACIDAD']='NINGUNA';
					$v['CARNET_CONADIS']='';
					$v['PORCENTAJE_DICAPACIDAD']=0;
				}
				if(isset($etnias[$v['ID_GRUPO_CULTURAL']])){
					$v['ETNIA']=$etnias[$v['ID_GRUPO_CULTURAL']];
				}else{
					$v['ETNIA']='NO REGISTRA';
				}
				$nacionalidad='NO APLICA';
				if($v['ETNIA']=='INDIGENA'){
					$nacionalidad='NO REGISTRA';
				}
				if($v['PAIS_NAC']==NULL or $v['PAIS_NAC']==''){
					$v['PAIS_NAC']='NO DEFINIDO';
				}
				if($v['APELLIDO_MATERNO']==NULL or $v['APELLIDO_MATERNO']==''){
					$v['APELLIDO_MATERNO']='';
				}
				if($v['PAIS_REC']==NULL or $v['PAIS_REC']==''){
					$v['PAIS_REC']='NO DEFINIDO';
				}
				if($v['PAIS_REC']!='ECUADOR' or $v['PROVINCIA_REC']==NULL or $v['PROVINCIA_REC']==''){
					$v['PROVINCIA_REC']='NO APLICA';
				}
				if($v['PAIS_REC']!='ECUADOR' or $v['CANTON_REC']==NULL or $v['CANTON_REC']==''){
					$v['CANTON_REC']='NO APLICA';
				}
				if($v['CELULAR']!=NULL and $v['CELULAR']!=''){
					$v['CELULAR']=sprintf("%'.010d",str_replace('-','',$v['CELULAR']));
				}

				if($v['TIPO_COLEGIO']==NULL or $v['TIPO_COLEGIO']==''){
					$v['TIPO_COLEGIO']='NO REGISTRA';
				}
				$fila='<td>'.$v['TIPO_DOCUMENTO'].'</td>';
				$fila.='<td style="mso-number-format:\'@\';">'.$v['CEDULA'].'</td>';
				$fila.='<td>'.trim($v['APELLIDO_PATERNO']).'</td>';
				$fila.='<td>'.trim($v['APELLIDO_MATERNO']).'</td>';
				$fila.='<td>'.trim($v['NOMBRES']).'</td>';
				$fila.='<td>'.$v['GENERO'].'</td>';
				$fila.='<td style="mso-number-format:\'@\';">'.$v['FECHA_NACIMIENTO'].'</td>';
				$fila.='<td>'.$v['PAIS_NAC'].'</td>';
				$fila.='<td>'.$v['TIPO_DISCAPACIDAD'].'</td>';
				$fila.='<td>'.$v['PORCENTAJE_DICAPACIDAD'].'</td>';
				$fila.='<td>'.$v['CARNET_CONADIS'].'</td>';
				$fila.='<td>'.$v['ETNIA'].'</td>';
				$fila.='<td>'.$nacionalidad.'</td>';
				$fila.='<td>'.trim($v['DIRECCION']).'</td>';
				$fila.='<td>'.strtolower($v['CORREO_ELECTRONICO']).'</td>';
				$fila.='<td>'.$v['CORREO_INSTITUCIONAL'].'</td>';
				$fila.='<td>'.$v['PAIS_REC'].'</td>';
				$fila.='<td>'.$v['PROVINCIA_REC'].'</td>';
				$fila.='<td>'.$v['CANTON_REC'].'</td>';
				$fila.='<td style="mso-number-format:\'@\';">'.$v['CELULAR'].'</td>';
				$fila.='<td>'.$v['TIPO_COLEGIO'].'</td>';
				$archivo.=$fila.'</tr>';
			}

			$archivo.='</table>';
			header("Content-Type: application/vnd.ms-excel");
			header("Content-Disposition: filename=".$nombre);
			header("Pragma: no-cache");
			header("Expires: 0");
			//echo utf8_encode($tabla);
			//echo $tabla;
			echo utf8_decode($archivo);
		}

		//reporte estudiantes con valores incorrectos en tabla amortizacion
		if($op==16){
			$nombre='Estudiantes_Valores_Incorrectos';
			$id_usuario=$this->session->userdata('loggeado')['ID_USUARIO'];
			$id_carrera = null;
			$id_nivel = null;
			$id_periodo = $p;
			$grupo = null;
			$id_persona=null;
			if($this->session->userdata('loggeado')['ID_PERFIL']==5){
				$id_persona = $this->session->userdata('loggeado')['ID_PERSONA'];
			}
			$bidimensional= $this->academico_model->listaAlumnosCuotas($id_carrera, $id_nivel, $id_periodo,$grupo,$id_persona);
			if($this->session->userdata('loggeado')['ID_PERFIL']==12 and $grupo==''){//filtrar grupos para coordinadores
				$datos_temp=array();
				$vector_grupos=array();
				$usuario_grupos=$this->usuarios_model->buscar_usuario_grupos(array('ID_USUARIO'=>$id_usuario));
				if($usuario_grupos!=NULL){
					$vector_grupos=explode('+',$usuario_grupos['GRUPOS']);
				}
				foreach($bidimensional[8] as $k=>$dat){
					if(in_array($dat,$vector_grupos)){
						$datos_temp[0][]=$bidimensional[0][$k];
						$datos_temp[1][]=$bidimensional[1][$k];
						$datos_temp[2][]=$bidimensional[2][$k];
						$datos_temp[3][]=$bidimensional[3][$k];
						$datos_temp[4][]=$bidimensional[4][$k];
						$datos_temp[5][]=$bidimensional[5][$k];
						$datos_temp[6][]=$bidimensional[6][$k];
						$datos_temp[7][]=$bidimensional[7][$k];
						$datos_temp[8][]=$dat;
					}
				}
				$bidimensional=$datos_temp;
			}
			$arreglo=array('alumno'=>$bidimensional[0],
							'cuotas'=>$bidimensional[1],
							'estado_matricula'=>$bidimensional[2],
							'becas'=>$bidimensional[3],
							'id'=>$bidimensional[4],
							'facturas'=>$bidimensional[5],
							'id_periodo'=>$id_periodo,
							'descuentos'=>$bidimensional[6],
							'recibido'=>$bidimensional[7],
							'grupo'=>$bidimensional[8]
							);
			$tabla='<table>';
			$tabla.='<tr>';
			$tabla.='<td>ESTUDIANTE</td>';
			$tabla.='<td>VALOR TOTAL</td>';
			$tabla.='<td>VALOR CUOTAS</td>';
			$tabla.='<td>DESCUENTO</td>';
			$tabla.='<td>VALOR PAGADO</td>';
			$tabla.='</tr>';
			$i=0;
			foreach($arreglo['alumno'] as $k=>$alumno){
				$valor=0;
				$total=0;
				foreach($arreglo['cuotas'][$k] as $k1=>$v){
					$valor+=$v['VALOR'];
					$total+=$v['TOTAL'];
				}
				if($valor>$arreglo['recibido'][$k]){
					$tabla.='<tr>';
					$tabla.='<td style="mso-number-format:\'@\';">'.$alumno.'</td>';
					$tabla.='<td>'.$total.'</td>';
					$tabla.='<td>'.$valor.'</td>';
					$tabla.='<td>'.$arreglo['descuentos'][$k].'</td>';
					$tabla.='<td>'.$arreglo['recibido'][$k].'</td>';
					$tabla.='</tr>';
					/*if($arreglo['id'][$k]==2882){
						$sql='update fac_cuotas_generales set POR_PAGAR=PRECIO_CUOTA, MONTO_VERIFICADO=0,TOTAL_PAGADO=0, ESTADO=0 where ID_CLIENTE='.$arreglo['id'][$k].' and ID_PERIODO_ACADEMICO='.$p;
						$this->db->query($sql);
						$sql='update fac_clientes_rubros_cuota set VALOR_SALDADO_POR_PAGO=0, ESTADO=1 where ID_CLIENTE_RUBRO in (select ID_CLIENTE_RUBRO from fac_clientes_rubros where ID_CLIENTE='.$arreglo['id'][$k].' and PERIODO_VIGENTE='.$p.')';
						$this->db->query($sql);
						$this->automatica_model->gestionar_amortizacion($arreglo['id'][$k], $arreglo['recibido'][$k]);
						$this->automatica_model->asignar_monto_verificado_a_cliente(0, $arreglo['id'][$k]);
					}*/
					$i++;
				}
			}
			$tabla.='<table>';
			header("Content-Type: application/vnd.ms-excel");
			header("Content-Disposition: filename=".$nombre.".xls");
			header("Pragma: no-cache");
			header("Expires: 0");
			//echo utf8_encode($tabla);
			echo utf8_decode($tabla);
		}

		if($op==17){//estudiantes pendiente supletorio con bloqueo financiero masivo
			$nombre='Estudiantes_supletorio';
			$periodos=$this->academico_model->getPeriodos($p);
			$periodo=$periodos[0];

			$clases_examenes=array();
			$dat=array();
			$estado_examen='-1';//pendiente
			//$dat['FECHA_INICIO_SUPLETORIO']=trim($this->input->post('fechai'));
			//$dat['FECHA_FIN_SUPLETORIO']=trim($this->input->post('fechaf'));
			$estadosExamen=array(-1=>'Pendiente',0=>'En Proceso',1=>'Realizado');
			$fecha_actual=date_create(date('Y-m-d H:i:s'));
			$listado=array();
			$clases_examenes=$this->academico_model->buscarGruposExamenesEstudiantes($dat);
			foreach($clases_examenes as $k=>$ce){
				$clases_examenes[$k]['ETAPA']=0;
				$clases_examenes[$k]['TIPO']='';
				//verifico si ya tiene supletorio personalizado el estudiante
				$clases_examenes[$k]['ESTADO']='Pendiente';
				$clases_examenes[$k]['CALIFICACION']='';
				$examenes_estudiante=$this->academico_model->buscarExamenesEstudiantes(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$ce['ID_ESTUDIANTE_CARRERA_MATERIA'],'ETAPA'=>'0'));
				if(count($examenes_estudiante)>0){
					$ee=$examenes_estudiante[0];
					if($ee['TIPO_EXAMEN']==0 and $ee['ESTADO']==1){
						$clases_examenes[$k]['ESTADO']='Realizado';
						$clases_examenes[$k]['CALIFICACION']=number_format(floatval($ee['CALIFICACION']),2);
					}elseif($ee['TIPO_EXAMEN']==0 and $ee['ESTADO']==0){
						$clases_examenes[$k]['ESTADO']='En Proceso';
					}elseif($ee['TIPO_EXAMEN']==1){
						$clases_examenes[$k]['ESTADO']='Impreso';
					}
				}
				$clases_examenes[$k]['FECHA_HORA_SUPLETORIO']=NULL;
				$dato_contenido=$this->academico_model->getContenidoMateria($ce['ID_CARRERA_MATERIA'],$ce['ID_PERIODO_ACADEMICO']);
				if($dato_contenido!=NULL){
					if($dato_contenido['DURACION_EXAMEN']<=0){
						$plantilla=$this->academico_model->buscar_plantillas(array('ID_PLANTILLA'=>$dato_contenido['ID_PLANTILLA']));
						$dato_contenido['DURACION_EXAMEN']=$plantilla[0]['DURACION_EXAMEN'];
					}
					if($dato_contenido['DURACION_EXAMEN']>0 and $ce['FECHA_SUPLETORIO']!=NULL and $ce['FECHA_SUPLETORIO']!='0000-00-00' and $ce['HORA_SUPLETORIO']!='' and $ce['HORA_SUPLETORIO']!=NULL){
						$fi_examen = date_create($ce['FECHA_SUPLETORIO'].' '.$ce['HORA_SUPLETORIO'].':00');
						$fi_examen->modify('+ '.$dato_contenido['DURACION_EXAMEN'].' minute');
						$clases_examenes[$k]['FECHA_HORA_SUPLETORIO']=$ce['FECHA_SUPLETORIO'].'<br>'.$ce['HORA_SUPLETORIO'].' a '.$fi_examen->format('H:i');
					}
				}
				$clases_examenes[$k]['FECHA_APLAZADO']='';
				$examenes_estudiante_aplazados=$this->academico_model->buscarExamenesEstudiantesAplazados(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$ce['ID_ESTUDIANTE_CARRERA_MATERIA'],'ETAPA'=>'0'));
				if(count($examenes_estudiante_aplazados)>0){//si tiene fecha aplazado
					$aplazo=$examenes_estudiante_aplazados[0];
					$clases_examenes[$k]['FECHA_APLAZADO']=$aplazo['FECHA_APLAZADO'].'<br>'.$aplazo['HORA_APLAZADO'];
					if(isset($dato_contenido['DURACION_EXAMEN']) and $dato_contenido['DURACION_EXAMEN']>0 and $aplazo['FECHA_APLAZADO']!=NULL and $aplazo['FECHA_APLAZADO']!='0000-00-00' and $aplazo['HORA_APLAZADO']!='' and $aplazo['HORA_APLAZADO']!=NULL){
						$ff_aplazo = date_create($aplazo['FECHA_APLAZADO'].' '.$aplazo['HORA_APLAZADO'].':00');
						if($aplazo['DURACION_EXAMEN']!=NULL and $aplazo['DURACION_EXAMEN']>0){
							$ff_aplazo->modify('+ '.$aplazo['DURACION_EXAMEN'].' minute');
						}else{
							$ff_aplazo->modify('+ '.$dato_contenido['DURACION_EXAMEN'].' minute');
						}
						$clases_examenes[$k]['FECHA_APLAZADO'].=' a '.$ff_aplazo->format('H:i');
					}
				}

				//verificar que este en supletorio
				$dats['ID_ESTUDIANTE_CARRERA_MATERIA']=$ce['ID_ESTUDIANTE_CARRERA_MATERIA'];
				$dats['ID_TIPO_CALIFICACION']=6;
				$supletorio=$this->academico_model->buscar_calificacion($dats);
				if(count($supletorio)>0){
					if($supletorio[0]['ESTADO_CALIFICACION']==0 or count($examenes_estudiante)>0){
						//$listado[]=$clases_examenes[$k];
						if(isset($estado_examen) and $estado_examen!=''){
							if($clases_examenes[$k]['ESTADO']==$estadosExamen[$estado_examen]){
								$listado[]=$clases_examenes[$k];
							}
						}else{
							$listado[]=$clases_examenes[$k];
						}
					}
				}

			}
			$estados[0]='Inactivo';
			$estados[1]='Activo';
			$estados[2]='Bloqueo Financiero';
			$estados[3]='Bloqueo Financiero Masivo';
			$filtro=array('�','�','�','�','�','�','�','�','�','�','�','�');
			$filtro1=array('a','A','e','E','i','I','o','O','u','U','n','N');
			$tabla='<table>';
			$tabla.='<tr>';
			$tabla.='<td colspan="9"><strong>PERIODO '.$periodo['FECHA_INICIO'].' / '.$periodo['FECHA_FIN'].'</strong></td>';
			$tabla.='</tr>';
			$tabla.='</table>';
			$tabla.='<table>';
			$tabla.='<tr>';
			$tabla.='<td>#</td>';
			$tabla.='<td>NRO.DOCUMENTO</td>';
			$tabla.='<td>ESTUDIANTE</td>';
			$tabla.='<td>CARRERA</td>';
			$tabla.='<td>GRUPO</td>';
			$tabla.='<td>MATERIA</td>';
			$tabla.='<td>FECHA SUPLETORIO</td>';
			$tabla.='<td>ESTADO</td>';
			$tabla.='</tr>';
			$i=1;
			foreach($listado as $k=>$v){
				$usuario=$this->usuarios_model->obtener_datos_usuario_por_persona($v['ID_PERSONA']);
				if($usuario['ESTADO']==3){
					$tabla.='<tr>';
					$tabla.='<td>'.$i.'</td>';
					$tabla.='<td style="mso-number-format:\'@\';">'.$v['NRO_DOCUMENTO'].'</td>';
					$tabla.='<td>'.$v['NOMBRE_ESTUDIANTE'].'</td>';
					$tabla.='<td>'.$v['CARRERA'].'</td>';
					$tabla.='<td>'.$v['GRUPO'].'</td>';
					$tabla.='<td align="center">'.$v['MATERIA'].'</td>';
					$tabla.='<td>'.$v['FECHA_SUPLETORIO'].'</td>';
					$tabla.='<td>'.$estados[$usuario['ESTADO']].'</td>';
					$tabla.='</tr>';
					$i++;
				}
			}

			$tabla.='<table>';
			/*header("Content-Type: application/vnd.ms-excel");
			header("Content-Disposition: filename=".$nombre.".xls");
			header("Pragma: no-cache");
			header("Expires: 0");*/
			//echo utf8_encode($tabla);
			echo utf8_decode($tabla);
			//echo $tabla;
		}

		//estudiantes de primer nivel de un periodo y estado de matricula del siguiente periodo
		if($op==18){
			$nombre='Estudiantes';
			$estados=array('Activo','Anulado','Retirado','Pre Matricula');
			$id_carrera = null;
			$id_nivel = 1;
			$id_periodo_academico = 16;
			$grupo = null;
			$idUsuarioAcademico=null;
			$datos = $this->academico_model->listaAlumnos($id_carrera, $id_nivel,$id_periodo_academico,$grupo,null,null,array(),$idUsuarioAcademico);
			$id_periodo_actual = 17;
			$tabla='<table>';
			$tabla.='<tr>';
			$tabla.='<td>NRO.DOCUMENTO</td>';
			$tabla.='<td>ESTUDIANTE</td>';
			$tabla.='<td>CARRERA</td>';
			$tabla.='<td>GRUPO</td>';
			$tabla.='<td>CORREO</td>';
			$tabla.='<td>TELËFONO</td>';
			$tabla.='<td>CELULAR</td>';
			$tabla.='<td>MATRICULA</td>';
			$tabla.='</tr>';
			foreach($datos as $d){
				if($d['ESTADO_MATRICULA']==0){
					$matricuala_actual='';
					$m=$this->academico_model->obtener_matricula(array('ID_PERSONA'=>$d['ID_PERSONA'],'ID_PERIODO_ACADEMICO'=>$id_periodo_actual));
					if($m!=NULL){
						$matricuala_actual=$estados[$m['ESTADO']].' ('.$m['ID_NIVEL'].')';
					}
					$tabla.='<tr>';
					$tabla.='<td style="mso-number-format:\'@\';">'.$d['CEDULA'].'</td>';
					$tabla.='<td>'.$d['NOMBRE_COMPLETO'].'</td>';
					$tabla.='<td>'.$d['CARRERA'].'</td>';
					$tabla.='<td>'.$d['GRUPO'].'</td>';
					$tabla.='<td align="center">'.$d['CORREO_ELECTRONICO'].'</td>';
					$tabla.='<td style="mso-number-format:\'@\';">'.$d['TELEFONO'].'</td>';
					$tabla.='<td style="mso-number-format:\'@\';">'.$d['CELULAR'].'</td>';
					$tabla.='<td>'.$matricuala_actual.'</td>';
					$tabla.='</tr>';
				}
			}
			$tabla.='<table>';
			header("Content-Type: application/vnd.ms-excel");
			header("Content-Disposition: filename=".$nombre.".xls");
			header("Pragma: no-cache");
			header("Expires: 0");
			//echo utf8_encode($tabla);
			echo utf8_decode($tabla);
			//echo $tabla;
		}
	}

	//Codigo para actualizar tablaAmortizacion segun valor pagado en facturas
	public function arregloTablaAmortizacion($idCliente,$idPeriodo,$valor,$idCarrera=0,$tipo=0)
	{
		if($idCliente>0 and $idPeriodo>0 and $valor>0){
			if($idCarrera>0){
				$id_persona=$this->academico_model->get_id_persona($idCliente);
				$matricula=$this->academico_model->obtener_matricula(array('ID_PERSONA'=>$id_persona,'ID_PERIODO_ACADEMICO'=>$idPeriodo,'ID_CARRERA'=>$idCarrera));
				$sql='update fac_cuotas_generales set POR_PAGAR=PRECIO_CUOTA, MONTO_VERIFICADO=0,TOTAL_PAGADO=0, ESTADO=0 where ID_MATRICULA='.$matricula['ID_MATRICULA'];
				$this->db->query($sql);
				$sql='update fac_clientes_rubros_cuota set VALOR_SALDADO_POR_PAGO=0, ESTADO=1 where ID_CLIENTE_RUBRO in (select ID_CLIENTE_RUBRO from fac_clientes_rubros where ID_CLIENTE='.$idCliente.' and PERIODO_VIGENTE='.$idPeriodo.' and ID_CARRERA='.$idCarrera.')';
				$this->db->query($sql);
				$this->automatica_model->gestionar_amortizacion($idCliente, $valor, $idPeriodo, $idCarrera);
				$this->automatica_model->asignar_monto_verificado_a_cliente(0, $idCliente, $idPeriodo, $idCarrera);
			}else{
				$sql='update fac_cuotas_generales set POR_PAGAR=PRECIO_CUOTA, MONTO_VERIFICADO=0,TOTAL_PAGADO=0, ESTADO=0 where ID_CLIENTE='.$idCliente.' and ID_PERIODO_ACADEMICO='.$idPeriodo;
				$this->db->query($sql);
				$sql='update fac_clientes_rubros_cuota set VALOR_SALDADO_POR_PAGO=0, ESTADO=1 where ID_CLIENTE_RUBRO in (select ID_CLIENTE_RUBRO from fac_clientes_rubros where ID_CLIENTE='.$idCliente.' and PERIODO_VIGENTE='.$idPeriodo.')';
				$this->db->query($sql);
				$this->automatica_model->gestionar_amortizacion($idCliente, $valor);
				$this->automatica_model->asignar_monto_verificado_a_cliente(0, $idCliente);
			}
			if($tipo==0){
				echo "1";
			}
		}else{
			echo "0";
		}
	}

	//Codigo para colocar o corregir idgrupo en registros de matricula que no posean ese dato
	public function actualizarGrupoMatriculas()
	{
		$this->db->select("*");
		$this->db->from('acad_matricula');
		$this->db->where('ESTADO','0');//filtrar matriculas normales
		$this->db->where('ID_GRUPO','0');//filtrar matriculas sin grupo
		$query= $this->db->get();
		$ds= $query->result_array();
		$actualizados=0;
		foreach($ds as $k=>$v){
			$query1 = $this->db->query("select ID_GRUPO from acad_estudiante_carrera_materia where ID_PERSONA=".$v['ID_PERSONA']." and ID_CARRERA=".$v['ID_CARRERA']." and ID_PERIODO_ACADEMICO=".$v['ID_PERIODO_ACADEMICO']." and NIVEL_MATERIA=".$v['ID_NIVEL']." and ID_GRUPO>0");
			$ds1 = $query1->row_array();
			if($ds1!=NULL){
				$this->db->query("update acad_matricula set ID_GRUPO=".$ds1['ID_GRUPO']." where ID_MATRICULA=".$v['ID_MATRICULA']);
				$actualizados++;
			}
		}
		echo 'Actualizados:'.$actualizados.' de:'.count($ds);
	}

	///////////////////////////////////////////////
	public function notaAsistencia($nota,$estudiante_carrera_materia,$asistencia_justificada)
	{
		$componentes=$this->academico_model->get_componentes();
		foreach($componentes as $v){
			$componente[$v['ID_COMPONENTE']]=$v['VALOR'];
			if($asistencia_justificada==1 and $v['ID_COMPONENTE']==3){
				$componente[$v['ID_COMPONENTE']]=$v['VALOR']*2;//si tiene justificacion asistencia examen vale el doble
			}
			if($asistencia_justificada==1 and $v['ID_COMPONENTE']==2){
				$componente[$v['ID_COMPONENTE']]=0;//si tiene justificacion asistencia taller vale 0
			}
		}
		$op['ID_ESTUDIANTE_CARRERA_MATERIA']=$estudiante_carrera_materia;
		$op['ID_TIPO_CALIFICACION']=1;
		$op['ETAPA']=1;
		$notas_componente=$this->academico_model->get_calificaciones($op);
		$nota_etapa=0;
		$num_componentes=count($componentes);//total componentes
		$num_componentes_calificados=0;//total componentes ya calificados
		foreach($notas_componente as $nc){
			if($nc['CALIFICACION']!=NULL and $nc['CALIFICACION']!=''){
				$nota_etapa=$nota_etapa+$nc['CALIFICACION']*$componente[$nc['ID_COMPONENTE']]/10;
				$num_componentes_calificados=$num_componentes_calificados+1;
			}
			if($nc['ID_COMPONENTE']==3){//calificacion componente examen
				$componente_examen=$nc['CALIFICACION'];
			}
		}
		$asistencia=$nota;
		if($num_componentes==$num_componentes_calificados and $asistencia>=0){
			$v_notamin=$this->academico_model->getparametro(utf8_encode('Nota m�nima'));
			$notamin=$v_notamin['VALOR'];
			$v_notamax=$this->academico_model->getparametro(utf8_encode('Nota m�xima'));
			$notamax=$v_notamax['VALOR'];
			$min_componente_examen=5;
			$v_notamax_asis=$this->academico_model->getparametro('Asistencia');
			$notamax_asis=$v_notamax_asis['VALOR'];
			$v_notamin_asis=$this->academico_model->getparametro('Asistencia minima');
			$notamin_asis=$v_notamin_asis['VALOR'];
			$v_nota_pierde=$this->academico_model->getparametro('Nota pierde');
			$nota_pierde=$v_nota_pierde['VALOR'];
			$estado='';
			//calcular estado materia
			if($nota_etapa>=$notamin && $nota_etapa<=$notamax && $componente_examen>=$min_componente_examen){
				if($asistencia>=$notamax_asis){
					$estado=1;
				}elseif($asistencia>=$notamin_asis && $asistencia<$notamax_asis){
					$estado='0';
				}else{
					$estado=2;
				}
			}elseif(($nota_etapa>=$nota_pierde && $nota_etapa<$notamin) or ($componente_examen<$min_componente_examen && $nota_etapa>=$nota_pierde)){
				if($asistencia>=$notamax_asis){
					$estado='0';
				}elseif($asistencia>=$notamin_asis && $asistencia<$notamax_asis && $componente_examen>=$min_componente_examen){
					$estado='0';
				}else{
					$estado=2;
				}

			}elseif($nota_etapa<$nota_pierde){
				$estado=2;
			}

			//recalculo promedios etapas
			$this->academico_model->calificar_componentes($estudiante_carrera_materia, 1,'','', $nota_etapa,1);

			$supletorio=$this->academico_model->get_supletorio_materia($estudiante_carrera_materia);
			if($supletorio<0){
				$supletorio='';
			}else{
				$nota_etapa=round(($nota_etapa+$supletorio)/2,2);
				if($nota_etapa>=$notamin){
					$estado=1;
				}else{
					$estado=2;
				}
			}
		}else{
			$nota_etapa='';
			$estado='';
			$supletorio='';
		}
		if($estudiante_carrera_materia>0){
			$this->academico_model->updateAsistenciaSupletorioNotaFinal($estudiante_carrera_materia,$asistencia,$supletorio,$nota_etapa,$estado);

			/////enviar supletorio a VLC//////////
			if($estado==0){
				$supletorio_vlc=$this->academico_model->get_estudiante_supletorio($estudiante_carrera_materia);
				if($supletorio_vlc==NULL or $supletorio_vlc['ID_SUPLETORIO_VLC']==0){
					if($supletorio_vlc==NULL){
						$this->academico_model->crear_estudiante_supletorio(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$estudiante_carrera_materia));
					}
					$this->sendSupletorioVlc($estudiante_carrera_materia,'crear');
				}
			}elseif($estado>0 and ($supletorio=='' or $supletorio==NULL)){
				$supletorio_vlc=$this->academico_model->get_estudiante_supletorio($estudiante_carrera_materia);
				if($supletorio_vlc!=NULL){
					$this->sendSupletorioVlc($estudiante_carrera_materia,'borrar');
					$this->academico_model->borrar_estudiante_supletorio($estudiante_carrera_materia);
				}
			}

			$res= 'Registro Realizado';
		}else{
			$res= 'Error:Materia No Existe';
		}
	}

	///////////////////////////////////////////////
	public function correccionAsistencia()
	{
		$this->db->select("*");
		$this->db->from('acad_asistencia_justificacion');
		$this->db->where('ESTADO',1);//filtrar justificaciones aprobadas
		$query= $this->db->get();
		$ds= $query->result_array();
		$actualizados=0;
		foreach($ds as $k=>$v){
			$this->notaAsistencia(100,$v['ID_ESTUDIANTE_CARRERA_MATERIA'],1);
			$actualizados++;
		}
		echo 'Actualizados:'.$actualizados.' de:'.count($ds);
	}

	//////////////////////////////funcion especial/////////////////
	public function recalculoSupletorio()
	{
		$id_periodo_academico = $this->academico_model->get_periodo_activado();
		$sql ="SELECT ID_ESTUDIANTE_CARRERA_MATERIA FROM acad_calificacion WHERE ID_PERIODO_ACADEMICO=".$id_periodo_academico." and ID_TIPO_CALIFICACION=6 and ESTADO_CALIFICACION=2 and CALIFICACION>=6.5 and CALIFICACION<7 and ID_ESTUDIANTE_CARRERA_MATERIA in (SELECT ID_ESTUDIANTE_CARRERA_MATERIA from acad_calificacion where ID_TIPO_CALIFICACION=5 and ID_PERIODO_ACADEMICO=".$id_periodo_academico." and CALIFICACION IS NOT NULL and CALIFICACION!='') and ID_ESTUDIANTE_CARRERA_MATERIA in (SELECT ID_ESTUDIANTE_CARRERA_MATERIA from acad_calificacion where ID_TIPO_CALIFICACION=4 and ID_PERIODO_ACADEMICO=".$id_periodo_academico." and CALIFICACION IS NOT NULL and CALIFICACION>=75)";
        $query = $this->db->query($sql);
        $ds = $query->result_array();
		$ids='';
		foreach($ds as $k=>$v){
			$ids.=$v['ID_ESTUDIANTE_CARRERA_MATERIA'].', ';
		}
		$head = "From: info@binary.ec \r\n";
		@mail("gmales@binary.ec","Supletorios Actualizados",$ids, $head);
		//echo $sql;
        //echo 'IDS: '.$ids;
		$sql ="update acad_calificacion 
set CALIFICACION=7,ESTADO_CALIFICACION=1 
WHERE ID_PERIODO_ACADEMICO=".$id_periodo_academico." and ID_TIPO_CALIFICACION=6 and ESTADO_CALIFICACION=2 and CALIFICACION>=6.5 and CALIFICACION<7 
and ID_ESTUDIANTE_CARRERA_MATERIA in (SELECT ID_ESTUDIANTE_CARRERA_MATERIA from (SELECT ID_ESTUDIANTE_CARRERA_MATERIA from acad_calificacion where ID_TIPO_CALIFICACION=5 and ID_PERIODO_ACADEMICO=".$id_periodo_academico." and CALIFICACION IS NOT NULL and CALIFICACION!='') as temp) 
and ID_ESTUDIANTE_CARRERA_MATERIA in (SELECT ID_ESTUDIANTE_CARRERA_MATERIA from (SELECT ID_ESTUDIANTE_CARRERA_MATERIA from acad_calificacion where ID_TIPO_CALIFICACION=4 and ID_PERIODO_ACADEMICO=".$id_periodo_academico." and CALIFICACION IS NOT NULL and CALIFICACION>=75) as temp1)";
        $this->db->query($sql);
		echo 'Actualizados: '.$this->db->affected_rows();
	}

	////////////////////////////////////////////////////////////////////
	public function sendSupletorioVlc($idEstudianteCarreraMateria,$opcion,$automatico=null)
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if(($idusuario>0 or $automatico==1) and stripos($_SERVER['HTTP_HOST'],'binary.ec')!==FALSE){
		//if($idusuario>0 or $automatico==1){
			$sendSupletorio=array();
			$resultado='';
			$error='';
			$dat_materia=$this->academico_model->get_materias_estudianteAll($idEstudianteCarreraMateria);
			$sendSupletorio['subject_id']=(int)$this->academico_model->get_id_materia_conversion($dat_materia['ID_CARRERA_MATERIA']);
			$sendSupletorio['student_identification_number']=$dat_materia['CEDULA_ESTUDIANTE'];
			if($opcion=='crear'){
				$ch  = curl_init();
				//$url = 'http://localhost/Deming/index.php/academico/academico/recibeMatriculaVlc';
				$url = $this->url_vlc_supletorio_crear;
				curl_setopt($ch, CURLOPT_URL, $url);
				curl_setopt($ch, CURLOPT_POST,true);
				curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($sendSupletorio));
				curl_setopt($ch, CURLOPT_HEADER, false);
				curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json'));
				curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
				curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);
				$resultado = curl_exec($ch);
				$error     = curl_error($ch);
				curl_close($ch);
				//actualizar id de registro en vlc
				if($resultado!=''){
					$res = json_decode($resultado, true);
					if(isset($res['id'])){
						$this->academico_model->actualizar_estudiante_supletorio(array('ID_SUPLETORIO_VLC'=>$res['id']),$idEstudianteCarreraMateria);
					}
				}
			}

			if($opcion=='borrar'){
				$supletorio=$this->academico_model->get_estudiante_supletorio($idEstudianteCarreraMateria);
				if($supletorio!=NULL){
					$ch  = curl_init();
					//$url = 'http://localhost/Deming/index.php/academico/academico/recibeMatriculaVlc';
					$url = $this->url_vlc_supletorio_eliminar.'?id='.$supletorio['ID_SUPLETORIO_VLC'];
					curl_setopt($ch, CURLOPT_URL, $url);
					//curl_setopt($ch, CURLOPT_POST,true);
					curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
					//curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($sendSupletorio));
					curl_setopt($ch, CURLOPT_HEADER, false);
					curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json'));
					curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
					curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);
					$resultado = curl_exec($ch);
					$error     = curl_error($ch);
					curl_close($ch);
				}
				$resultado = 'No existe';
			}
			//log de envio
			$dat['CEDULA']=$dat_materia['CEDULA_ESTUDIANTE'];
			$dat['ESTADO']=$opcion.'_supletorio';
			$dat['MSJ_JSON']=json_encode($sendSupletorio);
			$dat['RESULTADO']=$resultado;
			$dat['ERROR']=$error;
			$dat['FECHA']=date('Y-m-d H:i:s');
			$this->academico_model->crear_log_send_vlc($dat);
		}else{
			//echo 'Acceso Denegado';
		}
	}

	////////////////////////////////////////////////////////////////////
	public function sendRemedialVlc($idEstudianteCarreraMateria,$opcion,$automatico=null)
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if(($idusuario>0 or $automatico==1) and stripos($_SERVER['HTTP_HOST'],'binary.ec')!==FALSE){
		//if($idusuario>0 or $automatico==1){
			$sendRemedial=array();
			$resultado='';
			$error='';
			$dat_materia=$this->academico_model->get_materias_estudianteAll($idEstudianteCarreraMateria);
			$supletorio=$this->academico_model->get_estudiante_supletorio($idEstudianteCarreraMateria);
			$sendRemedial['subject_id']=(int)$this->academico_model->get_id_materia_conversion($dat_materia['ID_CARRERA_MATERIA']);
			$sendRemedial['student_identification_number']=$dat_materia['CEDULA_ESTUDIANTE'];
			if($opcion=='crear'){
				$sendRemedial['exam_date']=$supletorio['FECHA_REMEDIAL'];
				$ch  = curl_init();
				//$url = 'http://localhost/Deming/index.php/academico/academico/recibeMatriculaVlc';
				$url = $this->url_vlc_remedial_crear;
				curl_setopt($ch, CURLOPT_URL, $url);
				curl_setopt($ch, CURLOPT_POST,true);
				curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($sendRemedial));
				curl_setopt($ch, CURLOPT_HEADER, false);
				curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json'));
				curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
				curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);
				$resultado = curl_exec($ch);
				$error     = curl_error($ch);
				curl_close($ch);
				//actualizar id de registro en vlc
				if($resultado!=''){
					$res = json_decode($resultado, true);
					if(isset($res['id'])){
						$this->academico_model->actualizar_estudiante_supletorio(array('ID_REMEDIAL_VLC'=>$res['id']),$idEstudianteCarreraMateria);
					}
				}
			}

			if($opcion=='borrar'){
				if($supletorio!=NULL){
					$ch  = curl_init();
					//$url = 'http://localhost/Deming/index.php/academico/academico/recibeMatriculaVlc';
					$url = $this->url_vlc_remedial_eliminar.'?id='.$supletorio['ID_REMEDIAL_VLC'];
					curl_setopt($ch, CURLOPT_URL, $url);
					//curl_setopt($ch, CURLOPT_POST,true);
					curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
					//curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($sendRemedial));
					curl_setopt($ch, CURLOPT_HEADER, false);
					curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json'));
					curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
					curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);
					$resultado = curl_exec($ch);
					$error     = curl_error($ch);
					curl_close($ch);
				}
				$resultado = 'No existe';
			}
			//log de envio
			$dat['CEDULA']=$dat_materia['CEDULA_ESTUDIANTE'];
			$dat['ESTADO']=$opcion.'_remedial';
			$dat['MSJ_JSON']=json_encode($sendRemedial);
			$dat['RESULTADO']=$resultado;
			$dat['ERROR']=$error;
			$dat['FECHA']=date('Y-m-d H:i:s');
			$this->academico_model->crear_log_send_vlc($dat);
		}else{
			//echo 'Acceso Denegado';
		}
	}

	/////////////////////////////////////////////////////////////////////////////
	public function plantillaContenidos()
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,100)){
			$dat_usuario=$this->session->userdata('loggeado');
			$datos1=$this->perfil_model->cabecera($idusuario);
			$datos['idPeriodo']=$this->academico_model->get_periodo_activado();
			$this->load->view('templates/header',$datos1);
			$this->load->view('plantillaContenidos',$datos);
			$this->load->view('templates/footer');
		}else{
			redirect('admin/login', 'refresh');
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////
	public function buscarPlantillas()
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,100)){
			$data['PLANTILLA']  = $this->input->post('nombre');
			if($this->session->userdata('loggeado')['ID_PERFIL']==18){
				//$data['ID_USUARIO']  = $idusuario;//filtrar para perfil digitador
			}
			$contenido=array();
			$contenidos=$this->academico_model->buscar_contenidos(array('ID_PERIODO_ACADEMICO'=>$this->academico_model->get_periodo_activado()));
			foreach($contenidos as $c){
				$contenido[]=$c['ID_PLANTILLA'];
			}
			$plantillas               = $this->academico_model->buscar_plantillas($data);
			foreach($plantillas as $key => $plantilla) {
				$f['guia']=0;
				$ultimaFecha['guia']['FECHA']='';
				$ultimaFecha['guia']['USUARIO']='';
				$f['examen']=0;
				$ultimaFecha['examen']['FECHA']='';
				$ultimaFecha['examen']['USUARIO']='';
				$f['retos']=0;
				$ultimaFecha['retos']['FECHA']='';
				$ultimaFecha['retos']['USUARIO']='';
				$f['proyectos']=0;
				$ultimaFecha['proyectos']['FECHA']='';
				$ultimaFecha['proyectos']['USUARIO']='';
				if($plantilla['FECHA_ACTUALIZA_GUIA']!=NULL){
					$f['guia']=strtotime($plantilla['FECHA_ACTUALIZA_GUIA']);
					$fa=explode(' ',$plantilla['FECHA_ACTUALIZA_GUIA']);
					$ha=explode(':',$fa[1]);
					$ultimaFecha['guia']['FECHA']=$fa[0].' '.$ha[0].':'.$ha[1];
					$usuario=$this->usuarios_model->obtener_datos_usuario($plantilla['ID_USUARIO_ACTUALIZA_GUIA']);
					if($usuario!=NULL){
						$ultimaFecha['guia']['USUARIO']=$usuario['NOMBRE_COMPLETO'];
					}
				}
				if($plantilla['FECHA_ACTUALIZA_EXAMEN']!=NULL){
					$f['examen']=strtotime($plantilla['FECHA_ACTUALIZA_EXAMEN']);
					$fa=explode(' ',$plantilla['FECHA_ACTUALIZA_EXAMEN']);
					$ha=explode(':',$fa[1]);
					$ultimaFecha['examen']['FECHA']=$fa[0].' '.$ha[0].':'.$ha[1];
					$usuario=$this->usuarios_model->obtener_datos_usuario($plantilla['ID_USUARIO_ACTUALIZA_EXAMEN']);
					if($usuario!=NULL){
						$ultimaFecha['examen']['USUARIO']=$usuario['NOMBRE_COMPLETO'];
					}
				}
				$fretos=$this->academico_model->ultimaActualizacionRetos($plantilla['ID_PLANTILLA']);
				if($fretos!=NULL){
					$f['retos']=strtotime($fretos['FECHA']);
					$ultimaFecha['retos']['FECHA']=substr($fretos['FECHA'], 0, -3);
					$usuario=$this->usuarios_model->obtener_datos_usuario($fretos['ID_USUARIO']);
					if($usuario!=NULL){
						$ultimaFecha['retos']['USUARIO']=$usuario['NOMBRE_COMPLETO'];
					}
				}
				$fproyectos=$this->academico_model->ultimaActualizacionProyectos($plantilla['ID_PLANTILLA']);
				if($fproyectos!=NULL){
					$f['proyectos']=strtotime($fproyectos['FECHA']);
					$ultimaFecha['proyectos']['FECHA']=substr($fproyectos['FECHA'], 0, -3);
					$usuario=$this->usuarios_model->obtener_datos_usuario($fproyectos['ID_USUARIO']);
					if($usuario!=NULL){
						$ultimaFecha['proyectos']['USUARIO']=$usuario['NOMBRE_COMPLETO'];
					}
				}
				$plantillas[$key]['numPreguntas'] = $this->academico_model->numPlantillaPreguntas($plantilla['ID_PLANTILLA']);
				$plantillas[$key]['numRetos']     = $this->academico_model->numPlantillaRetos($plantilla['ID_PLANTILLA']);
				$plantillas[$key]['numProyectos'] = $this->academico_model->numPlantillaProyectos($plantilla['ID_PLANTILLA']);
				$plantillas[$key]['contenido']=0;
				if(in_array($plantilla['ID_PLANTILLA'],$contenido)){
					$plantillas[$key]['contenido']=1;
				}
				arsort($f);//obtener la ultima actualizacion
				$j=0;
				$tfecha='<table class="table table-condensed table-bordered">';
				$tfecha.='<tr>';
				$tfecha.='<th>Componente</th>';
				$tfecha.='<th>Fecha Actualización</th>';
				$tfecha.='<th>Usuario</th>';
				$tfecha.='</tr>';
				foreach($f as $t=>$v){
					if($j==0){
						$key_ultimo=$t;
						//break;
					}
					$j=$j+1;
					$tfecha.='<tr>';
					$tfecha.='<td>'.$t.'</td>';
					$tfecha.='<td>'.$ultimaFecha[$t]['FECHA'].'</td>';
					$tfecha.='<td>'.$ultimaFecha[$t]['USUARIO'].'</td>';
					$tfecha.='</tr>';
				}
				$tfecha.='</table>';
				$plantillas[$key]['ultima_actualizacion']=$ultimaFecha[$key_ultimo]['FECHA'];
				$plantillas[$key]['actualizaciones']=$tfecha;
			}
			echo json_encode($plantillas);
		}else{
			redirect('admin/login', 'refresh');
		}
	}

	/////////////////////////////////////////////////////////////////////////////
	public function gestionPlantilla()
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,100)){
			$idPlantilla   = $this->input->post('idPlantilla');
			$data['PLANTILLA'] = $this->input->post('plantilla');
            //Cargar Archivo
            $archivo='';
            if(isset($_FILES['archivo_img'])){
                $archivo= $_FILES['archivo_img']['name'];
            }
            $ingreso_archivo = '';
            if($archivo!=''){
                $dato_archivo=$this->cargar_archivo('archivo_img',1000,'plantillas/imagenes');
                if($dato_archivo['error']==''){
                    $data['IMAGEN']=$dato_archivo['file_name'];
                }else{
                    $ingreso_archivo=$dato_archivo['error'];
                }
            }
			if($idPlantilla == 0){
				$data['ID_USUARIO'] = $idusuario;
				$idPlantilla   = $this->academico_model->crearPlantilla($data);
			}else{
                if($archivo!='' and $ingreso_archivo==''){
                    $plantilla = $this->academico_model->buscar_plantillas(array('ID_PLANTILLA'=>$idPlantilla));
                    if(count($plantilla)>0){
                        if ($plantilla[0]['IMAGEN'] != null and $plantilla[0]['IMAGEN'] != ''){
                            unlink(FCPATH.'/archivos/plantillas/imagenes/'.$plantilla[0]['IMAGEN']);
                        }
                    }
                }
				$this->academico_model->actualizarPlantilla($data,$idPlantilla);
			}
			echo 'Registro Realizado';
		}else{
			echo 'Acceso Denegado';
		}
	}

	/////////////////////////////////////////////////////////////
	public function getPreguntasRespuestas($idPlantilla)
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,100)){
			$preguntas_respuestas=$this->academico_model->getPreguntas(array('ID_PLANTILLA'=>$idPlantilla));
			$opciones_respuesta=$this->academico_model->getOpcionesRespuesta(array('ID_PLANTILLA'=>$idPlantilla));
			foreach($opciones_respuesta as $or){
				$opr[$or['ID_PREGUNTA']][]=$or;
			}
			if(count($preguntas_respuestas)>0){
				foreach($preguntas_respuestas as $k=>$pr){
					$preguntas_respuestas[$k]['ID_OPCION_RESPUESTA'] = trim($pr['ID_OPCION_RESPUESTA'],"+");
					//$preguntas_respuestas[$k]['opciones_respuesta']=$this->academico_model->getOpcionesRespuesta(array('ID_PREGUNTA'=>$pr['ID_PREGUNTA']));
					$preguntas_respuestas[$k]['opciones_respuesta']=array();
					if(isset($opr[$pr['ID_PREGUNTA']])){
						$preguntas_respuestas[$k]['opciones_respuesta']=$opr[$pr['ID_PREGUNTA']];
					}
				}
				echo json_encode($preguntas_respuestas);
			}else{
				echo 0;
			}
		}else{
			echo 'Acceso Denegado';
		}
	}

	/////////////////////////////////////////////////////////////////////////////
	public function gestionExamen()
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,100)){
			$dat_usuario=$this->session->userdata('loggeado');
			$idplantilla=$this->input->post('idplantilla');
			$duracion=$this->input->post('duracion');
			$ids_preguntas_borrar  = $this->input->post('ids_preguntas_borrar');
			$ids_respuestas_borrar = $this->input->post('ids_respuestas_borrar');
			$preguntas          = $this->input->post('pregunta');
			$respuestas         = $this->input->post('respuesta');
			if(isset($idplantilla) and $idplantilla!=''){
				$this->academico_model->actualizarPlantilla(array('DURACION_EXAMEN'=>$duracion,'ID_USUARIO_ACTUALIZA_EXAMEN'=>$idusuario,'FECHA_ACTUALIZA_EXAMEN'=>date('Y-m-d H:i:s')),$idplantilla);
				//guardar preguntas y opciones de respuesta
				$num_preguntas=0;
				$num_opciones_respuesta=0;
				if($preguntas!=NULL){
					foreach($preguntas as $k=>$v_pregunta){
						$num_preguntas++;
						$datp=array();
						$datp['ID_PLANTILLA']=$idplantilla;
						$datp['PREGUNTA']=$v_pregunta['nombre'];
						$datp['TIPO']=$v_pregunta['tipoPregunta'];
						$datp['ID_OPCION_RESPUESTA']=0;
						$opcion_respuesta='';
						//cargar imagen si existe
						$nombre_archivo=$v_pregunta['imagen'];
						if(isset($_FILES[$k])){
							$archivo= $_FILES[$k]['name'];
							if($archivo!=''){
								$dato_archivo=$this->cargar_archivo($k,1100,'plantillas/preguntas/');
								if($dato_archivo['error']==''){
									if($nombre_archivo!='' and file_exists(FCPATH.'archivos/plantillas/preguntas/'.$nombre_archivo)){//borrar archivo anterior
										unlink(FCPATH.'archivos/plantillas/preguntas/'.$nombre_archivo);
									}
									$nombre_archivo=$dato_archivo['file_name'];
								}else{
									$ingreso_archivo=$dato_archivo['error'];
								}
							}
						}
						$datp['IMAGEN']=$nombre_archivo;
						$opcion_respuesta="+";
						if(isset($v_pregunta['respuesta'])){
							$v_opcion_respuesta=$v_pregunta['respuesta'];
						}
						if($v_pregunta['idpregunta']>0){
							$id_pregunta=$v_pregunta['idpregunta'];
							$this->academico_model->actualizarPregunta($datp,$id_pregunta);
						}else{
							$id_pregunta=$this->academico_model->crearPregunta($datp);
						}
						if(isset($respuestas[$k]) and count($respuestas[$k])>0){
							foreach($respuestas[$k] as $k1=>$v_respuesta){
								//$num_clase++;
								$datr=array();
								$datr['ID_PREGUNTA']=$id_pregunta;
								$datr['OPCION_RESPUESTA']=$v_respuesta['opcionrespuesta'];
								//cargar imagen si existe
								$nombre_archivo=$v_respuesta['imagen'];
								if(isset($_FILES[$k1])){
									$archivo= $_FILES[$k1]['name'];
									if($archivo!=''){
										$dato_archivo=$this->cargar_archivo($k1,1100,'plantillas/preguntas/');
										if($dato_archivo['error']==''){
											if($nombre_archivo!='' and file_exists(FCPATH.'archivos/plantillas/preguntas/'.$nombre_archivo)){//borrar archivo anterior
												unlink(FCPATH.'archivos/plantillas/preguntas/'.$nombre_archivo);
											}
											$nombre_archivo=$dato_archivo['file_name'];
										}else{
											$ingreso_archivo=$dato_archivo['error'];
										}
									}
								}
								$datr['IMAGEN']=$nombre_archivo;
								if($v_respuesta['idrespuesta']>0){
									$idOpcionRespuesta=$v_respuesta['idrespuesta'];
									$this->academico_model->actualizarOpcionesRespuesta($datr,$idOpcionRespuesta);
								}else{
									$idOpcionRespuesta=$this->academico_model->crearOpcionesRespuesta($datr);
								}
								if(count($v_opcion_respuesta)>0) {
									foreach($v_opcion_respuesta as $kor => $opcResp){
										if($k1==$opcResp){
											$opcion_respuesta.= $idOpcionRespuesta."+";
										}
									}
								}
							}
							//MULTIPLES RESPUESTAS
							$this->academico_model->actualizarPregunta(array('ID_OPCION_RESPUESTA'=>$opcion_respuesta),$id_pregunta);
						}
					}
				}
				//borrar preguntas y copciones de respuesta si existe el caso
				$ids_preguntas_borrar=trim($ids_preguntas_borrar,'+');
				$ids_respuestas_borrar=trim($ids_respuestas_borrar,'+');
				if($ids_preguntas_borrar!=''){
					$ids_pb=explode('+',$ids_preguntas_borrar);
					foreach($ids_pb as $idp){
						$this->academico_model->borrarPregunta($idp);
					}
				}
				if($ids_respuestas_borrar!=''){
					$ids_rb=explode('+',$ids_respuestas_borrar);
					foreach($ids_rb as $idr){
						$this->academico_model->borrarOpcionRespuesta($idr);
					}
				}
				echo 'Registro Realizado';
			}
		}else{
			echo 'Acceso Denegado';
		}
	}

	///////////////////////////////////////////////////////////////
	public function gestionPlantillaRetos($idPlantilla)
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,100)){
			if(!$this->input->is_ajax_request()) {
				$data['ID_PLANTILLA']=$idPlantilla;
				if($this->session->userdata('loggeado')['ID_PERFIL']==18){
					//$data['ID_USUARIO']  = $idusuario;//filtrar para perfil digitador
				}
				$plantilla = $this->academico_model->buscar_plantillas($data);
				if(count($plantilla)>0){
					$datos['plantilla'] = $plantilla[0];
					$retos  = $this->academico_model->getRetosProyectos(array('ID_PLANTILLA'=>$idPlantilla,'TIPO'=>"0"));
					foreach($retos as $k=>$reto){
						$retos[$k]['NumPreguntas']=$this->academico_model->numRetosPreguntas($reto['ID_RETO_PROYECTO']);
					}
					$datos['retos']  = $retos;
					$datos1=$this->perfil_model->cabecera($idusuario);
					$this->load->view('templates/header',$datos1);
					$this->load->view('gestionRetos',$datos);
					$this->load->view('templates/footer');
				}else{
					echo 'Acceso Denegado';
				}
			}else{
				/*$data['TITULO']      = $this->input->post('titulo');
				$data['DESCRIPCION'] = $this->input->post('texto');
				//carga de archivo
				$archivo= $_FILES['archivo']['name'];
				$ingreso_archivo='';
				$nombre_archivo='';
				$resultado['resultado']=1;
				$resultado['mensaje']='Registro Realizado';
				if($archivo!=''){
					$dato_archivo=$this->cargar_reto('archivo');
					if($dato_archivo['error']==''){
						$nombre_archivo=$dato_archivo['file_name'];
						$data['ARCHIVO'] = $nombre_archivo;
					}else{
						$ingreso_archivo=$dato_archivo['error'];
						$resultado['resultado']=0;
						$resultado['mensaje'] ='Fallo Ingreso :'.$ingreso_archivo;
					}
				}
				$idReto = $this->input->post('id_reto');
				if (isset($idReto) && $idReto!="" && $idReto>0){
					$reto = $this->academico_model->getRetoModulo($idReto);
					if(isset($data['ARCHIVO']) && $data['ARCHIVO']!="" and $reto['ARCHIVO']!=''){
						unlink(FCPATH.'archivos/archivos_cursos/'.$reto['ARCHIVO']);
					}
					//actualizar
					$data['ID_USUARIO_MODIFICACION'] = $this->session->userdata('user')['ID_USUARIO'];
					$data['FECHA_MODIFICACION'] = date("Y-m-d H:i:s");
					$this->academico_model->actualizarRetoProyecto($data,$idReto);
					$resultado['mensaje']='Registro Actualizado';
				}else{
					//crear
					$data['TIPO'] = "0";
					$data['ID_MODULO'] = $idModulo;
					$data['ID_USUARIO'] = $this->session->userdata('user')['ID_USUARIO'];
					$data['FECHA_CREACION'] = date("Y-m-d H:i:s");
					$idReto = $this->academico_model->crearRetoProyecto($data);
				}
				$resultado['idRetoProyecto'] = $idReto;
				echo json_encode($resultado);*/
			}
		}else{
			redirect('admin/login', 'refresh');
		}
	}

	/////////////////////////////////////////////////////////////
	public function getPreguntasRespuestasRetos($idReto)
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,100)){
			$preguntas_respuestas=$this->academico_model->getPreguntasRetos(array('ID_RETO'=>$idReto));
			if(count($preguntas_respuestas)>0){
				foreach($preguntas_respuestas as $k=>$pr){
					$preguntas_respuestas[$k]['ID_OPCION_RESPUESTA_RETO'] = trim($pr['ID_OPCION_RESPUESTA_RETO'],"+");
					$preguntas_respuestas[$k]['opciones_respuesta']=$this->academico_model->getOpcionesRespuestaRetos(array('ID_PREGUNTA_RETO'=>$pr['ID_PREGUNTA_RETO']));
				}
				echo json_encode($preguntas_respuestas);
			}else{
				echo 0;
			}
		}else{
			echo 'Acceso Denegado';
		}
	}

	///////////////////////////////////////////////////////////////
	public function gestionRetosPreguntas($idPlantilla)
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,100)){
			$ids_preguntas_borrar  = $this->input->post('ids_preguntas_borrar');
			$ids_respuestas_borrar = $this->input->post('ids_respuestas_borrar');
			$preguntas             = $this->input->post('pregunta');
			$respuestas            = $this->input->post('respuesta');
			$idReto                = $this->input->post('id_reto_pregunta');
			$data['TITULO']        = $this->input->post('titulo_pregunta');
			$resultado['resultado']= 1;
			if($idReto==0){
				$data['TIPO']           = 0;
				$data['TIPO_RETO']      = 1;
				$data['ID_PLANTILLA']      = $idPlantilla;
				$data['FECHA_CREACION'] = date('Y-m-d H:i:s');
				$data['ID_USUARIO']     = $idusuario;
				$idReto=$this->academico_model->crearRetoProyecto($data);
				$resultado['mensaje']='Registro Realizado';
			}else{
				$data['FECHA_MODIFICACION']      = date('Y-m-d H:i:s');
				$data['ID_USUARIO_MODIFICACION'] = $idusuario;
				$this->academico_model->actualizarRetoProyecto($data,$idReto);
				$resultado['mensaje']='Registro Actualizado';
			}
			//////////////////agregar las preguntas
			//guardar preguntas y opciones de respuesta
			$num_preguntas=0;
			$num_opciones_respuesta=0;
			if($preguntas!=NULL){
				// print_r($preguntas);
				// return 0;
				foreach($preguntas as $k=>$v_pregunta){
					$num_preguntas++;
					$datp=array();
					$datp['ID_RETO']=$idReto;
					$datp['PREGUNTA']=$v_pregunta['nombre'];
					$datp['ID_OPCION_RESPUESTA_RETO']=0;
					$opcion_respuesta='';
					//cargar imagen si existe
					$nombre_archivo=$v_pregunta['imagen'];
					if(isset($_FILES[$k])){
						$archivo= $_FILES[$k]['name'];
						if($archivo!=''){
							$dato_archivo=$this->cargar_archivo($k,1100,'plantillas/retos');
							if($dato_archivo['error']==''){
								if($nombre_archivo!='' and file_exists(FCPATH.'archivos/plantillas/retos/'.$nombre_archivo)){//borrar archivo anterior
									unlink(FCPATH.'archivos/plantillas/retos/'.$nombre_archivo);
								}
								$nombre_archivo=$dato_archivo['file_name'];
							}else{
								$ingreso_archivo=$dato_archivo['error'];
							}
						}
					}
					$datp['IMAGEN']=$nombre_archivo;
					$opcion_respuesta="+";
					if(isset($v_pregunta['respuesta'])){
						$v_opcion_respuesta=$v_pregunta['respuesta'];

					}
					if($v_pregunta['idpregunta']>0){
						$id_pregunta=$v_pregunta['idpregunta'];
						$this->academico_model->actualizarPreguntaReto($datp,$id_pregunta);
					}else{
						$id_pregunta=$this->academico_model->crearPreguntaReto($datp);
					}
					if(isset($respuestas[$k]) and count($respuestas[$k])>0){
						foreach($respuestas[$k] as $k1=>$v_respuesta){
							//$num_clase++;
							$datr=array();
							$datr['ID_PREGUNTA_RETO']=$id_pregunta;
							$datr['OPCION_RESPUESTA']=$v_respuesta['opcionrespuesta'];
							//cargar imagen si existe
							$nombre_archivo=$v_respuesta['imagen'];
							if(isset($_FILES[$k1])){
								$archivo= $_FILES[$k1]['name'];
								if($archivo!=''){
									$dato_archivo=$this->cargar_archivo($k1,1100,'plantillas/retos/');
									if($dato_archivo['error']==''){
										if($nombre_archivo!='' and file_exists(FCPATH.'archivos/plantillas/retos/'.$nombre_archivo)){//borrar archivo anterior
											unlink(FCPATH.'archivos/plantillas/retos/'.$nombre_archivo);
										}
										$nombre_archivo=$dato_archivo['file_name'];
									}else{
										$ingreso_archivo=$dato_archivo['error'];
									}
								}
							}
							$datr['IMAGEN']=$nombre_archivo;
							if($v_respuesta['idrespuesta']>0){
								$idOpcionRespuesta=$v_respuesta['idrespuesta'];
								$this->academico_model->actualizarOpcionesRespuestaReto($datr,$idOpcionRespuesta);
							}else{
								$idOpcionRespuesta=$this->academico_model->crearOpcionesRespuestaReto($datr);
							}
							if(count($v_opcion_respuesta)>0) {
								foreach ($v_opcion_respuesta as $kor => $opcResp){
									if($k1==$opcResp){
										$opcion_respuesta.= $idOpcionRespuesta."+";
									}
								}
							}
						}
						//MULTIPLES RESPUESTAS
						$this->academico_model->actualizarPreguntaReto(array('ID_OPCION_RESPUESTA_RETO'=>$opcion_respuesta),$id_pregunta);
					}
				}
			}
			//borrar preguntas y copciones de respuesta si existe el caso
			$ids_preguntas_borrar=trim($ids_preguntas_borrar,'+');
			$ids_respuestas_borrar=trim($ids_respuestas_borrar,'+');
			if($ids_preguntas_borrar!=''){
				$ids_pb=explode('+',$ids_preguntas_borrar);
				foreach($ids_pb as $idp){
					$bpr = $this->academico_model->getPreguntaReto($idp);
					if (isset($bpr['IMAGEN']) && $bpr['IMAGEN']!="" && $bpr['IMAGEN']!=NULL) {
						unlink(FCPATH.'archivos/plantillas/retos/'.$bpr['IMAGEN']);
					}
					$this->academico_model->borrarPreguntaReto($idp);
				}
			}
			if($ids_respuestas_borrar!=''){
				$ids_rb=explode('+',$ids_respuestas_borrar);
				foreach($ids_rb as $idr){
					$bop = $this->academico_model->getOpcionRespuestaReto($idr);
					if(isset($bop['IMAGEN']) && $bop['IMAGEN']!="" && $bop['IMAGEN']!=NULL){
						unlink(FCPATH.'archivos/plantillas/retos/'.$bop['IMAGEN']);
					}
					$this->academico_model->borrarOpcionRespuestaReto($idr);
				}
			}
			$resultado['idRetoProyecto'] = $idReto;
			echo json_encode($resultado);
		}else{
			echo 'Acceso Denegado';
		}
	}

	///////////////////////////////////////////////
	public function eliminarRetoProyecto($idRetoProyecto)
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,100)){
			$reto_proyecto = $this->academico_model->getRetoProyecto($idRetoProyecto);
			if(isset($reto_proyecto['TIPO_RETO']) && $reto_proyecto['TIPO_RETO']==1) {
				//eliminar reto preguntas
				$preguntas_reto = $this->academico_model->getPreguntasRetos(array("ID_RETO"=>$reto_proyecto['ID_RETO_PROYECTO']));
				foreach($preguntas_reto as $pregunta) {
					$opcionesRespuesta_reto = $this->academico_model->getOpcionesRespuestaRetos(array("ID_PREGUNTA_RETO"=>$pregunta['ID_PREGUNTA_RETO']));
					foreach($opcionesRespuesta_reto as $opcionRespuesta){
						if(isset($opcionRespuesta['IMAGEN']) && $opcionRespuesta['IMAGEN']!=""){
							if(file_exists(FCPATH.'archivos/plantillas/retos/'.$opcionRespuesta['IMAGEN'])){
								unlink(FCPATH.'archivos/plantillas/retos/'.$opcionRespuesta['IMAGEN']);
							}
						}
						$this->academico_model->borrarOpcionRespuestaReto($opcionRespuesta['ID_OPCION_RESPUESTA_RETO']);
					}
					if(isset($pregunta['IMAGEN']) && $pregunta['IMAGEN']!=""){
						if(file_exists(FCPATH.'archivos/plantillas/retos/'.$pregunta['IMAGEN'])){
							unlink(FCPATH.'archivos/plantillas/retos/'.$pregunta['IMAGEN']);
						}
					}
					$this->academico_model->borrarPreguntaReto($pregunta['ID_PREGUNTA_RETO']);
				}
			}else{
				// eliminar reto o proyectos que son por carga de archivos
				if(isset($reto_proyecto['ARCHIVO']) && $reto_proyecto['ARCHIVO']!=""){
					if(file_exists(FCPATH.'archivos/plantillas/proyectos/'.$reto_proyecto['ARCHIVO']) ){
						unlink(FCPATH.'archivos/plantillas/proyectos/'.$reto_proyecto['ARCHIVO']);
					}
				}
			}
			$this->academico_model->eliminarRetoProyecto($reto_proyecto['ID_RETO_PROYECTO']);
			$respuesta['resultado']=1;
			$respuesta['mensaje']="Registro Eliminado";
			echo json_encode($respuesta);
		}else{
			$respuesta['resultado']=0;
			$respuesta['mensaje']="Acceso Denegado";
			echo json_encode($respuesta);
		}
	}

	///////////////////////////////////////////////////////////////
	public function gestionPlantillaProyectos($idPlantilla)
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,100)){
			if(!$this->input->is_ajax_request()){
				$data['ID_PLANTILLA']=$idPlantilla;
				if($this->session->userdata('loggeado')['ID_PERFIL']==18){
					//$data['ID_USUARIO']  = $idusuario;//filtrar para perfil digitador
				}
				$plantilla = $this->academico_model->buscar_plantillas($data);
				if(count($plantilla)>0){
					$datos['plantilla'] = $plantilla[0];
					$datos['proyectos']  = $this->academico_model->getRetosProyectos(array('ID_PLANTILLA'=>$idPlantilla,'TIPO'=>1));
					$datos1=$this->perfil_model->cabecera($idusuario);
					$this->load->view('templates/header',$datos1);
					$this->load->view('gestionProyectos',$datos);
					$this->load->view('templates/footer');
				}else{
					echo 'Acceso Denegado';
				}
			}else{
				$data['TITULO']      = $this->input->post('titulo');
				$data['DESCRIPCION'] = $this->input->post('texto');
				//carga de archivo
				$archivo= $_FILES['archivo']['name'];
				$ingreso_archivo='';
				$nombre_archivo='';
				$resultado['resultado']=1;
				$resultado['mensaje']='Registro Realizado';
				if($archivo!=''){
					$dato_archivo=$this->cargar_archivo('archivo',2000,'plantillas/proyectos/');
					if($dato_archivo['error']==''){
						$nombre_archivo=$dato_archivo['file_name'];
						$data['ARCHIVO'] = $nombre_archivo;
					}else{
						$ingreso_archivo=$dato_archivo['error'];
						$resultado['resultado']=0;
						$resultado['mensaje'] ='Fallo Ingreso :'.$ingreso_archivo;
					}
				}
				$idProyecto = $this->input->post('id_proyecto');
				if(isset($idProyecto) && $idProyecto!="" && $idProyecto>0){
					$reto = $this->academico_model->getRetoProyecto($idProyecto);
					if(isset($data['ARCHIVO']) && $data['ARCHIVO']!="" and $reto['ARCHIVO']!=''){
						unlink(FCPATH.'archivos/plantillas/proyectos/'.$reto['ARCHIVO']);
					}
					//actualizar
					$data['ID_USUARIO_MODIFICACION'] = $idusuario;
					$data['FECHA_MODIFICACION'] = date("Y-m-d H:i:s");
					$this->academico_model->actualizarRetoProyecto($data,$idProyecto);
					$resultado['mensaje']='Registro Actualizado';
				}else{
					//crear
					$data['TIPO'] = 1;
					$data['ID_PLANTILLA'] = $idPlantilla;
					$data['ID_USUARIO'] = $idusuario;
					$data['FECHA_CREACION'] = date("Y-m-d H:i:s");
					$idProyecto = $this->academico_model->crearRetoProyecto($data);
				}
				$resultado['idRetoProyecto'] = $idProyecto;
				echo json_encode($resultado);
			}
		}else{
			redirect('admin/login', 'refresh');
		}
	}

	///////////////////////////////////////////////////////////////
	public function procesarPlantillaGuia()
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,100)){
			$idPlantilla = $this->input->post('id_plantilla');
			$archivo  = $_FILES['archivo']['name'];
			$ingreso_archivo = '';
			$nombre_archivo  = '';
			$resultado['resultado'] = 1;
			$resultado['mensaje']   = 'Registro Realizado';
			if($archivo!=''){
				$dato_archivo=$this->cargar_archivo('archivo',5196,'plantillas/guias/');
				if($dato_archivo['error']==''){
					$nombre_archivo = $dato_archivo['file_name'];
					$data['GUIA']   = $nombre_archivo;
					$data['ID_USUARIO_ACTUALIZA_GUIA']= $idusuario;
					$data['FECHA_ACTUALIZA_GUIA']   = date('Y-m-d H:i:s');
					$plantilla = $this->academico_model->buscar_plantillas(array('ID_PLANTILLA'=>$idPlantilla));
					$guia = $plantilla[0];
					if(isset($guia['GUIA']) && $guia['GUIA']!='' && $guia['GUIA']!=NULL){
						unlink(FCPATH.'archivos/plantillas/guias/'.$guia['GUIA']);
					}
					$this->academico_model->actualizarPlantilla($data,$idPlantilla);
				}else{
					$ingreso_archivo        = $dato_archivo['error'];
					$resultado['resultado'] = 0;
					$resultado['mensaje']   = 'Fallo Ingreso :'.$ingreso_archivo;
				}
			}
			echo json_encode($resultado);
		}else{
			echo "Acceso Denegado";
		}
	}

	///////////////////////////////////////////////////////////////
	public function crearContenido($id_periodo,$id_plantilla=0)
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado')){
			//$contenidos=$this->academico_model->buscar_contenidos(array('ID_PERIODO_ACADEMICO'=>$id_periodo));
			//if(count($contenidos)<=0){
				if($id_plantilla>0){
					$plantillas = $this->academico_model->buscar_plantillas(array('ID_PLANTILLA'=>$id_plantilla));
				}else{
					$plantillas = $this->academico_model->buscar_plantillas();
				}
				$resultado='';
				foreach($plantillas as $kp=>$plantilla){
					if($id_plantilla==0){
						$resultado.=($kp+1).') '.$plantilla['PLANTILLA'].' ';
					}
					$contenidos=$this->academico_model->buscar_contenidos(array('ID_PERIODO_ACADEMICO'=>$id_periodo,'ID_PLANTILLA'=>$plantilla['ID_PLANTILLA']));
					$retos  = $this->academico_model->getRetosProyectos(array('ID_PLANTILLA'=>$plantilla['ID_PLANTILLA'],'TIPO'=>"0"));
					$proyectos  = $this->academico_model->getRetosProyectos(array('ID_PLANTILLA'=>$plantilla['ID_PLANTILLA'],'TIPO'=>1));
					if(count($contenidos)<=0 and $plantilla['GUIA']!='' and count($retos)>0 and count($proyectos)>0){
						//crear contenido
						$dat_contenido['ID_PLANTILLA']=$plantilla['ID_PLANTILLA'];
						$dat_contenido['CONTENIDO']=$plantilla['PLANTILLA'];
						$dat_contenido['GUIA']='';
						if($plantilla['GUIA']!='' and file_exists(FCPATH.'archivos/plantillas/guias/'.$plantilla['GUIA'])){
							copy(FCPATH.'archivos/plantillas/guias/'.$plantilla['GUIA'], FCPATH.'archivos/contenidos/guias/'.$plantilla['GUIA']);
							$dat_contenido['GUIA']=$plantilla['GUIA'];
						}
						$dat_contenido['ID_PERIODO_ACADEMICO']=$id_periodo;
						$id_contenido=$this->academico_model->crear_contenido($dat_contenido);
						//crear preguntas examen contenido
						/*$preguntas = $this->academico_model->getPreguntas(array('ID_PLANTILLA'=>$plantilla['ID_PLANTILLA']));
						foreach($preguntas as $pregunta){
							$datp=array();
							$datp['ID_CONTENIDO']=$id_contenido;
							$datp['PREGUNTA']=$pregunta['PREGUNTA'];
							$datp['TIPO']=$pregunta['TIPO'];
							$datp['IMAGEN']='';
							if($pregunta['IMAGEN']!='' and file_exists(FCPATH.'archivos/plantillas/preguntas/'.$pregunta['IMAGEN'])){
								copy(FCPATH.'archivos/plantillas/preguntas/'.$pregunta['IMAGEN'], FCPATH.'archivos/contenidos/preguntas/'.$pregunta['IMAGEN']);
								$datp['IMAGEN']=$pregunta['IMAGEN'];
							}
							$id_pregunta_contenido=$this->academico_model->crearPreguntaContenido($datp);
							$respuestas=$this->academico_model->getOpcionesRespuesta(array('ID_PREGUNTA'=>$pregunta['ID_PREGUNTA']));
							$idsOpcionesRespuestasContenido = "+";
							$idsOpcionesRespuesta = explode("+", trim($pregunta['ID_OPCION_RESPUESTA'],"+"));
							foreach($respuestas as $respuesta){
								$datr=array();
								$datr['ID_PREGUNTA_CONTENIDO']=$id_pregunta_contenido;
								$datr['OPCION_RESPUESTA']=$respuesta['OPCION_RESPUESTA'];
								$datr['IMAGEN']='';
								if($respuesta['IMAGEN']!='' and file_exists(FCPATH.'archivos/plantillas/preguntas/'.$respuesta['IMAGEN'])){
									copy(FCPATH.'archivos/plantillas/preguntas/'.$respuesta['IMAGEN'], FCPATH.'archivos/contenidos/preguntas/'.$respuesta['IMAGEN']);
									$datr['IMAGEN']=$respuesta['IMAGEN'];
								}
								$id_opcion_respuesta_contenido=$this->academico_model->crearOpcionesRespuestaContenido($datr);
								if(in_array($respuesta['ID_OPCION_RESPUESTA'], $idsOpcionesRespuesta)){
									$idsOpcionesRespuestasContenido .=  $id_opcion_respuesta_contenido . "+";
								}
							}
							$this->academico_model->actualizarPreguntaContenido(array('ID_OPCION_RESPUESTA_CONTENIDO'=>$idsOpcionesRespuestasContenido),$id_pregunta_contenido);
						}*/
						//crear retos proyectos contenido
						$retos_proyectos = $this->academico_model->getRetosProyectos(array('ID_PLANTILLA'=>$plantilla['ID_PLANTILLA']));
						foreach($retos_proyectos as $reto_proyecto){
							$datrt=array();
							$datrt['TITULO']=$reto_proyecto['TITULO'];
							$datrt['ARCHIVO']=NULL;
							if($reto_proyecto['ARCHIVO']!='' and $reto_proyecto['ARCHIVO']!=NULL and file_exists(FCPATH.'archivos/plantillas/proyectos/'.$reto_proyecto['ARCHIVO'])){
								copy(FCPATH.'archivos/plantillas/proyectos/'.$reto_proyecto['ARCHIVO'], FCPATH.'archivos/contenidos/proyectos/'.$reto_proyecto['ARCHIVO']);
								$datrt['ARCHIVO']=$reto_proyecto['ARCHIVO'];
							}
							$datrt['DESCRIPCION']=$reto_proyecto['DESCRIPCION'];
							$datrt['ID_CONTENIDO']=$id_contenido;
							$datrt['TIPO']=$reto_proyecto['TIPO'];
							$datrt['TIPO_RETO']=$reto_proyecto['TIPO_RETO'];
							$datrt['FECHA_CREACION']=date('Y-m-d H:i:s');
							$datrt['ID_USUARIO']=$reto_proyecto['ID_USUARIO'];
							$datrt['FECHA_MODIFICACION']=date('Y-m-d H:i:s');
							$datrt['ID_USUARIO_MODIFICACION']=$reto_proyecto['ID_USUARIO_MODIFICACION'];
							$id_reto_proyecto_contenido=$this->academico_model->crearRetoProyectoContenido($datrt);
							if($datrt['TIPO']==0 and $datrt['TIPO_RETO']==1){//si tipo es reto y tipo reto es preguntas
								//crear preguntas retos contenido
								$preguntas_retos = $this->academico_model->getPreguntasRetos(array('ID_RETO'=>$reto_proyecto['ID_RETO_PROYECTO']));
								foreach($preguntas_retos as $pregunta_reto){
									$datpr=array();
									$datpr['ID_RETO_CONTENIDO']=$id_reto_proyecto_contenido;
									$datpr['PREGUNTA']=$pregunta_reto['PREGUNTA'];
									$datpr['IMAGEN']='';
									if($pregunta_reto['IMAGEN']!='' and file_exists(FCPATH.'archivos/plantillas/retos/'.$pregunta_reto['IMAGEN'])){
										copy(FCPATH.'archivos/plantillas/retos/'.$pregunta_reto['IMAGEN'], FCPATH.'archivos/contenidos/retos/'.$pregunta_reto['IMAGEN']);
										$datpr['IMAGEN']=$pregunta_reto['IMAGEN'];
									}
									$id_pregunta_reto_contenido=$this->academico_model->crearPreguntaRetoContenido($datpr);
									$respuestas_retos=$this->academico_model->getOpcionesRespuestaRetos(array('ID_PREGUNTA_RETO'=>$pregunta_reto['ID_PREGUNTA_RETO']));
									$idsOpcionesRespuestasRetosContenido = "+";
									$idsOpcionesRespuestaReto = explode("+", trim($pregunta_reto['ID_OPCION_RESPUESTA_RETO'],"+"));
									foreach($respuestas_retos as $respuesta_reto){
										$datrr=array();
										$datrr['ID_PREGUNTA_RETO_CONTENIDO']=$id_pregunta_reto_contenido;
										$datrr['OPCION_RESPUESTA']=$respuesta_reto['OPCION_RESPUESTA'];
										$datrr['IMAGEN']='';
										if($respuesta_reto['IMAGEN']!='' and file_exists(FCPATH.'archivos/plantillas/retos/'.$respuesta_reto['IMAGEN'])){
											copy(FCPATH.'archivos/plantillas/retos/'.$respuesta_reto['IMAGEN'], FCPATH.'archivos/contenidos/retos/'.$respuesta_reto['IMAGEN']);
											$datrr['IMAGEN']=$respuesta_reto['IMAGEN'];
										}
										$id_opcion_respuesta_reto_contenido=$this->academico_model->crearOpcionesRespuestaRetoContenido($datrr);
										if(in_array($respuesta_reto['ID_OPCION_RESPUESTA_RETO'], $idsOpcionesRespuestaReto)){
											$idsOpcionesRespuestasRetosContenido .=  $id_opcion_respuesta_reto_contenido . "+";
										}
									}
									$this->academico_model->actualizarPreguntaRetoContenido(array('ID_OPCION_RESPUESTA_RETO_CONTENIDO'=>$idsOpcionesRespuestasRetosContenido),$id_pregunta_reto_contenido);
								}
							}
						}
						$resultado.=' Cargado<br>';
					}else{
						if(count($contenidos)>0){
							$resultado.=' Contenido Existe<br>';
						}else{
							$resultado.=' Contenido Incompleto<br>';
						}
					}//fin de if(count($contenidos)<=0){
				}
				//crear materia contenido del periodo
				$materias=$this->academico_model->buscarMateria(null, null, null);
				if($materias!=false){
					$vector_contenidos=array();
					$contenidos=$this->academico_model->buscar_contenidos(array('ID_PERIODO_ACADEMICO'=>$id_periodo));
					foreach($contenidos as $contenido){
						$vector_contenidos[$contenido['ID_PLANTILLA']]=$contenido['ID_CONTENIDO'];
					}
					foreach($materias as $materia){
						$ids_plantillas=explode('+',$materia['IDS_PLANTILLA']);
						if(count($ids_plantillas)>0){
							foreach($ids_plantillas as $idp){
								if($idp>0 and isset($vector_contenidos[$idp])){
									$materia_contenido=$this->academico_model->getMateriaContenido($vector_contenidos[$idp],$materia['ID_MATERIA']);
									if($materia_contenido==NULL){
										$this->academico_model->crearMateriaContenido(array('ID_CONTENIDO'=>$vector_contenidos[$idp],'ID_MATERIA'=>$materia['ID_MATERIA']));
									}
								}
							}
						}
					}
				}
				echo $resultado;
			//}
		}else{
			echo "Acceso Denegado";
		}
	}

	////////////////////////////////////////////////////////////////////
	public function contenidoMaterias()
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,101)){
			$this->load->model('admin/usuarios_model');
			$perfil = $this->usuarios_model->get_perfil_usuario($idusuario);
			$id_periodo_academico=$this->academico_model->get_periodo_activado();
			if(!$this->input->is_ajax_request()){
				$datos=array();
				$datos['niveles'] = $this->academico_model->get_niveles();
				$datos['carreras'] = $this->academico_model->get_carreras();
				$datos['periodos'] = $this->academico_model->getPeriodos();
				$datos['perfil'] = $perfil;
				$grupos=array();
				if($perfil==12){//filtrar grupos para coordinadores
					$gruposc=$this->usuarios_model->grupos_usuario_academico(array('ID_USUARIO_ACADEMICO'=>$idusuario));
					foreach($gruposc as $g){
						$grupos[]=$g['GRUPO'];
					}
				}else{
					$grupos=$this->academico_model->buscarGruposEst(null,$id_periodo_academico);
					$grupos = explode("-", $grupos);
					array_walk($grupos, create_function('&$val', '$val = trim($val);'));
				}
				sort($grupos);
				$datos['grupos']=$grupos;

				$datos1=$this->perfil_model->cabecera($idusuario);
				$this->load->view('templates/header',$datos1);
				$this->load->view('buscar_contenido_materias',$datos);
				$this->load->view('templates/footer');
			}else{
				$nro_documento = trim($this->input->post('nd'));
				if($nro_documento!=null and $nro_documento!=''){
					$data['ID_PERSONA']=-1;
					$docente = $this->academico_model->get_datos_persona(0,$nro_documento);
					if($docente!=NULL){
						$data['ID_PERSONA']=$docente['ID_PERSONA'];
					}
				}
				$data['ID_PERIODO_ACADEMICO'] = $id_periodo_academico;
				$data['ID_CARRERA'] = trim($this->input->post('id_carrera'));
				$data['ID_NIVEL'] = trim($this->input->post('id_nivel'));
				$data['GRUPO'] = trim($this->input->post('grupo'));
				$datos['perfil'] = $perfil;
				if($perfil==4){//vista docentes
					$data['ID_PERSONA'] = $this->session->userdata('loggeado')['ID_PERSONA'];
				}
				if($perfil==5){//vista estudiante
					$id_persona_estudiante = $this->session->userdata('loggeado')['ID_PERSONA'];
					//materias inscritas por el estudiante en el periodo actual
					$materias_estudiante = $this->academico_model->get_materias_estudiante($id_persona_estudiante,$id_periodo_academico);
					$contenidos=array();
					foreach($materias_estudiante as $materia_estudiante){
						if($materia_estudiante['ID_PERSONA_DOCENTE']!=NULL and $materia_estudiante['ID_PERSONA_DOCENTE']>0){
							$data['ID_PERIODO_ACADEMICO'] = $materia_estudiante['ID_PERIODO_ACADEMICO'];
							$data['ID_CARRERA'] = $materia_estudiante['ID_CARRERA'];
							$data['ID_NIVEL'] = $materia_estudiante['NIVEL_MATERIA'];
							$data['ID_CARRERA_MATERIA'] = $materia_estudiante['ID_CARRERA_MATERIA'];
							//$data['ID_PERSONA'] = $materia_estudiante['ID_PERSONA_DOCENTE'];
							$data['ID_GRUPO'] = $materia_estudiante['ID_GRUPO'];
							$contenido = $this->academico_model->listado_contenido($data);
							$matricula = $this->academico_model->obtener_matricula(array('ID_PERSONA'=>$id_persona_estudiante,'ID_PERIODO_ACADEMICO'=>$materia_estudiante['ID_PERIODO_ACADEMICO'],'ID_CARRERA'=>$materia_estudiante['ID_CARRERA']));
							if(count($contenido)>0 and $matricula!=NULL and $matricula['ESTADO']==0){
								$contenido[0]['ID_ESTUDIANTE_CARRERA_MATERIA']=$materia_estudiante['ID_ESTUDIANTE_CARRERA_MATERIA'];
								$contenido[0]['BLOQUEO']=0;
								if($materia_estudiante['ID_LOG_GUIA']==NULL){
									$contenido[0]['BLOQUEO']=1;
								}

								$contenidos = array_merge($contenidos, $contenido);
							}
						}
					}
				}else{
					if($perfil==12 and $data['GRUPO']==''){//filtrar grupos para coordinadores
						$gruposc=$this->usuarios_model->grupos_usuario_academico(array('ID_USUARIO_ACADEMICO'=>$idusuario));
						if(count($gruposc)>0){
							foreach($gruposc as $g){
								$grupos[]=$g['GRUPO'];
							}
							$data['GRUPOS']="'".implode("','",$grupos)."'";
						}else{
							$data['GRUPO']='0';
						}



					}
					$contenidos = $this->academico_model->listado_contenido($data);
					foreach($contenidos as $key=>$contenido){
						if($this->academico_model->verificar_si_tiene_estudiantes($contenido)==0){
							//unset($contenidos[$key]);
						}
					}
				}
				///agregar contenido y numero de tareas
				foreach($contenidos as $key=>$contenido){
					// $contenidos[$key]['num_tareas']=$this->academico_model->num_tareas_estudiantes($silabo_tarea['ID_DOCENTE_CARRERA_MATERIA'],$silabo_tarea['ID_GRUPO']);
					$dato_contenido=$this->academico_model->getContenidoMateria($contenido['ID_CARRERA_MATERIA'],$contenido['ID_PERIODO_ACADEMICO'],$contenido['ID_PLANTILLA']);
					$num_retos=0;
					$num_proyectos=0;
					$num_talleres = 0;
					if($dato_contenido!=NULL){
						$contenidos[$key]=array_merge($contenidos[$key], $dato_contenido);
						$dat['ID_CONTENIDO']=$dato_contenido['ID_CONTENIDO'];
						$dat['TIPO']='0';
						$num_retos=count($this->academico_model->getRetosProyectosContenido($dat));
						$dat['TIPO']=1;
						$num_proyectos=count($this->academico_model->getRetosProyectosContenido($dat));
						// $num_talleres = count($this->academico_model->buscar_talleres(array('ID_PLANIFICACION'=>$contenido['ID_PLANIFICACION'])));
						$num_talleres = count($this->academico_model->buscar_talleres(array('ID_CARRERA_MATERIA'=>$contenido['ID_CARRERA_MATERIA'],'ID_PERIODO_ACADEMICO'=>$contenido['ID_PERIODO_ACADEMICO'],'ID_GRUPO'=>$contenido['ID_GRUPO'],'ID_PLANTILLA'=>$contenido['ID_PLANTILLA'])));
						if($num_proyectos>1 and $perfil==5){
							$num_proyectos=1;
						}
					}


					$contenidos[$key]['num_retos']     = $num_retos;
					$contenidos[$key]['num_proyectos'] = $num_proyectos;
					$contenidos[$key]['num_talleres']  = $num_talleres;
					// $contenidos[$key]['aulaVirtual']   = $this->academico_model->buscar_aulaVirtual(array('ID_PLANIFICACION'=>$contenido['ID_PLANIFICACION']));
					$contenidos[$key]['aulaVirtual']   = $this->academico_model->buscar_aulaVirtual(array('ID_CARRERA_MATERIA'=>$contenido['ID_CARRERA_MATERIA'],'ID_PERIODO_ACADEMICO'=>$contenido['ID_PERIODO_ACADEMICO'],'ID_GRUPO'=>$contenido['ID_GRUPO'],'ID_PLANTILLA'=>$contenido['ID_PLANTILLA']));
					$contenidos[$key]['PERIODO']=$contenido['FECHA_TUTORIA1'];

					$fecha_fin='';
					$fechast=$contenido['FECHA_TUTORIA2'].'+'.$contenido['FECHA_TUTORIA3'].'+'.$contenido['FECHA_TUTORIA4'].'+'.$contenido['FECHAS_TUTORIA'];
					$vector_ft=explode('+',$fechast);
					$contenidos[$key]['HOY']=0;
					if($contenido['FECHA_TUTORIA1']==date('Y-m-d')){
						$contenidos[$key]['HOY']=1;
					}
					foreach($vector_ft as $ft){
						if($ft!='' and $ft!=NULL and $ft!='0000-00-00'){
							$fecha_fin=$ft;
						}
						if($ft==date('Y-m-d')){
							$contenidos[$key]['HOY']=1;
						}
					}
					if($fecha_fin!=''){
						$contenidos[$key]['PERIODO'].='<br>'.$fecha_fin;
					}
					$contenidos[$key]['BLOQUEO_FECHA']=0;
					if($perfil==5 or $perfil==12){//vista estudiante y coordinador
						$fecha_inicio=date_create($contenido['FECHA_TUTORIA1'].' 00:00:00');
						$fecha_actual=date_create(date('Y-m-d H:i:s'));
						if($fecha_inicio>$fecha_actual){
							$contenidos[$key]['BLOQUEO_FECHA']=1;
						}
					}
					if($contenido['ID_PLANTILLA']>0){
						$pla=$this->academico_model->get_plantilla($contenido['ID_PLANTILLA']);
						if($pla!=NULL){
							$contenidos[$key]['MATERIA']=$contenido['MATERIA'].'<br>'.$pla['PLANTILLA'];
						}
					}
				}
				$datos['contenidos']=$contenidos;
				$this->load->view('resultadoContenidoMaterias',$datos);
			}
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	////////////////////////////////////////////////////////////////////
	public function registraGuia($idEstudianteCarreraMateria)
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado')){
			$dat['ID_ESTUDIANTE_CARRERA_MATERIA']=$idEstudianteCarreraMateria;
			$dat['FECHA']=date('Y-m-d H:i:s');
			$log_guia=$this->academico_model->getLogGuia($idEstudianteCarreraMateria);
			if($log_guia==NULL){
				$this->academico_model->creaLogGuia($dat);
			}
			echo '1';
		}else{
			echo 'Acceso Denegado';
		}
	}

	///////////////////////////////////////////////////////////////
	public function gestionContenidoRetos($idPlanificacion)
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,101)){
			$perfil=$this->session->userdata('loggeado')['ID_PERFIL'];
			if(!$this->input->is_ajax_request()) {
				$contenidos = $this->academico_model->listado_contenido(array('ID_PLANIFICACION'=>$idPlanificacion));
				if(count($contenidos)>0){
					$contenido=$contenidos[0];
					$fecha_fin='';
					$fechast=$contenido['FECHA_TUTORIA2'].'+'.$contenido['FECHA_TUTORIA3'].'+'.$contenido['FECHA_TUTORIA4'].'+'.$contenido['FECHAS_TUTORIA'];
					$vector_ft=explode('+',$fechast);
					foreach($vector_ft as $ft){
						if($ft!='' and $ft!=NULL and $ft!='0000-00-00'){
							$fecha_fin=$ft;
						}
					}
					$contenido['FECHA_FIN']=$fecha_fin;
					$dato_contenido=$this->academico_model->getContenidoMateria($contenido['ID_CARRERA_MATERIA'],$contenido['ID_PERIODO_ACADEMICO'],$contenido['ID_PLANTILLA']);
					$retos=array();
					if($dato_contenido!=NULL){
						$dat['ID_CONTENIDO']=$dato_contenido['ID_CONTENIDO'];
						$dat['TIPO']='0';
						$retos=$this->academico_model->getRetosProyectosContenido($dat);
					}
					if($perfil==5){
						///agregar datos de respuesta
						foreach($retos as $key=>$reto){
							$data_respuesta['ID_RETO_CONTENIDO']=$reto['ID_RETO_PROYECTO_CONTENIDO'];
							$data_respuesta['ID_PERSONA'] = $this->session->userdata('loggeado')['ID_PERSONA'];
							$respuestas=$this->academico_model->buscar_retos_estudiantes($data_respuesta);
							if($respuestas==NULL){
								$retos[$key]['respuesta']=NULL;
							}else{
								$retos[$key]['respuesta']=$respuestas[0];
							}
							$aplazos=$this->academico_model->getAplazoContenido($this->session->userdata('loggeado')['ID_PERSONA'],'0',$reto['ID_RETO_PROYECTO_CONTENIDO']);
							if(count($aplazos)>0){
								$retos[$key]['FECHA_APLAZADA']=$aplazos[0]['FECHA_APLAZADA'];
							}
						}
					}
					///agregar numero de retos
					foreach($retos as $k=>$reto){
						$retos[$k]['NumPreguntas']=$this->academico_model->numRetosPreguntasContenido($reto['ID_RETO_PROYECTO_CONTENIDO']);
					}
					$idPeriodo=$this->academico_model->get_periodo_activado();
					$periodo=$this->academico_model->getPeriodo($idPeriodo);
					$datos['fecha_max']=$periodo['FECHA_FIN'];//fecha fin de periodo
					$datos['contenido']  = $contenido;
					$datos['retos']  = $retos;
					$datos['perfil']  = $perfil;
					$datos1=$this->perfil_model->cabecera($idusuario);
					$this->load->view('templates/header',$datos1);
					$this->load->view('gestionRetosContenido',$datos);
					$this->load->view('templates/footer');
				}else{
					echo 'Acceso Denegado';
				}
			}
		}else{
			redirect('admin/login', 'refresh');
		}
	}

	//////////////////////////////////////////////////////////////////
	public function calificacionesReto()
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,101)){
			$perfil    = $this->session->userdata('loggeado')['ID_PERFIL'];
			$usuario =$this->session->userdata('loggeado');
			$idRetoContenido  = trim($this->input->post('id_reto'));
			$idPlanificacion  = trim($this->input->post('id_planificacion'));
			$listado   = trim($this->input->post('listado'));
			$idPlanificacion = trim($this->input->post('id_planificacion'));
			$contenidos = $this->academico_model->listado_contenido(array('ID_PLANIFICACION'=>$idPlanificacion));
			if(count($contenidos)>0){
				$contenido=$contenidos[0];
				$dato_contenido=$this->academico_model->getContenidoMateria($contenido['ID_CARRERA_MATERIA'],$contenido['ID_PERIODO_ACADEMICO'],$contenido['ID_PLANTILLA']);
				$retos_realizados=$this->academico_model->retos_realizados_estudiante(null,null,$idRetoContenido);
				$realizados=array();
				foreach($retos_realizados as $rr){
					$realizados[$rr['ID_PERSONA']]=$rr;
				}
				$dat_e['ID_CARRERA_MATERIA']=$contenido['ID_CARRERA_MATERIA'];
				$dat_e['ID_PERIODO_ACADEMICO']=$contenido['ID_PERIODO_ACADEMICO'];
				$dat_e['ID_GRUPO']=$contenido['ID_GRUPO'];
				if($usuario['ID_PERFIL']==12){
					$dat_e['ID_USUARIO_ACADEMICO']=$usuario['ID_USUARIO'];
				}
				$estudiantes=$this->academico_model->get_estudiantes($dat_e);
				///agregar numero de respuestas
				$tabla='<form action="'.site_url().'/academico/academico/calificarTareaPreguntas/" method="post" name="formulario_calificacion_preguntas" id="formulario_calificacion_preguntas">';
					$tabla.='<div id="respuesta_preguntas_calificacion"></div>';
					$tabla.='<table class="table table-condensed">';
						$tabla.='<tr>';
							$tabla.='<th>N&deg;</th>';
							$tabla.='<th>ESTUDIANTE</th>';
							$tabla.='<th>FECHA</th>';
							$tabla.='<th>CALIFICACI&Oacute;N</th>';
							$tabla.='<th style="text-align:center;">ESTADO</th>';
						$tabla.='</tr>';
						$id_respuestas='';
						$contador = 1;
				foreach($estudiantes as $estudiante){
						$tabla.='<tr onMouseOver="this.style.backgroundColor=\'#EBFCE2\'" onMouseOut="this.style.backgroundColor=\'\'">';
						$tabla.='<td>'.$contador.'</td>';
						$contador++;
						$tabla.='<td>'.$estudiante['ESTUDIANTE'].'</td>';
						$calificacion='-';
						$fecha='-';
						$estado='Pendiente';
						if(isset($realizados[$estudiante['ID_PERSONA']])){
							$respuesta=$realizados[$estudiante['ID_PERSONA']];
							$id_respuestas.=$respuesta['ID_RETO_ESTUDIANTE'].'+';
							$f=explode(' ',$respuesta['FECHA_CREACION']);
							$fecha=$f[0];
							$estado='En Proceso';
							if($respuesta['ESTADO']==1){
                                $fecha_limite = '';
                                if(isset($rr['FECHA_APLAZADA']) and $rr['FECHA_APLAZADA']!=NULL){
                                    $fecha_limite = $rr['FECHA_APLAZADA'];
                                }elseif($contenido['FECHA_CIERRE']!=''){
                                    $fecha_limite = $contenido['FECHA_CIERRE'];
                                }
                                $calificacion= sprintf("%01.2f",$respuesta['CALIFICACION']);
//                                $calificacion= '<a href="Javascript:verRespuestasReto(\''.$idRetoContenido.'\',\'Calificación Estudiante\',\''.$fecha_limite.'\',\''.$estudiante['ID_PERSONA'].'\')" data-bs-toggle="tooltip" data-bs-placement="bottom" title="Ver Calificación" >'.sprintf("%01.2f",$respuesta['CALIFICACION']).'</a>';
								$estado='Realizado';
							}
						}
						$tabla.='<td nowrap="nowrap">'.$fecha.'</td>';
						$tabla.='<td align="center">'.$calificacion.'</td>';
						$tabla.= '<td align="center">'.$estado.'</td>';
						$tabla.='</tr>';
				}
				$tabla.='</table>';
					$tabla.='<input type="hidden" name="id_respuestas" id="id_respuestas" value="'.trim($id_respuestas,'+').'">';
					$tabla.='<input type="hidden" name="id_tarea" id="id_reto" value="'.$idRetoContenido.'">';
				$tabla.='</form>';
				echo $tabla;
			}else{
				echo 'Sin Contenido';
			}
		}else{
			redirect('index', 'refresh');
		}
	}

	/////////////////////////////////////////////////////////////////////////////
	public function getRetoEstudiante($idPlanificacion=null)
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,101)){
			$usuario=$this->session->userdata('loggeado');
			$idRetoContenido = trim($this->input->post('id_reto'));
			$fechaFin = trim($this->input->post('fecha_fin'));
			$retos=$this->academico_model->getRetosProyectosContenido(array('ID_RETO_PROYECTO_CONTENIDO'=>$idRetoContenido));
			if($usuario['ID_PERFIL']==5 and count($retos)>0 and $idRetoContenido>0){
				$ff_reto = date_create($fechaFin.' 23:59:59');
				$f_actual = date_create(date('Y-m-d H:i:s'));
				$reto=$retos[0];
				$tabla='<input name="idReto" type="hidden" id="idReto" value="'.$idRetoContenido.'">';
				$tabla.='<input name="fechaFin" type="hidden" id="fechaFin" value="'.$fechaFin.'">';
				//verifico si ya tiene reto el estudiante
				$retos_estudiante=$this->academico_model->retos_realizados_estudiante($usuario['ID_PERSONA'],null,$idRetoContenido);
				if(count($retos_estudiante)>0 and $retos_estudiante[0]['ESTADO']==1){
					$tabla.='<div class="alert alert-success">Reto Realizado. Calificaci&oacute;n: <strong>'.number_format(floatval($retos_estudiante[0]['CALIFICACION']),2).'</strong></div>';
					///VISTA DE DETALLE DEL EXAMEN PARA EL ESTUDIANTES
					//CUANTAS HA APROBADO
					//CUANTAS HA SIDO INCORRECTAS
					//CUANTAS NO HAN CONTESTADO
					$examen=$retos_estudiante[0];
					$respuestas=explode('+',$examen['IDS_RESPUESTA']);
					$correcto=0;
					$preguntas=$this->academico_model->getPreguntasRetosContenido(array('ID_RETO_CONTENIDO'=>$idRetoContenido));
					$tabla.='<table align="center"><tr><td>';
					$tabla.='<table class="table table-condensed">';
					foreach($preguntas as $k=>$p){
						$correcto=0;
							$tabla.='<tr>';
							$tabla.='<td>';
								$tabla.='<label class="text-left" style="font-size:20px; width:110px;">Pregunta '.($k+1).'</label> ';
							$tabla.='</td>';
							$pe=$p;
							if(isset($respuestas[$k])){
								$opcionesSeleccionadas = explode("-", $respuestas[$k]);
							}else{
								$opcionesSeleccionadas = array();
							}
							$opcionesCorrectas     = explode("+", trim($pe['ID_OPCION_RESPUESTA_RETO_CONTENIDO'],"+"));
							$correctoPregunta = 0;
							if (count($opcionesSeleccionadas) == count($opcionesCorrectas)){
								foreach ($opcionesSeleccionadas as $oSeleccionada){
									foreach ($opcionesCorrectas as $ocorrecta){
										if ($ocorrecta == $oSeleccionada){
											$correctoPregunta++;
										}
									}
								}
							}
							if(isset($respuestas[$k]) and count($opcionesCorrectas) == $correctoPregunta){
								$correcto++;
							}
							$tabla.='<td style="font-size:25px;">';
								if (count($opcionesSeleccionadas)==0 || $opcionesSeleccionadas[0]=="0") {
									//$tabla.= "No contest�";
									$tabla.='<i class="bi-question-circle-fill" style="color:blue;"></i><span class="glyphicon glyphicon-question-sign" style="color:blue;"></span>';
								}elseif ($correcto==0) {
									//$tabla.= "Incorrecto";
									$tabla.='<i class="bi-x-circle-fill" style="color:red;"></i><span class="glyphicon glyphicon-remove-sign" style="color:red;"></span>';
								}else{
									//$tabla.= "Correcto";
									$tabla.='<i class="bi-check-circle-fill" style="color:green;"></i><span class="glyphicon glyphicon-ok-sign" style="color:green;"></span>';
								}
							$tabla.='</td>';
						$tabla.='</tr>';
					}
					$tabla.='</table>';
					$tabla.='</td></tr></table>';
					$tabla.='<div class="panel-footer" align="right"><input type="button" name="sal_reto" value="Salir" class="btn-default btn btn-sm" id="sal_reto" data-dismiss="modal" data-bs-dismiss="modal" style="margin-right:10px"></div>';
				}elseif($f_actual>$ff_reto){
					$tabla.='<div class="alert alert-info">Ya finaliz&oacute; fecha limite <strong>'.$fechaFin.'</strong></div>';
					$idp = trim($this->input->post('idp'));
					if(isset($idp) and $idp==-1 and count($retos_estudiante)>0 and $retos_estudiante[0]['ESTADO']==0){//finalizar Examen por tiempo limite
						$reto_estudiante=$retos_estudiante[0];
						$preguntas=$this->academico_model->getPreguntasRetosContenido(array('ID_RETO_CONTENIDO'=>$idRetoContenido));
						$respuestas=explode('+',$reto_estudiante['IDS_RESPUESTA']);
						$correcto=0;
						foreach($preguntas as $k=>$pe){
							$opcionesSeleccionadas = array();
							if(isset($respuestas[$k])){
								$opcionesSeleccionadas = explode("-", $respuestas[$k]);
							}
							$opcionesCorrectas     = explode("+", trim($pe['ID_OPCION_RESPUESTA_RETO_CONTENIDO'],"+"));
							$correctoPregunta = 0;
							if (count($opcionesSeleccionadas) == count($opcionesCorrectas)){
								foreach ($opcionesSeleccionadas as $oSeleccionada){
									foreach ($opcionesCorrectas as $ocorrecta){
										if ($ocorrecta == $oSeleccionada){
											$correctoPregunta++;
										}
									}
								}
							}
							if(isset($respuestas[$k]) and count($opcionesCorrectas) == $correctoPregunta){
								$correcto++;
							}
						}
						$calificacion=round($correcto*10/count($preguntas),2);
						$dat_actualiza=array();
						$dat_actualiza['ESTADO']=1;
						$dat_actualiza['CALIFICACION']=$calificacion;
						$dat_actualiza['FECHA_ACTUALIZACION']=date('Y-m-d H:i:s');
						$this->academico_model->actualizarRetoEstudiante($dat_actualiza,$reto_estudiante['ID_RETO_ESTUDIANTE']);
						$tabla.='<div class="alert alert-success">Reto finalizado. Calificaci&oacute;n: <strong>'.$calificacion.'</strong></div>';
						//transpasar nota
						$this->promedioRetoProyecto($usuario['ID_PERSONA'],$idPlanificacion);
					}
				}else{
					$preguntas=$this->academico_model->getPreguntasRetosContenido(array('ID_RETO_CONTENIDO'=>$idRetoContenido));
					if(count($retos_estudiante)<=0){
						$dat_base['ID_RETO_CONTENIDO']=$idRetoContenido;
						$dat_base['ESTADO']='0';
						$dat_base['ID_PERSONA']=$usuario['ID_PERSONA'];
						$dat_base['FECHA_INICIO_CONEXION']=date('Y-m-d H:i:s');
						$dat_base['FECHA_CREACION']=date('Y-m-d H:i:s');
						//generar reto web del estudiante
						$this->academico_model->crearRetoEstudiante($dat_base);
						$retos_estudiante=$this->academico_model->retos_realizados_estudiante($usuario['ID_PERSONA'],null,$idRetoContenido);
					}
					if(count($retos_estudiante)>0 and count($preguntas)>0){
						$idp = trim($this->input->post('idp'));
						$opcion_seleccionado = trim($this->input->post('op'));//respuesta
						$reto_estudiante=$retos_estudiante[0];
						//$opciones=explode('+',$examen['IDS_OPCION_RESPUESTA_BASE']);
						$respuestas=explode('+',$reto_estudiante['IDS_RESPUESTA']);
						if($idp==NULL and ($reto_estudiante['IDS_RESPUESTA']=='' or $reto_estudiante['IDS_RESPUESTA']==NULL)){
							$idp=$preguntas[0]['ID_PREGUNTA_RETO_CONTENIDO'];
						}elseif($idp==NULL){
							$idp=$preguntas[count($respuestas)-1]['ID_PREGUNTA_RETO_CONTENIDO'];
						}
						if($opcion_seleccionado!=NULL and $opcion_seleccionado!=''){
							$v_opSeleccionadas = explode("+", trim($opcion_seleccionado,"+"));
							$indicePregunta = "0";
							$opcionesRespuestasSeleccionadas = "";
							foreach ($v_opSeleccionadas as $kops => $ops) {
								$op_select=explode('-',$ops);
								foreach($preguntas as $k=>$p){
									if($p['ID_PREGUNTA_RETO_CONTENIDO']==$op_select[0]){
										$opcionesRespuestasSeleccionadas .= "-".$op_select[1];
										$indicePregunta = $k;
										break;
									}
								}
								$respuestas[$k]= trim($opcionesRespuestasSeleccionadas,"-");
							}
							if(isset($respuestas[$indicePregunta]) && $respuestas[$indicePregunta]=="") {
								$respuestas[$indicePregunta] =0;
							}
							$res_total=implode('+',$respuestas);
							if($res_total!=$reto_estudiante['IDS_RESPUESTA']){
								$dat_actualiza=array();
								$dat_actualiza['IDS_RESPUESTA']=$res_total;
								$dat_actualiza['FECHA_ACTUALIZACION']=date('Y-m-d H:i:s');
								$dat_actualiza['FECHA_FIN_CONEXION']=date('Y-m-d H:i:s');
								$this->academico_model->actualizarRetoEstudiante($dat_actualiza,$reto_estudiante['ID_RETO_ESTUDIANTE']);
							}
						}
						if($idp==-1){//finalizar reto
							$correcto=0;
							foreach($preguntas as $k=>$p){
								$pe=$p;
								$opcionesSeleccionadas = explode("-", $respuestas[$k]);
								$opcionesCorrectas     = explode("+", trim($pe['ID_OPCION_RESPUESTA_RETO_CONTENIDO'],"+"));
								$correctoPregunta = 0;
								if (count($opcionesSeleccionadas) == count($opcionesCorrectas)){
									foreach ($opcionesSeleccionadas as $oSeleccionada){
										foreach ($opcionesCorrectas as $ocorrecta){
											if ($ocorrecta == $oSeleccionada){
												$correctoPregunta++;
											}
										}
									}
								}
								if(isset($respuestas[$k]) and count($opcionesCorrectas) == $correctoPregunta){
									$correcto++;
								}
							}
							$calificacion=round($correcto*10/count($preguntas),2);
							$dat_actualiza=array();
							$dat_actualiza['ESTADO']=1;
							$dat_actualiza['CALIFICACION']=$calificacion;
							$dat_actualiza['FECHA_ACTUALIZACION']=date('Y-m-d H:i:s');
							$dat_actualiza['FECHA_FIN_CONEXION']=date('Y-m-d H:i:s');
							$this->academico_model->actualizarRetoEstudiante($dat_actualiza,$reto_estudiante['ID_RETO_ESTUDIANTE']);
							$tabla.='<div class="alert alert-success">Reto finalizado. Calificaci&oacute;n: <strong>'.$calificacion.'</strong></div>';
							$tabla.='<script>$("#retoEstudiante").on(\'hide.bs.modal\',function(){ window.location.reload();});</script>';
							//transpasar nota
							$this->promedioRetoProyecto($usuario['ID_PERSONA'],$idPlanificacion);
						}else{//mostrar pregunta
							$idsp=array();
							foreach($preguntas as $pregunta){
								$idsp[]=$pregunta['ID_PREGUNTA_RETO_CONTENIDO'];
							}
							$tabla.='<div class="alert alert-info panel panel-info"><table width="100%"><tr><td style="font-size:13px;">Pregunta '.(array_search($idp,$idsp)+1).' de '.count($preguntas).'</td>';
							if($fechaFin!=''){
								$tabla.='<td><div align="right" style="font-size:12px;">Fecha Limite: '.$fechaFin.'</div></td>';
							}
							$tabla.='</tr></table></div>';
							foreach($preguntas as $k=>$p){
								if($idp==$p['ID_PREGUNTA_RETO_CONTENIDO']){
									$pe=$p;
									$img='';
									if($pe['IMAGEN']!='' and file_exists(FCPATH.'archivos/contenidos/retos/'.$pe['IMAGEN'])){
										$img='<div class="thumbnail"><img src="'.base_url('archivos/contenidos/retos')."/".$pe['IMAGEN'].'"/></div>';
									}
									$tabla.='<div class="panel panel-default">
											  <div class="panel-heading  card-header">
												<h3 class="panel-title">'.($k+1).') '.$pe['PREGUNTA'].'</h3>'.$img.'
											  </div>
											  <div class="panel-body card-body">
												<table>';
									//obtengo las opciones de respuesta
									$opciones_respuesta=$this->academico_model->getOpcionesRespuestaRetosContenido(array('ID_PREGUNTA_RETO_CONTENIDO'=>$pe['ID_PREGUNTA_RETO_CONTENIDO']));
									shuffle($opciones_respuesta);//desordenar las opciones de respuesta
									//recorrer las opciones de respuesta
									foreach($opciones_respuesta as $or){
										$op=$or;
										$seleccionado='';
										if(isset($respuestas[$k])){
											$respuestasSeleccionadas = explode("-", $respuestas[$k]);
											if (in_array($or['ID_OPCION_RESPUESTA_RETO_CONTENIDO'], $respuestasSeleccionadas)) {
												$seleccionado='checked';
											}
										}
										$img='';
										if($op['IMAGEN']!='' and file_exists(FCPATH.'archivos/contenidos/retos/'.$op['IMAGEN'])){
											$img='<div class="thumbnail"><img src="'.base_url('archivos/contenidos/retos')."/".$op['IMAGEN'].'"/></div>';
										}
										$tabla.='<tr><td valign="top"><input required="" name="opcion_seleccionada['.$p['ID_PREGUNTA_RETO_CONTENIDO'].'][]" type="checkbox" value="'.$p['ID_PREGUNTA_RETO_CONTENIDO'].'-'.$or['ID_OPCION_RESPUESTA_RETO_CONTENIDO'].'" id="opcion_respuesta'.$or['ID_OPCION_RESPUESTA_RETO_CONTENIDO'].'" style="transform: scale(1.5)" class="claseopcion" '.$seleccionado.'></td><td style="padding-left:10px"><label for="opcion_respuesta'.$or['ID_OPCION_RESPUESTA_RETO_CONTENIDO'].'" style="cursor: pointer">'.$op['OPCION_RESPUESTA'].' '.$img.'</label></td></tr>';
									}
									$tabla.='</table>
											</div>';
									$btnSig='';
									if(isset($idsp[$k+1])){
										$btnSig='<input type="button" name="sal_reto" value="Salir" class="btn-default btn btn-sm" id="sal_reto" data-dismiss="modal" data-bs-dismiss="modal" style="margin-right:10px">';
										$btnSig.='<input type="button" name="btn_sig" id="btn_sig" value="Siguiente" class="btn btn-primary btn-sm" onclick="get_pregunta(\''.$idRetoContenido.'\',\''.$idsp[$k].'\',\''.$idsp[$k+1].'\',1)">';
									}elseif(($k+1)==count($idsp)){
										$btnSig='<input type="button" name="btn_sig" id="btn_sig" value="FInalizar" class="btn btn-success btn-sm" onclick="get_pregunta(\''.$idRetoContenido.'\',\''.$idsp[$k].'\',\'-1\',1)">';
									}
									$btnAnt='';
									if(isset($preguntas[$k-1])){
										$btnAnt='<input type="button" name="btn_ant" value="Anterior" class="btn btn-default btn-sm" onclick="get_pregunta(\''.$idRetoContenido.'\',\''.$idsp[$k].'\',\''.$idsp[$k-1].'\',1)">';
									}
									$tabla.='<div id="error-pregunta" style="color:red; text-align:right"></div>';
									$tabla.='<div class="panel-footer card-footer"><table width="100%"><tr><td align="left">'.$btnAnt.'</td><td align="right">'.$btnSig.'</td></tr></table></div>';
									if(isset($preguntas[$k+1])){
										$tabla.='<script>$("#sal_reto").on(\'click\', function(){guardarRespuesta(\''.$idsp[$k].'\',\''.$idsp[$k+1].'\');});</script>';
									}
									$tabla.='</div>';
									break;
								}
							}
						}
					}else{
						$tabla.='<div class="alert alert-danger">No existe reto configurado</div>';
					}
				}
				//$respuesta=$tabla.$fecha_examen_inicio.' / '.$fecha_examen_fin.'<br>'.$ff_examen->format('H:i:s');
				$respuesta=$tabla;
			}elseif(count($retos_estudiante)>0){//vista de usuario diferente de estudiante

			}else{
				$respuesta='No examen complexivo';
			}
			echo $respuesta;
		}else{
			echo 'Acceso Denegado';
		}
	}

	//////////////////////////////////////////////////////////////////
	public function verRetoContenido()
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,101)){
			$perfil= $this->session->userdata('loggeado')['ID_PERFIL'];
			$idRetoContenido  = trim($this->input->post('idReto'));
			$fechaFin  = trim($this->input->post('fechafin'));
			$preguntas=$this->academico_model->getPreguntasRetosContenido(array('ID_RETO_CONTENIDO'=>$idRetoContenido));
			if(count($preguntas)>0){
				$tabla='<div align="right" style="font-size:12px; color:blue">Fecha Limite: '.$fechaFin.'</div>';
				foreach($preguntas as $k=>$p){
					$pe=$p;
					$img='';
					if($pe['IMAGEN']!='' and file_exists(FCPATH.'archivos/contenidos/retos/'.$pe['IMAGEN'])){
						$img='<div class="thumbnail"><img src="'.base_url('archivos/contenidos/retos')."/".$pe['IMAGEN'].'"/></div>';
					}
					$tabla.='<div class="panel panel-default">';
						$tabla.='<div class="panel-heading">';
							$tabla.='<h3 class="panel-title">'.($k+1).') '.$pe['PREGUNTA'].'</h3>'.$img;
						$tabla.='</div>';
						$tabla.='<div class="panel-body">';
						$tabla.='<table>';
					$opciones_respuesta=$this->academico_model->getOpcionesRespuestaRetosContenido(array('ID_PREGUNTA_RETO_CONTENIDO'=>$pe['ID_PREGUNTA_RETO_CONTENIDO']));
					$idOpcionesRespuestas = explode("+", $pe['ID_OPCION_RESPUESTA_RETO_CONTENIDO']);
					foreach($opciones_respuesta as $or){
						$op=$or;
						$opcion_correcta='';
						$seleccionado='';
						if(in_array($or['ID_OPCION_RESPUESTA_RETO_CONTENIDO'], $idOpcionesRespuestas)){
							$opcion_correcta=' style="background-color:#8ccc8c"';
						}
						$img='';
						if($op['IMAGEN']!='' and file_exists(FCPATH.'archivos/contenidos/retos/'.$op['IMAGEN'])){
							$img='<div class="thumbnail"><img src="'.base_url('archivos/contenidos/retos')."/".$op['IMAGEN'].'"/></div>';
						}
						$tabla.='<tr '.$opcion_correcta.'>';
							$tabla.='<td valign="top">';
									$tabla.='<input type="checkbox" id="opcion_respuesta'.$or['ID_OPCION_RESPUESTA_RETO_CONTENIDO'].'" class="claseopcion" '.$seleccionado.' style="transform: scale(1.5)" disabled>';
							$tabla.='</td>';
							$tabla.='<td style="padding-left:10px">';
									$tabla.='<label for="opcion_respuesta'.$or['ID_OPCION_RESPUESTA_RETO_CONTENIDO'].'">'.$op['OPCION_RESPUESTA'];
								$tabla.=$img.'</label>';
							$tabla.='</td>';
						$tabla.='</tr>';
					}
					$tabla.='</table>
							</div>';
					$tabla.='</div>';
				}
				$respuesta=$tabla;
			}else{
				$respuesta='No tiene preguntas';
			}
			echo $respuesta;
		}else{
			echo 'Acceso Denegado';
		}
	}

	////////////////////////////////////////////////////////////////////////////
	public function calificacionesPromedioRetos()
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,101)){
			$usuario=$this->session->userdata('loggeado');
			$idPlanificacion = trim($this->input->post('id_planificacion'));
			$contenidos = $this->academico_model->listado_contenido(array('ID_PLANIFICACION'=>$idPlanificacion));
			if(count($contenidos)>0){
				$contenido=$contenidos[0];
				$dato_contenido=$this->academico_model->getContenidoMateria($contenido['ID_CARRERA_MATERIA'],$contenido['ID_PERIODO_ACADEMICO'],$contenido['ID_PLANTILLA']);
				$dat_e['ID_CARRERA_MATERIA']=$contenido['ID_CARRERA_MATERIA'];
				$dat_e['ID_PERIODO_ACADEMICO']=$contenido['ID_PERIODO_ACADEMICO'];
				$dat_e['ID_GRUPO']=$contenido['ID_GRUPO'];
				if($usuario['ID_PERFIL']==12){
					$dat_e['ID_USUARIO_ACADEMICO']=$usuario['ID_USUARIO'];
				}
				$estudiantes=$this->academico_model->get_estudiantes($dat_e);
				$num_retos=0;
				if($dato_contenido!=NULL){
					$dat['ID_CONTENIDO']=$dato_contenido['ID_CONTENIDO'];
					$dat['TIPO']='0';
					$num_retos=count($this->academico_model->getRetosProyectosContenido($dat));
				}else{
					$dato_contenido['ID_CONTENIDO']='0';
				}
				$tabla='<table class="table table-condensed"><tr>';
				$tabla.='<th>Nro.</th>';
				$tabla.='<th>Estudiante</th>';
				$tabla.='<th>Nro. Retos Enviados</th>';
				$tabla.='<th>Nro. Retos Realizados</th>';
				$tabla.='<th>Calificaci&oacute;n Promedio</th></tr>';
				foreach($estudiantes as $k=>$estudiante){
					$tabla.='<tr><td>'.($k+1).'</td>';
					$tabla.='<td>'.$estudiante['ESTUDIANTE'].'</td>';
					$tabla.='<td align="center">'.$num_retos.'</td>';
					$retos_realizados=$this->academico_model->retos_realizados_estudiante($estudiante['ID_PERSONA'],$dato_contenido['ID_CONTENIDO']);
					$num_retos_realizados=0;
					$calificacion=0;
					foreach($retos_realizados as $reto_realizado){
						$num_retos_realizados+=1;
						$calificacion+=$reto_realizado['CALIFICACION'];
					}
					if($num_retos>0){
						$calificacion_promedio=sprintf("%01.2f",round($calificacion/$num_retos,2));
					}else{
						$calificacion_promedio='';
					}
					$tabla.='<td align="center">'.$num_retos_realizados.'</td>';
					$tabla.='<td align="center" class="text-primary">'.$calificacion_promedio.'</td></tr>';
				}
				$tabla.='</table>';
				echo $tabla;
			}
		}else{
			echo "Sesion Terminada";
		}
	}

	///////////////////////////////////////////////////////////////
	public function gestionContenidoProyectos($idPlanificacion)
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,101)){
			$perfil=$this->session->userdata('loggeado')['ID_PERFIL'];
			$usuario=$this->session->userdata('loggeado');
			$num_proyectos_asignar=1;
			if(!$this->input->is_ajax_request()) {
				$contenidos = $this->academico_model->listado_contenido(array('ID_PLANIFICACION'=>$idPlanificacion));
				if(count($contenidos)>0){
					$contenido=$contenidos[0];
					$fecha_fin='';
					$fechast=$contenido['FECHA_TUTORIA2'].'+'.$contenido['FECHA_TUTORIA3'].'+'.$contenido['FECHA_TUTORIA4'].'+'.$contenido['FECHAS_TUTORIA'];
					$vector_ft=explode('+',$fechast);
					foreach($vector_ft as $ft){
						if($ft!='' and $ft!=NULL and $ft!='0000-00-00'){
							$fecha_fin=$ft;
						}
					}
					$contenido['FECHA_FIN']=$fecha_fin;
					$dato_contenido=$this->academico_model->getContenidoMateria($contenido['ID_CARRERA_MATERIA'],$contenido['ID_PERIODO_ACADEMICO'],$contenido['ID_PLANTILLA']);
					$proyectos=array();
					if($dato_contenido!=NULL){
						$dat['ID_CONTENIDO']=$dato_contenido['ID_CONTENIDO'];
						$dat['TIPO']=1;
						$proyectos=$this->academico_model->getRetosProyectosContenido($dat);
						if($perfil==5){
							$idPersona = $this->session->userdata('loggeado')['ID_PERSONA'];
							$proyectos_asignados=$this->academico_model->proyectos_realizados_estudiante($idPersona,$dato_contenido['ID_CONTENIDO']);
							//asignar proyecto al estudiante
							if(count($proyectos_asignados)<$num_proyectos_asignar and count($proyectos)>0){
								$indice=rand(0,(count($proyectos)-1));
								$dat_proyecto_asignado['ID_PROYECTO_CONTENIDO']=$proyectos[$indice]['ID_RETO_PROYECTO_CONTENIDO'];
								$dat_proyecto_asignado['ID_PERSONA']=$idPersona;
								$this->academico_model->crearRespuestaProyecto($dat_proyecto_asignado);
							}
							///agregar datos de respuesta
							foreach($proyectos as $k=>$proyecto){
								$idProyectoContenido=$proyecto['ID_RETO_PROYECTO_CONTENIDO'];
								$aplazos=$this->academico_model->getAplazoContenido($idPersona,1,$idProyectoContenido);
								if(count($aplazos)>0){
									$proyectos[$k]['FECHA_APLAZADA']=$aplazos[0]['FECHA_APLAZADA'];
								}
								$respuestas=$this->academico_model->proyectos_realizados_estudiante($idPersona,null,$idProyectoContenido);
								if(count($respuestas)>0){
									$proyectos[$k]['respuesta']=$respuestas[0];
								}else{
									unset($proyectos[$k]);
								}
							}
						}else{

							//estudiantes del grupo
							$dat_e['ID_CARRERA_MATERIA']=$contenido['ID_CARRERA_MATERIA'];
							$dat_e['ID_PERIODO_ACADEMICO']=$contenido['ID_PERIODO_ACADEMICO'];
							$dat_e['ID_GRUPO']=$contenido['ID_GRUPO'];
							if($usuario['ID_PERFIL']==12){
								$dat_e['ID_USUARIO_ACADEMICO']=$usuario['ID_USUARIO'];
							}
							$estudiantes=$this->academico_model->get_estudiantes($dat_e);
							$ids_persona=array();
							foreach($estudiantes as $estudiante){

								$idPersona = $estudiante['ID_PERSONA'];
								$proyectos_asignados=$this->academico_model->proyectos_realizados_estudiante($idPersona,$dato_contenido['ID_CONTENIDO']);
								//asignar proyecto al estudiante
								if(count($proyectos_asignados)<$num_proyectos_asignar and count($proyectos)>0){
									$indice=rand(0,(count($proyectos)-1));
									$dat_proyecto_asignado['ID_PROYECTO_CONTENIDO']=$proyectos[$indice]['ID_RETO_PROYECTO_CONTENIDO'];
									$dat_proyecto_asignado['ID_PERSONA']=$idPersona;
									$this->academico_model->crearRespuestaProyecto($dat_proyecto_asignado);
									//$asignados.=$estudiante['ESTUDIANTE'].' -> '.$contenido['MATERIA'].'<br>';
								}

								$ids_persona[]=$estudiante['ID_PERSONA'];
							}
							$vec_id_persona=implode(',',$ids_persona);
							foreach($proyectos as $k=>$proyecto){
								if(count($ids_persona)>0){
									$proyectos[$k]['num_respuestas'] = $this->academico_model->num_respuestasProyectos_estudiantes($proyecto['ID_RETO_PROYECTO_CONTENIDO'],$vec_id_persona);
								}else{
									$proyectos[$k]['num_respuestas'] = 0;
								}
							}
						}
					}
					$idPeriodo=$this->academico_model->get_periodo_activado();
					$periodo=$this->academico_model->getPeriodo($idPeriodo);
					$datos['fecha_max']=$periodo['FECHA_FIN'];//fecha fin de periodo
					$datos['contenido']  = $contenido;
					$datos['proyectos']  = $proyectos;
					$datos['perfil']  = $this->session->userdata('loggeado')['ID_PERFIL'];
					$datos1=$this->perfil_model->cabecera($idusuario);
					$this->load->view('templates/header',$datos1);
					$this->load->view('gestionProyectosContenido',$datos);
					$this->load->view('templates/footer');
				}else{
					echo 'Acceso Denegado';
				}
			}
		}else{
			redirect('admin/login', 'refresh');
		}
	}

	////////////////////////////////////////////////////////////////////////////
	public function calificacionesPromedioProyectos()
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,101)){
			$usuario=$this->session->userdata('loggeado');
			$idPlanificacion = trim($this->input->post('id_planificacion'));
			$contenidos = $this->academico_model->listado_contenido(array('ID_PLANIFICACION'=>$idPlanificacion));
			if(count($contenidos)>0){
				$contenido=$contenidos[0];
				$dato_contenido=$this->academico_model->getContenidoMateria($contenido['ID_CARRERA_MATERIA'],$contenido['ID_PERIODO_ACADEMICO'],$contenido['ID_PLANTILLA']);
				$dat_e['ID_CARRERA_MATERIA']=$contenido['ID_CARRERA_MATERIA'];
				$dat_e['ID_PERIODO_ACADEMICO']=$contenido['ID_PERIODO_ACADEMICO'];
				$dat_e['ID_GRUPO']=$contenido['ID_GRUPO'];
				if($usuario['ID_PERFIL']==12){
					$dat_e['ID_USUARIO_ACADEMICO']=$usuario['ID_USUARIO'];
				}
				$estudiantes=$this->academico_model->get_estudiantes($dat_e);
				$num_proyectos=0;
				if($dato_contenido!=NULL){
					$dat['ID_CONTENIDO']=$dato_contenido['ID_CONTENIDO'];
					$dat['TIPO']=1;
					$num_proyectos=count($this->academico_model->getRetosProyectosContenido($dat));
				}else{
					$dato_contenido['ID_CONTENIDO']='0';
				}
				$tabla='<table class="table table-condensed"><tr>';
				$tabla.='<th>Nro.</th>';
				$tabla.='<th>Estudiante</th>';
				$tabla.='<th>Nro. Proyectos Enviados</th>';
				$tabla.='<th>Nro. Proyectos Realizados</th>';
				$tabla.='<th>Calificaci&oacute;n Promedio</th></tr>';
				foreach($estudiantes as $k=>$estudiante){
					$tabla.='<tr><td>'.($k+1).'</td>';
					$tabla.='<td>'.$estudiante['ESTUDIANTE'].'</td>';
					//$tabla.='<td align="center">'.$num_proyectos.'</td>';
					$proyectos_realizados=$this->academico_model->proyectos_realizados_estudiante($estudiante['ID_PERSONA'],$dato_contenido['ID_CONTENIDO']);
					$num_proyectos_realizados=0;
					$calificacion=0;
					foreach($proyectos_realizados as $proyecto_realizado){
						if($proyecto_realizado['RESPUESTA']!=NULL){
							$num_proyectos_realizados+=1;
							$calificacion+=$proyecto_realizado['CALIFICACION'];
						}
					}
					//if($num_proyectos>0){
					if(count($proyectos_realizados)>0){
						//$calificacion_promedio=round($calificacion/$num_proyectos,2);
						$calificacion_promedio=sprintf("%01.2f",round($calificacion/count($proyectos_realizados),2));
					}else{
						$calificacion_promedio='';
					}
					$tabla.='<td align="center">'.count($proyectos_realizados).'</td>';
					$tabla.='<td align="center">'.$num_proyectos_realizados.'</td>';
					$tabla.='<td align="center" class="text-primary">'.$calificacion_promedio.'</td></tr>';
				}

				$tabla.='</table>';
				echo $tabla;
			}
		}else{
			echo "Sesion Terminada";
		}
	}

	//////////////////////////////////////////////////////////////////
	public function calificacionesProyecto()
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,101)){
			$perfil    = $this->session->userdata('loggeado')['ID_PERFIL'];
			$usuario = $this->session->userdata('loggeado');
			$idProyectoContenido  = trim($this->input->post('id_proyecto'));
			$idPlanificacion  = trim($this->input->post('id_planificacion'));
			$contenidos = $this->academico_model->listado_contenido(array('ID_PLANIFICACION'=>$idPlanificacion));
			if(count($contenidos)>0){
				$contenido=$contenidos[0];
				$dato_contenido=$this->academico_model->getContenidoMateria($contenido['ID_CARRERA_MATERIA'],$contenido['ID_PERIODO_ACADEMICO'],$contenido['ID_PLANTILLA']);
				$proyectos_realizados=$this->academico_model->proyectos_realizados_estudiante(null,null,$idProyectoContenido);
				$realizados=array();
				foreach($proyectos_realizados as $pr){
					$realizados[$pr['ID_PERSONA']]=$pr;
				}
				$dat_e['ID_CARRERA_MATERIA']=$contenido['ID_CARRERA_MATERIA'];
				$dat_e['ID_PERIODO_ACADEMICO']=$contenido['ID_PERIODO_ACADEMICO'];
				$dat_e['ID_GRUPO']=$contenido['ID_GRUPO'];
				if($usuario['ID_PERFIL']==12){
					$dat_e['ID_USUARIO_ACADEMICO']=$usuario['ID_USUARIO'];
				}
				$estudiantes=$this->academico_model->get_estudiantes($dat_e);
				$fechaCierre=$this->academico_model->get_fecha_cierre(array('ID_GRUPO'=>$contenido['ID_GRUPO'],'ID_MATERIA'=>$contenido['ID_CARRERA_MATERIA'],'ID_PERIODO_ACADEMICO'=>$contenido['ID_PERIODO_ACADEMICO'],'ID_PLANTILLA'=>$contenido['ID_PLANTILLA']));
				$calificacion_cerrada=0;
				if(count($fechaCierre)>0){
					if($fechaCierre['FECHA_APLAZADO']!='0000-00-00'){
						$datetime1 = date_create($fechaCierre['FECHA_APLAZADO'].' 23:59:59');
					}else{
						$datetime1 = date_create($fechaCierre['FECHA_CIERRE'].' 23:59:59');
					}
					$datetime2 = date_create(date('Y-m-d H:i:s'));
					if($datetime1<$datetime2){
						$calificacion_cerrada=1;
					}
				}
				$tabla='';
				if($calificacion_cerrada==1){
					$tabla.='<div class="col-md-12 col-sm-12 col-xs-12 text-primary" align="center" style="border:solid 1px #A5C2C8; font-weight:bold"><strong style="font-size:20px"><span class="glyphicon glyphicon-info-sign"></span></strong> Periodo de calificaci&oacute;n cerrada</div>';
				}
				$tabla.='<form action="'.site_url().'/academico/academico/calificarProyecto/'.$idPlanificacion.'" method="post" name="formulario_calificacion" id="formulario_calificacion">';
					$tabla.='<div id="respuesta_calificacion"></div>';
					$tabla.='<table class="table table-condensed">';
						$tabla.='<tr>';
							$tabla.='<th>N&deg;</th>';
							$tabla.='<th>ESTUDIANTE</th>';
							$tabla.='<th>RESPUESTA</th>';
							$tabla.='<th>FECHA</th>';
							$tabla.='<th>CALIFICACI&Oacute;N</th>';
							$tabla.='<th style="text-align:center;">COMENTARIO</th>';
						$tabla.='</tr>';
						$contador = 1;
				foreach($estudiantes as $estudiante){
					if(isset($realizados[$estudiante['ID_PERSONA']])){
						$tabla.='<tr onMouseOver="this.style.backgroundColor=\'#EBFCE2\'" onMouseOut="this.style.backgroundColor=\'\'">';
						$tabla.='<td>'.$contador.'</td>';
						$contador++;
						$tabla.='<td>'.$estudiante['ESTUDIANTE'].'</td>';
						$calificacion='';
						$fecha='-';
						$archivo='Sin Archivo';
						$texto_archivo='Sin Archivo';
						$comentario='';
						//if(isset($realizados[$estudiante['ID_PERSONA']])){
							$respuesta=$realizados[$estudiante['ID_PERSONA']];
							if($respuesta['RESPUESTA']!='' and $respuesta['RESPUESTA']!=NULL){
								$archivo='<a href="'.base_url('archivos/contenidos/proyectos/').'/'.$respuesta['RESPUESTA'].'" title="Ver respuesta" target="_blank" style="color:#052F90"><span class="glyphicon glyphicon-list-alt" style="font-size:20px"></span></a> ';
								$texto_archivo='';
								$f=explode(' ',$respuesta['FECHA']);
								$fecha=$f[0];
							}
							$calificacion=$respuesta['CALIFICACION'];
							$comentario=$respuesta['COMENTARIO'];
							//$f=explode(' ',$respuesta['FECHA']);
							//$fecha=$f[0];
						//}
						$tabla.='<td align="center">'.$archivo.'</td>';
						$tabla.='<td nowrap="nowrap" align="center">'.$fecha.'</td>';
						$tabla.='<td align="center"><input style="width:80px" class="form-control" type="text" name="calificacion['.$estudiante['ID_PERSONA'].']" id="calificacion'.$estudiante['ID_PERSONA'].'" onChange="verifica(this,\''.$texto_archivo.'\')" autocomplete="off" value="'.$calificacion.'"></td>';
						$tabla.= '<td align="center"><textarea class="form-control" name="comentario['.$estudiante['ID_PERSONA'].']" id="comentario'.$estudiante['ID_PERSONA'].'" maxlength="50">'.$comentario.'</textarea></td>';
						$tabla.='</tr>';
					}
				}
				$tabla.='</table>';
					$tabla.='<input type="hidden" name="id_proyecto" id="id_proyecto" value="'.$idProyectoContenido.'">';
				$tabla.='<input type="hidden" name="calificacion_cerrada" id="calificacion_cerrada" value="'.$calificacion_cerrada.'">';
				$tabla.='<input type="hidden" name="num_respuestas" id="num_respuestas" value="'.$contador.'">';
				$tabla.='</form>';
				echo $tabla;
			}else{
				echo 'Sin Contenido';
			}
		}else{
			redirect('index', 'refresh');
		}
	}

	///////////////////////////////////////////////////////////////////
	public function calificarProyecto($idPlanificacion=null)
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,101)){
			$idProyectoContenido = trim($this->input->post('id_proyecto'));
			$calificaciones = $this->input->post('calificacion');
			$comentarios = $this->input->post('comentario');
			$proyectos_realizados=$this->academico_model->proyectos_realizados_estudiante(null,null,$idProyectoContenido);
			$realizados=array();
			foreach($proyectos_realizados as $pr){
				$realizados[$pr['ID_PERSONA']]=$pr;
			}
			foreach($calificaciones as $idp=>$cal){
				$datos=array();
				if($cal==''){
					$cal=NULL;
				}
				$datos['CALIFICACION']=$cal;
				$datos['COMENTARIO']=$comentarios[$idp];
				if(isset($realizados[$idp])){
					$this->academico_model->actualizarRespuestaProyecto($datos,$realizados[$idp]['ID_RESPUESTA_PROYECTO']);
					$this->promedioRetoProyecto($idp,$idPlanificacion);
				}else{
					if($cal!=NULL){
						$datos['ID_PROYECTO_CONTENIDO']=$idProyectoContenido;
						$datos['ID_PERSONA']=$idp;
						$datos['FECHA']=date('Y-m-d H:i:s');

						//$this->academico_model->crearRespuestaProyecto($datos);
						//$this->promedioRetoProyecto($idp,$idPlanificacion);
					}
				}
			}
			$calificaciones['respuesta']          = 1;
			$calificaciones['mensaje']            = 'Calificaciones Guardadas';
			echo json_encode($calificaciones);
		}else{
			echo "Sesion Terminada";
		}
	}

	//////////////////////////////////////////////////////////////////
	public function aplazoProyecto()
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,101)){
			$perfil    = $this->session->userdata('loggeado')['ID_PERFIL'];
			$idProyectoContenido  = trim($this->input->post('id_proyecto'));
			$idPlanificacion  = trim($this->input->post('id_planificacion'));
			$contenidos = $this->academico_model->listado_contenido(array('ID_PLANIFICACION'=>$idPlanificacion));
			if(count($contenidos)>0){
				$contenido=$contenidos[0];
				$dato_contenido=$this->academico_model->getContenidoMateria($contenido['ID_CARRERA_MATERIA'],$contenido['ID_PERIODO_ACADEMICO'],$contenido['ID_PLANTILLA']);
				$aplazos_proyecto=$this->academico_model->getAplazoContenido(null,1,$idProyectoContenido);
				$aplazos=array();
				foreach($aplazos_proyecto as $ap){
					$aplazos[$ap['ID_PERSONA']]=$ap['FECHA_APLAZADA'];
				}
				$proyectos_asignados=$this->academico_model->proyectos_realizados_estudiante(null,null,$idProyectoContenido);
				$asignados=array();
				foreach($proyectos_asignados as $pr){
					$asignados[$pr['ID_PERSONA']]=$pr;
				}
				$estudiantes=$this->academico_model->get_estudiantes(array('ID_CARRERA_MATERIA'=>$contenido['ID_CARRERA_MATERIA'],'ID_PERIODO_ACADEMICO'=>$contenido['ID_PERIODO_ACADEMICO'],'ID_GRUPO'=>$contenido['ID_GRUPO']));
				$tabla='<form action="'.site_url().'/academico/academico/aplazarProyecto/" method="post" name="formulario_aplazo" id="formulario_aplazo">';
					$tabla.='<div id="respuesta_aplazo"></div>';
					$tabla.='<table class="table table-condensed">';
						$tabla.='<tr>';
							$tabla.='<th>N&deg;</th>';
							$tabla.='<th>Estudiante</th>';
							$tabla.='<th>Fecha Aplazada</th>';
						$tabla.='</tr>';
						$contador = 1;
				foreach($estudiantes as $estudiante){
					if(isset($asignados[$estudiante['ID_PERSONA']])){
						$tabla.='<tr onMouseOver="this.style.backgroundColor=\'#EBFCE2\'" onMouseOut="this.style.backgroundColor=\'\'">';
						$tabla.='<td>'.$contador.'</td>';
						$contador++;
						$tabla.='<td>'.$estudiante['ESTUDIANTE'].'</td>';
						$fecha='';
						if(isset($aplazos[$estudiante['ID_PERSONA']])){
							$fecha=$aplazos[$estudiante['ID_PERSONA']];
						}
						$tabla.='<td align="center"><input class="form-control faplazo" type="text" name="fecha_aplazo['.$estudiante['ID_PERSONA'].']" id="fecha_aplazo'.$estudiante['ID_PERSONA'].'" autocomplete="off" placeholder="Fecha Aplazada" readonly value="'.$fecha.'"></td>';
						$tabla.='</tr>';
					}
				}
				$tabla.='</table>';
					$tabla.='<input type="hidden" name="id_proyecto" id="id_proyecto" value="'.$idProyectoContenido.'">';
					$tabla.='<input type="hidden" name="num_asignados" id="num_asignados" value="'.$contador.'">';
				$tabla.='</form>';
				echo $tabla;
			}else{
				echo 'Sin Contenido';
			}
		}else{
			redirect('index', 'refresh');
		}
	}

	///////////////////////////////////////////////////////////////////
	public function aplazarProyecto()
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,101)){
			$idProyectoContenido = trim($this->input->post('id_proyecto'));
			$fechas = $this->input->post('fecha_aplazo');
			foreach($fechas as $idp=>$fecha){
				$this->academico_model->borrarAplazoContenido($idp,1,$idProyectoContenido);
				$datos=array();
				if($fecha!=''){
					$datos['ID']=$idProyectoContenido;
					$datos['TIPO']=1;//tipo proyecto
					$datos['ID_PERSONA']=$idp;
					$datos['FECHA_APLAZADA']=$fecha;
					$this->academico_model->crearAplazoContenido($datos);
				}
			}
			$respuesta['respuesta']          = 1;
			$respuesta['mensaje']            = 'Registros Guardados';
			echo json_encode($respuesta);
		}else{
			echo "Sesion Terminada";
		}
	}

	//////////////////////////////////////////////////////////////////
	public function respuestaProyecto()
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,101)){
			$perfil = $this->session->userdata('loggeado')['ID_PERFIL'];
			$idProyectoContenido = trim($this->input->post('id_proyecto'));
			$fecha_fin = trim($this->input->post('fecha_fin'));
			if($idProyectoContenido>0 and isset($_FILES['archivo'])){
				$idPersona=$this->session->userdata('loggeado')['ID_PERSONA'];
				$archivo= $_FILES['archivo']['name'];
				$ingreso_archivo='';
				$nombre_archivo='';
				$res=1;
				$mensaje='Registro Realizado';
				if($archivo!=''){
					$dato_archivo=$this->cargar_archivo('archivo',2048,'contenidos/proyectos/');
					if($dato_archivo['error']==''){
						$nombre_archivo=$dato_archivo['file_name'];
					}else{
						$ingreso_archivo=$dato_archivo['error'];
						$res=0;
						$mensaje ='Fallo Ingreso :'.$ingreso_archivo;
					}
				}
				$fechaFin = date_create($fecha_fin.' 23:59:59');
				$fechaActual = date_create(date('Y-m-d H:i:s'));
				$aplazos_proyecto=$this->academico_model->getAplazoContenido($idPersona,1,$idProyectoContenido);
				if(count($aplazos_proyecto)>0){
					$fechaFin = date_create($aplazos_proyecto[0]['FECHA_APLAZADA'].' 23:59:59');
				}
				$data=array();
				//verificar que no exista ya registrado una respuesta del estudiante
				$proyectos_realizados=$this->academico_model->proyectos_realizados_estudiante($idPersona,null,$idProyectoContenido);
				if(count($proyectos_realizados)>0 and $nombre_archivo!='' and $fechaActual<=$fechaFin){
					$respuesta=$proyectos_realizados[0];
					//if($respuesta['CALIFICACION']==NULL or $respuesta['CALIFICACION']==''){
					if($respuesta['CALIFICACION']<=0){
						$data['RESPUESTA']=$nombre_archivo;
						$data['FECHA']=date('Y-m-d H:i:s');
						$this->academico_model->actualizarRespuestaProyecto($data,$respuesta['ID_RESPUESTA_PROYECTO']);
						if($respuesta['RESPUESTA']!="" and $respuesta['RESPUESTA']!=NULL){
							unlink(FCPATH.'archivos/contenidos/proyectos/'.$respuesta['RESPUESTA']);
						}
					}else{
						$res=0;
						$mensaje='Fallo: Ya no se puede cambiar el archivo. Tiene Calificacion';
						unlink(FCPATH.'archivos/contenidos/proyectos/'.$nombre_archivo);
					}
				}elseif($nombre_archivo!='' and $fechaActual<=$fechaFin){
					$data['ID_PROYECTO_CONTENIDO']=$idProyectoContenido;
					$data['ID_PERSONA']=$idPersona;
					$data['RESPUESTA']=$nombre_archivo;
					$data['FECHA']=date('Y-m-d H:i:s');
					$this->academico_model->crearRespuestaProyecto($data);
				}else{
					$res=0;
					$mensaje='Fallo: no se puede guardar el registro';
				}
				$respuesta['respuesta']=$res;
				$respuesta['mensaje']=$mensaje;
			}else{
				$respuesta['respuesta']=0;
				$respuesta['mensaje']='Fallo: no se puede guardar el registro';
			}
			echo json_encode($respuesta);
		}else{
			echo 'Acceso Denegado';
		}
	}

	////////////////////////////////////////////////////////////////////////////
	public function borrarArchivoProyecto()
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,101)){
			$idPersona=$this->session->userdata('loggeado')['ID_PERSONA'];
			$idProyectoContenido = trim($this->input->post('id_proyecto'));
			$archivo = trim($this->input->post('archivo'));
			$fecha_fin = trim($this->input->post('fecha_fin'));
			$fechaFin = date_create($fecha_fin.' 23:59:59');
			$fechaActual = date_create(date('Y-m-d H:i:s'));
			$aplazos_proyecto=$this->academico_model->getAplazoContenido($idPersona,1,$idProyectoContenido);
			if(count($aplazos_proyecto)>0){
				$fechaFin = date_create($aplazos_proyecto[0]['FECHA_APLAZADA'].' 23:59:59');
			}
			$proyectos_realizados=$this->academico_model->proyectos_realizados_estudiante($idPersona,null,$idProyectoContenido);
			if(count($proyectos_realizados)>0){
				$respuesta=$proyectos_realizados[0];
				//if(($respuesta['CALIFICACION']==NULL or $respuesta['CALIFICACION']=='') and $fechaActual<=$fechaFin){
				if($respuesta['CALIFICACION']<=0 and $fechaActual<=$fechaFin){
					if($archivo!=''){
						unlink(FCPATH.'archivos/contenidos/proyectos/'.$archivo);
					}
					$data['RESPUESTA']=NULL;
					$this->academico_model->actualizarRespuestaProyecto($data,$respuesta['ID_RESPUESTA_PROYECTO']);
					echo '1';
				}else{
					echo '0';
				}
			}
		}else{
			echo "Sesion Terminada";
		}
	}

	////////////////////////////////////////////////////////////////////////////
	public function promedioRetoProyecto($idPersona,$idPlanificacion)
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,101)){
			$contenidos = $this->academico_model->listado_contenido(array('ID_PLANIFICACION'=>$idPlanificacion));
			if(count($contenidos)>0){
				$contenido=$contenidos[0];
				$dato_contenido=$this->academico_model->getContenidoMateria($contenido['ID_CARRERA_MATERIA'],$contenido['ID_PERIODO_ACADEMICO'],$contenido['ID_PLANTILLA']);
				if($dato_contenido!=NULL){
					$dat['ID_CONTENIDO']=$dato_contenido['ID_CONTENIDO'];
					$dat['TIPO']=1;
					$num_proyectos=count($this->academico_model->getRetosProyectosContenido($dat));
					$proyectos_realizados=$this->academico_model->proyectos_realizados_estudiante($idPersona,$dato_contenido['ID_CONTENIDO']);
					$calificacion=0;
					$existe_calificacion_proyecto=0;
					foreach($proyectos_realizados as $proyecto_realizado){
						$calificacion+=$proyecto_realizado['CALIFICACION'];
						if($proyecto_realizado['CALIFICACION']!=NULL and $proyecto_realizado['CALIFICACION']!=''){
							$existe_calificacion_proyecto=1;
						}
					}
					$calificacion_proyecto=0;
					/*if($num_proyectos>0){
						$calificacion_proyecto=round($calificacion/$num_proyectos,2);
					}*/
					if(count($proyectos_realizados)>0){
						$calificacion_proyecto=round($calificacion/count($proyectos_realizados),2);
					}
					$dat['ID_CONTENIDO']=$dato_contenido['ID_CONTENIDO'];
					$dat['TIPO']='0';
					$num_retos=count($this->academico_model->getRetosProyectosContenido($dat));
					$retos_realizados=$this->academico_model->retos_realizados_estudiante($idPersona,$dato_contenido['ID_CONTENIDO']);
					$calificacion=0;
					foreach($retos_realizados as $reto_realizado){
						$calificacion+=$reto_realizado['CALIFICACION'];
					}
					$calificacion_reto=0;
					if($num_retos>0){
						$calificacion_reto=round($calificacion/$num_retos,2);
					}
					$calificacion_promedio=round($calificacion_proyecto*0.6+$calificacion_reto*0.4,2);
					$estudianteCarreraMateria = $this->academico_model->get_estudianteCarreraMateria(array('ID_CARRERA_MATERIA'=>$contenido['ID_CARRERA_MATERIA'],'ID_PERIODO_ACADEMICO'=>$contenido['ID_PERIODO_ACADEMICO'],'ID_GRUPO'=>$contenido['ID_GRUPO'],'ID_PERSONA'=>$idPersona));
					if($existe_calificacion_proyecto==1){//enviar calificación a componente solo si el proyecto tiene calificacion
						$this->registraCalificacionComponente(1,$estudianteCarreraMateria['ID_ESTUDIANTE_CARRERA_MATERIA'],1,$calificacion_promedio,$contenido['ID_PLANTILLA']);
					}
				}
			}
		}else{
			echo "Sesion Terminada";
		}
	}



	///////////////////////////////////////////////////////////////
	public function gestionTalleres($id_planificacion){
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,101)){
			$perfil = $this->session->userdata('loggeado')['ID_PERFIL'];
			$id_taller = trim($this->input->post('id_taller'));
			$id_estudiantes = $this->input->post('estudiante');
			$seleccion_todos = $this->input->post('seleccion_todos');

			$cabecera_taller = $this->academico_model->get_docente_carrera_materia_grupo_planificacion(array('ID_PLANIFICACION'=>$id_planificacion));
			$estudiantes     = $this->academico_model->get_estudiantes(array('ID_CARRERA_MATERIA'=>$cabecera_taller['ID_CARRERA_MATERIA'],'ID_PERIODO_ACADEMICO'=>$cabecera_taller['ID_PERIODO_ACADEMICO'],'ID_GRUPO'=>$cabecera_taller['ID_GRUPO']));
			if(isset($id_taller) and $id_taller!='' and $perfil!=5){
				$data['TITULO']           = trim($this->input->post('titulo'));
				$data['DESCRIPCION']      = trim($this->input->post('texto'));
				$data['ID_PLANIFICACION'] = trim($this->input->post('id_planificacion'));
				$data['FECHA_LIMITE'] = trim($this->input->post('fecha_limite'));
				$num_archivos=trim($this->input->post('nroArchivos'));
				$tipo_archivos='';
				for($i=1; $i<=$num_archivos; $i++){
					$tipo_archivos.=$this->input->post('tipo_archivo_'.$i).'+';
				}
				$data['TIPO_ARCHIVOS_RESPUESTA'] = trim($tipo_archivos,'+');
				//carga de archivo
				$archivo= $_FILES['archivo']['name'];
				$ingreso_archivo='';
				$nombre_archivo='';
				$res=1;
				$mensaje='Registro Realizado';
				if($archivo!=''){
					// cargar_archivo($iname,$peso=0,$carpeta='')

					$dato_archivo=$this->cargar_archivo('archivo',0,'contenidos/talleres/');

					if($dato_archivo['error']==''){
						$nombre_archivo=$dato_archivo['file_name'];
						$data['TALLER'] = $nombre_archivo;
					}else{
						$ingreso_archivo=$dato_archivo['error'];
						$res=0;
						$mensaje='Fallo Ingreso :'.$ingreso_archivo;
					}
				}

				if($id_taller==0 and $res==1){
					$data['FECHA_CREACION'] = date('Y-m-d H:i:s');
					$creacion_taller        = $this->academico_model->crearTaller($data);
					$dataTE['ID']           = $creacion_taller;
					$dataTE['TIPO']         = 2;
					if($seleccion_todos==1){
						foreach($estudiantes as $est){
							$dataTE['ID_PERSONA'] = $est['ID_PERSONA'];
							if ($this->input->post('fechaLimiteEstudiante_'.$est['ID_PERSONA'])!="") {
								$dataTE['FECHA_APLAZADA'] = $this->input->post('fechaLimiteEstudiante_'.$est['ID_PERSONA']);
							}else{
								$dataTE['FECHA_APLAZADA'] = null;
							}

							$this->academico_model->crearTallerEstudiante($dataTE);
						}
					}else{
						if(count($id_estudiantes)>0){
							foreach($id_estudiantes as $idest){
								$dataTE['ID_PERSONA']     = $idest;

								if ($this->input->post('fechaLimiteEstudiante_'.$idest)!="") {
									$dataTE['FECHA_APLAZADA'] = $this->input->post('fechaLimiteEstudiante_'.$idest);
								}else{
									$dataTE['FECHA_APLAZADA'] = null;
								}
								$this->academico_model->crearTallerEstudiante($dataTE);
							}
						}
					}
				}elseif($res==1){
					$taller=$this->academico_model->buscar_talleres(array('ID_TALLER'=>$id_taller));
					if(isset($data['TALLER']) and $taller[0]['TALLER']!=''){
						unlink(FCPATH.'contenidos/talleres/'.$taller[0]['TALLER']);
					}
					$data['FECHA_MODIFICACION']=date('Y-m-d H:i:s');
					$this->academico_model->actualizarTaller($data,$id_taller);
					$dataTE['ID']   = $id_taller;
					$dataTE['TIPO'] = 2;
					$this->academico_model->eliminarTallerEstudiante($id_taller);
					if($seleccion_todos==1){
						foreach($estudiantes as $est){
							$dataTE['ID_PERSONA'] = $est['ID_PERSONA'];

							if ($this->input->post('fechaLimiteEstudiante_'.$est['ID_PERSONA'])!="") {
								$dataTE['FECHA_APLAZADA'] = $this->input->post('fechaLimiteEstudiante_'.$est['ID_PERSONA']);
							}else{
								$dataTE['FECHA_APLAZADA'] = null;
							}
							$this->academico_model->crearTallerEstudiante($dataTE);
						}
					}else{
						if(count($id_estudiantes)>0){
							foreach($id_estudiantes as $idest){
								$dataTE['ID_PERSONA'] = $idest;

								if ($this->input->post('fechaLimiteEstudiante_'.$idest)!="") {
									$dataTE['FECHA_APLAZADA'] = $this->input->post('fechaLimiteEstudiante_'.$idest);
								}else{
									$dataTE['FECHA_APLAZADA'] = null;
								}
								$this->academico_model->crearTallerEstudiante($dataTE);
							}
						}
					}
				}
				$respuesta['respuesta']=$res;
				$respuesta['mensaje']=$mensaje;
				echo json_encode($respuesta);
			}else{
				$data['perfil']   = $perfil;

				// $talleres  = $this->academico_model->buscar_talleres(array('ID_PLANIFICACION'=>$id_planificacion));
				$talleres  = $this->academico_model->buscar_talleres(array('ID_CARRERA_MATERIA'=>$cabecera_taller['ID_CARRERA_MATERIA'],'ID_PERIODO_ACADEMICO'=>$cabecera_taller['ID_PERIODO_ACADEMICO'],'ID_GRUPO'=>$cabecera_taller['ID_GRUPO'],'ID_PLANTILLA'=>$cabecera_taller['ID_PLANTILLA']));

				$fecha_fin='';
				$fechast=$cabecera_taller['FECHA_TUTORIA1'].'+'.$cabecera_taller['FECHA_TUTORIA2'].'+'.$cabecera_taller['FECHA_TUTORIA3'].'+'.$cabecera_taller['FECHA_TUTORIA4'].'+'.$cabecera_taller['FECHAS_TUTORIA'];
				$vector_ft=explode('+',$fechast);
				foreach($vector_ft as $ft){
					if($ft!='' and $ft!=NULL and $ft!='0000-00-00'){
						$fecha_fin=$ft;
					}
				}

				if($perfil==5){
					foreach ($talleres as $kt => $taller) {
						$data_respuesta['ID_TALLER']    = $taller['ID_TALLER'];
						$data_respuesta['ID_PERSONA']   = $this->session->userdata('loggeado')['ID_PERSONA'];

						$respuestas=$this->academico_model->buscar_respuestas_taller($data_respuesta);
						if($respuestas==NULL){
							$talleres[$kt]['respuesta'] = NULL;
						}else{
							$talleres[$kt]['respuesta'] = $respuestas[0];
						}
						$data_respuesta['ID']   = $taller['ID_TALLER'];
						$data_respuesta['TIPO'] = 2;
						$fechaAplazada = $this->academico_model->buscar_fechaAplazada_taller_por_estudiante($data_respuesta);
						$talleres[$kt]['FECHA_APLAZADA'] = $fechaAplazada['FECHA_APLAZADA'];
						// $talleres[$kt]['FECHA_LIMITE']   = $fecha_fin;
					}
				}else{
					$id_usuario_academico=null;
					if($perfil==12){
						$id_usuario_academico=$idusuario;
					}
					foreach($talleres as $kt => $taller){
						$talleres[$kt]['num_respuestas'] = $this->academico_model->num_respuestasTalleres_estudiantes($taller['ID_TALLER'],$id_usuario_academico);
					}
				}
				$cabecera_taller['FECHA_LIMITE_TUTORIA'] = $fecha_fin;

				$fechaCierre=$this->academico_model->get_fecha_cierre(array('ID_GRUPO'=>$cabecera_taller['ID_GRUPO'],'ID_MATERIA'=>$cabecera_taller['ID_CARRERA_MATERIA'],'ID_PERIODO_ACADEMICO'=>$cabecera_taller['ID_PERIODO_ACADEMICO'],'ID_PLANTILLA'=>$cabecera_taller['ID_PLANTILLA']));
				$calificacion_cerrada=0;
				if(count($fechaCierre)>0){
					if($fechaCierre['FECHA_APLAZADO']!='0000-00-00'){
						$datetime1 = date_create($fechaCierre['FECHA_APLAZADO'].' 23:59:59');
					}else{
						$datetime1 = date_create($fechaCierre['FECHA_CIERRE'].' 23:59:59');
					}
					$datetime2 = date_create(date('Y-m-d H:i:s'));
					if($datetime1<$datetime2){
						$calificacion_cerrada=1;
					}
				}
				$data['calificacion_cerrada'] = $calificacion_cerrada;
				$data['estudiantes']     = $this->academico_model->get_estudiantes(array('ID_CARRERA_MATERIA'=>$cabecera_taller['ID_CARRERA_MATERIA'],'ID_PERIODO_ACADEMICO'=>$cabecera_taller['ID_PERIODO_ACADEMICO'],'ID_GRUPO'=>$cabecera_taller['ID_GRUPO']));
				$data['id_estudiantes'] = $id_estudiantes;
				$data['talleres']        = $talleres;
				$data['cabecera_taller'] = $cabecera_taller;

				$idPeriodo=$this->academico_model->get_periodo_activado();
				$periodo=$this->academico_model->getPeriodo($idPeriodo);
				$data['fecha_max']=$periodo['FECHA_FIN'];//fecha fin de periodo
//                print_r($data);
				$datos1                  = $this->perfil_model->cabecera($idusuario);
				$this->load->view('templates/header',$datos1);
				$this->load->view('gestionTalleres',$data);
				$this->load->view('templates/footer');
			}
		}else{
			redirect('admin/login', 'refresh');
		}
	}


	////////////////////////////////////////////////////////////////////////////////////////////////
	public function buscarEstudiantesTaller($id_taller){
		$id_taller = trim($this->input->post('id_taller'));
		$id_estudiantes = $this->input->post('estudiante');
		$data['estudiantes_taller']= $this->academico_model->get_estudiantes_taller($id_taller,2);
		echo json_encode($data['estudiantes_taller']);

	}

	/////////////////////////////////////////////////////////////////
	public function respuestaTaller(){
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,101)){
			$perfil    = $this->session->userdata('loggeado')['ID_PERFIL'];
			$usuario=$this->session->userdata('loggeado');
			$id_taller  = trim($this->input->post('id_taller'));
			$listado   = trim($this->input->post('listado'));


			$idPlanificacion = trim($this->input->post('idPlanificacion'));
			if($id_taller!='' and $listado==''){
				$data['ID_TALLER'] = $id_taller;
				$data['ID_PERSONA'] = $this->session->userdata('loggeado')['ID_PERSONA'];
				//carga de archivo
				$talleres=$this->academico_model->buscar_talleres(array('ID_TALLER'=>$id_taller));
				$taller=$talleres[0];

				$datos_planificacion = $this->academico_model->get_docente_carrera_materia_grupo_planificacion(array('ID_PLANIFICACION'=>$taller['ID_PLANIFICACION']));
				///obtener fecha limite
				// $fecha_fin='';
				// $fechast=$cabecera_taller['FECHA_TUTORIA1'].'+'.$datos_planificacion['FECHA_TUTORIA2'].'+'.$datos_planificacion['FECHA_TUTORIA3'].'+'.$datos_planificacion['FECHA_TUTORIA4'].'+'.$datos_planificacion['FECHAS_TUTORIA'];
				// $vector_ft=explode('+',$fechast);
				// foreach($vector_ft as $ft){
				// 	if($ft!='' and $ft!=NULL and $ft!='0000-00-00'){
				// 		$fecha_fin=$ft;
				// 	}
				// }
				///////////
				$tipo_archivo=explode('+',$taller['TIPO_ARCHIVOS_RESPUESTA']);
				$num_respuesta=count($tipo_archivo);
				$nombre_archivo='';
				$res=1;
				$ingreso_archivo='';
				$mensaje='Registro Realizado';

				//verificar que no exista ya registrado una respuesta del estudiante
				$data_respuesta['ID_TALLER']=$id_taller;
				$data_respuesta['ID_PERSONA'] = $this->session->userdata('loggeado')['ID_PERSONA'];
				$respuestas=$this->academico_model->buscar_respuestas_taller($data_respuesta);
				if($respuestas!=NULL){
					for($i=1; $i<=$num_respuesta; $i++){
						if(isset($_FILES['archivo'.$i])){
							$archivo= $_FILES['archivo'.$i]['name'];
							if($archivo!=''){
								if($tipo_archivo[$i-1]==1){
									// $dato_archivo=$this->cargar_archivo('archivo'.$i,5000);

									$dato_archivo=$this->cargar_archivo('archivo'.$i,3072,'contenidos/talleres/');


								}else{

									$dato_archivo=$this->cargar_archivo('archivo'.$i,0,'contenidos/talleres/');

								}
								if($dato_archivo['error']==''){
									$nombre_archivo.=$dato_archivo['file_name'].'+';
									$archivo_temp[$i]=$dato_archivo['file_name'];
								}else{
									$ingreso_archivo=$dato_archivo['error'].$tipo_archivo[$i-1];
									$res=0;
									$mensaje.='Fallo Ingreso :'.$ingreso_archivo;
								}
							}
						}
					}
					// $data['RESPUESTA'] = trim($nombre_archivo,'+');
					$nombre_archivo='';
					$respuesta=$respuestas[0];
					$datetime1 = date_create($taller['FECHA_LIMITE'].' 23:59:59');
					// $datetime1="";
					// if ($fecha_fin!="") {
					// 	$datetime1 = date_create($fecha_fin.' 23:59:59');
					// }

					$datetime2 = date_create(date('Y-m-d H:i:s'));
					$tallerEstudiante = $this->academico_model->buscar_taller_estudiante(array('ID'=>$id_taller,'ID_PERSONA'=>$data_respuesta['ID_PERSONA'],'TIPO'=>2));
					if ($tallerEstudiante['FECHA_APLAZADA']!=null) {
						$fechaAplazada = date_create($tallerEstudiante['FECHA_APLAZADA'].' 23:59:59');
					}else{
						$fechaAplazada = "";
					}
					if(($respuesta['CALIFICACION']==NULL || $respuesta['CALIFICACION']==0) and $datetime2<$datetime1){
						$respuesta_taller=explode('+',$respuesta['RESPUESTA']);
						for($i=1; $i<=$num_respuesta; $i++){
							if(isset($archivo_temp[$i])){
								$nombre_archivo.=$archivo_temp[$i].'+';
							}else{
								$nombre_archivo.=$respuesta_taller[$i-1].'+';
							}
						}
						$this->academico_model->actualizarRespuestaTaller(array('RESPUESTA'=>trim($nombre_archivo,'+'), 'FECHA'=>date('Y-m-d H:i:s')),$respuesta['ID_RESPUESTA_TALLER']);
					}elseif (($respuesta['CALIFICACION']==NULL || $respuesta['CALIFICACION']==0) and $fechaAplazada!="") {

						if ($datetime2<=$fechaAplazada){
							$respuesta_taller=explode('+',$respuesta['RESPUESTA']);
							for($i=1; $i<=$num_respuesta; $i++){
								if(isset($archivo_temp[$i])){
									$nombre_archivo.=$archivo_temp[$i].'+';
								}else{
									$nombre_archivo.=$respuesta_taller[$i-1].'+';
								}
							}
							$this->academico_model->actualizarRespuestaTaller(array('RESPUESTA'=>trim($nombre_archivo,'+'), 'FECHA'=>date('Y-m-d H:i:s')),$respuesta['ID_RESPUESTA_TALLER']);
						}else{
							$res=0;
							$mensaje='Fallo: Ya no se puede cambiar el archivo';
						}

					}else{
						$res=0;
						$mensaje='Fallo: Ya no se puede cambiar el archivo';
					}
				}elseif($res==1){
					for($i=1; $i<=$num_respuesta; $i++){
						if(isset($_FILES['archivo'.$i])){
							$archivo= $_FILES['archivo'.$i]['name'];
							if($archivo!=''){
								if($tipo_archivo[$i-1]==1){

									$dato_archivo=$this->cargar_archivo('archivo'.$i,3072,'contenidos/talleres/');


								}else{

									$dato_archivo=$this->cargar_archivo('archivo'.$i,0,'contenidos/talleres/');

								}
								if($dato_archivo['error']==''){
									$nombre_archivo.=$dato_archivo['file_name'].'+';
									$archivo_temp[$i]=$dato_archivo['file_name'];
								}else{
									$ingreso_archivo=$dato_archivo['error'].$tipo_archivo[$i-1];
									$res=0;
									$mensaje.='Fallo Ingreso :'.$ingreso_archivo;
								}
							}
						}
					}
					$data['RESPUESTA'] = trim($nombre_archivo,'+');
					$data['FECHA']     = date('Y-m-d H:i:s');
					$this->academico_model->crearRespuestaTaller($data);
				}
				$respuesta['respuesta'] = $res;
				$respuesta['mensaje']   = $mensaje;
				echo json_encode($respuesta);
			}elseif($id_taller != '' and $listado==1){
				$data_respuesta['ID_TALLER'] = $id_taller;
				$datos_taller = $this->academico_model->get_docente_carrera_materia_grupo_planificacion(array('ID_PLANIFICACION'=>$idPlanificacion));
				// $respuestas = $this->academico_model->buscar_matricula(array('ID_PLANIFICACION'=>$idPlanificacion));
				$dat_e['ID_CARRERA_MATERIA']=$datos_taller['ID_CARRERA_MATERIA'];
				$dat_e['ID_PERIODO_ACADEMICO']=$datos_taller['ID_PERIODO_ACADEMICO'];
				$dat_e['ID_GRUPO']=$datos_taller['ID_GRUPO'];
				if($usuario['ID_PERFIL']==12){
					$dat_e['ID_USUARIO_ACADEMICO']=$usuario['ID_USUARIO'];
				}
				$respuestas = $this->academico_model->get_estudiantes($dat_e);
				foreach ($respuestas as $key => $calificacion){
					$data_respuesta['ID_PERSONA'] = $calificacion['ID_PERSONA'];
					$respuesta=$this->academico_model->buscar_respuestas_taller($data_respuesta);
					if (count($respuesta)>0) {
						$respuestas[$key]['respuesta'] = $respuesta[0];
					}else{
						$respuestas[$key]['respuesta'] = "";
					}
					$respuestas[$key]['ID_TALLER'] = $id_taller;
				}

				///agregar numero de respuestas
				$tabla='<form action="'.site_url().'/academico/academico/guardaCalificacionTaller/" method="post" name="formulario_calificacion" id="formulario_calificacion">';
					$tabla.='<div id="respuesta_calificacion"></div>';
					$tabla.='<table class="table table-condensed">';
						$tabla.='<tr>';
							$tabla.= utf8_encode('<th>Nro</th>');
							$tabla.='<th>ESTUDIANTE</th>';
							$tabla.='<th>RESPUESTA</th>';
							$tabla.='<th>FECHA</th>';
							$tabla.='<th>CALIFICACIÓN</th>';
							$tabla.='<th>COMENTARIO</th>';
						$tabla.='</tr>';
						$id_respuestas='';
						$contador = 1;
						foreach($respuestas as $respuesta){

							$tabla.='<tr onMouseOver="this.style.backgroundColor=\'#EBFCE2\'" onMouseOut="this.style.backgroundColor=\'\'">';
								$tabla.='<td>'.$contador.'</td>';
								$contador++;
								$tabla.='<td>'.$respuesta['ESTUDIANTE'].'</td>';
								// $tabla.='<td>'.$respuesta['NOMBRE_ESTUDIANTE'].'</td>';
								if ($respuesta['respuesta']!="") {
									$id_respuestas.=$respuesta['respuesta']['ID_RESPUESTA_TALLER'].'+';

									$tabla.='<td align="center">';
										$res=explode('+',$respuesta['respuesta']['RESPUESTA']);
										if ($respuesta['respuesta']['RESPUESTA']!=NULL && $respuesta['respuesta']['RESPUESTA']!=""){
											foreach($res as $k=>$r){
												if($r!=''){
													if ($r==null) {
														$tabla.='Sin Archivo';
													}else{
														$tabla.='<a href="'.base_url('archivos/contenidos/talleres/').'/'.$r.'" title="Ver respuesta" target="_blank" style="color:#052F90"><span class="glyphicon glyphicon-list-alt" style="font-size:20px"></span></a> ';
													}
												}
											}
										}else{
											$tabla.='Sin Archivo';
										}
									$tabla.='</td>';
									$fecha_respuesta='';
									$f=explode(' ',$respuesta['respuesta']['FECHA']);
									if(isset($f[1])){
										$h=explode(':',$f[1]);
										$fecha_respuesta=$f[0].'<br>'.$h[0].':'.$h[1];
									}
									// $tabla.='<td nowrap="nowrap">'.$f[0].'</td>';
									$tabla.='<td nowrap="nowrap" align="center">'.$fecha_respuesta.'</td>';
									$tabla.='<td align="center">';
										$tiene_archivo = "0";
										if (isset($respuesta['respuesta']['ID_RESPUESTA_TALLER']) && $respuesta['respuesta']['ID_RESPUESTA_TALLER'] != "" && $respuesta['respuesta']['ID_RESPUESTA_TALLER'] != 0) {//CUANDO TUVO UNA CALIFICACION
											$tiene_archivo = 1;
										}
										$tabla.='<input style="width:80px" type="number" class="form-control" name="calificacion_'.$respuesta['ID_TALLER'].'_'.$respuesta['ID_PERSONA'].'" id="calificacion_'.$respuesta['ID_TALLER'].'_'.$respuesta['ID_PERSONA'].'" value="'.$respuesta['respuesta']['CALIFICACION'].'" onChange="calcula_calificacion_componente(this)" archivo="'.$tiene_archivo.'">';
										//id calificacion taller oculto
										if (isset($respuesta['respuesta']['ID_RESPUESTA_TALLER']) && $respuesta['respuesta']['ID_RESPUESTA_TALLER'] != "" && $respuesta['respuesta']['ID_RESPUESTA_TALLER'] != 0) {//CUANDO TUVO UNA CALIFICACION
											$tabla.='<input type="hidden" name="id_respuesta_taller_'.$respuesta['ID_TALLER'].'_'.$respuesta['ID_PERSONA'].'" id="id_respuesta_taller_'.$respuesta['ID_TALLER'].'_'.$respuesta['ID_PERSONA'].'" value="'.$respuesta['respuesta']['ID_RESPUESTA_TALLER'].'">';
										}else{//CUANDO SE VA A UNA CALIFICACION
											$tabla.='<input type="hidden" name="id_respuesta_taller_'.$respuesta['ID_TALLER'].'_'.$respuesta['ID_PERSONA'].'" id="id_respuesta_taller_'.$respuesta['ID_TALLER'].'_'.$respuesta['ID_PERSONA'].'" value="0">';
										}
									$tabla.='</td>';
									$tabla.= '<td align="center">';
										$tabla.= '<textarea class="form-control" name="comentario_'.$respuesta['ID_TALLER'].'_'.$respuesta['ID_PERSONA'].'" id="comentario_'.$respuesta['ID_TALLER'].'_'.$respuesta['ID_PERSONA'].'" maxlength="50">'.$respuesta['respuesta']['COMENTARIO'].'</textarea>';
									$tabla.= '</td>';
								}else{
									$id_respuestas.=''.'+';

									$tabla.='<td align="center">';
										$tabla.='Sin Archivo';

									$tabla.='</td>';
									$tabla.='<td align="center" nowrap="nowrap">-</td>';
									$tiene_archivo = "0";
									$tabla.='<td align="center"><input style="width:80px" type="number" class="form-control" name="calificacion_'.$respuesta['ID_TALLER'].'_'.$respuesta['ID_PERSONA'].'" id="calificacion_'.$respuesta['ID_TALLER'].'_'.$respuesta['ID_PERSONA'].'" value="" onChange="calcula_calificacion_componente(this)" archivo="'.$tiene_archivo.'">';

										$tabla.='<input type="hidden" name="id_respuesta_taller_'.$respuesta['ID_TALLER'].'_'.$respuesta['ID_PERSONA'].'" id="id_respuesta_taller_'.$respuesta['ID_TALLER'].'_'.$respuesta['ID_PERSONA'].'" value="0">';

									$tabla.='</td>';
									$tabla.= '<td align="center">';
										$tabla.= '<textarea class="form-control" name="comentario_'.$respuesta['ID_TALLER'].'_'.$respuesta['ID_PERSONA'].'" id="comentario_'.$respuesta['ID_TALLER'].'_'.$respuesta['ID_PERSONA'].'" maxlength="50"></textarea>';
									$tabla.= '</td>';
								}
							$tabla.='</tr>';
						}
					$tabla.='</table>';
					$tabla.='<input type="hidden" name="id_respuestas" id="id_respuestas" value="'.trim($id_respuestas,'+').'">';
					$tabla.='<input type="hidden" name="id_taller" id="id_taller" value="'.$id_taller.'">';
				$tabla.='</form>';
				echo $tabla;
			}
		}else{
			echo "Sesion Terminada";
		}
	}

	//////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	public function borrarArchivoTaller(){
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,101)){
			$id_respuesta = trim($this->input->post('id_respuesta'));
			$archivo = trim($this->input->post('archivo'));
			$respuestas=$this->academico_model->buscar_respuestas_taller(array('ID_RESPUESTA_TALLER'=>$id_respuesta));
			$respuesta=$respuestas[0];
			$talleres=$this->academico_model->buscar_talleres(array('ID_TALLER'=>$respuesta['ID_TALLER']));
			$taller=$talleres[0];
			$datos_planificacion = $this->academico_model->get_docente_carrera_materia_grupo_planificacion(array('ID_PLANIFICACION'=>$taller['ID_PLANIFICACION']));
			$tallerEstudiante = $this->academico_model->buscar_taller_estudiante(array('ID'=>$respuesta['ID_TALLER'],'ID_PERSONA'=>$respuesta['ID_PERSONA'],'TIPO'=>2));

			///obtener fecha limite
			// $fecha_fin='';
			// $fechast=$datos_planificacion['FECHA_TUTORIA1'].'+'.$datos_planificacion['FECHA_TUTORIA2'].'+'.$datos_planificacion['FECHA_TUTORIA3'].'+'.$datos_planificacion['FECHA_TUTORIA4'].'+'.$datos_planificacion['FECHAS_TUTORIA'];
			// $vector_ft=explode('+',$fechast);
			// foreach($vector_ft as $ft){
			// 	if($ft!='' and $ft!=NULL and $ft!='0000-00-00'){
			// 		$fecha_fin=$ft;
			// 	}
			// }
			$datetime1 = date_create($taller['FECHA_LIMITE'].' 23:59:59');
			// $datetime1 = date_create($fecha_fin.' 23:59:59');
			$datetime2 = date_create(date('Y-m-d H:i:s'));
			if ($tallerEstudiante['FECHA_APLAZADA']!=null) {
				$fechaAplazada = date_create($tallerEstudiante['FECHA_APLAZADA'].' 23:59:59');
			}else{
				$fechaAplazada = "";
			}

			if(($respuesta['CALIFICACION']==NULL || $respuesta['CALIFICACION']==0) and $datetime2<$datetime1){
				if($archivo!='' and file_exists(FCPATH.'archivos/contenidos/talleres/'.$archivo)){
					unlink(FCPATH.'archivos/contenidos/talleres/'.$archivo);
				}
				$respuestas_taller=str_replace($archivo,"",$respuesta['RESPUESTA']);
				$this->academico_model->actualizarRespuestaTaller(array('RESPUESTA'=>$respuestas_taller),$id_respuesta);
				echo '1';
			}else if(($respuesta['CALIFICACION']==NULL || $respuesta['CALIFICACION']==0) and $fechaAplazada!=""){
				if ($datetime2<=$fechaAplazada){
					if($archivo!='' and file_exists(FCPATH.'archivos/contenidos/talleres/'.$archivo)){
						unlink(FCPATH.'archivos/contenidos/talleres/'.$archivo);
					}
					$respuestas_taller=str_replace($archivo,'',$respuesta['RESPUESTA']);
					$this->academico_model->actualizarRespuestaTaller(array('RESPUESTA'=>$respuestas_taller),$id_respuesta);
					echo '1';
				}else{
					echo '0';
				}
			}else{
				echo '0';
			}
		}else{
			echo "Sesion Terminada";
		}
	}

	////////////////////////////////guardaCalificacionTaller///////////////////////////////////
	public function guardaCalificacionTaller(){
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,101)){
			$id_respuestas         = trim($this->input->post('id_respuestas'));
			$id_taller              = trim($this->input->post('id_taller'));
			$array_id_respuestas   = explode('+',$id_respuestas);
			$dataTarea['ID_TALLER'] = $id_taller;
			$data['ID_TALLER']      = $id_taller;
			$updateCalificacion    = array();
			$taller                 = $this->academico_model->buscar_talleres(array('ID_TALLER'=>$id_taller));

			// $calificaciones        = $this->academico_model->buscar_matricula(array('ID_CURSO_PUBLICO_MODULO'=>$taller[0]['ID_CURSO_PUBLICO_MODULO']));

			$datos_taller = $this->academico_model->get_docente_carrera_materia_grupo_planificacion(array('ID_PLANIFICACION'=>$taller[0]['ID_PLANIFICACION']));
			$calificaciones = $this->academico_model->get_estudiantes(array('ID_CARRERA_MATERIA'=>$datos_taller['ID_CARRERA_MATERIA'],'ID_PERIODO_ACADEMICO'=>$datos_taller['ID_PERIODO_ACADEMICO'],'ID_GRUPO'=>$datos_taller['ID_GRUPO']));

			foreach($calificaciones as $key => $calificacion){
				$data['ID_PERSONA']   = $calificacion['ID_PERSONA'];
				$data['CALIFICACION'] = trim($this->input->post('calificacion_'.$id_taller.'_'.$calificacion['ID_PERSONA']));
				$data['COMENTARIO']   = trim($this->input->post('comentario_'.$id_taller.'_'.$calificacion['ID_PERSONA']));
				$existeCalificacionTaller = $this->academico_model->existeCalificacionTaller(array('ID_TALLER'=>$id_taller,'ID_PERSONA'=>$data['ID_PERSONA']));
				if($data['CALIFICACION']!=''){

					if (isset($existeCalificacionTaller) && $existeCalificacionTaller != ""){
						$this->academico_model->actualizarRespuestaTaller($data, $existeCalificacionTaller['ID_RESPUESTA_TALLER']);
					}else{
						// $data['RESPUESTA'] = null;
						// $data['FECHA'] = date("Y-m-d H:i:s");
						$this->academico_model->crearRespuestaTaller($data);
					}

					///funcion para pasar datos a la planilla de calificaciones
						// $updateCalificacion[$key] = $this->updateCalificacionTaller($taller[0]['ID_PLANIFICACION'] , $calificacion['ID_PERSONA']);
						$updateCalificacion[$key] = $this->updateCalificacionTaller($datos_taller['ID_CARRERA_MATERIA'],$datos_taller['ID_PERIODO_ACADEMICO'],$datos_taller['ID_GRUPO'] , $calificacion['ID_PERSONA'],$taller[0]['ID_PLANTILLA']);
						// $estudianteCarreraMateria = $this->academico_model->get_estudianteCarreraMateria(array('ID_CARRERA_MATERIA'=>$datos_taller['ID_CARRERA_MATERIA'],'ID_PERIODO_ACADEMICO'=>$datos_taller['ID_PERIODO_ACADEMICO'],'ID_GRUPO'=>$datos_taller['ID_GRUPO'],'ID_PERSONA'=>$calificacion['ID_PERSONA']));
						// $updateCalificacion[$key] = $this->registraCalificacionComponente(1,$estudianteCarreraMateria['ID_ESTUDIANTE_CARRERA_MATERIA'],2 , $data['CALIFICACION'],1);
				}elseif($data['CALIFICACION']!=null){
					if (isset($existeCalificacionTaller) && $existeCalificacionTaller != ""){
						$data['CALIFICACION'] = NULL;
						$this->academico_model->actualizarRespuestaTaller($data, $existeCalificacionTaller['ID_RESPUESTA_TALLER']);
					}
				}
			}

			$calificaciones['updateCalificacion'] = $updateCalificacion;
			$calificaciones['respuesta']          = 1;
			$calificaciones['mensaje']            = 'Calificaciones Guardadas';
			echo json_encode($calificaciones);
		}else{
			echo "Sesion Terminada";
		}
	}

	/////////////////////////////////////////////////////////////////////////////
	public function updateCalificacionTaller($idCarreraMateria,$idPeriodoAcademico,$idGrupo,$idPersona,$id_plantilla=0){
		$talleres       = $this->academico_model->buscar_talleres(array('ID_CARRERA_MATERIA'=>$idCarreraMateria,'ID_PERIODO_ACADEMICO'=>$idPeriodoAcademico,'ID_GRUPO'=>$idGrupo));
		$numTalleres    = count($talleres);
		$sumatoria      = 0;
		$calificacion   = 0;
		foreach ($talleres as $key => $taller) {
			$respuestas = $this->academico_model->existeCalificacionTaller(array('ID_TALLER'=>$taller['ID_TALLER'],'ID_PERSONA'=>$idPersona));
			if (isset($respuestas['CALIFICACION']) && $respuestas['CALIFICACION']!="") {
				$sumatoria += $respuestas['CALIFICACION'];
			}
		}
		if($numTalleres>0){
			$calificacion   = $sumatoria/$numTalleres;
		}
		$estudianteCarreraMateria = $this->academico_model->get_estudianteCarreraMateria(array('ID_CARRERA_MATERIA'=>$idCarreraMateria,'ID_PERIODO_ACADEMICO'=>$idPeriodoAcademico,'ID_GRUPO'=>$idGrupo,'ID_PERSONA'=>$idPersona));
		// return array('ID_CARRERA_MATERIA'=>$idCarreraMateria,'ID_PERIODO_ACADEMICO'=>$idPeriodoAcademico,'ID_GRUPO'=>$idGrupo,'ID_PERSONA'=>$idPersona);

		//asisstencia 75% si existe calificacion de taller y existe calificacion asistecnia<75
		if($calificacion>0){
			$da['ID_ESTUDIANTE_CARRERA_MATERIA']=$estudianteCarreraMateria['ID_ESTUDIANTE_CARRERA_MATERIA'];
			$da['ID_TIPO_CALIFICACION']=4;
			$asistencia = $this->academico_model->buscar_calificacion($da);
			if(count($asistencia)>0 and $asistencia[0]['CALIFICACION']<75 and $asistencia[0]['CALIFICACION']!='' and $asistencia[0]['CALIFICACION']!=NULL){
				$da_actualiza['CALIFICACION']=75;
				$da_actualiza['ID_USUARIO_ACTUALIZA']=$this->session->userdata('loggeado')['ID_USUARIO'];
				$da_actualiza['FECHA_ACTUALIZACION']=date('Y-m-d H:i:s');
				$this->academico_model->actualizarCalificacion($da_actualiza,$asistencia[0]['ID_CALIFICACION']);
			}
		}
		$updateCalificacion       = $this->registraCalificacionComponente(1,$estudianteCarreraMateria['ID_ESTUDIANTE_CARRERA_MATERIA'],2 , $calificacion,$id_plantilla);
		return $updateCalificacion;
	}

	/////////////////////////////////////////////////////////////////////////
	public function borrarTaller($idTaller){
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,101)){
			$talleres = $this->academico_model->buscar_talleres(array('ID_TALLER'=>$idTaller));
			if (count($talleres)>0) {
				$taller     = $talleres[0];
				$respuestas = $this->academico_model->buscar_respuestas_taller(array('ID_TALLER'=>$taller['ID_TALLER']));
				foreach ($respuestas as $key => $respuesta) {
					if ($respuesta['RESPUESTA']!="") {
						if (file_exists(FCPATH."archivos/contenidos/talleres/". $respuesta['RESPUESTA'])) {
							unlink(FCPATH."archivos/contenidos/talleres/". $respuesta['RESPUESTA']);
						}
					}

				}
				if (count($respuestas)>0) {
					$this->academico_model->borrarRespuestasTaller($taller['ID_TALLER']);
				}

				if ($taller['TALLER']!="") {
					if (file_exists(FCPATH."archivos/contenidos/talleres/". $taller['TALLER'])) {
						unlink(FCPATH."archivos/contenidos/talleres/". $taller['TALLER']);
					}
				}
				$this->academico_model->borrarTaller($taller['ID_TALLER']);

				echo json_encode(array("mensaje"=>'Registro Borrado',"respuesta"=>"1"));
			}else{
				echo json_encode(array("mensaje"=>'No hay taller',"respuesta"=>"0"));
			}

		}else{
			echo json_encode(array("mensaje"=>'Acceso Denegado',"respuesta"=>"0"));
		}
	}

	////////////////////////////////////////////////////////////////////////////
	public function calificacionesPromedioTalleres(){
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,101)){
			$usuario=$this->session->userdata('loggeado');
			$id_planificacion = trim($this->input->post('id_planificacion'));

			$datos_taller = $this->academico_model->get_docente_carrera_materia_grupo_planificacion(array('ID_PLANIFICACION'=>$id_planificacion));
			$dat_e['ID_CARRERA_MATERIA']=$datos_taller['ID_CARRERA_MATERIA'];
			$dat_e['ID_PERIODO_ACADEMICO']=$datos_taller['ID_PERIODO_ACADEMICO'];
			$dat_e['ID_GRUPO']=$datos_taller['ID_GRUPO'];
			if($usuario['ID_PERFIL']==12){
				$dat_e['ID_USUARIO_ACADEMICO']=$usuario['ID_USUARIO'];
			}
			$estudiantes=$this->academico_model->get_estudiantes($dat_e);


			$tabla='<table class="table table-condensed">';
				$tabla.='<tr>';
					$tabla.='<th>Nro.</th>';
					$tabla.='<th>Estudiante</th>';
					$tabla.='<th>Nro. Talleres Enviados</th>';
					$tabla.='<th>Nro. Talleres Realizados</th>';
					$tabla.= '<th>Calificación Promedio</th>';
				$tabla.='</tr>';
				foreach($estudiantes as $k=>$estudiante){

					// $num_talleres=$this->academico_model->num_talleres_estudiantes($id_planificacion,$estudiante['ID_PERSONA']);
					$num_talleres=$this->academico_model->num_talleres_estudiantes(array('ID_CARRERA_MATERIA'=>$datos_taller['ID_CARRERA_MATERIA'],'ID_PERIODO_ACADEMICO'=>$datos_taller['ID_PERIODO_ACADEMICO'],'ID_GRUPO'=>$datos_taller['ID_GRUPO'],'ID_PLANTILLA'=>$datos_taller['ID_PLANTILLA']),$estudiante['ID_PERSONA']);


					$tabla.='<tr><td>'.($k+1).'</td>';
					$tabla.='<td>'.$estudiante['ESTUDIANTE'].'</td>';
					$tabla.='<td align="center">'.$num_talleres.'</td>';
					// $talleres_realizadas     = $this->academico_model->talleres_realizadas_estudiante($estudiante['ID_PERSONA'],$id_planificacion);
					$talleres_realizadas     = $this->academico_model->talleres_realizadas_estudiante($estudiante['ID_PERSONA'],array('ID_CARRERA_MATERIA'=>$datos_taller['ID_CARRERA_MATERIA'],'ID_PERIODO_ACADEMICO'=>$datos_taller['ID_PERIODO_ACADEMICO'],'ID_GRUPO'=>$datos_taller['ID_GRUPO'],'ID_PLANTILLA'=>$datos_taller['ID_PLANTILLA']));
					$num_talleres_realizadas = 0;
					$calificacion            = 0;
					// $talleres_calificadas    = $this->academico_model->talleres_calificadas_estudiante($estudiante['ID_PERSONA'],$id_planificacion);
					$talleres_calificadas    = $this->academico_model->talleres_calificadas_estudiante($estudiante['ID_PERSONA'],array('ID_CARRERA_MATERIA'=>$datos_taller['ID_CARRERA_MATERIA'],'ID_PERIODO_ACADEMICO'=>$datos_taller['ID_PERIODO_ACADEMICO'],'ID_GRUPO'=>$datos_taller['ID_GRUPO'],'ID_PLANTILLA'=>$datos_taller['ID_PLANTILLA']));
					// foreach($talleres_realizadas as $taller_realizada){
					foreach($talleres_calificadas as $taller_calificada){
						if ($taller_calificada['RESPUESTA']!=null) {
							$num_talleres_realizadas+=1;
						}

						$calificacion+=$taller_calificada['CALIFICACION'];
					}
					if($num_talleres>0){
						$calificacion_promedio = sprintf("%01.2f",round($calificacion/$num_talleres,2));
					}else{
						$calificacion_promedio = 0.00;
					}
					$tabla.='<td align="center">'.$num_talleres_realizadas.'</td>';
					$tabla.='<td align="center" class="text-primary">'.$calificacion_promedio.'</td></tr>';
				}
			$tabla.='</table>';
			echo $tabla;
		}else{
			echo "Sesion Terminada";
		}
	}


	//////////////////////////////////////////////////////////////////////////////
	public function gestionAulaVirtual($idPlanificacion)
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,101)){
			$datos_taller = $this->academico_model->get_docente_carrera_materia_grupo_planificacion(array('ID_PLANIFICACION'=>$idPlanificacion));
			// $aulaVirtual         = $this->academico_model->buscar_aulaVirtual(array('ID_PLANIFICACION'=>$idPlanificacion));
			$aulaVirtual         = $this->academico_model->buscar_aulaVirtual(array('ID_CARRERA_MATERIA'=>$datos_taller['ID_CARRERA_MATERIA'],'ID_PERIODO_ACADEMICO'=>$datos_taller['ID_PERIODO_ACADEMICO'],'ID_GRUPO'=>$datos_taller['ID_GRUPO']));
			$msg = "";
			$url_redireccion = "";
			if($aulaVirtual==NULL) {
				$data['ID_PLANIFICACION'] = $idPlanificacion;
				$data['CODIGO_UNICO']     = md5($idPlanificacion.time());
				/*$data['CODIGO_UNICO']     = bin2hex(openssl_random_pseudo_bytes(10));
				$existeCodAula            = $this->academico_model->existeCodAulaVirtual($data['CODIGO_UNICO']);
				while ($existeCodAula) {
					$data['CODIGO_UNICO'] = bin2hex(openssl_random_pseudo_bytes(10));
					$existeCodAula        = $this->academico_model->existeCodAulaVirtual($data['CODIGO_UNICO']);
				}*/

				$data['ID_USUARIO']       = $this->session->userdata('loggeado')['ID_USUARIO'];
				$data['FECHA_CREACION']   = date('Y-m-d H:i:s');
				$id_aulaVirtual           = $this->academico_model->crearAulaVirtual($data);
				$msg = "Aula Creada";
				$respuesta['creacionAulaVlc']          = $this->crearAulaVirtualVlc($id_aulaVirtual);
				$respuesta['consultarAulaVlc']         = array();
				if(isset($id_aulaVirtual)){
					if($this->session->userdata('loggeado')['ID_PERFIL']==5){
						$respuesta['consultarAulaVlc'] = $this->consultarAulaVirtualVlc($id_aulaVirtual,"Estudiante");
					}else{
						$respuesta['consultarAulaVlc'] = $this->consultarAulaVirtualVlc($id_aulaVirtual,"Profesor");
					}

					if (isset($respuesta['consultarAulaVlc']) && $respuesta['consultarAulaVlc']['url']!="") {
						if ($this->session->userdata('loggeado')['ID_PERFIL']==5) {
							$dataUrl['URL_AULA_ESTUDIANTE'] = $respuesta['consultarAulaVlc']['url'];
							$url_redireccion                = $dataUrl['URL_AULA_ESTUDIANTE'];
						}else{
							$dataUrl['URL_AULA_PROFESOR']   = $respuesta['consultarAulaVlc']['url'];
							$url_redireccion                = $dataUrl['URL_AULA_PROFESOR'];
						}
						$this->academico_model->actualizarAulaVirtual($dataUrl,$id_aulaVirtual);
					}
				}
			}else{
				$id_aulaVirtual                  = $aulaVirtual['ID_AULA_VIRTUAL'];
				$data['ID_USUARIO_MODIFICACION'] = $this->session->userdata('loggeado')['ID_USUARIO'];
				$data['FECHA_MODIFICACION']      = date('Y-m-d H:i:s');

				// if ($this->session->userdata('loggeado')['ID_PERFIL']==5 && $aulaVirtual['URL_AULA_ESTUDIANTE']==NULL){
				if ($this->session->userdata('loggeado')['ID_PERFIL']==5){
					$respuesta['consultarAulaVlc']   = $this->consultarAulaVirtualVlc($id_aulaVirtual,"Estudiante");
					if (isset($respuesta['consultarAulaVlc']['url']) && $respuesta['consultarAulaVlc']['url']!=""){
						$data['URL_AULA_ESTUDIANTE'] = $respuesta['consultarAulaVlc']['url'];
						$url_redireccion             = $data['URL_AULA_ESTUDIANTE'];
						$this->academico_model->actualizarAulaVirtual($data,$id_aulaVirtual);
					}
				}
				// if ($this->session->userdata('loggeado')['ID_PERFIL']!=5 && $aulaVirtual['URL_AULA_PROFESOR']==NULL){
				if ($this->session->userdata('loggeado')['ID_PERFIL']!=5){
					$respuesta['consultarAulaVlc']   = $this->consultarAulaVirtualVlc($id_aulaVirtual,"Profesor");
					if (isset($respuesta['consultarAulaVlc']['url']) && $respuesta['consultarAulaVlc']['url']!=""){
						$data['URL_AULA_PROFESOR']   = $respuesta['consultarAulaVlc']['url'];
						$url_redireccion             = $data['URL_AULA_PROFESOR'];
						$this->academico_model->actualizarAulaVirtual($data,$id_aulaVirtual);
					}
				}
			}
			// echo json_encode($respuesta);
			// echo json_encode(array("err"=>'',$idPlanificacion,bin2hex(openssl_random_pseudo_bytes(10))));
			if($url_redireccion=='' and $this->session->userdata('loggeado')['ID_PERFIL']!=5){//borrar registro para que se cree nnuevamente en la proxima peticion de conexion del profesor
				$this->academico_model->borrarAulaVirtual($id_aulaVirtual);
			}
			echo json_encode(array("err"=>'',"msg"=>$msg,$idPlanificacion,$data,$aulaVirtual,$respuesta,"url_aula"=>$url_redireccion));
			// echo json_encode();
		}else{
			echo json_encode(array("err"=>'Acceso Denegado'));
		}
	}

	/////////////////////////////////////////////////////////////////////////
	public function crearAulaVirtualVlc($id_aulaVirtual){
		$aulaVirtual = $this->academico_model->buscar_aulaVirtual(array('ID_AULA_VIRTUAL'=>$id_aulaVirtual));
		if (isset($aulaVirtual) && $aulaVirtual!=NULL) {
			//PETICION DE USUARIO PARA CREAR

				// $url = $this->url_aulaVirtual."/api/binary/rooms/";
				$url = $this->url_aulaVirtual;
				$ch  = curl_init();
				curl_setopt($ch, CURLOPT_URL, $url);
				curl_setopt($ch, CURLOPT_POST,true);
			//TIPO DE PETICION --
				curl_setopt($ch, CURLOPT_CUSTOMREQUEST,"POST");
				curl_setopt($ch, CURLOPT_SSL_VERIFYPEER,false);

				$aula['room_code'] = $aulaVirtual['CODIGO_UNICO'];
				$aula['date']      = date('Y-m-d');

				curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode(array('admin_academic_class_class_date'=>$aula)));

				curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json'));
				curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);
				$resultado = json_decode(curl_exec($ch),true);
				// $resultado = curl_exec($ch);
				$err     = curl_error($ch);
				curl_close($ch);

				return $resultado;

				// print_r($resultado);
		}else{
			return array("No Tiene Aula");
		}
	}

	/////////////////////////////////////////////////////////////////////////
	public function consultarAulaVirtualVlc($id_aulaVirtual,$tipoUsuario){
		$aulaVirtual = $this->academico_model->buscar_aulaVirtual(array('ID_AULA_VIRTUAL'=>$id_aulaVirtual));
		$nombrePersona = "";
		$apellidoPersona = "";
		if ($this->session->userdata('loggeado')['ID_PERSONA']!=0){
			$persona = $this->usuarios_model->obtener_datos_persona($this->session->userdata('loggeado')['ID_PERSONA']);

			// if (count($persona)>0) {
			if (isset($persona['ID_PERSONA']) && $persona['ID_PERSONA']!=""){
				// $persona = $persona[0];
				$nombrePersona = $this->usuarios_model->sustituir_caracteres_no_permitidos(str_replace(" ", "" ,trim($persona['PRIMER_NOMBRE'])));
				$apellidoPersona = $this->usuarios_model->sustituir_caracteres_no_permitidos(str_replace(" ", "" ,trim($persona['APELLIDO_PATERNO'])));
			}
		}else{
			if ($this->session->userdata('loggeado')['ID_USUARIO']==1) {
				$nombrePersona = "Binary";
				$apellidoPersona = "Sistemas";
			}else{
				$nombreCompleto = explode(" ", $this->session->userdata('loggeado')['NOMBRE_COMPLETO']);
				if (isset($nombreCompleto[0])) {
					$nombrePersona   = $this->usuarios_model->sustituir_caracteres_no_permitidos(str_replace(" ", "" ,$nombreCompleto[0]));
				}
				if (isset($nombreCompleto[1])) {
					$apellidoPersona = $this->usuarios_model->sustituir_caracteres_no_permitidos(str_replace(" ", "" ,$nombreCompleto[1]));
				}
			}
		}
		if (isset($aulaVirtual) && $aulaVirtual!=NULL) {
			//PETICION DE USUARIO PARA CREAR

				//user_type=Profesor || Estudiante
				// $url = $this->url_aulaVirtual."/api/binary/rooms/".$aulaVirtual['CODIGO_UNICO']."?user_type=".$tipoUsuario."&firstName=".$nombrePersona."&lastName=".$apellidoPersona;
				$url = $this->url_aulaVirtual."/show_room?room_code=".$aulaVirtual['CODIGO_UNICO']."&user_type=".$tipoUsuario."&firstName=".$nombrePersona."&lastName=".$apellidoPersona;
				$ch  = curl_init();
				curl_setopt($ch, CURLOPT_URL, $url);
				// curl_setopt($ch, CURLOPT_POST,true);
			//TIPO DE PETICION --
				curl_setopt($ch, CURLOPT_RETURNTRANSFER,true);
				curl_setopt($ch, CURLOPT_CUSTOMREQUEST,"GET");
				curl_setopt($ch, CURLOPT_SSL_VERIFYPEER,false);
				curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json'));

				curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5);//maximo tiempo de espera para conectarse al servidor
				curl_setopt($ch, CURLOPT_TIMEOUT, 10);//maximo tiempo de espera para ejecutar procesos cron una vez conectado al servidor
				// curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);
				$resultado = json_decode(curl_exec($ch),true);
				// $resultado = curl_exec($ch);
				$err     = curl_error($ch);
				curl_close($ch);


				$resultado['URL_ENVIO'] = $url;
				return $resultado;

		}else{
			return array("No Tiene Aula");
		}
	}

	/////////////////////////////////////////////////////////////////////////////
	public function registraCalificacionComponente($etapa,$id_estudiante_carrera_materia,$idComponente,$calificacion,$id_plantilla=0)
	{
		if($this->session->userdata('loggeado')){
			$periodo=$this->academico_model->get_periodo_activado();


			//verificar si materia tiene mas de una plantilla
			if($id_plantilla>0){
				$this->verificarPlantilla($etapa,$id_estudiante_carrera_materia,$idComponente,$id_plantilla);
			}else{

				$ecm  = $this->academico_model->get_estudiante_carrera_materia($id_estudiante_carrera_materia);

				$dataForm=array();
				$dataForm['ID_PERIODO_ACADEMICO']          = $periodo;
				$dataForm['ID_ESTUDIANTE_CARRERA_MATERIA'] = $id_estudiante_carrera_materia;
				if($etapa>0){
					$dataForm['ID_TIPO_CALIFICACION'] = 1;//componente
					$dataForm['ID_COMPONENTE']        = $idComponente;
				}else{
					$dataForm['ID_TIPO_CALIFICACION'] = 5;//supletorio
				}
				$dataForm['ETAPA']                    = $etapa;
				//revisar si ya existe el registro de calificacion componente
				$calificacion_existe      = $this->academico_model->buscar_calificacion($dataForm);
				$dataForm['CALIFICACION'] = $calificacion;
				/////////////////////////////////GUARDAR////////////////////
				if(count($calificacion_existe)<=0){
					if($dataForm['CALIFICACION'] !== NULL){
						$dataForm['FECHA_HORA']   = date('Y-m-d H:i:s');
						$dataForm['ID_USUARIO']   = $this->session->userdata('loggeado')['ID_USUARIO'];
						$id_calificacion          = $this->academico_model->crearCalificacion($dataForm);
					}
				}else{//////////////////ACTUALIZAR//////////////////////////
					if($calificacion_existe[0]['CALIFICACION']!==$dataForm['CALIFICACION']){//actualizo si cambia calificacion
						$dataForm['FECHA_ACTUALIZACION']  = date('Y-m-d H:i:s');
						$dataForm['ID_USUARIO_ACTUALIZA'] = $this->session->userdata('loggeado')['ID_USUARIO'];
						$id_calificacion = $calificacion_existe[0]['ID_CALIFICACION'];
						$this->academico_model->actualizarCalificacion($dataForm,$id_calificacion);
					}
				}
				$promedio_final=-1;

				//$ecm  = $this->academico_model->get_estudiante_carrera_materia($id_estudiante_carrera_materia);
				$etapas_periodo      = $this->academico_model->get_carrera_modalidad_configuradas();
				$configurado         = array();
				foreach($etapas_periodo as $etapa_periodo){
					if($etapa_periodo['ID_CARRERA']==$ecm['ID_CARRERA']){
						$configurado = $etapa_periodo;
					}
				}
				$num_componentes=count($configurado['COMPONENTES']);
				foreach($configurado['COMPONENTES'] as $v){
					if ($ecm['ASISTENCIA_JUSTIFICADA']==1 && $v['ID_COMPONENTE']==2) {
						$componente[$v['ID_COMPONENTE']] = 0;
					}elseif ($ecm['ASISTENCIA_JUSTIFICADA']==1 && $v['ID_COMPONENTE']==3) {
						$componente[$v['ID_COMPONENTE']] = $v['VALOR_COMPONENTE']*2;
					}else{
						$componente[$v['ID_COMPONENTE']] = $v['VALOR_COMPONENTE'];
					}

				}
				//realizar promedio etapa
				$op               = array();
				$op['ID_ESTUDIANTE_CARRERA_MATERIA'] = $id_estudiante_carrera_materia;
				$op['ID_TIPO_CALIFICACION']          = 1;//tipo componete
				$op['ETAPA']      = $etapa;
				$op['ID_PERIODO_ACADEMICO']=$periodo;
				$notas_componente = $this->academico_model->get_calificaciones($op);
				$nota_etapa       = 0;
				$num_componentes_calificados=0;
				$componente_examen=0;
				foreach($notas_componente as $nc){
					if($nc['CALIFICACION']!==NULL and $nc['CALIFICACION']!=''){
						$nota_etapa   = $nota_etapa+$nc['CALIFICACION']*$componente[$nc['ID_COMPONENTE']]/$configurado['BASE'];
						$num_componentes_calificados++;
					}
					if($nc['ID_COMPONENTE']==3){//calificacion componente examen
						$componente_examen=$nc['CALIFICACION'];
					}
				}
				if($etapa>0 and $num_componentes==$num_componentes_calificados){//calcular promedio etapa y promedio final si califica examen bimestral
					$op               = array();
					$op['ID_ESTUDIANTE_CARRERA_MATERIA'] = $id_estudiante_carrera_materia;
					$op['ID_TIPO_CALIFICACION']          = 2;//tipo final de etapa
					$op['ETAPA']         = $etapa;
					$op['ID_PERIODO_ACADEMICO']=$periodo;
					$calificacion_existe = $this->academico_model->get_calificaciones($op);
					$op['CALIFICACION']  = round($nota_etapa,2);
					if(count($calificacion_existe)<=0){//guardar
						if($op['CALIFICACION'] !== NULL){
							$op['FECHA_HORA']   = date('Y-m-d H:i:s');
							$op['ID_USUARIO']   = $this->session->userdata('loggeado')['ID_USUARIO'];
							$id_calificacion    = $this->academico_model->crearCalificacion($op);
						}
					}else{//Actualizar
						if($calificacion_existe[0]['CALIFICACION'] !== $op['CALIFICACION']){//actualizo si cambia calificacion
							$op['FECHA_ACTUALIZACION']=date('Y-m-d H:i:s');
							$op['ID_USUARIO_ACTUALIZA']=$this->session->userdata('user')['ID_USUARIO'];
							$id_calificacion    = $calificacion_existe[0]['ID_CALIFICACION'];
							$this->academico_model->actualizarCalificacion($op,$id_calificacion);
						}
					}

					//realizar promedio final promedio
					$op=array();
					$op['ID_ESTUDIANTE_CARRERA_MATERIA']=$id_estudiante_carrera_materia;
					$op['ID_TIPO_CALIFICACION']=2;//tipo promedio etapa
					$op['ID_PERIODO_ACADEMICO']=$periodo;
					$notas_etapa=$this->academico_model->get_calificaciones($op);
					if(count($notas_etapa)==$configurado['CANT_ETAPAS']){
						$promedio_final=0;
						foreach($notas_etapa as $ne){
							$promedio_final=$promedio_final+$ne['CALIFICACION'];
						}
						$promedio_final=round($promedio_final/$configurado['CANT_ETAPAS'],2);
						$op=array();
						$op['ID_ESTUDIANTE_CARRERA_MATERIA']=$id_estudiante_carrera_materia;
						$op['ID_TIPO_CALIFICACION']=3;//final de periodo
						$op['ID_PERIODO_ACADEMICO']=$periodo;
						$calificacion_existe=$this->academico_model->get_calificaciones($op);
						$op['CALIFICACION']=$promedio_final;
						if(count($calificacion_existe)<=0){//guardar
							if($op['CALIFICACION']!==NULL){
								$op['FECHA_HORA']=date('Y-m-d H:i:s');
								$op['ID_USUARIO']=$this->session->userdata('loggeado')['ID_USUARIO'];
								$id_calificacion=$this->academico_model->crearCalificacion($op);
							}
						}else{//Actualizar
							if($calificacion_existe[0]['CALIFICACION']!==$op['CALIFICACION']){//actualizo si cambia calificacion
								$op['FECHA_ACTUALIZACION']=date('Y-m-d H:i:s');
								$op['ID_USUARIO_ACTUALIZA']=$this->session->userdata('loggeado')['ID_USUARIO'];
								$id_calificacion=$calificacion_existe[0]['ID_CALIFICACION'];
								$this->academico_model->actualizarCalificacion($op,$id_calificacion);
							}
						}
					}
				}

				//calcular nota final y estado
				$asistencia = $this->academico_model->get_asistencia_materia($id_estudiante_carrera_materia);
				if(($promedio_final>=0 or $etapa==0) and $asistencia>=0){
					$supletorio = $this->academico_model->get_supletorio_materia($id_estudiante_carrera_materia);
					$nota_final = $promedio_final;
					$estado     = '-1';
					if($etapa==0){
						$op     = array();
						$op['ID_ESTUDIANTE_CARRERA_MATERIA'] = $id_estudiante_carrera_materia;
						$op['ID_TIPO_CALIFICACION']          = 6;//final total
						$op['ID_PERIODO_ACADEMICO']=$periodo;
						$calificacion_final = $this->academico_model->get_calificaciones($op);
						if(count($calificacion_final)>0){
							$estado         = $calificacion_final[0]['ESTADO_CALIFICACION'];
						}
						$op     = array();
						$op['ID_ESTUDIANTE_CARRERA_MATERIA'] = $id_estudiante_carrera_materia;
						$op['ID_TIPO_CALIFICACION']          = 3;//final de periodo
						$op['ID_PERIODO_ACADEMICO']=$periodo;
						$calificacion_promedio = $this->academico_model->get_calificaciones($op);
						if(count($calificacion_promedio)>0){
							$nota_final        = $calificacion_promedio[0]['CALIFICACION'];
						}
					}

					//$v_notamin  = $this->academico_model->getparametro(utf8_encode('Nota mínima'));
					// $v_notamin=$this->academico_model->getparametro('Nota m�nima');
					//$notamin    = $v_notamin['VALOR'];
					$notamin    = 7;
					$v_notamax  = $this->academico_model->getparametro(utf8_encode('Nota máxima'));
					// $v_notamax=$this->academico_model->getparametro('Nota m�xima');
					//$notamax    = $v_notamax['VALOR'];
					$notamax    = 10;
					$v_notamax_asis = $this->academico_model->getparametro('Asistencia');
					$notamax_asis   = $v_notamax_asis['VALOR'];
					$v_notamin_asis = $this->academico_model->getparametro('Asistencia minima');
					$notamin_asis   = $v_notamin_asis['VALOR'];
					$v_nota_pierde  = $this->academico_model->getparametro('Nota pierde');
					$nota_pierde    = $v_nota_pierde['VALOR'];
					$min_componente_examen=5;
					//calcular estado materia
					if($nota_final >= $notamin && $nota_final<=$notamax && $componente_examen>=$min_componente_examen){
						if($asistencia >= $notamax_asis){
							$estado = 1;
						}elseif($asistencia >= $notamin_asis && $asistencia < $notamax_asis){
							$estado = '0';
						}else{
							$estado = 2;
						}
					}elseif(($nota_final>=$nota_pierde && $nota_final<$notamin) or ($componente_examen<$min_componente_examen && $nota_final>=$nota_pierde)){
						if($asistencia >= $notamax_asis){
							$estado = '0';
						}elseif($asistencia >= $notamin_asis && $asistencia < $notamax_asis && $componente_examen>=$min_componente_examen){
							$estado = '0';
						}else{
							$estado = 2;
						}
					}elseif($nota_final < $nota_pierde){
						$estado     = 2;
					}
					if($supletorio >= 0){
						$nota_final = round(($nota_final+$supletorio)/2,2);
						if($nota_final>=6.5 && $nota_final<7){
							$nota_final=7;
						}
						if($nota_final >= $notamin){
							$estado = 1;
						}else{
							$estado = 2;
						}
					}
					$op = array();
					$op['ID_ESTUDIANTE_CARRERA_MATERIA'] = $id_estudiante_carrera_materia;
					$op['ID_TIPO_CALIFICACION'] = 6;//final total
					$op['ID_PERIODO_ACADEMICO']=$periodo;
					$calificacion_existe        = $this->academico_model->get_calificaciones($op);
					$op['CALIFICACION']         = $nota_final;
					$op['ESTADO_CALIFICACION']  = $estado;
					if(count($calificacion_existe)<=0){//guardar
						if($op['CALIFICACION']!==NULL){
							$op['FECHA_HORA']   = date('Y-m-d H:i:s');
							$op['ID_USUARIO']   = $this->session->userdata('loggeado')['ID_USUARIO'];
							$id_calificacion    = $this->academico_model->crearCalificacion($op);
						}
					}else{//Actualizar
						if($calificacion_existe[0]['CALIFICACION']!==$op['CALIFICACION']){//actualizo si cambia calificacion
							$op['FECHA_ACTUALIZACION']=date('Y-m-d H:i:s');
							$op['ID_USUARIO_ACTUALIZA']=$this->session->userdata('loggeado')['ID_USUARIO'];
							$id_calificacion    = $calificacion_existe[0]['ID_CALIFICACION'];
							$this->academico_model->actualizarCalificacion($op,$id_calificacion);
						}
					}

					//codigo arancel supletorio
					if($estado == '0'){
						$this->load->module('facturacion/facturacion');
						$this->facturacion->crearArancelSupletorioEstudiante($id_estudiante_carrera_materia);
					}

					//codigo arancel remedial
					if($estado == 2){
						$this->load->module('facturacion/facturacion');
						$this->facturacion->crearArancelRemedialEstudiante($id_estudiante_carrera_materia);
					}
				}
				return $dataForm;
			}
		}
	}

	/////////////////////////////////////////////////////////////////////////////////////////
	public function verificarPlantilla($etapa,$id_estudiante_carrera_materia,$idComponente,$id_plantilla)
	{
		$ecm  = $this->academico_model->get_estudiante_carrera_materia($id_estudiante_carrera_materia);
		if($ecm!=NULL){
			$idPersona=$ecm['ID_PERSONA'];
			$pla=$this->academico_model->getPlanificaciones($ecm['ID_GRUPO'],$ecm['ID_CARRERA_MATERIA'],$ecm['ID_PERIODO_ACADEMICO']);
			if(count($pla)>0){
				if($pla[count($pla)-1]['ID_PLANTILLA']==$id_plantilla){//si es ultima plantilla
					$calificacion_promedio_componente=null;
					if($idComponente==1){//retos y proyectos
						$existe_calificacion_proyecto=0;
						$calificacion_promedio=0;
						foreach($pla as $p){
							$dato_contenido=$this->academico_model->getContenidoMateria($ecm['ID_CARRERA_MATERIA'],$ecm['ID_PERIODO_ACADEMICO'],$p['ID_PLANTILLA']);
							if($dato_contenido!=NULL){
								$dat['ID_CONTENIDO']=$dato_contenido['ID_CONTENIDO'];
								$dat['TIPO']=1;
								$num_proyectos=count($this->academico_model->getRetosProyectosContenido($dat));
								$proyectos_realizados=$this->academico_model->proyectos_realizados_estudiante($idPersona,$dato_contenido['ID_CONTENIDO']);
								$calificacion=0;
								foreach($proyectos_realizados as $proyecto_realizado){
									$calificacion+=$proyecto_realizado['CALIFICACION'];
									if($proyecto_realizado['CALIFICACION']!=NULL and $proyecto_realizado['CALIFICACION']!=''){
										$existe_calificacion_proyecto=1;
									}
								}
								$calificacion_proyecto=0;
								/*if($num_proyectos>0){
									$calificacion_proyecto=round($calificacion/$num_proyectos,2);
								}*/
								if(count($proyectos_realizados)>0){
									$calificacion_proyecto=round($calificacion/count($proyectos_realizados),2);
								}
								$dat['ID_CONTENIDO']=$dato_contenido['ID_CONTENIDO'];
								$dat['TIPO']='0';
								$num_retos=count($this->academico_model->getRetosProyectosContenido($dat));
								$retos_realizados=$this->academico_model->retos_realizados_estudiante($idPersona,$dato_contenido['ID_CONTENIDO']);
								$calificacion=0;
								foreach($retos_realizados as $reto_realizado){
									$calificacion+=$reto_realizado['CALIFICACION'];
								}
								$calificacion_reto=0;
								if($num_retos>0){
									$calificacion_reto=round($calificacion/$num_retos,2);
								}
								$calificacion_promedio+=round($calificacion_proyecto*0.6+$calificacion_reto*0.4,2);
							}
						}
						if($existe_calificacion_proyecto==1){//enviar calificación a componente solo si el proyecto tiene calificacion
							$calificacion_promedio_componente=round($calificacion_promedio/count($pla),2);
						}
					}
					if($idComponente==2){//talleres
						$calificacion_promedio=0;
						foreach($pla as $p){
							$talleres       = $this->academico_model->buscar_talleres(array('ID_CARRERA_MATERIA'=>$ecm['ID_CARRERA_MATERIA'],'ID_PERIODO_ACADEMICO'=>$ecm['ID_PERIODO_ACADEMICO'],'ID_GRUPO'=>$ecm['ID_GRUPO'],'ID_PLANTILLA'=>$p['ID_PLANTILLA']));
							$numTalleres    = count($talleres);
							$sumatoria      = 0;
							foreach ($talleres as $key => $taller) {
								$respuestas = $this->academico_model->existeCalificacionTaller(array('ID_TALLER'=>$taller['ID_TALLER'],'ID_PERSONA'=>$idPersona));
								if (isset($respuestas['CALIFICACION']) && $respuestas['CALIFICACION']!="") {
									$sumatoria += $respuestas['CALIFICACION'];
								}
							}
							if($numTalleres>0){
								$calificacion_promedio+= $sumatoria/$numTalleres;
							}
						}
						$calificacion_promedio_componente=round($calificacion_promedio/count($pla),2);
					}
					if($idComponente==3){//examenes
						$calificacion_promedio=0;
						$examenes_estudiante=$this->academico_model->buscarExamenesEstudiantes(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$id_estudiante_carrera_materia,'ETAPA'=>1));
						foreach($examenes_estudiante as $ee){
							$calificacion_promedio+=$ee['CALIFICACION'];
						}
						$calificacion_promedio_componente=round($calificacion_promedio/count($pla),2);
					}
					if($calificacion_promedio_componente!=null){//enviar calificación promedio de plantillas
						$this->registraCalificacionComponente($etapa,$id_estudiante_carrera_materia,$idComponente,$calificacion_promedio_componente);
					}
				}
			}
		}

	}

	/////////////////////////////////////////////////////////////////////////////
	public function recalificacionComponentes()
	{
		$id_periodo_academico=$this->academico_model->get_periodo_activado();
		$fecha_actual=date_create(date('Y-m-d H:i:s'));
		$data['ID_PERIODO_ACADEMICO'] = $id_periodo_academico;
		$contenidos = $this->academico_model->listado_contenido($data);
		$num=0;
		$nombre='';
		$estudiantes_revisados=array();
		foreach($contenidos as $key=>$contenido){
			$dato_contenido=$this->academico_model->getContenidoMateria($contenido['ID_CARRERA_MATERIA'],$contenido['ID_PERIODO_ACADEMICO']);
			$fecha_tutoria=date_create($contenido['FECHA_TUTORIA1'].' 00:00:00');
			if($fecha_tutoria<=$fecha_actual){
				$estudiantes=$this->academico_model->get_estudiantes(array('ID_CARRERA_MATERIA'=>$contenido['ID_CARRERA_MATERIA'],'ID_PERIODO_ACADEMICO'=>$contenido['ID_PERIODO_ACADEMICO'],'ID_GRUPO'=>$contenido['ID_GRUPO']));
				if($dato_contenido!=NULL){
					foreach($estudiantes as $estudiante){
						$matricula = $this->academico_model->obtener_matricula(array('ID_PERSONA'=>$estudiante['ID_PERSONA'],'ID_PERIODO_ACADEMICO'=>$id_periodo_academico));
						if($matricula!=NULL and $matricula['ESTADO']==0){
							if(!isset($estudiantes_revisados[$estudiante['ID_PERSONA']])){
								$proyectos_realizados=$this->academico_model->proyectos_realizados_estudiante($estudiante['ID_PERSONA'],$dato_contenido['ID_CONTENIDO']);
								$tiene_reto_proyecto=0;
								foreach($proyectos_realizados as $pr){
									if($pr['CALIFICACION']!==NULL and $pr['CALIFICACION']!=''){
										$tiene_reto_proyecto=1;
										break;
									}
								}
								if($tiene_reto_proyecto==0){
									$retos_realizados=$this->academico_model->retos_realizados_estudiante($estudiante['ID_PERSONA'],$dato_contenido['ID_CONTENIDO']);
									foreach($retos_realizados as $rr){
										if($rr['CALIFICACION']!==NULL and $rr['CALIFICACION']!=''){
											$tiene_reto_proyecto=1;
											break;
										}
									}
								}
								if($tiene_reto_proyecto==1){
									$this->promedioRetoProyecto($estudiante['ID_PERSONA'],$contenido['ID_PLANIFICACION']);
								}
								$this->updateCalificacionTaller($contenido['ID_CARRERA_MATERIA'],$contenido['ID_PERIODO_ACADEMICO'],$contenido['ID_GRUPO'],$estudiante['ID_PERSONA']);
								$nombre.=$tiene_reto_proyecto.'-'.$estudiante['ESTUDIANTE'].'<br>';
								$num++;
								$estudiantes_revisados[$estudiante['ID_PERSONA'].'-'.$contenido['ID_CARRERA_MATERIA']]=$estudiante['ID_PERSONA'];
							}
						}
					}
				}
			}
		}
		echo '<br>'.$num.' Recalificaciones Realizadas<br>'.$nombre;
	}

	/////////////////////////////////////////////////////////////////////////////
	public function examenesEstudiantes()
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,105)){
			$id_periodo_academico=$this->academico_model->get_periodo_activado();
			$usuario=$this->session->userdata('loggeado');
			if(!$this->input->is_ajax_request()){
				$datos['carreras'] = $this->academico_model->get_carreras();
				$datos['examenes'] = $this->academico_model->buscar_contenidos(array('ID_PERIODO_ACADEMICO'=>$id_periodo_academico));
				$datos['usuario'] = $usuario;
				$datos1=$this->perfil_model->cabecera($idusuario);
				$datos['num_etapas']=count($this->academico_model->get_etapas_calificar())-1;//quitar etapa general
				$vector_us=null;
				$grupos=array();
				if($usuario['ID_PERFIL']==12){//filtrar grupos para coordinadores
					$gruposc=$this->usuarios_model->grupos_usuario_academico(array('ID_USUARIO_ACADEMICO'=>$idusuario));
					foreach($gruposc as $g){
						$grupos[]=$g['GRUPO'];
					}
				}else{
					$grupos=$this->academico_model->buscarGruposEst($vector_us,$id_periodo_academico);
					$grupos = explode("-", $grupos);
					sort($grupos);
				}
				$datos['grupos'] = $grupos;
			  	$this->load->view('templates/header',$datos1);
			  	$this->load->view('examenesEstudiantes',$datos);
			  	$this->load->view('templates/footer');
			}else{
				$clases_examenes=array();
				$dat=array();
				//$dat['EXAMEN']=1;
				if($usuario['ID_PERFIL']==5){
					$dat['ID_PERSONA']=$usuario['ID_PERSONA'];
					$dat['ESTADO_ESTUDIANTE']='0';
				}else{
					$dat['ID_CONTENIDO']=trim($this->input->post('examen'));
					$dat['NRO_DOCUMENTO']=trim($this->input->post('nro_doc_estudiante'));
					$dat['ID_CARRERA']=trim($this->input->post('id_carrera'));
					$dat['GRUPO']=trim($this->input->post('grupo'));
					$dat['FECHA_INICIO']=trim($this->input->post('fechai'));
					$dat['FECHA_FIN']=trim($this->input->post('fechaf'));
					$estado_examen=trim($this->input->post('estado'));
					if($usuario['ID_PERFIL']==12){//filtrar grupos para coordinadores
						$dat['ID_USUARIO_ACADEMICO']=$usuario['ID_USUARIO'];
					}
					$dat['ESTADO_EXAMEN']=$estado_examen;
					//$dat['ETAPA']=trim($this->input->post('tipo'));
				}
				$estadosExamen=array(-1=>'Pendiente',0=>'En Proceso',1=>'Realizado');
				$fecha_actual=date_create(date('Y-m-d H:i:s'));
				$listado=array();
				$clases_examenes=$this->academico_model->buscarGruposExamenesEstudiantes($dat);
				foreach($clases_examenes as $k=>$ce){
					$clases_examenes[$k]['ETAPA']=1;
					$clases_examenes[$k]['TIPO']='';
					//verifico si ya tiene examen personalizado el estudiante
					$clases_examenes[$k]['ESTADO']='Pendiente';
					$clases_examenes[$k]['CALIFICACION']='';
					$examenes_estudiante=$this->academico_model->buscarExamenesEstudiantes(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$ce['ID_ESTUDIANTE_CARRERA_MATERIA'],'ETAPA'=>1,'ID_PLANTILLA'=>$ce['ID_PLANTILLA']));
					if(count($examenes_estudiante)>0){
						$ee=$examenes_estudiante[0];
						if($ee['TIPO_EXAMEN']==0 and $ee['ESTADO']==1){
							$clases_examenes[$k]['ESTADO']='Realizado';
							$clases_examenes[$k]['CALIFICACION']=number_format(floatval($ee['CALIFICACION']),2);
						}elseif($ee['TIPO_EXAMEN']==0 and $ee['ESTADO']==0){
							$clases_examenes[$k]['ESTADO']='En Proceso';
						}elseif($ee['TIPO_EXAMEN']==1){
							$clases_examenes[$k]['ESTADO']='Impreso';
						}
					}
					/*if($ce['TIPO_EXAMEN']==0 and $ce['ESTADO_EXAMEN']==1){
						$clases_examenes[$k]['ESTADO']='Realizado';
						$clases_examenes[$k]['CALIFICACION']=number_format(floatval($ce['CALIFICACION']),2);
					}elseif($ce['TIPO_EXAMEN']==0 and $ce['ESTADO_EXAMEN']==0 and $ce['ESTADO_EXAMEN']!=null){
						$clases_examenes[$k]['ESTADO']='En Proceso';
					}elseif($ce['TIPO_EXAMEN']==1){
						$clases_examenes[$k]['ESTADO']='Impreso';
					}*/

					$clases_examenes[$k]['FECHA_HORA_EXAMEN']=NULL;

					if(isset($v_dato_contenido[$ce['ID_CARRERA_MATERIA']])){
						$dato_contenido=$v_dato_contenido[$ce['ID_CARRERA_MATERIA']];
					}else{
						$dato_contenido=$this->academico_model->getContenidoMateria($ce['ID_CARRERA_MATERIA'],$ce['ID_PERIODO_ACADEMICO'],$ce['ID_PLANTILLA']);
						if(isset($dato_contenido['DURACION_EXAMEN']) and $dato_contenido['DURACION_EXAMEN']<=0){
							$plantilla=$this->academico_model->buscar_plantillas(array('ID_PLANTILLA'=>$dato_contenido['ID_PLANTILLA']));
							$dato_contenido['DURACION_EXAMEN']=$plantilla[0]['DURACION_EXAMEN'];
						}
						$v_dato_contenido[$ce['ID_CARRERA_MATERIA']]=$dato_contenido;
					}

					if($dato_contenido!=NULL){
						/*if($dato_contenido['DURACION_EXAMEN']<=0){
							$plantilla=$this->academico_model->buscar_plantillas(array('ID_PLANTILLA'=>$dato_contenido['ID_PLANTILLA']));
							$dato_contenido['DURACION_EXAMEN']=$plantilla[0]['DURACION_EXAMEN'];
						}*/
						if($dato_contenido['DURACION_EXAMEN']>0 and $ce['FECHA_EXAMEN']!=NULL and $ce['FECHA_EXAMEN']!='0000-00-00' and $ce['HORA_EXAMEN']!='' and $ce['HORA_EXAMEN']!=NULL){
							$fi_examen = date_create($ce['FECHA_EXAMEN'].' '.$ce['HORA_EXAMEN'].':00');
							$fi_examen->modify('+ '.$dato_contenido['DURACION_EXAMEN'].' minute');
							$clases_examenes[$k]['FECHA_HORA_EXAMEN']=$ce['FECHA_EXAMEN'].' '.$ce['HORA_EXAMEN'].' a '.$fi_examen->format('H:i');
						}
					}
					$clases_examenes[$k]['FECHA_APLAZADO']='';
					$examenes_estudiante_aplazados=$this->academico_model->buscarExamenesEstudiantesAplazados(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$ce['ID_ESTUDIANTE_CARRERA_MATERIA'],'ETAPA'=>1,'ID_PLANTILLA'=>$ce['ID_PLANTILLA']));
					if(count($examenes_estudiante_aplazados)>0){//si tiene fecha aplazado
						$aplazo=$examenes_estudiante_aplazados[0];
						$clases_examenes[$k]['FECHA_APLAZADO']=$aplazo['FECHA_APLAZADO'].'<br>'.$aplazo['HORA_APLAZADO'];
						if(isset($dato_contenido['DURACION_EXAMEN']) and $dato_contenido['DURACION_EXAMEN']>0 and $aplazo['FECHA_APLAZADO']!=NULL and $aplazo['FECHA_APLAZADO']!='0000-00-00' and $aplazo['HORA_APLAZADO']!='' and $aplazo['HORA_APLAZADO']!=NULL){
							$ff_aplazo = date_create($aplazo['FECHA_APLAZADO'].' '.$aplazo['HORA_APLAZADO'].':00');
							if($aplazo['DURACION_EXAMEN']!=NULL and $aplazo['DURACION_EXAMEN']>0){
								$ff_aplazo->modify('+ '.$aplazo['DURACION_EXAMEN'].' minute');
							}else{
								$ff_aplazo->modify('+ '.$dato_contenido['DURACION_EXAMEN'].' minute');
							}
							$clases_examenes[$k]['FECHA_APLAZADO'].=' a '.$ff_aplazo->format('H:i');
						}
					}
					/*if($ce['FECHA_APLAZADO']!=NULL){//si tiene fecha aplazado
						$clases_examenes[$k]['FECHA_APLAZADO']=$ce['FECHA_APLAZADO'].'<br>'.$ce['HORA_APLAZADO'];
						if(isset($dato_contenido['DURACION_EXAMEN']) and $dato_contenido['DURACION_EXAMEN']>0 and $ce['FECHA_APLAZADO']!=NULL and $ce['FECHA_APLAZADO']!='0000-00-00' and $ce['HORA_APLAZADO']!='' and $ce['HORA_APLAZADO']!=NULL){
							$ff_aplazo = date_create($ce['FECHA_APLAZADO'].' '.$ce['HORA_APLAZADO'].':00');
							if($ce['DURACION_EXAMEN']!=NULL and $ce['DURACION_EXAMEN']>0){
								$ff_aplazo->modify('+ '.$ce['DURACION_EXAMEN'].' minute');
							}else{
								$ff_aplazo->modify('+ '.$dato_contenido['DURACION_EXAMEN'].' minute');
							}
							$clases_examenes[$k]['FECHA_APLAZADO'].=' a '.$ff_aplazo->format('H:i');
						}
					}*/


					$clases_examenes[$k]['BLOQUEO_FECHA']=0;
					if($usuario['ID_PERFIL']==5 and $ce['FECHA_EXAMEN']!=NULL and $ce['FECHA_EXAMEN']!=''){//vista estudiante
						$fi_examen=date_create($ce['FECHA_EXAMEN'].' 00:00:00');
						if($fi_examen>$fecha_actual){
							$clases_examenes[$k]['BLOQUEO_FECHA']=1;
						}
					}
					$clases_examenes[$k]['EXAMEN_HOY']=0;
					if($clases_examenes[$k]['FECHA_EXAMEN']==date('Y-m-d') or (count($examenes_estudiante_aplazados)>0 and $aplazo['FECHA_APLAZADO']==date('Y-m-d'))){
					//if($clases_examenes[$k]['FECHA_EXAMEN']==date('Y-m-d') or $ce['FECHA_APLAZADO']==date('Y-m-d')){
						$clases_examenes[$k]['EXAMEN_HOY']=1;
					}
					/*if($ce['ETAPA']==0){//verificar que este en supletorio
						$dats['ID_ESTUDIANTE_CARRERA_MATERIA']=$ce['ID_ESTUDIANTE_CARRERA_MATERIA'];
						$dats['ID_TIPO_CALIFICACION']=6;
						$supletorio=$this->academico_model->buscar_calificacion($dats);
						if(count($supletorio)>0){
							if($supletorio[0]['ESTADO_CALIFICACION']==0 or count($examenes_estudiante)>0){
								$listado[]=$clases_examenes[$k];
							}
						}
					}else{*/
						//$listado[]=$clases_examenes[$k];
					//}
					/*if(isset($estado_examen) and $estado_examen!=''){
						if($clases_examenes[$k]['ESTADO']==$estadosExamen[$estado_examen]){
							$listado[]=$clases_examenes[$k];
						}
					}else{
						$listado[]=$clases_examenes[$k];
					}*/
				}
				echo json_encode($clases_examenes);
				//echo json_encode($listado);
			}
		}else{
			redirect('index', 'refresh');
		}
	}

	/////////////////////////////////////////////////////////////////////////////
	public function getExamenEstudiante()
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,105)){
			$usuario=$this->session->userdata('loggeado');
			//$id_estudiante_carrera_materia = trim($this->input->post('id_estudiante_carrera_materia'));
			$ids=trim($this->input->post('id_estudiante_carrera_materia'));
			$ids=explode('_',$ids);
			$id_estudiante_carrera_materia = $ids[0];
			$id_plantilla = 0;
			if(isset($ids[1])){
				$id_plantilla = $ids[1];
			}
			$etapa = trim($this->input->post('etapa'));
			$dat['ETAPA']=$etapa;
			$dat['ID_ESTUDIANTE_CARRERA_MATERIA']=$id_estudiante_carrera_materia;
			$dat['ESTADO_ESTUDIANTE']='0';
			$dat['ID_PLANTILLA']=$id_plantilla;
			$clases_examenes=array();
			if($id_estudiante_carrera_materia!=NULL and $id_estudiante_carrera_materia!='' and $id_estudiante_carrera_materia>0){
				$clases_examenes=$this->academico_model->buscarGruposExamenesEstudiantes($dat);
			}
			//$clases_examenes=$this->academico_model->buscarGruposExamenesEstudiantes($dat);
			if($usuario['ID_PERFIL']==5 and count($clases_examenes)>0){
				$clase_examen=$clases_examenes[0];
				$tabla='<table class="table table-condensed">';
					$tabla.='<tr>';
						$tabla.='<td>';
							$tabla.='<strong>NOMBRE</strong>';
						$tabla.='</td>';
						$tabla.='<td>'.$clase_examen['NOMBRE_ESTUDIANTE'].'</td>';
						$tabla.='<td>';
							$tabla.='<strong>NRO. DOCUMENTO</strong>';
						$tabla.='</td>';
						$tabla.='<td>'.$clase_examen['NRO_DOCUMENTO'].'</td>';
					$tabla.='</tr>';
					$tabla.='<tr>';
						$tabla.='<td>';
							$tabla.='<strong>MATERIA</strong>';
						$tabla.='</td>';
						$tabla.='<td>'.$clase_examen['MATERIA'].'</td>';
						$tabla.='<td>';
							$tabla.='<strong>GRUPO</strong>';
						$tabla.='</td>';
						$tabla.='<td>'.$clase_examen['GRUPO'].'</td>';
					$tabla.='</tr>';
				$tabla.='</table>';
				$tabla.='<input name="idecm" type="hidden" id="idecm" value="'.$id_estudiante_carrera_materia.'_'.$id_plantilla.'"><input name="etapa" type="hidden" id="etapa" value="'.$etapa.'">';
				$fecha_examen_inicio = $clase_examen['FECHA_EXAMEN'].' '.$clase_examen['HORA_EXAMEN'].':00';
				$ff_examen = date_create(date('Y-m-d H:i:s'));//fecha final por defecto
				$dato_contenido=$this->academico_model->getContenidoMateria($clase_examen['ID_CARRERA_MATERIA'],$clase_examen['ID_PERIODO_ACADEMICO'],$id_plantilla);
				if($dato_contenido!=NULL){
					if($dato_contenido['DURACION_EXAMEN']<=0){
						$plantilla=$this->academico_model->buscar_plantillas(array('ID_PLANTILLA'=>$dato_contenido['ID_PLANTILLA']));
						$dato_contenido['DURACION_EXAMEN']=$plantilla[0]['DURACION_EXAMEN'];
					}
					if($dato_contenido['DURACION_EXAMEN']>0 and $clase_examen['FECHA_EXAMEN']!=NULL and $clase_examen['FECHA_EXAMEN']!='0000-00-00' and $clase_examen['HORA_EXAMEN']!='' and $clase_examen['HORA_EXAMEN']!=NULL){
						$ff_examen = date_create($fecha_examen_inicio);
						$ff_examen->modify('+ '.$dato_contenido['DURACION_EXAMEN'].' minute');
					}
				}
				$examenes_estudiante_aplazados = $this->academico_model->buscarExamenesEstudiantesAplazados(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$id_estudiante_carrera_materia,'ETAPA'=>$etapa,'ID_PLANTILLA'=>$id_plantilla));
				$numPreguntasContestadas=0;
				if(count($examenes_estudiante_aplazados)>0 and $dato_contenido!=NULL){//si tiene fecha aplazado
					$aplazo=$examenes_estudiante_aplazados[0];
					if($aplazo['HORA_APLAZADO']=='' or $aplazo['HORA_APLAZADO']==NULL){
						$aplazo['HORA_APLAZADO']='00:00';
						if(date_create($aplazo['FECHA_APLAZADO'])>=date_create(date('Y-m-d'))){
							$aplazo['FECHA_APLAZADO']=date('Y-m-d');
							$aplazo['HORA_APLAZADO']=date('H:i');
							$actualiza_aplazo['FECHA_APLAZADO']=date('Y-m-d');
							$actualiza_aplazo['HORA_APLAZADO']=date('H:i');
							$actualiza_aplazo['ID_USUARIO_ACTUALIZA']=$usuario['ID_USUARIO'];
							$actualiza_aplazo['FECHA_ACTUALIZACION']=date('Y-m-d H:i:s');
							$this->academico_model->actualizarExamenEstudianteAplazado($actualiza_aplazo,$aplazo['ID_EXAMEN_ESTUDIANTE_APLAZADO']);
						}
					}
					$fecha_examen_inicio=$aplazo['FECHA_APLAZADO'].' '.$aplazo['HORA_APLAZADO'].':00';
					$ff_examen = date_create($fecha_examen_inicio);
					if($aplazo['DURACION_EXAMEN']!=NULL and $aplazo['DURACION_EXAMEN']>0){
						$ff_examen->modify('+ '.$aplazo['DURACION_EXAMEN'].' minute');
					}else{
						$ff_examen->modify('+ '.$dato_contenido['DURACION_EXAMEN'].' minute');
					}
					if($aplazo['NUM_PREGUNTA_CONTESTADA']!=NULL){
						$numPreguntasContestadas=$aplazo['NUM_PREGUNTA_CONTESTADA'];
					}
				}
				$fi_examen = date_create($fecha_examen_inicio);
				//$ff_examen = date_create($fecha_examen_fin);
				$f_actual = date_create(date('Y-m-d H:i:s'));
				$interval = date_diff($f_actual, $ff_examen);
				$days = $interval->format('%a');
				$seconds = 0;
				if($days){
					$seconds += 24 * 60 * 60 * $days;
				}
				$hours = $interval->format('%H');
				if($hours){
					$seconds += 60 * 60 * $hours;
				}
				$minutes = $interval->format('%i');
				if($minutes){
					$seconds += 60 * $minutes;
				}
				$seconds += $interval->format('%s');
				$seg_interval=$seconds;
				//verifico si ya tiene examen web personalizado el estudiante
				$examenes_estudiante=$this->academico_model->buscarExamenesEstudiantes(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$id_estudiante_carrera_materia,'ETAPA'=>$etapa,'TIPO_EXAMEN'=>'0','ID_PLANTILLA'=>$id_plantilla));
				//verifico si ya tiene examen fisico personalizado el estudiante
				$examenes_estudiante_fisico=$this->academico_model->buscarExamenesEstudiantes(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$id_estudiante_carrera_materia,'ETAPA'=>$etapa,'TIPO_EXAMEN'=>1,'ID_PLANTILLA'=>$id_plantilla));
				if(count($examenes_estudiante)>0 and $examenes_estudiante[0]['ESTADO']==1){
					$tabla.='<div class="alert alert-success">Examen Realizado. Calificaci&oacute;n: <strong>'.number_format(floatval($examenes_estudiante[0]['CALIFICACION']),2).'</strong></div>';
					///VISTA DE DETALLE DEL EXAMEN PARA EL ESTUDIANTES
					//CUANTAS HA APROBADO
					//CUANTAS HA SIDO INCORRECTAS
					//CUANTAS NO HAN CONTESTADO
					$examen=$examenes_estudiante[0];
					$preguntas=explode('+',$examen['IDS_PREGUNTA_CONTENIDO']);
					$opciones=explode('+',$examen['IDS_OPCION_RESPUESTA_CONTENIDO']);
					$respuestas=explode('+',$examen['IDS_RESPUESTA']);
					$correcto=0;
					if($examen['IDS_PREGUNTA_CONTENIDO']!='' and $examen['IDS_PREGUNTA_CONTENIDO']!=NULL){
						foreach($preguntas as $k=>$p){
							$correcto=0;
							$tabla.='<div class="row">';
								$tabla.='<div class="col-md-6 text-right" style="text-align: right">';
									$tabla.='<label class="text-left" style="font-size:20px; ">Pregunta '.($k+1).'</label> ';
								$tabla.='</div>';
								$pregunta=$this->academico_model->getPreguntasContenido(array('ID_PREGUNTA_CONTENIDO'=>$p));
								$pe=$pregunta[0];
								if(isset($respuestas[$k])){
									$opcionesSeleccionadas = explode("-", $respuestas[$k]);
								}else{
									$opcionesSeleccionadas = array();
								}
								$opcionesCorrectas     = explode("+", trim($pe['ID_OPCION_RESPUESTA_CONTENIDO'],"+"));
								$correctoPregunta = 0;
								if (count($opcionesSeleccionadas) == count($opcionesCorrectas)){
									foreach ($opcionesSeleccionadas as $oSeleccionada){
										foreach ($opcionesCorrectas as $ocorrecta){
											if ($ocorrecta == $oSeleccionada){
												$correctoPregunta++;
											}
										}
									}
								}
								if(isset($respuestas[$k]) and count($opcionesCorrectas) == $correctoPregunta){
									$correcto++;
								}
								$tabla.='<div class="col-md-6"  style="font-size:25px;">';
									if (count($opcionesSeleccionadas)==0 || $opcionesSeleccionadas[0]=="0") {
										//$tabla.= "No contest�";
										$tabla.='<span class="glyphicon glyphicon-question-sign" style="color:blue;"></span>';
									}elseif ($correcto==0) {
										//$tabla.= "Incorrecto";
										$tabla.='<span class="glyphicon glyphicon-remove-sign" style="color:red;"></span>';
									}else{
										//$tabla.= "Correcto";
										$tabla.='<span class="glyphicon glyphicon-ok-sign" style="color:green;"></span>';
									}
								$tabla.='</div>';
							$tabla.='</div><br>';
						}
					}
				}elseif(count($examenes_estudiante_fisico)>0){
					$tabla.='<div class="alert alert-info">Examen Impreso</strong></div>';
				}elseif($f_actual<$fi_examen){
					if($fi_examen->format('H:i')=='00:00'){
						$tabla.='<div class="alert alert-info">Aun no inicia examen <strong>'.$fi_examen->format('Y-m-d').'</strong> Cierre e ingrese a la fecha planificada</div>';
					}else{
						$tabla.='<div class="alert alert-info">Aun no inicia examen <strong>'.$fi_examen->format('Y-m-d H:i').'</strong> Cierre e ingrese a la hora planificada</div>';
					}
				}elseif($f_actual>$ff_examen){
					$tabla.='<div class="alert alert-info">Ya finaliz&oacute; examen <strong>'.$ff_examen->format('Y-m-d H:i').'</strong></div>';
					$idRubro=20;//examen atrasado
					if($etapa==0){
						$idRubro=21;//supletorio atrasado
					}
					$comprobarPagoArancelExamenAtrasado = $this->facturacion_model->buscarArancel(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$id_estudiante_carrera_materia, 'ID_RUBRO'=>$idRubro));
					if(count($comprobarPagoArancelExamenAtrasado)>0 and isset($comprobarPagoArancelExamenAtrasado[0]['NOMBRE_ARANCEL']) and $comprobarPagoArancelExamenAtrasado[0]['ESTADO'] == '0'){
						$tabla.='<div class="alert alert-warning"><strong>Debe pagar el rubro: '.$comprobarPagoArancelExamenAtrasado[0]['NOMBRE_ARANCEL'].' </strong></div>';
					}

					$idp = trim($this->input->post('idp'));
					if(isset($idp) and $idp==-1 and count($examenes_estudiante)>0 and $examenes_estudiante[0]['ESTADO']==0){//finalizar Examen por tiempo limite
						$examen=$examenes_estudiante[0];
						$preguntas=explode('+',$examen['IDS_PREGUNTA_CONTENIDO']);
						$opciones=explode('+',$examen['IDS_OPCION_RESPUESTA_CONTENIDO']);
						$respuestas=explode('+',$examen['IDS_RESPUESTA']);
						$correcto=0;
						foreach($preguntas as $k=>$p){
							$pregunta=$this->academico_model->getPreguntasContenido(array('ID_PREGUNTA_CONTENIDO'=>$p));
							$pe=$pregunta[0];
							if(isset($respuestas[$k])){
								$opcionesSeleccionadas = explode("-", $respuestas[$k]);
								$opcionesCorrectas     = explode("+", trim($pe['ID_OPCION_RESPUESTA_CONTENIDO'],"+"));
								$correctoPregunta = 0;
								if (count($opcionesSeleccionadas) == count($opcionesCorrectas)){
									foreach ($opcionesSeleccionadas as $oSeleccionada){
										foreach ($opcionesCorrectas as $ocorrecta){
											if ($ocorrecta == $oSeleccionada){
												$correctoPregunta++;
											}
										}
									}
								}
							}
							if(isset($respuestas[$k]) and count($opcionesCorrectas) == $correctoPregunta){
								$correcto++;
							}
						}
						$calificacion=round($correcto*10/count($preguntas),2);
						$dat_actualiza=array();
						$dat_actualiza['ESTADO']=1;
						$dat_actualiza['CALIFICACION']=$calificacion;
						$dat_actualiza['FECHA_ACTUALIZACION']=date('Y-m-d H:i:s');
						$dat_actualiza['FECHA_FIN_CONEXION']=date('Y-m-d H:i:s');
						$this->academico_model->actualizarExamenEstudiante($dat_actualiza,$examen['ID_EXAMEN_ESTUDIANTE']);
						$tabla.='<div class="alert alert-success">Examen finalizado. Calificaci&oacute;n: <strong>'.number_format(floatval($calificacion),2).'</strong></div>';
						//transpasar nota examen
						$this->registraCalificacionComponente(1,$id_estudiante_carrera_materia,3,$calificacion,$id_plantilla);
					}
				}else{
					if(count($examenes_estudiante)<=0 and $seg_interval>0){
						//verificar si existe base de preguntas para este examen
						if(isset($dato_contenido['ID_CONTENIDO'])){
							$preguntas_clase=$this->academico_model->getPreguntasContenido($dato_contenido);
							if(count($preguntas_clase)<=0){
								//generar base de preguntas examen
								$this->generarBasePreguntasContenido($dato_contenido);
							}
						}
						//generar examen web del estudiante
						$dato_contenido['ID_ESTUDIANTE_CARRERA_MATERIA']=$clase_examen['ID_ESTUDIANTE_CARRERA_MATERIA'];
						$this->generarExamenEstudiante($dato_contenido,'0',1,$id_plantilla);
						$examenes_estudiante=$this->academico_model->buscarExamenesEstudiantes(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$id_estudiante_carrera_materia,'ETAPA'=>$etapa,'TIPO_EXAMEN'=>'0','ID_PLANTILLA'=>$id_plantilla));
					}
					if(count($examenes_estudiante)>0 and $seg_interval>0){
						$idp = trim($this->input->post('idp'));
						$opcion_seleccionado = trim($this->input->post('op'));//respuesta
						$examen=$examenes_estudiante[0];
						$preguntas=explode('+',$examen['IDS_PREGUNTA_CONTENIDO']);
						$opciones=explode('+',$examen['IDS_OPCION_RESPUESTA_CONTENIDO']);
						$respuestas=explode('+',$examen['IDS_RESPUESTA']);

						if($idp==NULL and $examen['IDS_RESPUESTA']==''){
							$idp=$preguntas[0];
						}elseif($idp==NULL){
							$idp=$preguntas[count($respuestas)-1];
						}
						if($opcion_seleccionado!=NULL and $opcion_seleccionado!=''){
							$v_opSeleccionadas = explode("+", trim($opcion_seleccionado,"+"));
							$indicePregunta = "0";
							$opcionesRespuestasSeleccionadas = "";
							foreach ($v_opSeleccionadas as $kops => $ops) {
								//guardar respuesta
								$op_select=explode('-',$ops);
								foreach($preguntas as $k=>$p){
									if($p==$op_select[0]){
										$opcionesRespuestasSeleccionadas .= "-".$op_select[1];
										$indicePregunta = $k;
										break;
									}
								}
								$respuestas[$k]= trim($opcionesRespuestasSeleccionadas,"-");
							}
							if (isset($respuestas[$indicePregunta]) && $respuestas[$indicePregunta]=="") {
								$respuestas[$indicePregunta] =0;
							}
							// return 0;
							$res_total=implode('+',$respuestas);
							if($res_total!=$examen['IDS_RESPUESTA']){
								$dat_actualiza=array();
								$dat_actualiza['IDS_RESPUESTA']=$res_total;
								$dat_actualiza['FECHA_ACTUALIZACION']=date('Y-m-d H:i:s');
								$dat_actualiza['FECHA_FIN_CONEXION']=date('Y-m-d H:i:s');
								$this->academico_model->actualizarExamenEstudiante($dat_actualiza,$examen['ID_EXAMEN_ESTUDIANTE']);
							}
							//cambiar de pregunta si no selecciona respuesta
							/*if($respuestas[$indicePregunta]==0){
								$dat_b['ID_CONTENIDO']=$dato_contenido['ID_CONTENIDO'];
								$dat_b['ALEATORIO']=1;
								$dat_b['NUM_REGISTROS']=1;
								$dat_b['EXCLUIR']=$preguntas;
								$preguntas_estudiante=$this->academico_model->getPreguntasContenido($dat_b);
								if(count($preguntas_estudiante)>0){
									$preguntas[$indicePregunta]=$preguntas_estudiante[0]['ID_PREGUNTA_CONTENIDO'];
									if(!in_array($idp,$preguntas)){
										$idp=$preguntas_estudiante[0]['ID_PREGUNTA_CONTENIDO'];
									}
									$opciones_respuesta_estudiante=$this->academico_model->getOpcionesRespuestaContenido(array('ID_PREGUNTA_CONTENIDO'=>$preguntas[$indicePregunta]));
									if(count($opciones_respuesta_estudiante)>0){
										shuffle($opciones_respuesta_estudiante);//desordenar las opciones de respuesta
										foreach($opciones_respuesta_estudiante as $ore){
											$ids_opcion_respuesta[]=$ore['ID_OPCION_RESPUESTA_CONTENIDO'];
										}
									}else{
										$ids_opcion_respuesta[]='0';
									}
									$opciones[$indicePregunta]=implode('-',$ids_opcion_respuesta);
								}
								$dat_actualiza=array();
								$dat_actualiza['IDS_PREGUNTA_CONTENIDO']=implode('+',$preguntas);
								$dat_actualiza['IDS_OPCION_RESPUESTA_CONTENIDO']=implode('+',$opciones);
								$this->academico_model->actualizarExamenEstudiante($dat_actualiza,$examen['ID_EXAMEN_ESTUDIANTE']);
							}*/
						}
						if($idp==-1){//finalizar Examen
							$correcto=0;
							foreach($preguntas as $k=>$p){
								$pregunta=$this->academico_model->getPreguntasContenido(array('ID_PREGUNTA_CONTENIDO'=>$p));
								$pe=$pregunta[0];
								$opcionesSeleccionadas = explode("-", $respuestas[$k]);
								$opcionesCorrectas     = explode("+", trim($pe['ID_OPCION_RESPUESTA_CONTENIDO'],"+"));
								$correctoPregunta = 0;
								if (count($opcionesSeleccionadas) == count($opcionesCorrectas)){
									foreach ($opcionesSeleccionadas as $oSeleccionada){
										foreach ($opcionesCorrectas as $ocorrecta){
											if ($ocorrecta == $oSeleccionada){
												$correctoPregunta++;
											}
										}
									}
								}
								if(isset($respuestas[$k]) and count($opcionesCorrectas) == $correctoPregunta){
									$correcto++;
								}
							}
							$calificacion=round($correcto*10/count($preguntas),2);
							$dat_actualiza=array();
							$dat_actualiza['ESTADO']=1;
							$dat_actualiza['CALIFICACION']=$calificacion;
							$dat_actualiza['FECHA_ACTUALIZACION']=date('Y-m-d H:i:s');
							$dat_actualiza['FECHA_FIN_CONEXION']=date('Y-m-d H:i:s');
							$this->academico_model->actualizarExamenEstudiante($dat_actualiza,$examen['ID_EXAMEN_ESTUDIANTE']);
							$tabla.='<div class="alert alert-success">Examen finalizado. Calificaci&oacute;n: <strong>'.number_format(floatval($calificacion),2).'</strong></div>';
							//transpasar nota examen
							$this->registraCalificacionComponente(1,$id_estudiante_carrera_materia,3,$calificacion,$id_plantilla);
						}else{//mostrar pregunta
							$tabla.='<table width="100%"><tr><td style="font-size:12px; color:blue">Pregunta '.(array_search($idp,$preguntas)+1).' de '.count($preguntas).'</td>';
							if($seg_interval>0){
								$tabla.='<td><div align="right" style="font-size:12px; color:blue" id="countdown"></div><script>contador('.$seg_interval.');</script></td>';
							}
							$tabla.='</tr></table>';
							foreach($preguntas as $k=>$p){
								if($idp==$p){
									$pregunta=$this->academico_model->getPreguntasContenido(array('ID_PREGUNTA_CONTENIDO'=>$p));
									$pe=$pregunta[0];
									$img='';
									if($pe['IMAGEN']!='' and file_exists(FCPATH.'archivos/contenidos/preguntas/'.$pe['IMAGEN'])){
										$img='<div class="thumbnail"><img src="'.base_url('archivos/contenidos/preguntas/')."/".$pe['IMAGEN'].'"/></div>';
									}
									$tabla.='<div class="panel panel-default">
											  <div class="panel-heading">
												<h3 class="panel-title">'.($k+1).') '.$pe['PREGUNTA'].'</h3>'.$img.'
											  </div>
											  <div class="panel-body">
												<table>';
									//obtengo las opciones de respuesta
									$opciones_respuesta=explode('-',$opciones[$k]);
									//recorrer las opciones de respuesta
									foreach($opciones_respuesta as $or){
										$opcion=$this->academico_model->getOpcionesRespuestaContenido(array('ID_OPCION_RESPUESTA_CONTENIDO'=>$or));//obtengo el texto de la opci�n de respuesta
										$op=$opcion[0];
										$seleccionado='';
										if(isset($respuestas[$k])){

											$respuestasSeleccionadas = explode("-", $respuestas[$k]);
											if (in_array($or, $respuestasSeleccionadas)) {
												$seleccionado='checked';
											}
										}
										$img='';
										if($op['IMAGEN']!='' and file_exists(FCPATH.'archivos/contenidos/preguntas/'.$op['IMAGEN'])){
											$img='<div class="thumbnail"><img src="'.base_url('archivos/contenidos/preguntas/')."/".$op['IMAGEN'].'"/></div>';
										}
										$tabla.='<tr><td valign="top"><input required="" name="opcion_seleccionada['.$p.'][]" type="checkbox" value="'.$p.'-'.$or.'" id="opcion_respuesta'.$or.'" style="transform: scale(1.5)" class="claseopcion" '.$seleccionado.'></td><td style="padding-left:10px"><label for="opcion_respuesta'.$or.'" style="cursor: pointer">'.$op['OPCION_RESPUESTA'].' '.$img.'</label></td></tr>';
									}
									$tabla.='</table>
											</div>';
									$btnSig='';
									if(isset($preguntas[$k+1])){
										$btnSig='<input type="button" name="btn_sig" id="btn_sig" value="Siguiente" class="btn btn-primary btn-sm" onclick="get_pregunta(\''.$id_estudiante_carrera_materia.'_'.$id_plantilla.'\',\''.$etapa.'\',\''.$preguntas[$k].'\',\''.$preguntas[$k+1].'\',1)">';
									}elseif(($k+1)==count($preguntas)){
										$btnSig='<input type="button" name="btn_sig" id="btn_sig" value="FInalizar" class="btn btn-success btn-sm" onclick="get_pregunta(\''.$id_estudiante_carrera_materia.'_'.$id_plantilla.'\',\''.$etapa.'\',\''.$preguntas[$k].'\',\'-1\',1)">';
									}
									$btnAnt='';
									if(isset($preguntas[$k-1]) and $k>=$numPreguntasContestadas){
										$btnAnt='<input type="button" name="btn_ant" value="Anterior" class="btn btn-default btn-sm" onclick="get_pregunta(\''.$id_estudiante_carrera_materia.'_'.$id_plantilla.'\',\''.$etapa.'\',\''.$preguntas[$k].'\',\''.$preguntas[$k-1].'\',1)">';
									}
									$tabla.='<div id="error-pregunta" style="color:red; text-align:right"></div>';
									$tabla.='<div class="panel-footer"><table width="100%"><tr><td align="left">'.$btnAnt.'</td><td align="right">'.$btnSig.'</td></tr></table></div>';
									/*$tabla.='<script>window.onblur = function() { cambiaPregunta(\''.$id_estudiante_carrera_materia.'\',\''.$etapa.'\',\''.$preguntas[$k].'\',\''.$preguntas[$k].'\',1);console.log(\'salio de la ventana\'); }</script>';*/
									$tabla.='</div>';
									break;
								}
							}
						}
					}else{
						$tabla.='<div class="alert alert-danger">No existe examen configurado '.count($examenes_estudiante).'-'.$seg_interval.'</div>';
					}
				}
				$respuesta=$tabla;
			}elseif(count($clases_examenes)>0){//vista de usuario diferente de estudiante
				$clase_examen=$clases_examenes[0];
				$tabla='<table class="table table-condensed">';
				$tabla.='<tr><td><strong>NOMBRE</strong></td><td>'.$clase_examen['NOMBRE_ESTUDIANTE'].'</td><td><strong>NRO. DOCUMENTO</strong></td><td>'.$clase_examen['NRO_DOCUMENTO'].'</td></tr>';
				$tabla.='<tr><td><strong>MATERIA</strong></td><td>'.$clase_examen['MATERIA'].'</td><td><strong>GRUPO</strong></td><td>'.$clase_examen['GRUPO'].'</td></tr>';
				$fecha_examen_inicio=$clase_examen['FECHA_EXAMEN'].' '.$clase_examen['HORA_EXAMEN'].':00';
				$dato_contenido=$this->academico_model->getContenidoMateria($clase_examen['ID_CARRERA_MATERIA'],$clase_examen['ID_PERIODO_ACADEMICO'],$id_plantilla);
				$ff_examen = date_create(date('Y-m-d H:i:s'));
				if($dato_contenido!=NULL){
					if($dato_contenido['DURACION_EXAMEN']<=0){
						$plantilla=$this->academico_model->buscar_plantillas(array('ID_PLANTILLA'=>$dato_contenido['ID_PLANTILLA']));
						$dato_contenido['DURACION_EXAMEN']=$plantilla[0]['DURACION_EXAMEN'];
					}
					if($dato_contenido['DURACION_EXAMEN']>0 and $clase_examen['FECHA_EXAMEN']!=NULL and $clase_examen['FECHA_EXAMEN']!='0000-00-00' and $clase_examen['HORA_EXAMEN']!='' and $clase_examen['HORA_EXAMEN']!=NULL){
						$ff_examen = date_create($fecha_examen_inicio);
						$ff_examen->modify('+ '.$dato_contenido['DURACION_EXAMEN'].' minute');
					}
				}
				$examenes_estudiante_aplazados = $this->academico_model->buscarExamenesEstudiantesAplazados(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$id_estudiante_carrera_materia,'ETAPA'=>$etapa,'ID_PLANTILLA'=>$id_plantilla));
				if(count($examenes_estudiante_aplazados)>0 and $dato_contenido!=NULL){//si tiene fecha aplazado
					$aplazo=$examenes_estudiante_aplazados[0];

					if($aplazo['HORA_APLAZADO']=='' or $aplazo['HORA_APLAZADO']==NULL){
						$aplazo['HORA_APLAZADO']='00:00';
					}

					$fecha_examen_inicio=$aplazo['FECHA_APLAZADO'].' '.$aplazo['HORA_APLAZADO'].':00';
					$ff_examen = date_create($fecha_examen_inicio);
					if($aplazo['DURACION_EXAMEN']!=NULL and $aplazo['DURACION_EXAMEN']>0){
						$ff_examen->modify('+ '.$aplazo['DURACION_EXAMEN'].' minute');
					}else{
						$ff_examen->modify('+ '.$dato_contenido['DURACION_EXAMEN'].' minute');
					}
				}
				$fi_examen = date_create($fecha_examen_inicio);
				$f_actual = date_create(date('Y-m-d H:i:s'));
				if($clase_examen['FECHA_EXAMEN']!=NULL and $clase_examen['HORA_EXAMEN']!=NULL){
					$tabla.='<tr><td><strong>FECHA</strong></td><td>'.$fi_examen->format('Y-m-d').'</td><td><strong>HORARIO</strong></td><td>'.$fi_examen->format('H:i').' a '.$ff_examen->format('H:i').'</td></tr>';
				}
				$tabla.='</table>';
				//verifico si ya tiene examen personalizado el estudiante
				$examenes_estudiante=$this->academico_model->buscarExamenesEstudiantes(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$id_estudiante_carrera_materia,'ETAPA'=>$etapa,'TIPO_EXAMEN'=>'0','ID_PLANTILLA'=>$id_plantilla));
				if(count($examenes_estudiante)>0){
					$examen=$examenes_estudiante[0];
					if($examen['ESTADO']==1){
						$btnImprimir='';
						if($usuario['ID_PERFIL']!=12){
							$btnImprimir='<a class="btn-default btn btn-sm" href="'.site_url().'/academico/academico/getExamenEstudianteImpresion/'.$id_estudiante_carrera_materia.'_'.$id_plantilla.'/'.$etapa.'" target="_blank"><span class="glyphicon glyphicon-print" ></span> Imprimir</a>';
						}
						$tabla.='<div class="alert alert-success"><table width="100%"><tr><td>Examen finalizado. Calificaci&oacute;n: <strong>'.number_format(floatval($examen['CALIFICACION']),2).'</strong></td><td align="right">'.$btnImprimir.'</td></table></div>';
					}else{
						$tabla.='<div class="alert alert-success" id="estado_examen">Examen en proceso</strong></div>';
						//if($f_actual>$ff_examen or count($examenes_estudiante_aplazados)>0){
						if(($f_actual>$ff_examen or $f_actual<$fi_examen) and $usuario['ID_PERFIL']!=12){
							$f_aplazo='';
							$h_aplazo='';
							$d_aplazo='';
							$nump_aplazo=0;
							if($examen['IDS_RESPUESTA']!='' and $examen['IDS_RESPUESTA']!=NULL){
								$nump_aplazo=count(explode('+',$examen['IDS_RESPUESTA']));
							}
							if(count($examenes_estudiante_aplazados)>0){
								$aplazo=$examenes_estudiante_aplazados[0];
								$f_aplazo=$aplazo['FECHA_APLAZADO'];
								$h_aplazo=$aplazo['HORA_APLAZADO'];
								$d_aplazo=$aplazo['DURACION_EXAMEN'];
								//$nump_aplazo=$aplazo['NUM_PREGUNTA_CONTESTADA'];
							}
							$tabla.='<table class="table table-condensed"><tr><td id="celda_fAplazar"><form name="f_examen" id="f_examen"><input name="idecm" type="hidden" id="idecm" value="'.$id_estudiante_carrera_materia.'_'.$id_plantilla.'"><input name="etapa" type="hidden" id="etapa" value="'.$etapa.'"><input name="numPreguntasContestadas" type="hidden" id="numPreguntasContestadas" value="'.$nump_aplazo.'"><div class="well well-sm"><strong>Aplazar examen</strong><table><tr><td>Fecha</td><td>Hora</td><td>Duraci&oacute;n <i>(min)</i></td><td></td></tr><tr><td><input name="fecha_examen" type="text" id="fecha_examen" value="'.$f_aplazo.'" class="form-control solo_valor" style="height:30px" required="required" readonly/></td><td><table width="100%"><tr><td><input type="time" style="height:30px;line-height: normal" id="hora_desde" name="hora_desde" class="form-control" required value="'.$h_aplazo.'"></td></tr></table></td><td width="100px"><input type="number" style="height:30px" name="duracion" id="duracion" class="form-control" required="required" value="'.$d_aplazo.'" /></td><td width="100px" align="right" id="respuesta_aplazo"><input type="button" name="btn_ant" value="Guardar" class="btn btn-primary btn-xs" onclick="aplazar_examen()"></td></tr></table></div></form><script>$(\'#fecha_examen\').datepicker({format: "yyyy-mm-dd",language: \'es\',autoclose: true,forceParse: true,enableOnReadonly: true,startDate:\''.date('Y-m-d').'\'});</script></td><td id="celda_btnCalificar"><input type="button" name="finalizar_manual" id="finalizar_manual" value="Calificar Examen" class="btn btn-success btn-sm" onclick="finalizaExamenManual(\''.$id_estudiante_carrera_materia.'_'.$id_plantilla.'\',\''.$etapa.'\')"></td><tr></table>';
						}
					}
					$fci=explode(' ',$examen['FECHA_INICIO_CONEXION']);
					$fcf=explode(' ',$examen['FECHA_FIN_CONEXION']);
					if(isset($fci[1]) and isset($fcf[1])){
					$tabla.='<table><tr><td><strong>Inicio Conexi&oacute;n:</strong> '.$fci[1].' <strong>Fin Conexi&oacute;n:</strong> '.$fcf[1].'</td><tr></table>';
					}
					$preguntas=explode('+',$examen['IDS_PREGUNTA_CONTENIDO']);
					$opciones=explode('+',$examen['IDS_OPCION_RESPUESTA_CONTENIDO']);
					$respuestas=explode('+',$examen['IDS_RESPUESTA']);
					if($usuario['ID_PERFIL']!=12){
						if($examen['IDS_PREGUNTA_CONTENIDO']!='' and $examen['IDS_PREGUNTA_CONTENIDO']!=NULL){
							foreach($preguntas as $k=>$p){
								$pregunta=$this->academico_model->getPreguntasContenido(array('ID_PREGUNTA_CONTENIDO'=>$p));
								$pe=$pregunta[0];
								$img='';
								if($pe['IMAGEN']!='' and file_exists(FCPATH.'archivos/contenidos/preguntas/'.$pe['IMAGEN'])){
									$img='<div class="thumbnail"><img src="'.base_url('archivos/contenidos/preguntas')."/".$pe['IMAGEN'].'"/></div>';
								}
								$tabla.='<div class="panel panel-default">';
									$tabla.='<div class="panel-heading">';
										// $tabla.='<h3 class="panel-title">'.($k+1).') '.htmlentities($pe['PREGUNTA']).'</h3>'.$img;
										$tabla.='<h3 class="panel-title">'.($k+1).') '.$pe['PREGUNTA'].'</h3>'.$img;
									$tabla.='</div>';
									$tabla.='<div class="panel-body">';
									$tabla.='<table>';
								$opciones_respuesta=explode('-',$opciones[$k]);

								foreach($opciones_respuesta as $or){
									$opcion=$this->academico_model->getOpcionesRespuestaContenido(array('ID_OPCION_RESPUESTA_CONTENIDO'=>$or));
									$op=$opcion[0];
									$seleccionado='';
									$opcion_correcta='';
									if(isset($respuestas[$k])){
										$respuestasSeleccionadas = explode("-", $respuestas[$k]);
										if (in_array($or, $respuestasSeleccionadas)) {
											$seleccionado='checked';
										}
									}
									$idOpcionesRespuestasClasePublico = explode("+", $pe['ID_OPCION_RESPUESTA_CONTENIDO']);
									if(in_array($or, $idOpcionesRespuestasClasePublico)){
										$opcion_correcta=' style="background-color:#8ccc8c"';
									}
									$img='';
									if($op['IMAGEN']!='' and file_exists(FCPATH.'archivos/contenidos/preguntas/'.$op['IMAGEN'])){
										$img='<div class="thumbnail"><img src="'.base_url('archivos/contenidos/preguntas')."/".$op['IMAGEN'].'"/></div>';
									}
									$tabla.='<tr '.$opcion_correcta.'><td valign="top"><input required="" name="opcion_seleccionada['.$p.'][]" type="checkbox" value="'.$p.'-'.$or.'" id="opcion_respuesta'.$or.'" style="transform: scale(1.5)" class="claseopcion" '.$seleccionado.' disabled></td><td style="padding-left:10px">'.$op['OPCION_RESPUESTA'].' '.$img.'</td></tr>';

								}
								$tabla.='</table>
										</div>';
								$tabla.='</div>';
							}
						}
					}elseif($examen['ESTADO']==1){
						///VISTA DE DETALLE DEL EXAMEN PARA EL Coordinador
						//CUANTAS HA APROBADO
						//CUANTAS HA SIDO INCORRECTAS
						//CUANTAS NO HAN CONTESTADO
						$correcto=0;
						foreach($preguntas as $k=>$p){
							$correcto=0;
							$tabla.='<div class="row">';
								$tabla.='<div class="col-md-6 text-right">';
									$tabla.='<label class="text-left" style="font-size:20px; width:110px;">pregunta '.($k+1).'</label> ';
								$tabla.='</div>';
								$pregunta=$this->academico_model->getPreguntasContenido(array('ID_PREGUNTA_CONTENIDO'=>$p));
								$pe=$pregunta[0];
								if(isset($respuestas[$k])){
									$opcionesSeleccionadas = explode("-", $respuestas[$k]);
								}else{
									$opcionesSeleccionadas = array();
								}
								$opcionesCorrectas     = explode("+", trim($pe['ID_OPCION_RESPUESTA_CONTENIDO'],"+"));
								$correctoPregunta = 0;
								if (count($opcionesSeleccionadas) == count($opcionesCorrectas)){
									foreach ($opcionesSeleccionadas as $oSeleccionada){
										foreach ($opcionesCorrectas as $ocorrecta){
											if ($ocorrecta == $oSeleccionada){
												$correctoPregunta++;
											}
										}
									}
								}
								if(isset($respuestas[$k]) and count($opcionesCorrectas) == $correctoPregunta){
									$correcto++;
								}
								$tabla.='<div class="col-md-6"  style="font-size:25px;">';
									if (count($opcionesSeleccionadas)==0 || $opcionesSeleccionadas[0]=="0") {
										//$tabla.= "No contest�";
										$tabla.='<span class="glyphicon glyphicon-question-sign" style="color:blue;"></span>';
									}elseif ($correcto==0) {
										//$tabla.= "Incorrecto";
										$tabla.='<span class="glyphicon glyphicon-remove-sign" style="color:red;"></span>';
									}else{
										//$tabla.= "Correcto";
										$tabla.='<span class="glyphicon glyphicon-ok-sign" style="color:green;"></span>';
									}
								$tabla.='</div>';
							$tabla.='</div><br>';
						}
					}
					$tabla.='<div class="panel-footer"><table width="100%"><tr><td align="left"></td><td align="right"><input type="button" name="sal" value="Salir" class="btn-default btn btn-sm" id="sal" data-dismiss="modal"></td></tr></table></div>';
				}else{
					//$tabla.='<div class="alert alert-warning">No tiene examen realizado <br><br><input type="button" name="btn_ant" value="Ver/Generar Examen de Impresi�n" class="btn btn-primary btn-xs" onclick="get_examen_impresi�n(\''.$id_estudiante_carrera_materia.'\',\''.$estado.'\')"></div>';
					//verifico si ya tiene examen impreso personalizado el estudiante
					$examenes_estudiante=$this->academico_model->buscarExamenesEstudiantes(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$id_estudiante_carrera_materia,'ETAPA'=>$etapa,'TIPO_EXAMEN'=>1,'ID_PLANTILLA'=>$id_plantilla));
					$examenes_estudiante_aplazados=$this->academico_model->buscarExamenesEstudiantesAplazados(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$id_estudiante_carrera_materia,'ETAPA'=>$etapa,'ID_PLANTILLA'=>$id_plantilla));
					if(($f_actual>$ff_examen and count($examenes_estudiante)<=0) or ($f_actual<$fi_examen and count($examenes_estudiante_aplazados)>0)){
						$f_aplazo='';
						$h_aplazo='';
						if(count($examenes_estudiante_aplazados)>0){
							$aplazo=$examenes_estudiante_aplazados[0];
							$f_aplazo=$aplazo['FECHA_APLAZADO'];
							$h_aplazo=$aplazo['HORA_APLAZADO'];
						}

						$idRubro=20;//examen atrasado
						if($etapa==0){
							$idRubro=21;//supletorio atrasado
						}
						$comprobarPagoArancelExamenAtrasado = $this->facturacion_model->buscarArancel(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$id_estudiante_carrera_materia, 'ID_RUBRO'=>$idRubro));

						if($usuario['ID_PERFIL']!=12){
							$bloqueo='';
							$id_arancel='';
							if(count($comprobarPagoArancelExamenAtrasado)>0 and isset($comprobarPagoArancelExamenAtrasado[0]['NOMBRE_ARANCEL'])){
								if($comprobarPagoArancelExamenAtrasado[0]['ESTADO'] == '0'){
									$tabla.='<div class="alert alert-warning"><strong>Rubro generado: '.$comprobarPagoArancelExamenAtrasado[0]['NOMBRE_ARANCEL'].'.<br> Si realiza un aplazamiento el rubro se registrar&aacute; como "condonado"</strong></div>';
									$id_arancel='<input name="id_arancel" type="hidden" id="id_arancel" value="'.$comprobarPagoArancelExamenAtrasado[0]['ID_ARANCEL_ESTUDIANTE'].'">';
								}
								if($comprobarPagoArancelExamenAtrasado[0]['ESTADO'] == 1){
									$tabla.='<div class="alert alert-warning"><strong>Rubro generado '.$comprobarPagoArancelExamenAtrasado[0]['NOMBRE_ARANCEL'].' en proceso de validaci&oacute;n.<br> No puede puede aplazar</strong></div>';
									$bloqueo='disabled';
								}
							}

							$tabla.='<form name="f_examen" id="f_examen">'.$id_arancel.'<input name="idecm" type="hidden" id="idecm" value="'.$id_estudiante_carrera_materia.'_'.$id_plantilla.'"><input name="etapa" type="hidden" id="etapa" value="'.$etapa.'"><div class="well well-sm"><strong>Aplazar examen</strong><table><tr><td>Fecha</td><td>Hora<td><td></td></tr><tr><td><input name="fecha_examen" type="text" id="fecha_examen" value="'.$f_aplazo.'" class="form-control solo_valor" style="height:30px" required="required" readonly/></td><td><table width="100%"><tr><td><input type="time" style="height:30px;line-height: normal" id="hora_desde" name="hora_desde" class="form-control" required value="'.$h_aplazo.'"></td></tr></table><td><td width="100px" align="right" id="respuesta_aplazo"><input type="button" name="btn_ant" '.$bloqueo.' value="Guardar" class="btn btn-primary btn-xs" onclick="aplazar_examen()"></td></tr></table></div></form><script>$(\'#fecha_examen\').datepicker({format: "yyyy-mm-dd",language: \'es\',autoclose: true,forceParse: true,enableOnReadonly: true,startDate:\''.date('Y-m-d').'\'});</script>';
						}
					}
					$tabla.='<div class="panel-footer"><table width="100%"><tr><td align="left"></td><td align="right"><input type="button" name="sal" value="Salir" class="btn-default btn btn-sm" id="sal" data-dismiss="modal"></td></tr></table></div>';
				}
				$respuesta=$tabla;
			}else{
				$respuesta='No tiene examen o Sesion Expirada. <a href="'.site_url().'/admin/login/index">Iniciar Session nuevamente AQUI</a>';
			}
			echo $respuesta;
		}else{
			echo 'Acceso Denegado';
		}
	}

	/////////////////////////////////////////////////////////////////////////////
	public function generarBasePreguntasContenido($datos)
	{
		if($this->session->userdata('loggeado') or isset($datos['EXTERNO'])){
			if(isset($datos['ID_PLANTILLA']) and $datos['ID_PLANTILLA']>0){
				//crear preguntas examen contenido
				$preguntas = $this->academico_model->getPreguntas(array('ID_PLANTILLA'=>$datos['ID_PLANTILLA']));
				foreach($preguntas as $pregunta){
					$datp=array();
					$datp['ID_CONTENIDO']=$datos['ID_CONTENIDO'];
					$datp['PREGUNTA']=$pregunta['PREGUNTA'];
					$datp['TIPO']=$pregunta['TIPO'];
					$datp['IMAGEN']='';
					if($pregunta['IMAGEN']!='' and file_exists(FCPATH.'archivos/plantillas/preguntas/'.$pregunta['IMAGEN'])){
						copy(FCPATH.'archivos/plantillas/preguntas/'.$pregunta['IMAGEN'], FCPATH.'archivos/contenidos/preguntas/'.$pregunta['IMAGEN']);
						$datp['IMAGEN']=$pregunta['IMAGEN'];
					}
					$id_pregunta_contenido=$this->academico_model->crearPreguntaContenido($datp);
					$respuestas=$this->academico_model->getOpcionesRespuesta(array('ID_PREGUNTA'=>$pregunta['ID_PREGUNTA']));
					$idsOpcionesRespuestasContenido = "+";
					$idsOpcionesRespuesta = explode("+", trim($pregunta['ID_OPCION_RESPUESTA'],"+"));
					foreach($respuestas as $respuesta){
						$datr=array();
						$datr['ID_PREGUNTA_CONTENIDO']=$id_pregunta_contenido;
						$datr['OPCION_RESPUESTA']=$respuesta['OPCION_RESPUESTA'];
						$datr['IMAGEN']='';
						if($respuesta['IMAGEN']!='' and file_exists(FCPATH.'archivos/plantillas/preguntas/'.$respuesta['IMAGEN'])){
							copy(FCPATH.'archivos/plantillas/preguntas/'.$respuesta['IMAGEN'], FCPATH.'archivos/contenidos/preguntas/'.$respuesta['IMAGEN']);
							$datr['IMAGEN']=$respuesta['IMAGEN'];
						}
						$id_opcion_respuesta_contenido=$this->academico_model->crearOpcionesRespuestaContenido($datr);
						if(in_array($respuesta['ID_OPCION_RESPUESTA'], $idsOpcionesRespuesta)){
							$idsOpcionesRespuestasContenido .=  $id_opcion_respuesta_contenido . "+";
						}
					}
					$this->academico_model->actualizarPreguntaContenido(array('ID_OPCION_RESPUESTA_CONTENIDO'=>$idsOpcionesRespuestasContenido),$id_pregunta_contenido);
				}
				//actualizar duraci�n examen
				if(count($preguntas)>0){
					$plantilla=$this->academico_model->buscar_plantillas(array('ID_PLANTILLA'=>$datos['ID_PLANTILLA']));
					$dato_contenido['DURACION_EXAMEN']=$plantilla[0]['DURACION_EXAMEN'];
					$this->academico_model->actualizarContenido($dato_contenido,$datos['ID_CONTENIDO']);
				}
			}
		}
	}

	/////////////////////////////////////////////////////////////////////////////
	public function generarExamenEstudiante($datos,$tipo,$etapa,$id_plantilla=0)
	{
		if($this->session->userdata('loggeado')){
			$id_estudiante_carrera_materia=$datos['ID_ESTUDIANTE_CARRERA_MATERIA'];
			unset($datos['ID_ESTUDIANTE_CARRERA_MATERIA']);
			$datos['ALEATORIO']=1;
			$datos['NUM_REGISTROS']=10;
			$datos['TIPO']=$tipo;
			$preguntas_estudiante=$this->academico_model->getPreguntasContenido($datos);
			if(count($preguntas_estudiante)>0){
				$ids_pregunta='';
				$ids_opcion_respuesta='';
				foreach($preguntas_estudiante as $pe){
					$ids_pregunta.=$pe['ID_PREGUNTA_CONTENIDO'].'+';
					$opciones_respuesta_estudiante=$this->academico_model->getOpcionesRespuestaContenido(array('ID_PREGUNTA_CONTENIDO'=>$pe['ID_PREGUNTA_CONTENIDO']));
					if(count($opciones_respuesta_estudiante)>0){
						shuffle($opciones_respuesta_estudiante);//desordenar las opciones de respuesta
						foreach($opciones_respuesta_estudiante as $ore){
							$ids_opcion_respuesta.=$ore['ID_OPCION_RESPUESTA_CONTENIDO'].'-';
						}
					}else{
						$ids_opcion_respuesta.='0-';
					}
					$ids_opcion_respuesta=trim($ids_opcion_respuesta,'-').'+';
				}
				$dat_ee['ID_ESTUDIANTE_CARRERA_MATERIA']=$id_estudiante_carrera_materia;
				$dat_ee['ETAPA']=$etapa;
				$dat_ee['ID_PLANTILLA']=$id_plantilla;
				$dat_ee['IDS_PREGUNTA_CONTENIDO']=trim($ids_pregunta,'+');
				$dat_ee['IDS_OPCION_RESPUESTA_CONTENIDO']=trim($ids_opcion_respuesta,'+');
				$dat_ee['TIPO_EXAMEN']=$tipo;
				$dat_ee['FECHA_CREACION']=date('Y-m-d H:i:s');
				$dat_ee['FECHA_INICIO_CONEXION']=date('Y-m-d H:i:s');
				$this->academico_model->crearExamenEstudiante($dat_ee);
			}
		}
	}

	/////////////////////////////////////////////////////////////////////////////
	public function aplazarExamen()
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,105)){
			$usuario=$this->session->userdata('loggeado');
			//$id_estudiante_carrera_materia = trim($this->input->post('idecm'));
			$ids = trim($this->input->post('idecm'));
			$ids=explode('_',$ids);
			$id_estudiante_carrera_materia = $ids[0];
			$id_plantilla=0;
			if(isset($ids[1])){
				$id_plantilla=$ids[1];
			}
			$etapa = trim($this->input->post('etapa'));
			$fecha = trim($this->input->post('fecha_examen'));
			$hora_desde = trim($this->input->post('hora_desde'));
			$duracion = trim($this->input->post('duracion'));
			$numPreguntasContestadas = trim($this->input->post('numPreguntasContestadas'));
			$id_arancel = trim($this->input->post('id_arancel'));
			//$hora_hasta = trim($this->input->post('hora_hasta'));
			//verifico si ya tiene examen aplazado el estudiante
			$examenes_estudiante_aplazados=$this->academico_model->buscarExamenesEstudiantesAplazados(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$id_estudiante_carrera_materia,'ETAPA'=>$etapa,'ID_PLANTILLA'=>$id_plantilla));
			$dat['FECHA_APLAZADO']=$fecha;
			//$dat['HORA_APLAZADO']=$hora_desde.' a '.$hora_hasta;
			$dat['HORA_APLAZADO']=$hora_desde;
			if($duracion>0){
				$dat['DURACION_EXAMEN']=$duracion;
			}
			$dat['NUM_PREGUNTA_CONTESTADA']=$numPreguntasContestadas;
			if(count($examenes_estudiante_aplazados)>0){
				$idExamenEstudianteAplazado=$examenes_estudiante_aplazados[0]['ID_EXAMEN_ESTUDIANTE_APLAZADO'];
				$dat['ID_USUARIO_ACTUALIZA']=$usuario['ID_USUARIO'];
				$dat['FECHA_ACTUALIZACION']=date('Y-m-d H:i:s');
				$this->academico_model->actualizarExamenEstudianteAplazado($dat,$idExamenEstudianteAplazado);
				$respuesta= 'Registro actualizado';
			}else{
				$dat['ETAPA']=$etapa;
				$dat['ID_PLANTILLA']=$id_plantilla;
				$dat['ID_ESTUDIANTE_CARRERA_MATERIA']=$id_estudiante_carrera_materia;
				$dat['ID_USUARIO']=$usuario['ID_USUARIO'];
				$dat['FECHA_CREACION']=date('Y-m-d H:i:s');
				$this->academico_model->crearExamenEstudianteAplazado($dat);
				$respuesta= 'Registro guardado';
			}


			if(isset($id_arancel) and $id_arancel!=null and $id_arancel!= ''){
				$dataCondonar['ID_USUARIO_ACTUALIZA'] = $usuario['ID_PERFIL'];
				$dataCondonar['FECHA_ACTUALIZACION'] = date('Y-m-d H:i:s');
				$dataCondonar['ESTADO'] = '3';
				$dataCondonar['MOTIVO'] = 'Condonado por '.$usuario['USUARIO'];
				$this->facturacion_model->actualizarArancel($dataCondonar,$id_arancel);
			}

			//datos de respuesta
			$ecm=$this->academico_model->get_estudiante_carrera_materia($id_estudiante_carrera_materia);
			$dato_contenido=$this->academico_model->getContenidoMateria($ecm['ID_CARRERA_MATERIA'],$ecm['ID_PERIODO_ACADEMICO'],$id_plantilla);
			$fecha_aplazo='';
			$examenes_estudiante_aplazados=$this->academico_model->buscarExamenesEstudiantesAplazados(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$id_estudiante_carrera_materia,'ETAPA'=>$etapa,'ID_PLANTILLA'=>$id_plantilla));
			if(count($examenes_estudiante_aplazados)>0){//si tiene fecha aplazado
				$aplazo=$examenes_estudiante_aplazados[0];
				$fecha_aplazo=$aplazo['FECHA_APLAZADO'].'<br>'.$aplazo['HORA_APLAZADO'];
				if(isset($dato_contenido['DURACION_EXAMEN']) and $dato_contenido['DURACION_EXAMEN']>0 and $aplazo['FECHA_APLAZADO']!=NULL and $aplazo['FECHA_APLAZADO']!='0000-00-00' and $aplazo['HORA_APLAZADO']!='' and $aplazo['HORA_APLAZADO']!=NULL){
					$ff_aplazo = date_create($aplazo['FECHA_APLAZADO'].' '.$aplazo['HORA_APLAZADO'].':00');
					if($aplazo['DURACION_EXAMEN']!=NULL and $aplazo['DURACION_EXAMEN']>0){
						$ff_aplazo->modify('+ '.$aplazo['DURACION_EXAMEN'].' minute');
					}else{
						$ff_aplazo->modify('+ '.$dato_contenido['DURACION_EXAMEN'].' minute');
					}
					$fecha_aplazo.=' a '.$ff_aplazo->format('H:i');
				}
			}

			echo json_encode(array('respuesta'=>$respuesta,'fechaAplazo'=>$fecha_aplazo));
		}else{
			echo 'Acceso Denegado';
		}
	}

	/////////////////////////////////////////////////////////////////////////////
	public function supletoriosEstudiantes()
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,106)){
			$id_periodo_academico=$this->academico_model->get_periodo_activado();
			$usuario=$this->session->userdata('loggeado');
			if(!$this->input->is_ajax_request()){
				$datos['carreras'] = $this->academico_model->get_carreras();
				$datos['examenes'] = $this->academico_model->buscar_contenidos(array('ID_PERIODO_ACADEMICO'=>$id_periodo_academico));
				$datos['usuario'] = $usuario;
				$datos1=$this->perfil_model->cabecera($idusuario);
				$datos['num_etapas']=count($this->academico_model->get_etapas_calificar())-1;//quitar etapa general
				$vector_us=null;
				$grupos=array();
				if($usuario['ID_PERFIL']==12){//filtrar grupos para coordinadores
					$gruposc=$this->usuarios_model->grupos_usuario_academico(array('ID_USUARIO_ACADEMICO'=>$idusuario));
					foreach($gruposc as $g){
						$grupos[]=$g['GRUPO'];
					}
				}else{
					$grupos=$this->academico_model->buscarGruposEst($vector_us,$id_periodo_academico);
					$grupos = explode("-", $grupos);
					sort($grupos);
				}
				$datos['grupos'] = $grupos;
			  	$this->load->view('templates/header',$datos1);
			  	$this->load->view('supletoriosEstudiantes',$datos);
			  	$this->load->view('templates/footer');
			}else{
				$clases_examenes=array();
				$dat=array();
				if($usuario['ID_PERFIL']==5){
					$dat['ID_PERSONA']=$usuario['ID_PERSONA'];
					$dat['ESTADO_ESTUDIANTE']='0';
				}else{
					$dat['ID_CONTENIDO']=trim($this->input->post('examen'));
					$dat['NRO_DOCUMENTO']=trim($this->input->post('nro_doc_estudiante'));
					$dat['ID_CARRERA']=trim($this->input->post('id_carrera'));
					$dat['GRUPO']=trim($this->input->post('grupo'));
					$dat['FECHA_INICIO_SUPLETORIO']=trim($this->input->post('fechai'));
					$dat['FECHA_FIN_SUPLETORIO']=trim($this->input->post('fechaf'));
					$estado_examen=trim($this->input->post('estado'));
					if($usuario['ID_PERFIL']==12){//filtrar grupos para coordinadores
						$dat['ID_USUARIO_ACADEMICO']=$usuario['ID_USUARIO'];
					}
					//$dat['ETAPA']=trim($this->input->post('tipo'));
				}
				$estadosExamen=array(-1=>'Pendiente',0=>'En Proceso',1=>'Realizado');
				$fecha_actual=date_create(date('Y-m-d H:i:s'));
				$listado=array();
				$clases_examenes=$this->academico_model->buscarGruposExamenesEstudiantes($dat);
				foreach($clases_examenes as $k=>$ce){
					$clases_examenes[$k]['ETAPA']=0;
					$clases_examenes[$k]['TIPO']='';
					//verifico si ya tiene supletorio personalizado el estudiante
					$clases_examenes[$k]['ESTADO']='Pendiente';
					$clases_examenes[$k]['CALIFICACION']='';
					$examenes_estudiante=$this->academico_model->buscarExamenesEstudiantes(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$ce['ID_ESTUDIANTE_CARRERA_MATERIA'],'ETAPA'=>'0'));
					if(count($examenes_estudiante)>0){
						$ee=$examenes_estudiante[0];
						if($ee['TIPO_EXAMEN']==0 and $ee['ESTADO']==1){
							$clases_examenes[$k]['ESTADO']='Realizado';
							$clases_examenes[$k]['CALIFICACION']=number_format(floatval($ee['CALIFICACION']),2);
						}elseif($ee['TIPO_EXAMEN']==0 and $ee['ESTADO']==0){
							$clases_examenes[$k]['ESTADO']='En Proceso';
						}elseif($ee['TIPO_EXAMEN']==1){
							$clases_examenes[$k]['ESTADO']='Impreso';
						}
					}
					$clases_examenes[$k]['FECHA_HORA_SUPLETORIO']=NULL;
					$dato_contenido=$this->academico_model->getContenidoMateria($ce['ID_CARRERA_MATERIA'],$ce['ID_PERIODO_ACADEMICO']);
					if($dato_contenido!=NULL){
						if($dato_contenido['DURACION_EXAMEN']<=0){
							$plantilla=$this->academico_model->buscar_plantillas(array('ID_PLANTILLA'=>$dato_contenido['ID_PLANTILLA']));
							$dato_contenido['DURACION_EXAMEN']=$plantilla[0]['DURACION_EXAMEN'];
						}
						if($dato_contenido['DURACION_EXAMEN']>0 and $ce['FECHA_SUPLETORIO']!=NULL and $ce['FECHA_SUPLETORIO']!='0000-00-00' and $ce['HORA_SUPLETORIO']!='' and $ce['HORA_SUPLETORIO']!=NULL){
							$fi_examen = date_create($ce['FECHA_SUPLETORIO'].' '.$ce['HORA_SUPLETORIO'].':00');
							$fi_examen->modify('+ '.$dato_contenido['DURACION_EXAMEN'].' minute');
							$clases_examenes[$k]['FECHA_HORA_SUPLETORIO']=$ce['FECHA_SUPLETORIO'].'<br>'.$ce['HORA_SUPLETORIO'].' a '.$fi_examen->format('H:i');
						}
					}
					$clases_examenes[$k]['FECHA_APLAZADO']='';
					$examenes_estudiante_aplazados=$this->academico_model->buscarExamenesEstudiantesAplazados(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$ce['ID_ESTUDIANTE_CARRERA_MATERIA'],'ETAPA'=>'0'));
					if(count($examenes_estudiante_aplazados)>0){//si tiene fecha aplazado
						$aplazo=$examenes_estudiante_aplazados[0];
						$clases_examenes[$k]['FECHA_APLAZADO']=$aplazo['FECHA_APLAZADO'].'<br>'.$aplazo['HORA_APLAZADO'];
						if(isset($dato_contenido['DURACION_EXAMEN']) and $dato_contenido['DURACION_EXAMEN']>0 and $aplazo['FECHA_APLAZADO']!=NULL and $aplazo['FECHA_APLAZADO']!='0000-00-00' and $aplazo['HORA_APLAZADO']!='' and $aplazo['HORA_APLAZADO']!=NULL){
							$ff_aplazo = date_create($aplazo['FECHA_APLAZADO'].' '.$aplazo['HORA_APLAZADO'].':00');
							if($aplazo['DURACION_EXAMEN']!=NULL and $aplazo['DURACION_EXAMEN']>0){
								$ff_aplazo->modify('+ '.$aplazo['DURACION_EXAMEN'].' minute');
							}else{
								$ff_aplazo->modify('+ '.$dato_contenido['DURACION_EXAMEN'].' minute');
							}
							$clases_examenes[$k]['FECHA_APLAZADO'].=' a '.$ff_aplazo->format('H:i');
						}
					}
					$clases_examenes[$k]['BLOQUEO_FECHA']=0;
					if($usuario['ID_PERFIL']==5 and $ce['FECHA_SUPLETORIO']!=NULL and $ce['FECHA_SUPLETORIO']!=''){//vista estudiante
						$fi_examen=date_create($ce['FECHA_SUPLETORIO'].' 00:00:00');
						if($fi_examen>$fecha_actual){
							$clases_examenes[$k]['BLOQUEO_FECHA']=1;
						}
					}
					$clases_examenes[$k]['EXAMEN_HOY']=0;
					if($clases_examenes[$k]['FECHA_SUPLETORIO']==date('Y-m-d') or (count($examenes_estudiante_aplazados)>0 and $aplazo['FECHA_APLAZADO']==date('Y-m-d'))){
						$clases_examenes[$k]['EXAMEN_HOY']=1;
					}
					//verificar que este en supletorio
					$dats['ID_ESTUDIANTE_CARRERA_MATERIA']=$ce['ID_ESTUDIANTE_CARRERA_MATERIA'];
					$dats['ID_TIPO_CALIFICACION']=6;
					$supletorio=$this->academico_model->buscar_calificacion($dats);
					if(count($supletorio)>0){
						if($supletorio[0]['ESTADO_CALIFICACION']==0 or count($examenes_estudiante)>0){
							//$listado[]=$clases_examenes[$k];
							if(isset($estado_examen) and $estado_examen!=''){
								if($clases_examenes[$k]['ESTADO']==$estadosExamen[$estado_examen]){
									$listado[]=$clases_examenes[$k];
								}
							}else{
								$listado[]=$clases_examenes[$k];
							}
						}
					}

				}
				//echo json_encode($clases_examenes);
				echo json_encode($listado);
			}
		}else{
			redirect('index', 'refresh');
		}
	}

	/////////////////////////////////////////////////////////////////////////////
	public function getSupletorioEstudiante()
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,106)){
			$usuario=$this->session->userdata('loggeado');
			$id_estudiante_carrera_materia = trim($this->input->post('id_estudiante_carrera_materia'));
			$etapa = trim($this->input->post('etapa'));
			$dat['ETAPA']=$etapa;
			$dat['ID_ESTUDIANTE_CARRERA_MATERIA']=$id_estudiante_carrera_materia;
			$dat['ESTADO_ESTUDIANTE']='0';
			$clases_examenes=array();
			if($id_estudiante_carrera_materia!=null and $id_estudiante_carrera_materia!='' and $id_estudiante_carrera_materia>0){
				$clases_examenes=$this->academico_model->buscarGruposExamenesEstudiantes($dat);
			}

			$idRubro=21;//supletorio
			$arancelExamenSupletorio = $this->facturacion_model->buscarArancel(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$id_estudiante_carrera_materia, 'ID_RUBRO'=>$idRubro));
			$texto_arancel='';
			if(count($arancelExamenSupletorio)>0 and isset($arancelExamenSupletorio[0]['NOMBRE_ARANCEL']) and ($arancelExamenSupletorio[0]['ESTADO'] == '0' or $arancelExamenSupletorio[0]['ESTADO'] == 1)){
				$texto_arancel='<div class="alert alert-warning"><strong>Debe pagar el rubro: '.$arancelExamenSupletorio[0]['NOMBRE_ARANCEL'].' </strong></div>';
			}

			//$clases_examenes=$this->academico_model->buscarGruposExamenesEstudiantes($dat);
			if($usuario['ID_PERFIL']==5 and count($clases_examenes)>0){
				$clase_examen=$clases_examenes[0];
				$tabla='<table class="table table-condensed">';
					$tabla.='<tr>';
						$tabla.='<td>';
							$tabla.='<strong>NOMBRE</strong>';
						$tabla.='</td>';
						$tabla.='<td>'.$clase_examen['NOMBRE_ESTUDIANTE'].'</td>';
						$tabla.='<td>';
							$tabla.='<strong>NRO. DOCUMENTO</strong>';
						$tabla.='</td>';
						$tabla.='<td>'.$clase_examen['NRO_DOCUMENTO'].'</td>';
					$tabla.='</tr>';
					$tabla.='<tr>';
						$tabla.='<td>';
							$tabla.='<strong>MATERIA</strong>';
						$tabla.='</td>';
						$tabla.='<td>'.$clase_examen['MATERIA'].'</td>';
						$tabla.='<td>';
							$tabla.='<strong>GRUPO</strong>';
						$tabla.='</td>';
						$tabla.='<td>'.$clase_examen['GRUPO'].'</td>';
					$tabla.='</tr>';
				$tabla.='</table>';
				$tabla.='<input name="idecm" type="hidden" id="idecm" value="'.$id_estudiante_carrera_materia.'"><input name="etapa" type="hidden" id="etapa" value="'.$etapa.'">';
				$fecha_examen_inicio = $clase_examen['FECHA_SUPLETORIO'].' '.$clase_examen['HORA_SUPLETORIO'].':00';
				$ff_examen = date_create(date('Y-m-d H:i:s'));//fecha final por defecto
				$dato_contenido=$this->academico_model->getContenidoMateria($clase_examen['ID_CARRERA_MATERIA'],$clase_examen['ID_PERIODO_ACADEMICO']);
				if($dato_contenido!=NULL){
					if($dato_contenido['DURACION_EXAMEN']<=0){
						$plantilla=$this->academico_model->buscar_plantillas(array('ID_PLANTILLA'=>$dato_contenido['ID_PLANTILLA']));
						$dato_contenido['DURACION_EXAMEN']=$plantilla[0]['DURACION_EXAMEN'];
					}
					if($dato_contenido['DURACION_EXAMEN']>0 and $clase_examen['FECHA_SUPLETORIO']!=NULL and $clase_examen['FECHA_SUPLETORIO']!='0000-00-00' and $clase_examen['HORA_SUPLETORIO']!='' and $clase_examen['HORA_SUPLETORIO']!=NULL){
						$ff_examen = date_create($fecha_examen_inicio);
						$ff_examen->modify('+ '.$dato_contenido['DURACION_EXAMEN'].' minute');
					}
				}
				$examenes_estudiante_aplazados = $this->academico_model->buscarExamenesEstudiantesAplazados(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$id_estudiante_carrera_materia,'ETAPA'=>'0'));
				$numPreguntasContestadas=0;
				if(count($examenes_estudiante_aplazados)>0 and $dato_contenido!=NULL){//si tiene fecha aplazado
					$aplazo=$examenes_estudiante_aplazados[0];
					$fecha_examen_inicio=$aplazo['FECHA_APLAZADO'].' '.$aplazo['HORA_APLAZADO'].':00';
					$ff_examen = date_create($fecha_examen_inicio);
					if($aplazo['DURACION_EXAMEN']!=NULL and $aplazo['DURACION_EXAMEN']>0){
						$ff_examen->modify('+ '.$aplazo['DURACION_EXAMEN'].' minute');
					}else{
						$ff_examen->modify('+ '.$dato_contenido['DURACION_EXAMEN'].' minute');
					}
					if($aplazo['NUM_PREGUNTA_CONTESTADA']!=NULL){
						$numPreguntasContestadas=$aplazo['NUM_PREGUNTA_CONTESTADA'];
					}
				}
				$fi_examen = date_create($fecha_examen_inicio);
				//$ff_examen = date_create($fecha_examen_fin);
				$f_actual = date_create(date('Y-m-d H:i:s'));
				$interval = date_diff($f_actual, $ff_examen);
				$days = $interval->format('%a');
				$seconds = 0;
				if($days){
					$seconds += 24 * 60 * 60 * $days;
				}
				$hours = $interval->format('%H');
				if($hours){
					$seconds += 60 * 60 * $hours;
				}
				$minutes = $interval->format('%i');
				if($minutes){
					$seconds += 60 * $minutes;
				}
				$seconds += $interval->format('%s');
				$seg_interval=$seconds;
				//verifico si ya tiene examen web personalizado el estudiante
				$examenes_estudiante=$this->academico_model->buscarExamenesEstudiantes(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$id_estudiante_carrera_materia,'ETAPA'=>$etapa,'TIPO_EXAMEN'=>'0'));
				//verifico si ya tiene examen fisico personalizado el estudiante
				$examenes_estudiante_fisico=$this->academico_model->buscarExamenesEstudiantes(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$id_estudiante_carrera_materia,'ETAPA'=>$etapa,'TIPO_EXAMEN'=>1));
				if(count($examenes_estudiante)>0 and $examenes_estudiante[0]['ESTADO']==1){
					$tabla.='<div class="alert alert-success">Examen Realizado. Calificaci&oacute;n: <strong>'.number_format(floatval($examenes_estudiante[0]['CALIFICACION']),2).'</strong></div>';
					///VISTA DE DETALLE DEL EXAMEN PARA EL ESTUDIANTES
					//CUANTAS HA APROBADO
					//CUANTAS HA SIDO INCORRECTAS
					//CUANTAS NO HAN CONTESTADO
					$examen=$examenes_estudiante[0];
					$preguntas=explode('+',$examen['IDS_PREGUNTA_CONTENIDO']);
					$opciones=explode('+',$examen['IDS_OPCION_RESPUESTA_CONTENIDO']);
					$respuestas=explode('+',$examen['IDS_RESPUESTA']);
					$correcto=0;
					foreach($preguntas as $k=>$p){
						$correcto=0;
						$tabla.='<div class="row">';
							$tabla.='<div class="col-md-6 text-right" style="text-align: right">';
								$tabla.='<label class="text-left" style="font-size:20px;">Pregunta '.($k+1).'</label> ';
							$tabla.='</div>';
							$pregunta=$this->academico_model->getPreguntasContenido(array('ID_PREGUNTA_CONTENIDO'=>$p));
							$pe=$pregunta[0];
							if(isset($respuestas[$k])){
								$opcionesSeleccionadas = explode("-", $respuestas[$k]);
							}else{
								$opcionesSeleccionadas = array();
							}
							$opcionesCorrectas     = explode("+", trim($pe['ID_OPCION_RESPUESTA_CONTENIDO'],"+"));
							$correctoPregunta = 0;
							if (count($opcionesSeleccionadas) == count($opcionesCorrectas)){
								foreach ($opcionesSeleccionadas as $oSeleccionada){
									foreach ($opcionesCorrectas as $ocorrecta){
										if ($ocorrecta == $oSeleccionada){
											$correctoPregunta++;
										}
									}
								}
							}
							if(isset($respuestas[$k]) and count($opcionesCorrectas) == $correctoPregunta){
								$correcto++;
							}
							$tabla.='<div class="col-md-6"  style="font-size:25px;">';
								if (count($opcionesSeleccionadas)==0 || $opcionesSeleccionadas[0]=="0") {
									//$tabla.= "No contest�";
									$tabla.='<span class="glyphicon glyphicon-question-sign" style="color:blue;"></span>';
								}elseif ($correcto==0) {
									//$tabla.= "Incorrecto";
									$tabla.='<span class="glyphicon glyphicon-remove-sign" style="color:red;"></span>';
								}else{
									//$tabla.= "Correcto";
									$tabla.='<span class="glyphicon glyphicon-ok-sign" style="color:green;"></span>';
								}
							$tabla.='</div>';
						$tabla.='</div><br>';
					}
				}elseif(count($examenes_estudiante_fisico)>0){
					$tabla.='<div class="alert alert-info">Examen Impreso</strong></div>';
				}elseif($f_actual<$fi_examen){
					$tabla.=$texto_arancel.'<div class="alert alert-info">Aun no inicia examen <strong>'.$fi_examen->format('Y-m-d H:i').'</strong> Cierre e ingrese a la hora planificada</div>';
				}elseif($f_actual>$ff_examen){
					$tabla.=$texto_arancel.'<div class="alert alert-info">Ya finaliz&oacute; examen <strong>'.$ff_examen->format('Y-m-d H:i').'</strong></div>';
					$idp = trim($this->input->post('idp'));
					if(isset($idp) and $idp==-1 and count($examenes_estudiante)>0 and $examenes_estudiante[0]['ESTADO']==0){//finalizar Examen por tiempo limite
						$examen=$examenes_estudiante[0];
						$preguntas=explode('+',$examen['IDS_PREGUNTA_CONTENIDO']);
						$opciones=explode('+',$examen['IDS_OPCION_RESPUESTA_CONTENIDO']);
						$respuestas=explode('+',$examen['IDS_RESPUESTA']);
						$correcto=0;
						foreach($preguntas as $k=>$p){
							$pregunta=$this->academico_model->getPreguntasContenido(array('ID_PREGUNTA_CONTENIDO'=>$p));
							$pe=$pregunta[0];
							$opcionesSeleccionadas = explode("-", $respuestas[$k]);
							$opcionesCorrectas     = explode("+", trim($pe['ID_OPCION_RESPUESTA_CONTENIDO'],"+"));
							$correctoPregunta = 0;
							if (count($opcionesSeleccionadas) == count($opcionesCorrectas)){
								foreach ($opcionesSeleccionadas as $oSeleccionada){
									foreach ($opcionesCorrectas as $ocorrecta){
										if ($ocorrecta == $oSeleccionada){
											$correctoPregunta++;
										}
									}
								}
							}
							if(isset($respuestas[$k]) and count($opcionesCorrectas) == $correctoPregunta){
								$correcto++;
							}
						}
						$calificacion=round($correcto*10/count($preguntas),2);
						$dat_actualiza=array();
						$dat_actualiza['ESTADO']=1;
						$dat_actualiza['CALIFICACION']=$calificacion;
						$dat_actualiza['FECHA_ACTUALIZACION']=date('Y-m-d H:i:s');
						$dat_actualiza['FECHA_FIN_CONEXION']=date('Y-m-d H:i:s');
						$this->academico_model->actualizarExamenEstudiante($dat_actualiza,$examen['ID_EXAMEN_ESTUDIANTE']);
						$tabla.='<div class="alert alert-success">Examen finalizado. Calificaci&oacute;n: <strong>'.number_format(floatval($calificacion),2).'</strong></div>';
						//transpasar nota supletorio
						$this->registraCalificacionComponente(0,$id_estudiante_carrera_materia,0,$calificacion);
					}
				}else if($texto_arancel!=''){//tiene arancel supletorio y no esta pagado
					$tabla.=$texto_arancel;
				}else{
					if(count($examenes_estudiante)<=0 and $seg_interval>0){
						//verificar si existe base de preguntas para este examen
						if(isset($dato_contenido['ID_CONTENIDO'])){
							$preguntas_clase=$this->academico_model->getPreguntasContenido($dato_contenido);
							if(count($preguntas_clase)<=0){
								//generar base de preguntas examen
								$this->generarBasePreguntasContenido($dato_contenido);
							}
						}
						//generar examen web del estudiante
						$dato_contenido['ID_ESTUDIANTE_CARRERA_MATERIA']=$clase_examen['ID_ESTUDIANTE_CARRERA_MATERIA'];
						$this->generarExamenEstudiante($dato_contenido,'0','0');
						$examenes_estudiante=$this->academico_model->buscarExamenesEstudiantes(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$id_estudiante_carrera_materia,'ETAPA'=>'0','TIPO_EXAMEN'=>'0'));
					}
					if(count($examenes_estudiante)>0 and $seg_interval>0){
						$idp = trim($this->input->post('idp'));
						$opcion_seleccionado = trim($this->input->post('op'));//respuesta
						$examen=$examenes_estudiante[0];
						$preguntas=explode('+',$examen['IDS_PREGUNTA_CONTENIDO']);
						$opciones=explode('+',$examen['IDS_OPCION_RESPUESTA_CONTENIDO']);
						$respuestas=explode('+',$examen['IDS_RESPUESTA']);

						if($idp==NULL and $examen['IDS_RESPUESTA']==''){
							$idp=$preguntas[0];
						}elseif($idp==NULL){
							$idp=$preguntas[count($respuestas)-1];
						}
						if($opcion_seleccionado!=NULL and $opcion_seleccionado!=''){
							$v_opSeleccionadas = explode("+", trim($opcion_seleccionado,"+"));
							$indicePregunta = "0";
							$opcionesRespuestasSeleccionadas = "";
							foreach ($v_opSeleccionadas as $kops => $ops) {
								//guardar respuesta
								$op_select=explode('-',$ops);
								foreach($preguntas as $k=>$p){
									if($p==$op_select[0]){
										$opcionesRespuestasSeleccionadas .= "-".$op_select[1];
										$indicePregunta = $k;
										break;
									}
								}
								$respuestas[$k]= trim($opcionesRespuestasSeleccionadas,"-");
							}
							if (isset($respuestas[$indicePregunta]) && $respuestas[$indicePregunta]=="") {
								$respuestas[$indicePregunta] =0;
							}
							// return 0;
							$res_total=implode('+',$respuestas);
							if($res_total!=$examen['IDS_RESPUESTA']){
								$dat_actualiza=array();
								$dat_actualiza['IDS_RESPUESTA']=$res_total;
								$dat_actualiza['FECHA_ACTUALIZACION']=date('Y-m-d H:i:s');
								$dat_actualiza['FECHA_FIN_CONEXION']=date('Y-m-d H:i:s');
								$this->academico_model->actualizarExamenEstudiante($dat_actualiza,$examen['ID_EXAMEN_ESTUDIANTE']);
							}
							//cambiar de pregunta si no selecciona respuesta
							if($respuestas[$indicePregunta]==0){
								$dat_b['ID_CONTENIDO']=$dato_contenido['ID_CONTENIDO'];
								$dat_b['ALEATORIO']=1;
								$dat_b['NUM_REGISTROS']=1;
								$dat_b['EXCLUIR']=$preguntas;
								$preguntas_estudiante=$this->academico_model->getPreguntasContenido($dat_b);
								if(count($preguntas_estudiante)>0){
									$preguntas[$indicePregunta]=$preguntas_estudiante[0]['ID_PREGUNTA_CONTENIDO'];
									if(!in_array($idp,$preguntas)){
										$idp=$preguntas_estudiante[0]['ID_PREGUNTA_CONTENIDO'];
									}
									$opciones_respuesta_estudiante=$this->academico_model->getOpcionesRespuestaContenido(array('ID_PREGUNTA_CONTENIDO'=>$preguntas[$indicePregunta]));
									if(count($opciones_respuesta_estudiante)>0){
										shuffle($opciones_respuesta_estudiante);//desordenar las opciones de respuesta
										foreach($opciones_respuesta_estudiante as $ore){
											$ids_opcion_respuesta[]=$ore['ID_OPCION_RESPUESTA_CONTENIDO'];
										}
									}else{
										$ids_opcion_respuesta[]='0';
									}
									$opciones[$indicePregunta]=implode('-',$ids_opcion_respuesta);
								}
								$dat_actualiza=array();
								$dat_actualiza['IDS_PREGUNTA_CONTENIDO']=implode('+',$preguntas);
								$dat_actualiza['IDS_OPCION_RESPUESTA_CONTENIDO']=implode('+',$opciones);
								$this->academico_model->actualizarExamenEstudiante($dat_actualiza,$examen['ID_EXAMEN_ESTUDIANTE']);
							}
						}
						if($idp==-1){//finalizar Examen
							$correcto=0;
							foreach($preguntas as $k=>$p){
								$pregunta=$this->academico_model->getPreguntasContenido(array('ID_PREGUNTA_CONTENIDO'=>$p));
								$pe=$pregunta[0];
								$opcionesSeleccionadas = explode("-", $respuestas[$k]);
								$opcionesCorrectas     = explode("+", trim($pe['ID_OPCION_RESPUESTA_CONTENIDO'],"+"));
								$correctoPregunta = 0;
								if (count($opcionesSeleccionadas) == count($opcionesCorrectas)){
									foreach ($opcionesSeleccionadas as $oSeleccionada){
										foreach ($opcionesCorrectas as $ocorrecta){
											if ($ocorrecta == $oSeleccionada){
												$correctoPregunta++;
											}
										}
									}
								}
								if(isset($respuestas[$k]) and count($opcionesCorrectas) == $correctoPregunta){
									$correcto++;
								}
							}
							$calificacion=round($correcto*10/count($preguntas),2);
							$dat_actualiza=array();
							$dat_actualiza['ESTADO']=1;
							$dat_actualiza['CALIFICACION']=$calificacion;
							$dat_actualiza['FECHA_ACTUALIZACION']=date('Y-m-d H:i:s');
							$dat_actualiza['FECHA_FIN_CONEXION']=date('Y-m-d H:i:s');
							$this->academico_model->actualizarExamenEstudiante($dat_actualiza,$examen['ID_EXAMEN_ESTUDIANTE']);
							$tabla.='<div class="alert alert-success">Examen finalizado. Calificaci&oacute;n: <strong>'.number_format(floatval($calificacion),2).'</strong></div>';
							//transpasar nota supletorio
							$this->registraCalificacionComponente(0,$id_estudiante_carrera_materia,0,$calificacion);
						}else{//mostrar pregunta
							$tabla.='<table width="100%"><tr><td style="font-size:12px; color:blue">Pregunta '.(array_search($idp,$preguntas)+1).' de '.count($preguntas).'</td>';
							if($seg_interval>0){
								$tabla.='<td><div align="right" style="font-size:12px; color:blue" id="countdown"></div><script>contador('.$seg_interval.');</script></td>';
							}
							$tabla.='</tr></table>';
							foreach($preguntas as $k=>$p){
								if($idp==$p){
									$pregunta=$this->academico_model->getPreguntasContenido(array('ID_PREGUNTA_CONTENIDO'=>$p));
									$pe=$pregunta[0];
									$img='';
									if($pe['IMAGEN']!='' and file_exists(FCPATH.'archivos/contenidos/preguntas/'.$pe['IMAGEN'])){
										$img='<div class="thumbnail"><img src="'.base_url('archivos/contenidos/preguntas/')."/".$pe['IMAGEN'].'"/></div>';
									}
									$tabla.='<div class="panel panel-default">
											  <div class="panel-heading">
												<h3 class="panel-title">'.($k+1).') '.$pe['PREGUNTA'].'</h3>'.$img.'
											  </div>
											  <div class="panel-body">
												<table>';
									//obtengo las opciones de respuesta
									$opciones_respuesta=explode('-',$opciones[$k]);
									//recorrer las opciones de respuesta
									foreach($opciones_respuesta as $or){
										$opcion=$this->academico_model->getOpcionesRespuestaContenido(array('ID_OPCION_RESPUESTA_CONTENIDO'=>$or));//obtengo el texto de la opci�n de respuesta
										$op=$opcion[0];
										$seleccionado='';
										if(isset($respuestas[$k])){

											$respuestasSeleccionadas = explode("-", $respuestas[$k]);
											if (in_array($or, $respuestasSeleccionadas)) {
												$seleccionado='checked';
											}
										}
										$img='';
										if($op['IMAGEN']!='' and file_exists(FCPATH.'archivos/contenidos/preguntas/'.$op['IMAGEN'])){
											$img='<div class="thumbnail"><img src="'.base_url('archivos/contenidos/preguntas/')."/".$op['IMAGEN'].'"/></div>';
										}
										$tabla.='<tr><td valign="top"><input required="" name="opcion_seleccionada['.$p.'][]" type="checkbox" value="'.$p.'-'.$or.'" id="opcion_respuesta'.$or.'" style="transform: scale(1.5)" class="claseopcion" '.$seleccionado.'></td><td style="padding-left:10px"><label for="opcion_respuesta'.$or.'" style="cursor: pointer">'.$op['OPCION_RESPUESTA'].' '.$img.'</label></td></tr>';
									}
									$tabla.='</table>
											</div>';
									$btnSig='';
									if(isset($preguntas[$k+1])){
										$btnSig='<input type="button" name="btn_sig" id="btn_sig" value="Siguiente" class="btn btn-primary btn-sm" onclick="get_pregunta(\''.$id_estudiante_carrera_materia.'\',\''.$etapa.'\',\''.$preguntas[$k].'\',\''.$preguntas[$k+1].'\',1)">';
									}elseif(($k+1)==count($preguntas)){
										$btnSig='<input type="button" name="btn_sig" id="btn_sig" value="FInalizar" class="btn btn-success btn-sm" onclick="get_pregunta(\''.$id_estudiante_carrera_materia.'\',\''.$etapa.'\',\''.$preguntas[$k].'\',\'-1\',1)">';
									}
									$btnAnt='';
									if(isset($preguntas[$k-1]) and $k>=$numPreguntasContestadas){
										$btnAnt='<input type="button" name="btn_ant" value="Anterior" class="btn btn-default btn-sm" onclick="get_pregunta(\''.$id_estudiante_carrera_materia.'\',\''.$etapa.'\',\''.$preguntas[$k].'\',\''.$preguntas[$k-1].'\',1)">';
									}
									$tabla.='<div id="error-pregunta" style="color:red; text-align:right"></div>';
									$tabla.='<div class="panel-footer"><table width="100%"><tr><td align="left">'.$btnAnt.'</td><td align="right">'.$btnSig.'</td></tr></table></div>';
									$tabla.='<script>window.onblur = function() { cambiaPregunta(\''.$id_estudiante_carrera_materia.'\',\''.$etapa.'\',\''.$preguntas[$k].'\',\''.$preguntas[$k].'\',1);console.log(\'salio de la ventana\'); }</script>';
									$tabla.='</div>';
									break;
								}
							}
						}
					}else{
						$tabla.='<div class="alert alert-danger">No existe examen configurado</div>';
					}
				}
				$respuesta=$tabla;
			}elseif(count($clases_examenes)>0){//vista de usuario diferente de estudiante
				$clase_examen=$clases_examenes[0];
				$tabla='<table class="table table-condensed">';
				$tabla.='<tr><td><strong>NOMBRE</strong></td><td>'.$clase_examen['NOMBRE_ESTUDIANTE'].'</td><td><strong>NRO. DOCUMENTO</strong></td><td>'.$clase_examen['NRO_DOCUMENTO'].'</td></tr>';
				$tabla.='<tr><td><strong>MATERIA</strong></td><td>'.$clase_examen['MATERIA'].'</td><td><strong>GRUPO</strong></td><td>'.$clase_examen['GRUPO'].'</td></tr>';
				$fecha_examen_inicio=$clase_examen['FECHA_SUPLETORIO'].' '.$clase_examen['HORA_SUPLETORIO'].':00';
				$dato_contenido=$this->academico_model->getContenidoMateria($clase_examen['ID_CARRERA_MATERIA'],$clase_examen['ID_PERIODO_ACADEMICO']);
				$ff_examen = date_create(date('Y-m-d H:i:s'));
				$fi_original_examen = date_create($fecha_examen_inicio);
				if($dato_contenido!=NULL){
					if($dato_contenido['DURACION_EXAMEN']<=0){
						$plantilla=$this->academico_model->buscar_plantillas(array('ID_PLANTILLA'=>$dato_contenido['ID_PLANTILLA']));
						$dato_contenido['DURACION_EXAMEN']=$plantilla[0]['DURACION_EXAMEN'];
					}
					if($dato_contenido['DURACION_EXAMEN']>0 and $clase_examen['FECHA_SUPLETORIO']!=NULL and $clase_examen['FECHA_SUPLETORIO']!='0000-00-00' and $clase_examen['HORA_SUPLETORIO']!='' and $clase_examen['HORA_SUPLETORIO']!=NULL){
						$ff_examen = date_create($fecha_examen_inicio);
						$ff_examen->modify('+ '.$dato_contenido['DURACION_EXAMEN'].' minute');
					}
				}
				$examenes_estudiante_aplazados = $this->academico_model->buscarExamenesEstudiantesAplazados(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$id_estudiante_carrera_materia,'ETAPA'=>'0'));
				if(count($examenes_estudiante_aplazados)>0 and $dato_contenido!=NULL){//si tiene fecha aplazado
					$aplazo=$examenes_estudiante_aplazados[0];
					$fecha_examen_inicio=$aplazo['FECHA_APLAZADO'].' '.$aplazo['HORA_APLAZADO'].':00';
					$ff_examen = date_create($fecha_examen_inicio);
					if($aplazo['DURACION_EXAMEN']!=NULL and $aplazo['DURACION_EXAMEN']>0){
						$ff_examen->modify('+ '.$aplazo['DURACION_EXAMEN'].' minute');
					}else{
						$ff_examen->modify('+ '.$dato_contenido['DURACION_EXAMEN'].' minute');
					}
				}
				$fi_examen = date_create($fecha_examen_inicio);
				$f_actual = date_create(date('Y-m-d H:i:s'));
				if($clase_examen['FECHA_SUPLETORIO']!=NULL and $clase_examen['HORA_SUPLETORIO']!=NULL){
					$tabla.='<tr><td><strong>FECHA</strong></td><td>'.$fi_examen->format('Y-m-d').'</td><td><strong>HORARIO</strong></td><td>'.$fi_examen->format('H:i').' a '.$ff_examen->format('H:i').'</td></tr>';
				}
				/*if($clase_examen['ETAPA']==0){
					$tipo_examen='SUPLETORIO';
				}else{
					$tipo_examen='BIMESTRAL ETAPA '.$clase_examen['ETAPA'];
				}
				$tabla.='<tr><td><strong>TIPO</strong></td><td>'.$tipo_examen.'</td><td></td><td></td></tr>';*/
				$tabla.='</table>';
				$tabla.='<input name="idecm" type="hidden" id="idecm" value="'.$id_estudiante_carrera_materia.'"><input name="etapa" type="hidden" id="etapa" value="'.$etapa.'">';
				//verifico si ya tiene examen personalizado el estudiante
				$examenes_estudiante=$this->academico_model->buscarExamenesEstudiantes(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$id_estudiante_carrera_materia,'ETAPA'=>'0','TIPO_EXAMEN'=>'0'));
				$fecha_realizado=0;
				$option_select='';
				if(count($examenes_estudiante)>0){
					$examen=$examenes_estudiante[0];
					if($examen['ESTADO']==1){
						$tabla.='<div class="alert alert-success">Examen finalizado. Calificaci&oacute;n: <strong>'.number_format(floatval($examen['CALIFICACION']),2).'</strong></div>';
						if($idusuario==1){
							$tabla.='<div class="row"><div class="col-md-12 col-sm-12 col-xs-12" align="right"><input type="button" name="btn_borrar" id="btn_borrar" value="Borrar" class="btn btn-danger btn-xs" onclick="$(\'#confirmarBorrar\').modal(\'show\');"></div></div>';
						}
					}else{
						$tabla.='<div class="alert alert-success" id="estado_examen">Examen en proceso</strong></div>';
						if(($f_actual>$ff_examen or $f_actual<$fi_examen) and $usuario['ID_PERFIL']!=12){
							$f_aplazo='';
							$h_aplazo='';
							$d_aplazo='';
							$nump_aplazo=0;
							if($examen['IDS_RESPUESTA']!='' and $examen['IDS_RESPUESTA']!=NULL){
								$nump_aplazo=count(explode('+',$examen['IDS_RESPUESTA']));
							}
							if(count($examenes_estudiante_aplazados)>0){
								$aplazo=$examenes_estudiante_aplazados[0];
								$f_aplazo=$aplazo['FECHA_APLAZADO'];
								$h_aplazo=$aplazo['HORA_APLAZADO'];
								$d_aplazo=$aplazo['DURACION_EXAMEN'];
								$nump_aplazo=$aplazo['NUM_PREGUNTA_CONTESTADA'];
							}
							$tabla.='<table class="table table-condensed"><tr><td id="celda_fAplazar"><form name="f_examen" id="f_examen"><input name="idecm" type="hidden" id="idecm" value="'.$id_estudiante_carrera_materia.'"><input name="etapa" type="hidden" id="etapa" value="'.$etapa.'"><input name="numPreguntasContestadas" type="hidden" id="numPreguntasContestadas" value="'.$nump_aplazo.'"><div class="well well-sm"><strong>Aplazar examen</strong><table><tr><td>Fecha</td><td>Hora</td><td>Duraci&oacute;n <i>(min)</i></td><td></td></tr><tr><td><input name="fecha_examen" type="text" id="fecha_examen" value="'.$f_aplazo.'" class="form-control solo_valor" style="height:30px" required="required" readonly/></td><td><table width="100%"><tr><td><input type="time" style="height:30px;line-height: normal" id="hora_desde" name="hora_desde" class="form-control" required value="'.$h_aplazo.'"></td></tr></table></td><td width="100px"><input type="number" name="duracion" id="duracion" class="form-control" required="required" value="'.$d_aplazo.'" /></td><td width="100px" align="right" id="respuesta_aplazo"><input type="button" name="btn_ant" value="Guardar" class="btn btn-primary btn-xs" onclick="aplazar_examen()"></td></tr></table></div></form><script>$(\'#fecha_examen\').datepicker({format: "yyyy-mm-dd",language: \'es\',autoclose: true,forceParse: true,enableOnReadonly: true,startDate:\''.date('Y-m-d').'\'});</script></td><td id="celda_btnCalificar"><input type="button" name="finalizar_manual" id="finalizar_manual" value="Calificar Examen" class="btn btn-success btn-sm" onclick="finalizaExamenManual(\''.$id_estudiante_carrera_materia.'\',\''.$etapa.'\')"></td><tr></table>';
						}
					}
					$fci=explode(' ',$examen['FECHA_INICIO_CONEXION']);
					$fcf=explode(' ',$examen['FECHA_FIN_CONEXION']);
					$tabla.='<table><tr><td><strong>Inicio Conexi&oacute;n:</strong> '.$fci[1].' <strong>Fin Conexi&oacute;n:</strong> '.$fcf[1].'</td><tr></table>';

					$preguntas=explode('+',$examen['IDS_PREGUNTA_CONTENIDO']);
					$opciones=explode('+',$examen['IDS_OPCION_RESPUESTA_CONTENIDO']);
					$respuestas=explode('+',$examen['IDS_RESPUESTA']);
					if($usuario['ID_PERFIL']!=12){
						foreach($preguntas as $k=>$p){
							if($p>0){
								$pregunta=$this->academico_model->getPreguntasContenido(array('ID_PREGUNTA_CONTENIDO'=>$p));
								$pe=$pregunta[0];
								$img='';
								if($pe['IMAGEN']!='' and file_exists(FCPATH.'archivos/contenidos/preguntas/'.$pe['IMAGEN'])){
									$img='<div class="thumbnail"><img src="'.base_url('archivos/contenidos/preguntas')."/".$pe['IMAGEN'].'"/></div>';
								}
								$tabla.='<div class="panel panel-default">';
									$tabla.='<div class="panel-heading">';
										// $tabla.='<h3 class="panel-title">'.($k+1).') '.htmlentities($pe['PREGUNTA']).'</h3>'.$img;
										$tabla.='<h3 class="panel-title">'.($k+1).') '.$pe['PREGUNTA'].'</h3>'.$img;
									$tabla.='</div>';
									$tabla.='<div class="panel-body">';
									$tabla.='<table>';
								$opciones_respuesta=explode('-',$opciones[$k]);

								foreach($opciones_respuesta as $or){
									$opcion=$this->academico_model->getOpcionesRespuestaContenido(array('ID_OPCION_RESPUESTA_CONTENIDO'=>$or));
									$op=$opcion[0];
									$seleccionado='';
									$opcion_correcta='';
									if(isset($respuestas[$k])){
										$respuestasSeleccionadas = explode("-", $respuestas[$k]);
										if (in_array($or, $respuestasSeleccionadas)) {
											$seleccionado='checked';
										}
									}
									$idOpcionesRespuestasClasePublico = explode("+", $pe['ID_OPCION_RESPUESTA_CONTENIDO']);
									if(in_array($or, $idOpcionesRespuestasClasePublico)){
										$opcion_correcta=' style="background-color:#8ccc8c"';
									}
									$img='';
									if($op['IMAGEN']!='' and file_exists(FCPATH.'archivos/contenidos/preguntas/'.$op['IMAGEN'])){
										$img='<div class="thumbnail"><img src="'.base_url('archivos/contenidos/preguntas')."/".$op['IMAGEN'].'"/></div>';
									}
									$tabla.='<tr '.$opcion_correcta.'><td valign="top"><input required="" name="opcion_seleccionada['.$p.'][]" type="checkbox" value="'.$p.'-'.$or.'" id="opcion_respuesta'.$or.'" style="transform: scale(1.5)" class="claseopcion" '.$seleccionado.' disabled></td><td style="padding-left:10px">'.$op['OPCION_RESPUESTA'].' '.$img.'</td></tr>';

								}
								$tabla.='</table>
										</div>';
								$tabla.='</div>';
							}
						}
					}elseif($examen['ESTADO']==1){
						///VISTA DE DETALLE DEL EXAMEN PARA EL Coordinador
						//CUANTAS HA APROBADO
						//CUANTAS HA SIDO INCORRECTAS
						//CUANTAS NO HAN CONTESTADO
						$correcto=0;
						foreach($preguntas as $k=>$p){
							$correcto=0;
							$tabla.='<div class="row">';
								$tabla.='<div class="col-md-6 text-right">';
									$tabla.='<label class="text-left" style="font-size:20px; width:110px;">pregunta '.($k+1).'</label> ';
								$tabla.='</div>';
								$pregunta=$this->academico_model->getPreguntasContenido(array('ID_PREGUNTA_CONTENIDO'=>$p));
								$pe=$pregunta[0];
								if(isset($respuestas[$k])){
									$opcionesSeleccionadas = explode("-", $respuestas[$k]);
								}else{
									$opcionesSeleccionadas = array();
								}
								$opcionesCorrectas     = explode("+", trim($pe['ID_OPCION_RESPUESTA_CONTENIDO'],"+"));
								$correctoPregunta = 0;
								if (count($opcionesSeleccionadas) == count($opcionesCorrectas)){
									foreach ($opcionesSeleccionadas as $oSeleccionada){
										foreach ($opcionesCorrectas as $ocorrecta){
											if ($ocorrecta == $oSeleccionada){
												$correctoPregunta++;
											}
										}
									}
								}
								if(isset($respuestas[$k]) and count($opcionesCorrectas) == $correctoPregunta){
									$correcto++;
								}
								$tabla.='<div class="col-md-6"  style="font-size:25px;">';
									if (count($opcionesSeleccionadas)==0 || $opcionesSeleccionadas[0]=="0") {
										//$tabla.= "No contest�";
										$tabla.='<span class="glyphicon glyphicon-question-sign" style="color:blue;"></span>';
									}elseif ($correcto==0) {
										//$tabla.= "Incorrecto";
										$tabla.='<span class="glyphicon glyphicon-remove-sign" style="color:red;"></span>';
									}else{
										//$tabla.= "Correcto";
										$tabla.='<span class="glyphicon glyphicon-ok-sign" style="color:green;"></span>';
									}
								$tabla.='</div>';
							$tabla.='</div><br>';
						}
					}
					$tabla.='<div class="panel-footer"><table width="100%"><tr><td align="left"></td><td align="right"><input type="button" name="sal" value="Salir" class="btn-default btn btn-sm" id="sal" data-dismiss="modal"></td></tr></table></div>';
				}else{
					$tabla.=$texto_arancel;
					//$tabla.='<div class="alert alert-warning">No tiene examen realizado <br><br><input type="button" name="btn_ant" value="Ver/Generar Examen de Impresi�n" class="btn btn-primary btn-xs" onclick="get_examen_impresi�n(\''.$id_estudiante_carrera_materia.'\',\''.$estado.'\')"></div>';
					//verifico si ya tiene examen impreso personalizado el estudiante
					$examenes_estudiante=$this->academico_model->buscarExamenesEstudiantes(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$id_estudiante_carrera_materia,'ETAPA'=>'0','TIPO_EXAMEN'=>1));
					//if($f_actual>$ff_examen and count($examenes_estudiante)<=0){
					if($f_actual>$fi_original_examen and $fi_original_examen!=false and count($examenes_estudiante)<=0){
						$examenes_estudiante_aplazados=$this->academico_model->buscarExamenesEstudiantesAplazados(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$id_estudiante_carrera_materia,'ETAPA'=>'0'));
						$f_aplazo='';
						$h_aplazo='';
						if(count($examenes_estudiante_aplazados)>0){
							$aplazo=$examenes_estudiante_aplazados[0];
							$f_aplazo=$aplazo['FECHA_APLAZADO'];
							$h_aplazo=$aplazo['HORA_APLAZADO'];
						}
						if($usuario['ID_PERFIL']!=12){
							$tabla.='<form name="f_examen" id="f_examen"><input name="idecm" type="hidden" id="idecm" value="'.$id_estudiante_carrera_materia.'"><input name="etapa" type="hidden" id="etapa" value="'.$etapa.'"><div class="well well-sm"><strong>Aplazar examen</strong><table><tr><td>Fecha</td><td>Hora<td><td></td></tr><tr><td><input name="fecha_examen" type="text" id="fecha_examen" value="'.$f_aplazo.'" class="form-control solo_valor" style="height:30px" required="required" readonly/></td><td><table width="100%"><tr><td><input type="time" style="height:30px;line-height: normal" id="hora_desde" name="hora_desde" class="form-control" required value="'.$h_aplazo.'"></td></tr></table><td><td width="100px" align="right" id="respuesta_aplazo"><input type="button" name="btn_ant" value="Guardar" class="btn btn-primary btn-xs" onclick="aplazar_examen()"></td></tr></table></div></form><script>$(\'#fecha_examen\').datepicker({format: "yyyy-mm-dd",language: \'es\',autoclose: true,forceParse: true,enableOnReadonly: true,startDate:\''.date('Y-m-d').'\'});</script>';
						}
					}
					$tabla.='<div class="panel-footer"><table width="100%"><tr><td align="left"></td><td align="right"><input type="button" name="sal" value="Salir" class="btn-default btn btn-sm" id="sal" data-dismiss="modal"></td></tr></table></div>';
				}
				$respuesta=$tabla;
			}else{
				//$respuesta='No tiene examen';
				$respuesta='No tiene examen o Sesion Expirada. <a href="'.site_url().'/admin/login/index">Iniciar Session nuevamente AQUI</a>';
			}
			echo $respuesta;
		}else{
			echo 'Acceso Denegado';
		}
	}

	/////////////////////////////////////////////////////////////////////////////
	public function examenesPersonas()
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,107)){
			$id_periodo_academico=$this->academico_model->get_periodo_activado();
			$usuario=$this->session->userdata('loggeado');
			if(!$this->input->is_ajax_request()){
				$datos['examenes'] = $this->academico_model->buscar_contenidos(array('ID_PERIODO_ACADEMICO'=>$id_periodo_academico));
				$datos['usuario'] = $usuario;
				$datos1=$this->perfil_model->cabecera($idusuario);
			  	$this->load->view('templates/header',$datos1);
			  	$this->load->view('examenesPersonas',$datos);
			  	$this->load->view('templates/footer');
			}else{
				$clases_examenes=array();
				$dat=array();
				if($usuario['ID_PERFIL']==5){
					$dat['ID_PERSONA']=$usuario['ID_PERSONA'];
					$dat['ESTADO_ESTUDIANTE']='0';
				}else{
					$dat['ID_CONTENIDO']=trim($this->input->post('examen'));
					$dat['NRO_DOCUMENTO']=trim($this->input->post('nro_doc_persona'));
				}
				$fecha_actual=date_create(date('Y-m-d H:i:s'));
				$listado=array();
				$clases_examenes=$this->academico_model->buscarExamenesPersonasTotal($dat);
				foreach($clases_examenes as $k=>$ce){
					$clases_examenes[$k]['ESTADO']='Pendiente';
					$clases_examenes[$k]['CALIFICACION']='';
					if($ce['TIPO_EXAMEN']==0 and $ce['ESTADO']==1){
						$clases_examenes[$k]['ESTADO']='Realizado';
						$clases_examenes[$k]['CALIFICACION']=number_format(floatval($ce['CALIFICACION']),2);
					}elseif($ce['TIPO_EXAMEN']==0 and $ce['ESTADO']==0 and $ce['IDS_PREGUNTA_CONTENIDO']!=NULL){
						$clases_examenes[$k]['ESTADO']='En Proceso';
					}elseif($ce['TIPO_EXAMEN']==1){
						$clases_examenes[$k]['ESTADO']='Impreso';
					}
					$clases_examenes[$k]['FECHA_HORA_EXAMEN']=NULL;
					if($ce['DURACION_EXAMEN']<=0){
						$plantilla=$this->academico_model->buscar_plantillas(array('ID_PLANTILLA'=>$ce['ID_PLANTILLA']));
						$ce['DURACION_EXAMEN']=$plantilla[0]['DURACION_EXAMEN'];
					}
					if($ce['DURACION_EXAMEN']>0 and $ce['FECHA']!=NULL and $ce['FECHA']!='0000-00-00' and $ce['HORA']!='' and $ce['HORA']!=NULL){
						$fi_examen = date_create($ce['FECHA'].' '.$ce['HORA'].':00');
						$fi_examen->modify('+ '.$ce['DURACION_EXAMEN'].' minute');
						$clases_examenes[$k]['FECHA_HORA_EXAMEN']=$ce['FECHA'].'<br>'.$ce['HORA'].' a '.$fi_examen->format('H:i');
					}
					$clases_examenes[$k]['EXAMEN_HOY']=0;
					if($clases_examenes[$k]['FECHA']==date('Y-m-d')){
						$clases_examenes[$k]['EXAMEN_HOY']=1;
					}
					$listado[]=$clases_examenes[$k];
				}
				//echo json_encode($clases_examenes);
				echo json_encode($listado);
			}
		}else{
			redirect('index', 'refresh');
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////
	public function personaNroDocumento($nroDocumento)
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado')){
			$persona = $this->academico_model->get_datos_persona(0,$nroDocumento);
			echo json_encode($persona);
		}else{
			echo 'Sesi�n Terminada';
		}
	}

	/////////////////////////////////////////////////////////////////////////////
	public function guardarExamenPersona()
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,107)){
			$usuario=$this->session->userdata('loggeado');
			$datos = $this->input->post('formulario_examen');
			//verifico si ya tiene examen pesona
			$examenes_personas=$this->academico_model->buscarExamenesPersonas(array('ID_CONTENIDO'=>$datos['ID_CONTENIDO'],'ID_PERSONA'=>$datos['ID_PERSONA']));
			$res=0;
			$asunto='';
			$idExamenPersona=0;
			if(count($examenes_personas)>0){
				//verifico si ya tiene examen web personalizado la persona
				$ep=$examenes_personas[0];
				$contenido=$this->academico_model->buscar_contenidos(array('ID_CONTENIDO'=>$ep['ID_CONTENIDO']));
				if($contenido[0]['DURACION_EXAMEN']<=0){
					$plantilla=$this->academico_model->buscar_plantillas(array('ID_PLANTILLA'=>$contenido[0]['ID_PLANTILLA']));
					$contenido[0]['DURACION_EXAMEN']=$plantilla[0]['DURACION_EXAMEN'];
				}
				$fecha_fin_examen = date_create($ep['FECHA'].' '.$ep['HORA'].':00');
				$fecha_fin_examen->modify('+ '.$contenido[0]['DURACION_EXAMEN'].' minute');
				$fecha_inicio_examen = date_create($ep['FECHA'].' '.$ep['HORA'].':00');
				$fecha_actual = date_create(date('Y-m-d H:i:s'));
				if($ep['ESTADO']==1){
					$respuesta= '<span style="color:red">Error: no puede actualizar examen finalizado</span>';
				}elseif($ep['IDS_PREGUNTA_CONTENIDO']!=NULL and $fecha_actual>$fecha_inicio_examen and $fecha_actual<$fecha_fin_examen){
					$respuesta= '<span style="color:red">Error: no puede actualizar examen en proceso</span>';
				}else{
					$datos['FECHA_ACTUALIZACION']=date('Y-m-d H:i:s');
					$this->academico_model->actualizarExamenPersona($datos,$ep['ID_EXAMEN_PERSONA']);
					$idExamenPersona=$ep['ID_EXAMEN_PERSONA'];
					$respuesta= 'Registro actualizado<br>LINK DE ACCESO:<textarea rows="3" class="form-control" style="text-transform:none;" readonly>https://deming.edu.ec/biacademos/index.php/academico/academico/getExamenPersonaExterno/'.$idExamenPersona.'_'.md5($idExamenPersona).'</textarea>';
					$res=1;
					$asunto='Examen Modificado';
				}
			}else{
				$datos['TIPO_EXAMEN']=0;
				$datos['FECHA_CREACION']=date('Y-m-d H:i:s');
				$idExamenPersona=$this->academico_model->crearExamenPersona($datos);
				$respuesta= 'Registro guardado<br>LINK DE ACCESO:<textarea rows="3" class="form-control" style="text-transform:none;" readonly>https://deming.edu.ec/biacademos/index.php/academico/academico/getExamenPersonaExterno/'.$idExamenPersona.'_'.md5($idExamenPersona).'</textarea>';
				$res=1;
				$asunto='Examen Creado';
			}
			$persona = $this->academico_model->get_datos_persona($datos['ID_PERSONA']);
			if($idExamenPersona>0 and isset($persona['CORREO_ELECTRONICO']) and $persona['CORREO_ELECTRONICO']!='' and $persona['CORREO_ELECTRONICO']!=NULL){
				$info_examen=$this->academico_model->buscarExamenesPersonasTotal(array('ID_EXAMEN_PERSONA'=>$idExamenPersona));
				if($info_examen[0]['DURACION_EXAMEN']<=0){
					$plantilla=$this->academico_model->buscar_plantillas(array('ID_PLANTILLA'=>$info_examen[0]['ID_PLANTILLA']));
					$info_examen[0]['DURACION_EXAMEN']=$plantilla[0]['DURACION_EXAMEN'];
				}
				if($info_examen[0]['DURACION_EXAMEN']>0 and $info_examen[0]['FECHA']!=NULL and $info_examen[0]['FECHA']!='0000-00-00' and $info_examen[0]['HORA']!='' and $info_examen[0]['HORA']!=NULL){
					$fecha_examen = date_create($info_examen[0]['FECHA'].' '.$info_examen[0]['HORA'].':00');
					$fecha_examen->modify('+ '.$info_examen[0]['DURACION_EXAMEN'].' minute');
					$hora_examen=$info_examen[0]['HORA'].' a '.$fecha_examen->format('H:i');
					// Envio mensaje link de examen
					$head = "From: info@binary.ec \r\n";
					$msg = "------------------------------------------ \n";
					$msg.= "        EXAMEN PLANIFICADO           \n";
					$msg.= "------------------------------------------ \n";
					$msg.= "NRO_DOCUMENTO:   ".$persona['CEDULA']."\n";
					$msg.= "NOMBRE COMPLETO:   ".$info_examen[0]['NOMBRE_COMPLETO']."\n";
					$msg.= "EXAMEN:   ".$info_examen[0]['EXAMEN']."\n";
					$msg.= "FECHA:   ".$info_examen[0]['FECHA']."\n";
					$msg.= "HORA:   ".$hora_examen."\n";
					$msg.= "LINK DE ACCESO:   https://deming.edu.ec/biacademos/index.php/academico/academico/getExamenPersonaExterno/".$idExamenPersona."_".md5($idExamenPersona)."\n";
					$msg.= "\n";
					$msg.= "\n";
					$msg.= " Mensaje creado por Sistema Acad�mico - Instituto Deming \n";
					@mail($persona['CORREO_ELECTRONICO'],$asunto,$msg, $head);
				}
			}
			echo json_encode(array('mensaje'=>$respuesta,'respuesta'=>$res));
		}else{
			echo 'Acceso Denegado';
		}
	}

	/////////////////////////////////////////////////////////////////////////////
	public function getExamenPersona()
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,107)){
			$usuario=$this->session->userdata('loggeado');
			$idExamenPersona = trim($this->input->post('idep'));
			$info_examen=$this->academico_model->buscarExamenesPersonasTotal(array('ID_EXAMEN_PERSONA'=>$idExamenPersona));
			if($usuario['ID_PERFIL']==5 and count($info_examen)>0){

			}elseif(count($info_examen)>0){//vista de usuario diferente de persona
				$clase_examen=$info_examen[0];
				$tabla='<table class="table table-condensed">';
				$tabla.='<tr><td><strong>NOMBRE</strong></td><td>'.$clase_examen['NOMBRE_COMPLETO'].'</td><td><strong>NRO. DOCUMENTO</strong></td><td>'.$clase_examen['NRO_DOCUMENTO'].'</td></tr>';
				$tabla.='<tr><td><strong>EXAMEN</strong></td><td colspan="3">'.$clase_examen['EXAMEN'].'</td></tr>';
				$fecha_examen_inicio=$clase_examen['FECHA'].' '.$clase_examen['HORA'].':00';
				$ff_examen = date_create(date('Y-m-d H:i:s'));
				if($clase_examen['DURACION_EXAMEN']<=0){
					$plantilla=$this->academico_model->buscar_plantillas(array('ID_PLANTILLA'=>$clase_examen['ID_PLANTILLA']));
					$clase_examen['DURACION_EXAMEN']=$plantilla[0]['DURACION_EXAMEN'];
				}
				if($clase_examen['DURACION_EXAMEN']>0 and $clase_examen['FECHA']!=NULL and $clase_examen['FECHA']!='0000-00-00' and $clase_examen['HORA']!='' and $clase_examen['HORA']!=NULL){
					$ff_examen = date_create($fecha_examen_inicio);
					$ff_examen->modify('+ '.$clase_examen['DURACION_EXAMEN'].' minute');
				}
				/*$examenes_estudiante_aplazados = $this->academico_model->buscarExamenesEstudiantesAplazados(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$id_estudiante_carrera_materia,'ETAPA'=>$etapa));
				if(count($examenes_estudiante_aplazados)>0 and $dato_contenido!=NULL){//si tiene fecha aplazado
					$aplazo=$examenes_estudiante_aplazados[0];
					$fecha_examen_inicio=$aplazo['FECHA_APLAZADO'].' '.$aplazo['HORA_APLAZADO'].':00';
					$ff_examen = date_create($fecha_examen_inicio);
					$ff_examen->modify('+ '.$dato_contenido['DURACION_EXAMEN'].' minute');
				}*/
				$fi_examen = date_create($fecha_examen_inicio);
				$f_actual = date_create(date('Y-m-d H:i:s'));
				$link='';
				if($clase_examen['ESTADO']==1){
					$tabla.='<tr><td><strong>FECHA</strong></td><td>'.$fi_examen->format('Y-m-d').'</td><td><strong>HORARIO</strong></td><td>'.$fi_examen->format('H:i').' a '.$ff_examen->format('H:i').'</td></tr>';
				}else{
					$link='<div id="respuesta_link">LINK DE ACCESO:<textarea rows="2" class="form-control" style="text-transform:none;" readonly>https://deming.edu.ec/biacademos/index.php/academico/academico/getExamenPersonaExterno/'.$idExamenPersona.'_'.md5($idExamenPersona).'</textarea></div>';
				}
				$tabla.='</table>'.$link;
				if($clase_examen['ESTADO']==0 and ($fi_examen>$f_actual or $ff_examen<$f_actual)){
					$tabla.='<form name="f_examen" id="f_examen"><input name="formulario_examen[ID_CONTENIDO]" type="hidden" id="idc" value="'.$clase_examen['ID_CONTENIDO'].'"><input name="formulario_examen[ID_PERSONA]" type="hidden" id="idp" value="'.$clase_examen['ID_PERSONA'].'"><div class="well well-sm"><strong>Fecha Examen</strong><table><tr><td>Fecha</td><td>Hora<td><td></td></tr><tr><td><input name="formulario_examen[FECHA]" type="text" id="fecha_examen" value="'.$fi_examen->format('Y-m-d').'" class="form-control solo_valor" style="height:30px" required="required" readonly/></td><td><table width="100%"><tr><td><input type="time" style="height:30px;line-height: normal" id="hora_desde" name="formulario_examen[HORA]" class="form-control" required value="'.$fi_examen->format('H:i').'"></td></tr></table><td><td width="100px" align="right" id="respuesta_aplazo"><input type="button" name="btn_ant" value="Guardar" class="btn btn-primary btn-xs" onclick="guardar_fecha_examen()"></td></tr></table></div></form><script>$(\'#fecha_examen\').datepicker({format: "yyyy-mm-dd",language: \'es\',autoclose: true,forceParse: true,enableOnReadonly: true,startDate:\''.date('Y-m-d').'\'});</script>';
				}
				if($clase_examen['IDS_PREGUNTA_CONTENIDO']!=NULL){
					if($clase_examen['ESTADO']==1){
						$tabla.='<div class="alert alert-success">Examen finalizado. Calificaci&oacute;n: <strong>'.number_format(floatval($clase_examen['CALIFICACION']),2).'</strong></div>';
					}else{
						$tabla.='<div class="alert alert-success">Examen en proceso</strong></div>';
					}
					$fci=explode(' ',$clase_examen['FECHA_INICIO_CONEXION']);
					$fcf=explode(' ',$clase_examen['FECHA_FIN_CONEXION']);
					$tabla.='<table><tr><td><strong>Inicio Conexi&oacute;n:</strong> '.$fci[1].' <strong>Fin Conexi&oacute;n:</strong> '.$fcf[1].'</td><tr></table>';

					$preguntas=explode('+',$clase_examen['IDS_PREGUNTA_CONTENIDO']);
					$opciones=explode('+',$clase_examen['IDS_OPCION_RESPUESTA_CONTENIDO']);
					$respuestas=explode('+',$clase_examen['IDS_RESPUESTA']);
					foreach($preguntas as $k=>$p){
						$pregunta=$this->academico_model->getPreguntasContenido(array('ID_PREGUNTA_CONTENIDO'=>$p));
						$pe=$pregunta[0];
						$img='';
						if($pe['IMAGEN']!='' and file_exists(FCPATH.'archivos/contenidos/preguntas/'.$pe['IMAGEN'])){
							$img='<div class="thumbnail"><img src="'.base_url('archivos/contenidos/preguntas')."/".$pe['IMAGEN'].'"/></div>';
						}
						$tabla.='<div class="panel panel-default">';
							$tabla.='<div class="panel-heading">';
								// $tabla.='<h3 class="panel-title">'.($k+1).') '.htmlentities($pe['PREGUNTA']).'</h3>'.$img;
								$tabla.='<h3 class="panel-title">'.($k+1).') '.$pe['PREGUNTA'].'</h3>'.$img;
							$tabla.='</div>';
							$tabla.='<div class="panel-body">';
							$tabla.='<table>';
						$opciones_respuesta=explode('-',$opciones[$k]);

						foreach($opciones_respuesta as $or){
							$opcion=$this->academico_model->getOpcionesRespuestaContenido(array('ID_OPCION_RESPUESTA_CONTENIDO'=>$or));
							$op=$opcion[0];
							$seleccionado='';
							$opcion_correcta='';
							if(isset($respuestas[$k])){
								$respuestasSeleccionadas = explode("-", $respuestas[$k]);
								if (in_array($or, $respuestasSeleccionadas)) {
									$seleccionado='checked';
								}
							}
							$idOpcionesRespuestasClasePublico = explode("+", $pe['ID_OPCION_RESPUESTA_CONTENIDO']);
							if(in_array($or, $idOpcionesRespuestasClasePublico)){
								$opcion_correcta=' style="background-color:#8ccc8c"';
							}
							$img='';
							if($op['IMAGEN']!='' and file_exists(FCPATH.'archivos/contenidos/preguntas/'.$op['IMAGEN'])){
								$img='<div class="thumbnail"><img src="'.base_url('archivos/contenidos/preguntas')."/".$op['IMAGEN'].'"/></div>';
							}
							$tabla.='<tr '.$opcion_correcta.'><td valign="top"><input required="" name="opcion_seleccionada['.$p.'][]" type="checkbox" value="'.$p.'-'.$or.'" id="opcion_respuesta'.$or.'" style="transform: scale(1.5)" class="claseopcion" '.$seleccionado.' disabled></td><td style="padding-left:10px">'.$op['OPCION_RESPUESTA'].' '.$img.'</td></tr>';

						}
						$tabla.='</table>
								</div>';
						$tabla.='</div>';
					}
				}
				$tabla.='<div class="panel-footer"><table width="100%"><tr><td align="left"></td><td align="right"><input type="button" name="sal" value="Salir" class="btn-default btn btn-sm" id="sal" data-dismiss="modal"></td></tr></table></div>';
				$respuesta=$tabla;
			}else{
				$respuesta='No tiene examen';
			}
			echo $respuesta;
		}else{
			echo 'Acceso Denegado';
		}
	}

	/////////////////////////////////////////////////////////////////////////////
	public function getExamenPersonaExterno($id=null)
	{
		$idExamenPersona=0;
		if($id!=null){
			$ids=explode('_',$id);
			if(isset($ids[1]) and $ids[1]==md5($ids[0])){
				$idExamenPersona=$ids[0];
			}
		}
		if($idExamenPersona>0){
			if($this->input->is_ajax_request()){
				$info_examen=$this->academico_model->buscarExamenesPersonasTotal(array('ID_EXAMEN_PERSONA'=>$idExamenPersona));
				if(count($info_examen)>0){
					$clase_examen=$info_examen[0];
					$tabla='<table class="table table-condensed">';
						$tabla.='<tr>';
							$tabla.='<td>';
								$tabla.='<strong>NOMBRE</strong>';
							$tabla.='</td>';
							$tabla.='<td>'.$clase_examen['NOMBRE_COMPLETO'].'</td>';
							$tabla.='<td>';
								$tabla.='<strong>NRO. DOCUMENTO</strong>';
							$tabla.='</td>';
							$tabla.='<td>'.$clase_examen['NRO_DOCUMENTO'].'</td>';
						$tabla.='</tr>';
						$tabla.='<tr>';
							$tabla.='<td>';
								$tabla.='<strong>EXAMEN</strong>';
							$tabla.='</td>';
							$tabla.='<td colspan="3">'.$clase_examen['EXAMEN'].'</td>';
						$tabla.='</tr>';
					$tabla.='</table>';
					$fecha_examen_inicio = $clase_examen['FECHA'].' '.$clase_examen['HORA'].':00';
					$ff_examen = date_create(date('Y-m-d H:i:s'));//fecha final por defecto
					if($clase_examen['DURACION_EXAMEN']<=0){
						$plantilla=$this->academico_model->buscar_plantillas(array('ID_PLANTILLA'=>$clase_examen['ID_PLANTILLA']));
						$clase_examen['DURACION_EXAMEN']=$plantilla[0]['DURACION_EXAMEN'];
					}
					if($clase_examen['DURACION_EXAMEN']>0 and $clase_examen['FECHA']!=NULL and $clase_examen['FECHA']!='0000-00-00' and $clase_examen['HORA']!='' and $clase_examen['HORA']!=NULL){
						$ff_examen = date_create($fecha_examen_inicio);
						$ff_examen->modify('+ '.$clase_examen['DURACION_EXAMEN'].' minute');
					}
					/*$examenes_estudiante_aplazados = $this->academico_model->buscarExamenesEstudiantesAplazados(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$id_estudiante_carrera_materia,'ETAPA'=>$etapa));
					if(count($examenes_estudiante_aplazados)>0 and $dato_contenido!=NULL){//si tiene fecha aplazado
						$aplazo=$examenes_estudiante_aplazados[0];
						$fecha_examen_inicio=$aplazo['FECHA_APLAZADO'].' '.$aplazo['HORA_APLAZADO'].':00';
						$ff_examen = date_create($fecha_examen_inicio);
						$ff_examen->modify('+ '.$dato_contenido['DURACION_EXAMEN'].' minute');
					}*/
					$fi_examen = date_create($fecha_examen_inicio);
					//$ff_examen = date_create($fecha_examen_fin);
					$f_actual = date_create(date('Y-m-d H:i:s'));
					$interval = date_diff($f_actual, $ff_examen);
					$days = $interval->format('%a');
					$seconds = 0;
					if($days){
						$seconds += 24 * 60 * 60 * $days;
					}
					$hours = $interval->format('%H');
					if($hours){
						$seconds += 60 * 60 * $hours;
					}
					$minutes = $interval->format('%i');
					if($minutes){
						$seconds += 60 * $minutes;
					}
					$seconds += $interval->format('%s');
					$seg_interval=$seconds;
					if($clase_examen['ESTADO']==1 and $clase_examen['TIPO_EXAMEN']==0){
						$tabla.='<div class="alert alert-success">Examen Realizado. Calificaci&oacute;n: <strong>'.number_format(floatval($clase_examen['CALIFICACION']),2).'</strong></div>';
						///VISTA DE DETALLE DEL EXAMEN PARA EL ESTUDIANTES
						//CUANTAS HA APROBADO
						//CUANTAS HA SIDO INCORRECTAS
						//CUANTAS NO HAN CONTESTADO
						$preguntas=explode('+',$clase_examen['IDS_PREGUNTA_CONTENIDO']);
						$opciones=explode('+',$clase_examen['IDS_OPCION_RESPUESTA_CONTENIDO']);
						$respuestas=explode('+',$clase_examen['IDS_RESPUESTA']);
						$correcto=0;
						foreach($preguntas as $k=>$p){
							$correcto=0;
							$tabla.='<div class="row">';
								$tabla.='<div class="col-md-6 text-right">';
									$tabla.='<label class="text-left" style="font-size:20px; width:110px;">pregunta '.($k+1).'</label> ';
								$tabla.='</div>';
								$pregunta=$this->academico_model->getPreguntasContenido(array('ID_PREGUNTA_CONTENIDO'=>$p));
								$pe=$pregunta[0];
								if(isset($respuestas[$k])){
									$opcionesSeleccionadas = explode("-", $respuestas[$k]);
								}else{
									$opcionesSeleccionadas = array();
								}
								$opcionesCorrectas     = explode("+", trim($pe['ID_OPCION_RESPUESTA_CONTENIDO'],"+"));
								$correctoPregunta = 0;
								if (count($opcionesSeleccionadas) == count($opcionesCorrectas)){
									foreach ($opcionesSeleccionadas as $oSeleccionada){
										foreach ($opcionesCorrectas as $ocorrecta){
											if ($ocorrecta == $oSeleccionada){
												$correctoPregunta++;
											}
										}
									}
								}
								if(isset($respuestas[$k]) and count($opcionesCorrectas) == $correctoPregunta){
									$correcto++;
								}
								$tabla.='<div class="col-md-6"  style="font-size:25px;">';
									if (count($opcionesSeleccionadas)==0 || $opcionesSeleccionadas[0]=="0") {
										//$tabla.= "No contest�";
										$tabla.='<span class="glyphicon glyphicon-question-sign" style="color:blue;"></span>';
									}elseif ($correcto==0) {
										//$tabla.= "Incorrecto";
										$tabla.='<span class="glyphicon glyphicon-remove-sign" style="color:red;"></span>';
									}else{
										//$tabla.= "Correcto";
										$tabla.='<span class="glyphicon glyphicon-ok-sign" style="color:green;"></span>';
									}
								$tabla.='</div>';
							$tabla.='</div><br>';
						}
					}elseif($clase_examen['TIPO_EXAMEN']==1){
						$tabla.='<div class="alert alert-info">Examen Impreso</strong></div>';
					}elseif($f_actual<$fi_examen){
						$tabla.='<div class="alert alert-info">Aun no inicia examen <strong>'.$fi_examen->format('Y-m-d H:i').'</strong> Cierre e ingrese a la hora planificada</div>';
					}elseif($f_actual>$ff_examen){
						$tabla.='<div class="alert alert-info">Ya finaliz&oacute; examen <strong>'.$ff_examen->format('Y-m-d H:i').'</strong></div>';
						$idp = trim($this->input->post('idp'));
						if(isset($idp) and $idp==-1 and $clase_examen['ESTADO']==0){//finalizar Examen por tiempo limite
							$preguntas=explode('+',$clase_examen['IDS_PREGUNTA_CONTENIDO']);
							$opciones=explode('+',$clase_examen['IDS_OPCION_RESPUESTA_CONTENIDO']);
							$respuestas=explode('+',$clase_examen['IDS_RESPUESTA']);
							$correcto=0;
							foreach($preguntas as $k=>$p){
								$pregunta=$this->academico_model->getPreguntasContenido(array('ID_PREGUNTA_CONTENIDO'=>$p));
								$pe=$pregunta[0];
								$opcionesSeleccionadas = explode("-", $respuestas[$k]);
								$opcionesCorrectas     = explode("+", trim($pe['ID_OPCION_RESPUESTA_CONTENIDO'],"+"));
								$correctoPregunta = 0;
								if (count($opcionesSeleccionadas) == count($opcionesCorrectas)){
									foreach ($opcionesSeleccionadas as $oSeleccionada){
										foreach ($opcionesCorrectas as $ocorrecta){
											if ($ocorrecta == $oSeleccionada){
												$correctoPregunta++;
											}
										}
									}
								}
								if(isset($respuestas[$k]) and count($opcionesCorrectas) == $correctoPregunta){
									$correcto++;
								}
							}
							$calificacion=round($correcto*10/count($preguntas),2);
							$dat_actualiza=array();
							$dat_actualiza['ESTADO']=1;
							$dat_actualiza['CALIFICACION']=$calificacion;
							$dat_actualiza['FECHA_ACTUALIZACION']=date('Y-m-d H:i:s');
							$dat_actualiza['FECHA_FIN_CONEXION']=date('Y-m-d H:i:s');
							$this->academico_model->actualizarExamenPersona($dat_actualiza,$idExamenPersona);
							$tabla.='<div class="alert alert-success">Examen finalizado. Calificaci&oacute;n: <strong>'.number_format(floatval($calificacion),2).'</strong></div>';
						}
					}else{
						if($clase_examen['IDS_PREGUNTA_CONTENIDO']==NULL and $seg_interval>0){
							//verificar si existe base de preguntas para este examen
							$preguntas_clase=$this->academico_model->getPreguntasContenido(array('ID_CONTENIDO'=>$clase_examen['ID_CONTENIDO'],'TIPO'=>'0'));
							if(count($preguntas_clase)<=0){
								//generar base de preguntas examen
								$this->generarBasePreguntasContenido(array('ID_PLANTILLA'=>$clase_examen['ID_PLANTILLA'],'ID_CONTENIDO'=>$clase_examen['ID_CONTENIDO'],'EXTERNO'=>1));
							}
							//generar examen web del estudiante
							$this->generarExamenPersona($idExamenPersona,'0',$clase_examen['ID_CONTENIDO']);
							$info_examen=$this->academico_model->buscarExamenesPersonasTotal(array('ID_EXAMEN_PERSONA'=>$idExamenPersona));
							$clase_examen=$info_examen[0];
						}
						if($clase_examen['IDS_PREGUNTA_CONTENIDO']!=NULL and $clase_examen['IDS_PREGUNTA_CONTENIDO']!='' and $seg_interval>0){
							$idp = trim($this->input->post('idp'));
							$opcion_seleccionado = trim($this->input->post('op'));//respuesta
							$preguntas=explode('+',$clase_examen['IDS_PREGUNTA_CONTENIDO']);
							$opciones=explode('+',$clase_examen['IDS_OPCION_RESPUESTA_CONTENIDO']);
							$respuestas=explode('+',$clase_examen['IDS_RESPUESTA']);

							if($idp==NULL and $clase_examen['IDS_RESPUESTA']==''){
								$idp=$preguntas[0];
							}elseif($idp==NULL){
								$idp=$preguntas[count($respuestas)-1];
							}
							if($opcion_seleccionado!=NULL and $opcion_seleccionado!=''){
								$v_opSeleccionadas = explode("+", trim($opcion_seleccionado,"+"));
								$indicePregunta = "0";
								$opcionesRespuestasSeleccionadas = "";
								foreach ($v_opSeleccionadas as $kops => $ops) {
									//guardar respuesta
									$op_select=explode('-',$ops);
									foreach($preguntas as $k=>$p){
										if($p==$op_select[0]){
											$opcionesRespuestasSeleccionadas .= "-".$op_select[1];
											$indicePregunta = $k;
											break;
										}
									}
									$respuestas[$k]= trim($opcionesRespuestasSeleccionadas,"-");
								}
								if (isset($respuestas[$indicePregunta]) && $respuestas[$indicePregunta]=="") {
									$respuestas[$indicePregunta] =0;
								}
								// return 0;
								$res_total=implode('+',$respuestas);
								if($res_total!=$clase_examen['IDS_RESPUESTA']){
									$dat_actualiza=array();
									$dat_actualiza['IDS_RESPUESTA']=$res_total;
									$dat_actualiza['FECHA_ACTUALIZACION']=date('Y-m-d H:i:s');
									$dat_actualiza['FECHA_FIN_CONEXION']=date('Y-m-d H:i:s');
									$this->academico_model->actualizarExamenPersona($dat_actualiza,$idExamenPersona);
								}
								//cambiar de pregunta si no selecciona respuesta
								if($respuestas[$indicePregunta]==0){
									$dat_b['ID_CONTENIDO']=$clase_examen['ID_CONTENIDO'];
									$dat_b['ALEATORIO']=1;
									$dat_b['NUM_REGISTROS']=1;
									$dat_b['TIPO']='0';
									$dat_b['EXCLUIR']=$preguntas;
									$preguntas_estudiante=$this->academico_model->getPreguntasContenido($dat_b);
									if(count($preguntas_estudiante)>0){
										$preguntas[$indicePregunta]=$preguntas_estudiante[0]['ID_PREGUNTA_CONTENIDO'];
										if(!in_array($idp,$preguntas)){
											$idp=$preguntas_estudiante[0]['ID_PREGUNTA_CONTENIDO'];
										}
										$opciones_respuesta_estudiante=$this->academico_model->getOpcionesRespuestaContenido(array('ID_PREGUNTA_CONTENIDO'=>$preguntas[$indicePregunta]));
										if(count($opciones_respuesta_estudiante)>0){
											shuffle($opciones_respuesta_estudiante);//desordenar las opciones de respuesta
											foreach($opciones_respuesta_estudiante as $ore){
												$ids_opcion_respuesta[]=$ore['ID_OPCION_RESPUESTA_CONTENIDO'];
											}
										}else{
											$ids_opcion_respuesta[]='0';
										}
										$opciones[$indicePregunta]=implode('-',$ids_opcion_respuesta);
									}
									$dat_actualiza=array();
									$dat_actualiza['IDS_PREGUNTA_CONTENIDO']=implode('+',$preguntas);
									$dat_actualiza['IDS_OPCION_RESPUESTA_CONTENIDO']=implode('+',$opciones);
									$this->academico_model->actualizarExamenPersona($dat_actualiza,$idExamenPersona);
								}
							}
							if($idp==-1){//finalizar Examen
								$correcto=0;
								foreach($preguntas as $k=>$p){
									$pregunta=$this->academico_model->getPreguntasContenido(array('ID_PREGUNTA_CONTENIDO'=>$p));
									$pe=$pregunta[0];
									$opcionesSeleccionadas = explode("-", $respuestas[$k]);
									$opcionesCorrectas     = explode("+", trim($pe['ID_OPCION_RESPUESTA_CONTENIDO'],"+"));
									$correctoPregunta = 0;
									if (count($opcionesSeleccionadas) == count($opcionesCorrectas)){
										foreach ($opcionesSeleccionadas as $oSeleccionada){
											foreach ($opcionesCorrectas as $ocorrecta){
												if ($ocorrecta == $oSeleccionada){
													$correctoPregunta++;
												}
											}
										}
									}
									if(isset($respuestas[$k]) and count($opcionesCorrectas) == $correctoPregunta){
										$correcto++;
									}
								}
								$calificacion=round($correcto*10/count($preguntas),2);
								$dat_actualiza=array();
								$dat_actualiza['ESTADO']=1;
								$dat_actualiza['CALIFICACION']=$calificacion;
								$dat_actualiza['FECHA_ACTUALIZACION']=date('Y-m-d H:i:s');
								$dat_actualiza['FECHA_FIN_CONEXION']=date('Y-m-d H:i:s');
								$this->academico_model->actualizarExamenPersona($dat_actualiza,$idExamenPersona);
								$tabla.='<div class="alert alert-success">Examen finalizado. Calificaci&oacute;n: <strong>'.number_format(floatval($calificacion),2).'</strong></div>';
							}else{//mostrar pregunta
								$tabla.='<table width="100%"><tr><td style="font-size:12px; color:blue">Pregunta '.(array_search($idp,$preguntas)+1).' de '.count($preguntas).'</td>';
								if($seg_interval>0){
									$tabla.='<td><div align="right" style="font-size:12px; color:blue" id="countdown"></div><script>contador('.$seg_interval.');</script></td>';
								}
								$tabla.='</tr></table>';
								foreach($preguntas as $k=>$p){
									if($idp==$p){
										$pregunta=$this->academico_model->getPreguntasContenido(array('ID_PREGUNTA_CONTENIDO'=>$p));
										$pe=$pregunta[0];
										$img='';
										if($pe['IMAGEN']!='' and file_exists(FCPATH.'archivos/contenidos/preguntas/'.$pe['IMAGEN'])){
											$img='<div class="thumbnail"><img src="'.base_url('archivos/contenidos/preguntas/')."/".$pe['IMAGEN'].'"/></div>';
										}
										$tabla.='<div class="panel panel-default">
												  <div class="panel-heading">
													<h3 class="panel-title">'.($k+1).') '.$pe['PREGUNTA'].'</h3>'.$img.'
												  </div>
												  <div class="panel-body">
													<table>';
										//obtengo las opciones de respuesta
										$opciones_respuesta=explode('-',$opciones[$k]);
										//recorrer las opciones de respuesta
										foreach($opciones_respuesta as $or){
											$opcion=$this->academico_model->getOpcionesRespuestaContenido(array('ID_OPCION_RESPUESTA_CONTENIDO'=>$or));//obtengo el texto de la opci�n de respuesta
											$op=$opcion[0];
											$seleccionado='';
											if(isset($respuestas[$k])){

												$respuestasSeleccionadas = explode("-", $respuestas[$k]);
												if (in_array($or, $respuestasSeleccionadas)) {
													$seleccionado='checked';
												}
											}
											$img='';
											if($op['IMAGEN']!='' and file_exists(FCPATH.'archivos/contenidos/preguntas/'.$op['IMAGEN'])){
												$img='<div class="thumbnail"><img src="'.base_url('archivos/contenidos/preguntas/')."/".$op['IMAGEN'].'"/></div>';
											}
											$tabla.='<tr><td valign="top"><input required="" name="opcion_seleccionada['.$p.'][]" type="checkbox" value="'.$p.'-'.$or.'" id="opcion_respuesta'.$or.'" style="transform: scale(1.5)" class="claseopcion" '.$seleccionado.'></td><td style="padding-left:10px"><label for="opcion_respuesta'.$or.'" style="cursor: pointer">'.$op['OPCION_RESPUESTA'].' '.$img.'</label></td></tr>';
										}
										$tabla.='</table>
												</div>';
										$btnSig='';
										if(isset($preguntas[$k+1])){
											$btnSig='<input type="button" name="btn_sig" id="btn_sig" value="Siguiente" class="btn btn-primary btn-sm" onclick="get_pregunta(\''.$preguntas[$k].'\',\''.$preguntas[$k+1].'\',1)">';
										}elseif(($k+1)==count($preguntas)){
											$btnSig='<input type="button" name="btn_sig" id="btn_sig" value="FInalizar" class="btn btn-success btn-sm" onclick="get_pregunta(\''.$preguntas[$k].'\',\'-1\',1)">';
										}
										$btnAnt='';
										if(isset($preguntas[$k-1])){
											$btnAnt='<input type="button" name="btn_ant" value="Anterior" class="btn btn-default btn-sm" onclick="get_pregunta(\''.$preguntas[$k].'\',\''.$preguntas[$k-1].'\',1)">';
										}
										$tabla.='<div id="error-pregunta" style="color:red; text-align:right"></div>';
										$tabla.='<div class="panel-footer"><table width="100%"><tr><td align="left">'.$btnAnt.'</td><td align="right">'.$btnSig.'</td></tr></table></div>';
										$tabla.='<script>window.onblur = function() { cambiaPregunta(\''.$preguntas[$k].'\',\''.$preguntas[$k].'\',1);console.log(\'salio de la ventana\'); }</script>';
										$tabla.='</div>';
										break;
									}
								}
							}
						}else{
							$tabla.='<div class="alert alert-danger">No existe examen configurado</div>';
						}
					}
					$respuesta=$tabla;
				}elseif(count($info_examen)>0){//vista de usuario diferente de persona

				}else{
					$respuesta='No tiene examen';
				}
				echo $respuesta;
			}else{
				$this->load->view('templates/header_conexion');
				$this->load->view('examenPersona', array('id'=>$id));
				$this->load->view('templates/footer');
			}
		}else{
			echo 'Acceso Denegado';
		}
	}

	///////////////////////////////////////////////////////
	public function contenidoReto($idPlantilla,$idContenido)
	{
		//crear retos proyectos contenido
		//$retos_proyectos = $this->academico_model->getRetosProyectos(array('ID_PLANTILLA'=>$idPlantilla,'TIPO'=>'0'));
		$retos_proyectos = $this->academico_model->getRetosProyectos(array('ID_PLANTILLA'=>$idPlantilla));
		foreach($retos_proyectos as $reto_proyecto){
			$datrt=array();
			$datrt['TITULO']=$reto_proyecto['TITULO'];
			$datrt['ARCHIVO']=NULL;
			if($reto_proyecto['ARCHIVO']!='' and $reto_proyecto['ARCHIVO']!=NULL and file_exists(FCPATH.'archivos/plantillas/proyectos/'.$reto_proyecto['ARCHIVO'])){
				copy(FCPATH.'archivos/plantillas/proyectos/'.$reto_proyecto['ARCHIVO'], FCPATH.'archivos/contenidos/proyectos/'.$reto_proyecto['ARCHIVO']);
				$datrt['ARCHIVO']=$reto_proyecto['ARCHIVO'];
			}
			$datrt['DESCRIPCION']=$reto_proyecto['DESCRIPCION'];
			$datrt['ID_CONTENIDO']=$idContenido;
			$datrt['TIPO']=$reto_proyecto['TIPO'];
			$datrt['TIPO_RETO']=$reto_proyecto['TIPO_RETO'];
			$datrt['FECHA_CREACION']=date('Y-m-d H:i:s');
			$datrt['ID_USUARIO']=$reto_proyecto['ID_USUARIO'];
			$datrt['FECHA_MODIFICACION']=date('Y-m-d H:i:s');
			$datrt['ID_USUARIO_MODIFICACION']=$reto_proyecto['ID_USUARIO_MODIFICACION'];
			$id_reto_proyecto_contenido=$this->academico_model->crearRetoProyectoContenido($datrt);
			if($datrt['TIPO']==0 and $datrt['TIPO_RETO']==1){//si tipo es reto y tipo reto es preguntas
				//crear preguntas retos contenido
				$preguntas_retos = $this->academico_model->getPreguntasRetos(array('ID_RETO'=>$reto_proyecto['ID_RETO_PROYECTO']));
				foreach($preguntas_retos as $pregunta_reto){
					$datpr=array();
					$datpr['ID_RETO_CONTENIDO']=$id_reto_proyecto_contenido;
					$datpr['PREGUNTA']=$pregunta_reto['PREGUNTA'];
					$datpr['IMAGEN']='';
					if($pregunta_reto['IMAGEN']!='' and file_exists(FCPATH.'archivos/plantillas/retos/'.$pregunta_reto['IMAGEN'])){
						copy(FCPATH.'archivos/plantillas/retos/'.$pregunta_reto['IMAGEN'], FCPATH.'archivos/contenidos/retos/'.$pregunta_reto['IMAGEN']);
						$datpr['IMAGEN']=$pregunta_reto['IMAGEN'];
					}
					$id_pregunta_reto_contenido=$this->academico_model->crearPreguntaRetoContenido($datpr);
					$respuestas_retos=$this->academico_model->getOpcionesRespuestaRetos(array('ID_PREGUNTA_RETO'=>$pregunta_reto['ID_PREGUNTA_RETO']));
					$idsOpcionesRespuestasRetosContenido = "+";
					$idsOpcionesRespuestaReto = explode("+", trim($pregunta_reto['ID_OPCION_RESPUESTA_RETO'],"+"));
					foreach($respuestas_retos as $respuesta_reto){
						$datrr=array();
						$datrr['ID_PREGUNTA_RETO_CONTENIDO']=$id_pregunta_reto_contenido;
						$datrr['OPCION_RESPUESTA']=$respuesta_reto['OPCION_RESPUESTA'];
						$datrr['IMAGEN']='';
						if($respuesta_reto['IMAGEN']!='' and file_exists(FCPATH.'archivos/plantillas/retos/'.$respuesta_reto['IMAGEN'])){
							copy(FCPATH.'archivos/plantillas/retos/'.$respuesta_reto['IMAGEN'], FCPATH.'archivos/contenidos/retos/'.$respuesta_reto['IMAGEN']);
							$datrr['IMAGEN']=$respuesta_reto['IMAGEN'];
						}
						$id_opcion_respuesta_reto_contenido=$this->academico_model->crearOpcionesRespuestaRetoContenido($datrr);
						if(in_array($respuesta_reto['ID_OPCION_RESPUESTA_RETO'], $idsOpcionesRespuestaReto)){
							$idsOpcionesRespuestasRetosContenido .=  $id_opcion_respuesta_reto_contenido . "+";
						}
					}
					$this->academico_model->actualizarPreguntaRetoContenido(array('ID_OPCION_RESPUESTA_RETO_CONTENIDO'=>$idsOpcionesRespuestasRetosContenido),$id_pregunta_reto_contenido);
				}
			}
		}
	}

	/////////////////////////////////////////////////////////////////////////////
	public function generarExamenPersona($idExamenPersona,$tipo,$idContenido)
	{
		//if($this->session->userdata('loggeado')){
			$datos['ALEATORIO']=1;
			$datos['NUM_REGISTROS']=10;
			$datos['TIPO']=$tipo;
			$datos['ID_CONTENIDO']=$idContenido;
			$preguntas_estudiante=$this->academico_model->getPreguntasContenido($datos);
			if(count($preguntas_estudiante)>0){
				$ids_pregunta='';
				$ids_opcion_respuesta='';
				foreach($preguntas_estudiante as $pe){
					$ids_pregunta.=$pe['ID_PREGUNTA_CONTENIDO'].'+';
					$opciones_respuesta_estudiante=$this->academico_model->getOpcionesRespuestaContenido(array('ID_PREGUNTA_CONTENIDO'=>$pe['ID_PREGUNTA_CONTENIDO']));
					if(count($opciones_respuesta_estudiante)>0){
						shuffle($opciones_respuesta_estudiante);//desordenar las opciones de respuesta
						foreach($opciones_respuesta_estudiante as $ore){
							$ids_opcion_respuesta.=$ore['ID_OPCION_RESPUESTA_CONTENIDO'].'-';
						}
					}else{
						$ids_opcion_respuesta.='0-';
					}
					$ids_opcion_respuesta=trim($ids_opcion_respuesta,'-').'+';
				}
				$dat_ep['IDS_PREGUNTA_CONTENIDO']=trim($ids_pregunta,'+');
				$dat_ep['IDS_OPCION_RESPUESTA_CONTENIDO']=trim($ids_opcion_respuesta,'+');
				$dat_ep['FECHA_ACTUALIZACION']=date('Y-m-d H:i:s');
				$dat_ep['FECHA_INICIO_CONEXION']=date('Y-m-d H:i:s');
				$this->academico_model->actualizarExamenPersona($dat_ep,$idExamenPersona);
			}
		//}
	}

	//////////////////////////////////////////////////////////////////
	public function aplazoReto()
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,101)){
			$perfil    = $this->session->userdata('loggeado')['ID_PERFIL'];
			$idRetoContenido  = trim($this->input->post('id_reto'));
			$idPlanificacion  = trim($this->input->post('id_planificacion'));
			$contenidos = $this->academico_model->listado_contenido(array('ID_PLANIFICACION'=>$idPlanificacion));
			if(count($contenidos)>0){
				$contenido=$contenidos[0];
				$dato_contenido=$this->academico_model->getContenidoMateria($contenido['ID_CARRERA_MATERIA'],$contenido['ID_PERIODO_ACADEMICO'],$contenido['ID_PLANTILLA']);
				$aplazos_reto=$this->academico_model->getAplazoContenido(null,'0',$idRetoContenido);
				$aplazos=array();
				foreach($aplazos_reto as $ar){
					$aplazos[$ar['ID_PERSONA']]=$ar['FECHA_APLAZADA'];
				}
				$estudiantes=$this->academico_model->get_estudiantes(array('ID_CARRERA_MATERIA'=>$contenido['ID_CARRERA_MATERIA'],'ID_PERIODO_ACADEMICO'=>$contenido['ID_PERIODO_ACADEMICO'],'ID_GRUPO'=>$contenido['ID_GRUPO']));
				$tabla='<form action="'.site_url().'/academico/academico/aplazarReto/" method="post" name="formulario_aplazo" id="formulario_aplazo">';
					$tabla.='<div id="respuesta_aplazo"></div>';
					$tabla.='<table class="table table-condensed">';
						$tabla.='<tr>';
							$tabla.='<th>N&deg;</th>';
							$tabla.='<th>Estudiante</th>';
							$tabla.='<th>Fecha Aplazada</th>';
						$tabla.='</tr>';
						$contador = 1;
				foreach($estudiantes as $estudiante){
						$tabla.='<tr onMouseOver="this.style.backgroundColor=\'#EBFCE2\'" onMouseOut="this.style.backgroundColor=\'\'">';
						$tabla.='<td>'.$contador.'</td>';
						$contador++;
						$tabla.='<td>'.$estudiante['ESTUDIANTE'].'</td>';
						$fecha='';
						if(isset($aplazos[$estudiante['ID_PERSONA']])){
							$fecha=$aplazos[$estudiante['ID_PERSONA']];
						}
						$tabla.='<td align="center"><input class="form-control faplazo" type="text" name="fecha_aplazo['.$estudiante['ID_PERSONA'].']" id="fecha_aplazo'.$estudiante['ID_PERSONA'].'" autocomplete="off" placeholder="Fecha Aplazada" readonly value="'.$fecha.'"></td>';
						$tabla.='</tr>';
				}
				$tabla.='</table>';
					$tabla.='<input type="hidden" name="id_reto" id="id_reto" value="'.$idRetoContenido.'">';
				$tabla.='</form>';
				echo $tabla;
			}else{
				echo 'Sin Contenido';
			}
		}else{
			redirect('index', 'refresh');
		}
	}

	///////////////////////////////////////////////////////////////////
	public function aplazarReto()
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,101)){
			$idRetoContenido = trim($this->input->post('id_reto'));
			$fechas = $this->input->post('fecha_aplazo');
			foreach($fechas as $idp=>$fecha){
				$this->academico_model->borrarAplazoContenido($idp,'0',$idRetoContenido);
				$datos=array();
				if($fecha!=''){
					$datos['ID']=$idRetoContenido;
					$datos['TIPO']='0';//tipo reto
					$datos['ID_PERSONA']=$idp;
					$datos['FECHA_APLAZADA']=$fecha;
					$this->academico_model->crearAplazoContenido($datos);
				}
			}
			$respuesta['respuesta']          = 1;
			$respuesta['mensaje']            = 'Registros Guardados';
			echo json_encode($respuesta);
		}else{
			echo "Sesion Terminada";
		}
	}

	///////////////////////////////////////////////////////////////////
	public function finalizarExamenSupletorio($id_estudiante_carrera_materia,$etapa)
	{
		if($this->session->userdata('loggeado')){
			$ids=explode('_',$id_estudiante_carrera_materia);
			$id_estudiante_carrera_materia=$ids[0];
			$id_plantilla=0;
			if(isset($ids[1])){
				$id_plantilla=$ids[1];
			}
			$examenes_estudiante=$this->academico_model->buscarExamenesEstudiantes(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$id_estudiante_carrera_materia,'ETAPA'=>$etapa,'TIPO_EXAMEN'=>'0','ID_PLANTILLA'=>$id_plantilla));
			$examen=$examenes_estudiante[0];
			$preguntas=explode('+',$examen['IDS_PREGUNTA_CONTENIDO']);
			$opciones=explode('+',$examen['IDS_OPCION_RESPUESTA_CONTENIDO']);
			$respuestas=explode('+',$examen['IDS_RESPUESTA']);
			$correcto=0;
			foreach($preguntas as $k=>$p){
				$pregunta=$this->academico_model->getPreguntasContenido(array('ID_PREGUNTA_CONTENIDO'=>$p));
				$pe=$pregunta[0];
				if(isset($respuestas[$k])){
					$opcionesSeleccionadas = explode("-", $respuestas[$k]);
					$opcionesCorrectas     = explode("+", trim($pe['ID_OPCION_RESPUESTA_CONTENIDO'],"+"));
					$correctoPregunta = 0;
					if (count($opcionesSeleccionadas) == count($opcionesCorrectas)){
						foreach ($opcionesSeleccionadas as $oSeleccionada){
							foreach ($opcionesCorrectas as $ocorrecta){
								if ($ocorrecta == $oSeleccionada){
									$correctoPregunta++;
								}
							}
						}
					}
					if(isset($respuestas[$k]) and count($opcionesCorrectas) == $correctoPregunta){
						$correcto++;
					}
				}
			}
			$calificacion=round($correcto*10/count($preguntas),2);
			$dat_actualiza=array();
			$dat_actualiza['ESTADO']=1;
			$dat_actualiza['CALIFICACION']=$calificacion;
			$dat_actualiza['FECHA_ACTUALIZACION']=date('Y-m-d H:i:s');
			$this->academico_model->actualizarExamenEstudiante($dat_actualiza,$examen['ID_EXAMEN_ESTUDIANTE']);
			$msj='Examen Finalizado. Calificaci&oacute;n: <strong>'.number_format(floatval($calificacion),2).'</strong>';
			if($etapa>0){
				//transpasar nota examen
				$this->registraCalificacionComponente(1,$id_estudiante_carrera_materia,3,$calificacion,$id_plantilla);
			}else{
				//transpasar nota supletorio
				$this->registraCalificacionComponente(0,$id_estudiante_carrera_materia,0,$calificacion);
			}
			echo json_encode(array('respuesta'=>$msj,'calificacion'=>number_format(floatval($calificacion),2)));
		}
	}

	/////////////////////////////////////////////////////////////////////////////
	public function getExamenEstudianteImpresion($id_estudiante_carrera_materia,$etapa)
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,105)){
			$usuario=$this->session->userdata('loggeado');
			$ids=explode('_',$id_estudiante_carrera_materia);
			$id_estudiante_carrera_materia=$ids[0];
			$id_plantilla=0;
			if(isset($ids[1])){
				$id_plantilla=$ids[1];
			}
			$dat['ETAPA']=$etapa;
			$dat['ID_PLANTILLA']=$id_plantilla;
			$dat['ID_ESTUDIANTE_CARRERA_MATERIA']=$id_estudiante_carrera_materia;
			$dat['ESTADO_ESTUDIANTE']='0';
			$clases_examenes=array();
			if($id_estudiante_carrera_materia!=NULL and $id_estudiante_carrera_materia!='' and $id_estudiante_carrera_materia>0){
				$clases_examenes=$this->academico_model->buscarGruposExamenesEstudiantes($dat);
			}
			//$clases_examenes=$this->academico_model->buscarGruposExamenesEstudiantes($dat);
			if(count($clases_examenes)>0){
				$clase_examen=$clases_examenes[0];
				$examenes_estudiante=$this->academico_model->buscarExamenesEstudiantes(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$id_estudiante_carrera_materia,'ETAPA'=>$etapa,'TIPO_EXAMEN'=>'0','ID_PLANTILLA'=>$id_plantilla));
				$docente=$this->academico_model->get_datos_docente($clase_examen['ID_PERSONA_DOCENTE']);
				$examen=$examenes_estudiante[0];
				$fecha_examen_inicio = $clase_examen['FECHA_EXAMEN'].' '.$clase_examen['HORA_EXAMEN'].':00';
				$ff_examen = date_create(date('Y-m-d H:i:s'));//fecha final por defecto
				$dato_contenido=$this->academico_model->getContenidoMateria($clase_examen['ID_CARRERA_MATERIA'],$clase_examen['ID_PERIODO_ACADEMICO'],$id_plantilla);
				if($dato_contenido!=NULL){
					if($dato_contenido['DURACION_EXAMEN']<=0){
						$plantilla=$this->academico_model->buscar_plantillas(array('ID_PLANTILLA'=>$dato_contenido['ID_PLANTILLA']));
						$dato_contenido['DURACION_EXAMEN']=$plantilla[0]['DURACION_EXAMEN'];
					}
					if($dato_contenido['DURACION_EXAMEN']>0 and $clase_examen['FECHA_EXAMEN']!=NULL and $clase_examen['FECHA_EXAMEN']!='0000-00-00' and $clase_examen['HORA_EXAMEN']!='' and $clase_examen['HORA_EXAMEN']!=NULL){
						$ff_examen = date_create($fecha_examen_inicio);
						$ff_examen->modify('+ '.$dato_contenido['DURACION_EXAMEN'].' minute');
					}
				}
				$examenes_estudiante_aplazados = $this->academico_model->buscarExamenesEstudiantesAplazados(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$id_estudiante_carrera_materia,'ETAPA'=>$etapa,'ID_PLANTILLA'=>$id_plantilla));
				$numPreguntasContestadas=0;
				if(count($examenes_estudiante_aplazados)>0 and $dato_contenido!=NULL){//si tiene fecha aplazado
					$aplazo=$examenes_estudiante_aplazados[0];
					$fecha_examen_inicio=$aplazo['FECHA_APLAZADO'].' '.$aplazo['HORA_APLAZADO'].':00';
					$ff_examen = date_create($fecha_examen_inicio);
					if($aplazo['DURACION_EXAMEN']!=NULL and $aplazo['DURACION_EXAMEN']>0){
						$ff_examen->modify('+ '.$aplazo['DURACION_EXAMEN'].' minute');
					}else{
						$ff_examen->modify('+ '.$dato_contenido['DURACION_EXAMEN'].' minute');
					}
				}
				$fi_examen = date_create($fecha_examen_inicio);
				$tabla='<title>Examen_Estudiante_'.$clase_examen['NRO_DOCUMENTO'].'</title>';
				$tabla.='<style type="text/css"> .tdc{ padding:3px; vertical-align:top; font-size:12px; border-bottom:solid 1px #5A5A5A }</style>';
				$tabla.='<div align="center">';
					$tabla.='<img width="100px" src="'.base_url('assets/librerias/images/lendan.jpg').'">';
				$tabla.='</div>';
				$tabla.='<div align="center">';
						$tabla.=utf8_encode('<h3>Examen en l�nea</h3>');
					$tabla.='</div>';
				$tabla.='<table width="100%" style="margin-bottom:5px; border-collapse:collapse; border:solid 1px #5A5A5A">';
					$tabla.='<tr>';
						$tabla.='<td class="tdc">';
							$tabla.='<strong>Carrera</strong>';
						$tabla.='</td>';
						$tabla.='<td class="tdc" colspan="5">'.$clase_examen['CARRERA'].'</td>';
					$tabla.='</tr>';
					$tabla.='<tr>';
						$tabla.='<td class="tdc">';
							$tabla.='<strong>Estudiante</strong>';
						$tabla.='</td>';
						$tabla.='<td class="tdc">'.$clase_examen['NOMBRE_ESTUDIANTE'].'</td>';
						$tabla.='<td class="tdc">';
							$tabla.=utf8_encode('<strong>C�dula</strong>');
						$tabla.='</td>';
						$tabla.='<td class="tdc">'.$clase_examen['NRO_DOCUMENTO'].'</td>';
						$tabla.='<td class="tdc">';
							$tabla.=utf8_encode('<strong>Calificaci�n</strong>');
						$tabla.='</td>';
						$tabla.='<td class="tdc">'.number_format(floatval($examen['CALIFICACION']),1).' / 10</td>';
					$tabla.='</tr>';
					$tabla.='<tr>';
						$tabla.='<td class="tdc">';
							$tabla.='<strong>Materia</strong>';
						$tabla.='</td>';
						$tabla.='<td class="tdc">'.$clase_examen['MATERIA'].'</td>';
						$tabla.='<td class="tdc">';
							$tabla.='<strong>Grupo</strong>';
						$tabla.='</td>';
						$tabla.='<td class="tdc">'.$clase_examen['GRUPO'].'</td>';
						$tabla.='<td class="tdc">';
							$tabla.='<strong>Fecha de examen</strong>';
						$tabla.='</td>';
						$tabla.='<td class="tdc">'.$fi_examen->format('Y-m-d H:i').'</td>';
					$tabla.='</tr>';
					$tabla.='<tr>';
						$tabla.='<td class="tdc">';
							$tabla.='<strong>Docente</strong>';
						$tabla.='</td>';
						$tabla.='<td colspan="5" class="tdc">'.$docente['APELLIDOS'].' '.$docente['NOMBRES'].'</td>';
					$tabla.='</tr>';
				$tabla.='</table>';
				$fci=explode(' ',$examen['FECHA_INICIO_CONEXION']);
				$fcf=explode(' ',$examen['FECHA_FIN_CONEXION']);
				if(isset($fci[1]) and isset($fcf[1])){
					$tabla.='<table width="100%"><tr><td class="tdc"><strong>Inicio Conexi&oacute;n:</strong> '.$fci[1].' <strong>Fin Conexi&oacute;n:</strong> '.$fcf[1].'</td><tr></table>';
				}
				$preguntas=explode('+',$examen['IDS_PREGUNTA_CONTENIDO']);
				$opciones=explode('+',$examen['IDS_OPCION_RESPUESTA_CONTENIDO']);
				$respuestas=explode('+',$examen['IDS_RESPUESTA']);
				if($examen['IDS_PREGUNTA_CONTENIDO']!='' and $examen['IDS_PREGUNTA_CONTENIDO']!=NULL){
					foreach($preguntas as $k=>$p){
						$pregunta=$this->academico_model->getPreguntasContenido(array('ID_PREGUNTA_CONTENIDO'=>$p));
						$pe=$pregunta[0];
						$img='';
						if($pe['IMAGEN']!='' and file_exists(FCPATH.'archivos/contenidos/preguntas/'.$pe['IMAGEN'])){
							$img='<div class="thumbnail"><img src="'.base_url('archivos/contenidos/preguntas')."/".$pe['IMAGEN'].'"/></div>';
						}
						$tabla.='<table width="100%" style="margin-bottom:5px; border-bottom:solid 1px #5A5A5A">';
							$tabla.='<tr>';
							$tabla.='<td align="center" valign="top" style="width:30px"><div style="color:#FFFFFF; width:30px; background-color:#003C49;padding-top:7px; padding-bottom:7px; font-weight:bold">'.($k+1).'</div></td>';
							$tabla.='<td style="font-size:12px">'.$pe['PREGUNTA'].$img.'</td>';
							$tabla.='</tr>';
							$tabla.='<tr>';
							$tabla.='<td colspan="2" style="font-size:12px">';
							$tabla.='<ol type="a">';
						$opciones_respuesta=explode('-',$opciones[$k]);
						$opcion_seleccionada=0;
						foreach($opciones_respuesta as $or){
							$opcion=$this->academico_model->getOpcionesRespuestaContenido(array('ID_OPCION_RESPUESTA_CONTENIDO'=>$or));
							$op=$opcion[0];
							$seleccionado='';
							$opcion_correcta='';
							if(isset($respuestas[$k])){
								$respuestasSeleccionadas = explode("-", $respuestas[$k]);
								if (in_array($or, $respuestasSeleccionadas)) {
									$seleccionado=' style="color:#052F90"';
									$opcion_seleccionada++;
								}
							}
							$img='';
							if($op['IMAGEN']!='' and file_exists(FCPATH.'archivos/contenidos/preguntas/'.$op['IMAGEN'])){
								$img='<div class="thumbnail"><img src="'.base_url('archivos/contenidos/preguntas')."/".$op['IMAGEN'].'"/></div>';
							}
							$tabla.='<li '.$seleccionado.'>'.$op['OPCION_RESPUESTA'].' '.$img.'</li>';
						}
						$tabla.='</ol>
								</td>';
						$tabla.='</tr>';
						$status='Incorrecto';
						if(isset($respuestas[$k])){
							$opcionesSeleccionadas = explode("-", $respuestas[$k]);
						}else{
							$opcionesSeleccionadas = array();
						}
						$opcionesCorrectas     = explode("+", trim($pe['ID_OPCION_RESPUESTA_CONTENIDO'],"+"));
						$correctoPregunta = 0;
						if (count($opcionesSeleccionadas) == count($opcionesCorrectas)){
							foreach ($opcionesSeleccionadas as $oSeleccionada){
								foreach ($opcionesCorrectas as $ocorrecta){
									if ($ocorrecta == $oSeleccionada){
										$correctoPregunta++;
									}
								}
							}
						}
						if(isset($respuestas[$k]) and count($opcionesCorrectas) == $correctoPregunta){
							$status='Correcto';
						}
						$tabla.='<tr>';
							$tabla.='<td colspan="2" style="font-size:12px"><strong>Status: '.$status.'</strong></td>';
							$tabla.='</tr>';
						$tabla.='</table>';
					}
				}
				$tabla.='<script type="text/javascript">window.onload=function alcargar(){ window.print();setTimeout(function() { window.close();},200);}</script>';
				//$tabla.='<div class="panel-footer"><table width="100%"><tr><td align="left"></td><td align="right"><input type="button" name="sal" value="Salir" class="btn-default btn btn-sm" id="sal" data-dismiss="modal"></td></tr></table></div>';
				$respuesta=$tabla;
			}
			//$this->load->view('templates/header_conexion');
			echo $respuesta;
		}else{
			echo 'Acceso Denegado';
		}
	}

	public function archivo_teams()
	{
		$id_usuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($id_usuario,18)){
			$id_carrera = trim($this->input->post('s_carrera'));
			$id_nivel = trim($this->input->post('s_nivel'));
			$id_periodo_academico = trim($this->input->post('s_period'));
			$grupo = trim($this->input->post('s_grupo'));
			$datos = $this->academico_model->listaAlumnos($id_carrera, $id_nivel,$id_periodo_academico,$grupo);
			if($this->session->userdata('loggeado')['ID_PERFIL']==12 and $grupo==''){//filtrar grupos para coordinadores
				$datos_temp=array();
				$vector_grupos=array();
				$usuario_grupos=$this->usuarios_model->buscar_usuario_grupos(array('ID_USUARIO'=>$id_usuario));
				if($usuario_grupos!=NULL){
					$vector_grupos=explode('+',$usuario_grupos['GRUPOS']);
				}
				foreach($datos as $dat){
					if(in_array($dat['GRUPO'],$vector_grupos)){
						$datos_temp[]=$dat;
					}
				}
				$datos=$datos_temp;
			}
			//$archivo='Nombre de usuario,Nombre,Apellidos,Nombre para mostrar,Puesto,Departamento,N�mero del trabajo,Tel�fono del trabajo,Tel�fono m�vil,N�mero de fax,Direcci�n,Ciudad,Estado o provincia,C�digo postal,Pa�s o regi�n'.PHP_EOL;
			$archivo='Nombre de usuario,Nombre,Apellido,Nombre para mostrar,Puesto,Departamento,N�mero del trabajo,Tel�fono de la oficina,Tel�fono m�vil,Fax,Direcci�n de correo electr�nico alternativa,Direcci�n,Ciudad,Estado o provincia,C�digo postal,Pa�s o regi�n'.PHP_EOL;
			foreach($datos as $dato){
				//if($dato['CORREO']!=NULL and $dato['CORREO']!='' and $dato['ESTADO_MATRICULA']==0){
				if($dato['CORREO']!=NULL and $dato['CORREO']!='' and ($dato['ESTADO_MATRICULA']==0 or $dato['ESTADO_MATRICULA']==3)){
					$archivo.=utf8_encode($dato['CORREO'].','.$dato['NOMBRES'].','.$dato['APELLIDOS'].','.$dato['NOMBRE_COMPLETO'].',,,,,'.$dato['CELULAR'].',,,,,,,Ecuador').PHP_EOL;
				}
			}
			//print_r($datos);
			header('Content-Encoding: UTF-8');
			header('Content-Description: File Transfer');
			header('Content-Type: application/octet-stream');
			header('Content-Disposition: attachment; filename=estudiantes_deming.csv');
			header('Content-Transfer-Encoding: binary');
			header('Expires: 0');
			header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
			header('Pragma: public');
			//echo "\xEF\xBB\xBF"; // utf-8 BOM
			echo utf8_decode($archivo);
			exit();

		}else{
			redirect('admin/login', 'refresh');
		}
	}

	//////funcion obtener token de acceso de aplicacion a office 365//////////
	public function getToken()
	{
		$token=0;
		if($this->session->userdata('token')){
			$dat_token=$this->session->userdata('token');
			$fecha_token=date_create($dat_token['fecha_token']);
			$fecha_actual = date_create(date('Y-m-d H:i:s'));
			$interval = date_diff($fecha_actual, $fecha_token);
			$days = $interval->format('%a');
			$seconds = 0;
			if($days){
				$seconds += 24 * 60 * 60 * $days;
			}
			$hours = $interval->format('%H');
			if($hours){
				$seconds += 60 * 60 * $hours;
			}
			$minutes = $interval->format('%i');
			if($minutes){
				$seconds += 60 * $minutes;
			}
			$seconds += $interval->format('%s');
			if($seconds>=$dat_token['expires_in']){
				$token=1;
			}
		}else{
			$token=1;
		}
		if($token==1){
			$url='https://login.microsoftonline.com/c0bc7811-1ec7-4161-bd31-f603f7280931/oauth2/v2.0/token';
			$param['client_id']='00ebec60-4a35-4f59-80ee-e61df618e07e';
			$param['scope']='https://graph.microsoft.com/.default';
			$param['client_secret']='2m3XHn0YHz.lPzN4-511zS_~P19-3xaF7~';
			$param['grant_type']='client_credentials';
			$body=http_build_query($param);
			$ch  = curl_init();
			curl_setopt($ch, CURLOPT_URL, $url);
			curl_setopt($ch, CURLOPT_POST,true);
			curl_setopt($ch, CURLOPT_CUSTOMREQUEST,"POST");
			curl_setopt($ch, CURLOPT_POSTFIELDS, $body);
			curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/x-www-form-urlencoded'));
			curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
			curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
			curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);
			$resultado = json_decode(curl_exec($ch),true);
			//$resultado = curl_exec($ch);
			$error     = curl_error($ch);
			curl_close($ch);
			if(isset($resultado['access_token'])){
				$resultado['fecha_token']=date('Y-m-d H:i:s');
				$this->session->set_userdata('token', $resultado);
			}else{
				print_r($resultado);
				exit();
			}
		}
		//print_r($this->session->userdata('token'));  echo $seconds;
	}

	//////funcion crear grupos office 365//////////
	public function crearGrupoTeam($nombreGrupo=NULL)
	{
		//$nombreGrupo=utf8_encode('NORMATIVA INSTITUCIONAL Y DESARROLLO DEL PLAN DE GRADUACI�N 489');
		if($this->session->userdata('loggeado') and $nombreGrupo!=NULL){
			$this->getToken();
			$gruposTeam=$this->academico_model->getGrupoTeam(array('GRUPO'=>trim($nombreGrupo)));
			if($gruposTeam==NULL){
				$token=$this->session->userdata('token')['access_token'];
				$url='https://graph.microsoft.com/v1.0/groups';
				$param['description']='Grupo '.$nombreGrupo;
				$param['displayName']=trim($nombreGrupo);
				$this->load->model('clientes/clientes_model');
				$nickNombreGrupo=strtolower($this->clientes_model->sustituir_caracteres_no_permitidos($nombreGrupo));
				$param['mailNickname']=$nickNombreGrupo;
				$param['mailEnabled']=true;
				$param['securityEnabled']=true;
				$param['visibility']='Private';
				$param['groupTypes']=array('Unified');
				$body=json_encode($param);
				$ch  = curl_init();
				curl_setopt($ch, CURLOPT_URL, $url);
				curl_setopt($ch, CURLOPT_POST,true);
				curl_setopt($ch, CURLOPT_CUSTOMREQUEST,"POST");
				curl_setopt($ch, CURLOPT_POSTFIELDS, $body);
				curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json','Authorization: '.$token));
				curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
				curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
				curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);
				$resultado = json_decode(curl_exec($ch),true);
				//$resultado = curl_exec($ch);
				$error     = curl_error($ch);
				curl_close($ch);
				if(isset($resultado['id'])){
					$dat['ID_TEAM']=$resultado['id'];
					$dat['GRUPO']=trim($nombreGrupo);
					$dat['FECHA_CREACION']=date('Y-m-d H:i:s');
					$this->academico_model->crearGrupoTeam($dat);
				}else{
					print_r($resultado);
					echo $body;
					exit();
				}
			}
		}else{
			echo 'Acceso Denegado';
		}
	}

	//////funcion crear propietario grupo office 365////////////////////
	public function crearPropietarioGrupoTeam($idPersona=0,$idGrupoTeam)
	{
		if($this->session->userdata('loggeado') and $idPersona>0){
			$this->getToken();
			$usuarioTeam=$this->academico_model->getUsuarioTeam(array('ID_PERSONA'=>$idPersona));
			if($usuarioTeam==NULL){
				$this->crearUsuarioTeam($idPersona);
			}
			$propietariosGrupoTeam=$this->academico_model->getGrupoTeam(array('PROPIETARIOS'=>$usuarioTeam['ID_USUARIO_OFFICE'],'ID_TEAM'=>$idGrupoTeam));
			if($propietariosGrupoTeam==NULL){
				$token=$this->session->userdata('token')['access_token'];
				$url='https://graph.microsoft.com/v1.0/groups/'.$idGrupoTeam.'/owners/$ref';
				$param['@odata.id']='https://graph.microsoft.com/v1.0/users/'.$usuarioTeam['ID_USUARIO_OFFICE'];
				$body=json_encode($param);
				$ch  = curl_init();
				curl_setopt($ch, CURLOPT_URL, $url);
				curl_setopt($ch, CURLOPT_POST,true);
				curl_setopt($ch, CURLOPT_CUSTOMREQUEST,"POST");
				curl_setopt($ch, CURLOPT_POSTFIELDS, $body);
				curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json','Authorization: '.$token));
				curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
				curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
				curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);
				$resultado = json_decode(curl_exec($ch),true);
				//$resultado = curl_exec($ch);
				$error     = curl_error($ch);
				$http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
				curl_close($ch);
				if($http_code==204){
					$grupoTeam=$this->academico_model->getGrupoTeam(array('ID_TEAM'=>$idGrupoTeam));
					$dat['PROPIETARIOS']=trim($grupoTeam['PROPIETARIOS'].'@'.$usuarioTeam['ID_USUARIO_OFFICE'],'@');
					$dat['FECHA_ACTUALIZACION']=date('Y-m-d H:i:s');
					$this->academico_model->actualizarGrupoTeam($dat,$grupoTeam['ID_TEAM_OFFICE']);
				}else{
					print_r($resultado);
					exit();
				}
			}
		}else{
			echo 'Acceso Denegado';
		}
	}

	//////funcion crear usuario office 365////////////////////
	public function crearUsuarioTeam($idPersona=0)
	{
		if($this->session->userdata('loggeado') and $idPersona>0){
			$this->getToken();
			$persona=$this->academico_model->get_datos_persona($idPersona);
			if($persona!=NULL and $persona['CORREO_INSTITUCIONAL']!=NULL){
				$usuarioTeam=$this->academico_model->getUsuarioTeam(array('ID_PERSONA'=>$idPersona));
				if($usuarioTeam==NULL){
					$token=$this->session->userdata('token')['access_token'];
					$url='https://graph.microsoft.com/v1.0/users/'.$persona['CORREO_INSTITUCIONAL'];
					$ch  = curl_init();
					curl_setopt($ch, CURLOPT_URL, $url);
					curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json','Authorization: '.$token));
					curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
					curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
					curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);
					$resultado = json_decode(curl_exec($ch),true);
					//$resultado = curl_exec($ch);
					$error     = curl_error($ch);
					curl_close($ch);
					if(isset($resultado['id'])){
						$dat['ID_USUARIO_OFFICE']=$resultado['id'];
						$dat['ID_PERSONA']=$idPersona;
						$this->academico_model->crearUsuarioTeam($dat);
					}else{
						print_r($resultado);
						exit();
					}
				}
			}
		}
	}

	//////funcion actualizar usuario office 365////////////////////
	public function actualizarUsuarioTeam($idPersona=0,$datos=array())
	{
		if($this->session->userdata('loggeado') and $idPersona>0){
			$this->getToken();
			$persona=$this->academico_model->get_datos_persona($idPersona);
			if($persona!=NULL and $persona['CORREO_INSTITUCIONAL']!=NULL and count($datos)>0){
				$usuarioTeam=$this->academico_model->getUsuarioTeam(array('ID_PERSONA'=>$idPersona));
				if($usuarioTeam!=NULL){
					$token=$this->session->userdata('token')['access_token'];
					$url='https://graph.microsoft.com/v1.0/users/'.$persona['CORREO_INSTITUCIONAL'];
					$param=$datos;
					$body=json_encode($param);
					$ch  = curl_init();
					curl_setopt($ch, CURLOPT_URL, $url);
					curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');
					curl_setopt($ch, CURLOPT_POSTFIELDS, $body);
					curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json','Authorization: '.$token));
					curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
					curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
					curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);
					$resultado = json_decode(curl_exec($ch),true);
					//$resultado = curl_exec($ch);
					$error     = curl_error($ch);
					$http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
					curl_close($ch);
					if($http_code==204){
						//echo '<br>Actualizado '.$persona['CORREO_INSTITUCIONAL'];
					}else{
						print_r($resultado);
						echo $body;
						exit();
					}
				}
			}
		}
	}

	//////funcion crear miembros grupo office 365////////////////////
	public function crearMiembroGrupoTeam($idPersona=0,$idGrupoTeam)
	{
		if($this->session->userdata('loggeado') and $idPersona>0){
			$this->getToken();
			$usuarioTeam=$this->academico_model->getUsuarioTeam(array('ID_PERSONA'=>$idPersona));
			if($usuarioTeam==NULL){
				$this->crearUsuarioTeam($idPersona);
			}
			$miembrosGrupoTeam=$this->academico_model->getGrupoTeam(array('MIEMBROS'=>$usuarioTeam['ID_USUARIO_OFFICE'],'ID_TEAM'=>$idGrupoTeam));
			if($miembrosGrupoTeam==NULL){
				$token=$this->session->userdata('token')['access_token'];
				$url='https://graph.microsoft.com/v1.0/groups/'.$idGrupoTeam.'/members/$ref';
				$param['@odata.id']='https://graph.microsoft.com/v1.0/users/'.$usuarioTeam['ID_USUARIO_OFFICE'];
				$body=json_encode($param);
				$ch  = curl_init();
				curl_setopt($ch, CURLOPT_URL, $url);
				curl_setopt($ch, CURLOPT_POST,true);
				curl_setopt($ch, CURLOPT_CUSTOMREQUEST,"POST");
				curl_setopt($ch, CURLOPT_POSTFIELDS, $body);
				curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json','Authorization: '.$token));
				curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
				curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
				curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);
				$resultado = json_decode(curl_exec($ch),true);
				//$resultado = curl_exec($ch);
				$error     = curl_error($ch);
				$http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
				curl_close($ch);
				if($http_code==204){
					$grupoTeam=$this->academico_model->getGrupoTeam(array('ID_TEAM'=>$idGrupoTeam));
					$dat['MIEMBROS']=trim($grupoTeam['MIEMBROS'].'@'.$usuarioTeam['ID_USUARIO_OFFICE'],'@');
					$dat['FECHA_ACTUALIZACION']=date('Y-m-d H:i:s');
					$this->academico_model->actualizarGrupoTeam($dat,$grupoTeam['ID_TEAM_OFFICE']);
				}else{
					print_r($resultado);
					exit();
				}
			}
		}else{
			echo 'Acceso Denegado';
		}
	}

	//////funcion crear reunion online office 365////////////////////
	public function crearReunionTeam($idPersona,$tema,$codigo)
	{
		if($this->session->userdata('loggeado')){
			$this->getToken();
			$usuarioTeam=$this->academico_model->getUsuarioTeam(array('ID_PERSONA'=>$idPersona));
			if($usuarioTeam!=NULL){
				$token=$this->session->userdata('token')['access_token'];
				$url='https://graph.microsoft.com/v1.0/users/'.$usuarioTeam['ID_USUARIO_OFFICE'].'/events';
				$param['subject']=$tema;
				$param['start']['dateTime']=date('Y-m-d')."T".date('H:i:s');
				$param['start']['timeZone']="America/Bogota";
				$param['end']['dateTime']=date('Y-m-d')."T23:59:59";
				$param['end']['timeZone']="America/Bogota";
				$param['isOnlineMeeting']=true;
				$param['onlineMeetingProvider']="teamsForBusiness";
				$param['transactionId']=$codigo;
				$body=json_encode($param);
				$ch  = curl_init();
				curl_setopt($ch, CURLOPT_URL, $url);
				curl_setopt($ch, CURLOPT_POST,true);
				curl_setopt($ch, CURLOPT_CUSTOMREQUEST,"POST");
				curl_setopt($ch, CURLOPT_POSTFIELDS, $body);
				curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json','Authorization: '.$token));
				curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
				curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
				curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);
				$resultado = json_decode(curl_exec($ch),true);
				//$resultado = curl_exec($ch);
				$error     = curl_error($ch);
				$http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
				curl_close($ch);

				if($http_code==201){
					return $resultado;
					//print_r($resultado);
					//echo $body;
					/*$grupoTeam=$this->academico_model->getGrupoTeam(array('ID_TEAM'=>$idGrupoTeam));
					$dat['EQUIPO']=1;
					$dat['FECHA_ACTUALIZACION']=date('Y-m-d H:i:s');
					$this->academico_model->actualizarGrupoTeam($dat,$grupoTeam['ID_TEAM_OFFICE']);*/
				}else{
					return array();
					/*print_r($resultado);
					echo $body;
					exit();*/
				}
			}
		}else{
			echo 'Acceso Denegado';
		}
	}

	//////funcion enviar correo online office 365////////////////////
	public function enviarMailTeam($email,$tema,$cuerpo,$adjuntos=array(),$html=false)
	{
		$this->getToken();
		/*$email='gmales@binary.ec';
		$tema='prueba';
		$cuerpo='prueba1';*/
		$usuarioTeam='c319912a-a687-490f-a835-3f632a540e3d';//id usuario info@deming.edu.ec office 365
		$token=$this->session->userdata('token')['access_token'];
		$url='https://graph.microsoft.com/v1.0/users/'.$usuarioTeam.'/sendMail';
		$param['message']['subject']=$tema;
		if($html){
			$param['message']['body']['contentType']="HTML";
		}else{
			$param['message']['body']['contentType']="Text";
		}
		$param['message']['body']['content']=$cuerpo;
		$param['message']['toRecipients'][0]['emailAddress']['address']=$email;
		if(count($adjuntos)>0){
			foreach($adjuntos as $k=>$adj){
				$param['message']['attachments'][$k]['@odata.type']='#microsoft.graph.fileAttachment';
				$param['message']['attachments'][$k]['name']=$adj['name'];
				$param['message']['attachments'][$k]['contentBytes']=$adj['contentBytes'];
			}
		}
		$body=json_encode($param);

		$ch  = curl_init();
		curl_setopt($ch, CURLOPT_URL, $url);
		curl_setopt($ch, CURLOPT_POST,true);
		curl_setopt($ch, CURLOPT_CUSTOMREQUEST,"POST");
		curl_setopt($ch, CURLOPT_POSTFIELDS, $body);
		curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json','Authorization: '.$token));
		curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
		curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
		curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);
		$resultado = json_decode(curl_exec($ch),true);
		//$resultado = curl_exec($ch);
		$error     = curl_error($ch);
		$http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
		curl_close($ch);

		if($http_code==202){
			//return $resultado;
			//print_r($resultado);
			//echo $body;
			/*$grupoTeam=$this->academico_model->getGrupoTeam(array('ID_TEAM'=>$idGrupoTeam));
			$dat['EQUIPO']=1;
			$dat['FECHA_ACTUALIZACION']=date('Y-m-d H:i:s');
			$this->academico_model->actualizarGrupoTeam($dat,$grupoTeam['ID_TEAM_OFFICE']);*/
		}else{
			//return array();
			//print_r($resultado);
			//echo $body;
			//exit();
		}
	}

	//////funcion creacion masiva grupo office 365////////////////////
	public function apiTeam($op=0,$p=0)
	{
		$i=0;
		if($p==0){
			$p=$this->academico_model->get_periodo_activado();
		}
		if($op==1){//crear usuarios team
			$datos = $this->academico_model->listaAlumnos(null, null,$p,null);
			foreach($datos as $dato){
				if($dato['ESTADO_MATRICULA']==0){
					$this->crearUsuarioTeam($dato['ID_PERSONA']);
					$i++;
				}
			}
			echo $i.' Registros Procesados (usuarios)';
		}

		if($op==2){//crear grupo
			$data['ID_PERIODO_ACADEMICO']=$p;
			$contenidos = $this->academico_model->listado_contenido($data);
			foreach($contenidos as $contenido){
				$this->crearGrupoTeam($contenido['MATERIA'].' '.$contenido['GRUPO']);
				$i++;
			}
			echo $i.' Registros Procesados (Grupos)';
		}

		if($op==3){//asignar propietario grupo
			$usuario_grupos=$this->usuarios_model->buscar_usuarios_grupos(array());
			foreach($usuario_grupos as $ug){
				$vec_ug[$ug['ID_PERSONA']]='+'.$ug['GRUPOS'].'+';
			}
			$data['ID_PERIODO_ACADEMICO']=$p;
			$contenidos = $this->academico_model->listado_contenido($data);
			$j=0;
			foreach($contenidos as $contenido){
				$grupoTeam=$this->academico_model->getGrupoTeam(array('GRUPO'=>$contenido['MATERIA'].' '.$contenido['GRUPO']));
				if($grupoTeam!=NULL){
					$coordinador=0;
					$this->crearPropietarioGrupoTeam(676,$grupoTeam['ID_TEAM']);//agregar cvasques
					$i++;
					$this->crearPropietarioGrupoTeam(1388,$grupoTeam['ID_TEAM']);//agregar d.recalde secretaria
					$i++;
					$this->crearPropietarioGrupoTeam(2583,$grupoTeam['ID_TEAM']);//agregar j.rivera subsecretaria
					$i++;
					//obtener coordinador grupo
					foreach($vec_ug as $k=>$v){
						if(stripos($v,'+'.$contenido['GRUPO'].'+')!== false){
							$this->crearPropietarioGrupoTeam($k,$grupoTeam['ID_TEAM']);//agregar coordinador de grupo
							$i++;
							$coordinador=1;
							break;
						}
					}
					$this->crearPropietarioGrupoTeam($contenido['ID_PERSONA'],$grupoTeam['ID_TEAM']);//agregar profesor
					$i++;
				}
				echo $i.' Registros Procesados (Propietarios) '.$contenido['MATERIA'].' '.$contenido['GRUPO'].'<br>';
				$i=0;
				$j++;
			}
			echo $j.' Grupos Procesados (Propietarios)';
		}

		if($op==4){//asignar miembros grupo
			$j=0;
			$data['ID_PERIODO_ACADEMICO']=$p;
			$contenidos = $this->academico_model->listado_contenido($data);
			foreach($contenidos as $contenido){
				$grupoTeam=$this->academico_model->getGrupoTeam(array('GRUPO'=>$contenido['MATERIA'].' '.$contenido['GRUPO']));
				if($grupoTeam!=NULL){
					$estudiantes=$this->academico_model->get_estudiantes(array('ID_CARRERA_MATERIA'=>$contenido['ID_CARRERA_MATERIA'],'ID_PERIODO_ACADEMICO'=>$contenido['ID_PERIODO_ACADEMICO'],'ID_GRUPO'=>$contenido['ID_GRUPO']));
					foreach($estudiantes as $estudiante){
						$this->crearMiembroGrupoTeam($estudiante['ID_PERSONA'],$grupoTeam['ID_TEAM']);
						$i++;
					}
					echo $i.' Registros Procesados (Miembros) '.$contenido['MATERIA'].' '.$contenido['GRUPO'].'<br>';
					$i=0;
				}
				$j++;
			}
			echo $j.' Grupos Procesados (miembros)';
		}

		if($op==5){//crear equipos de grupo
			$data['ID_PERIODO_ACADEMICO']=$p;
			$contenidos = $this->academico_model->listado_contenido($data);
			foreach($contenidos as $contenido){
				$grupoTeam=$this->academico_model->getGrupoTeam(array('GRUPO'=>$contenido['MATERIA'].' '.$contenido['GRUPO']));
				if($grupoTeam!=NULL){
					$this->crearEquipoTeam($grupoTeam['ID_TEAM']);
					$i++;
				}
			}
			echo $i.' Registros Procesados (Equipos) ';
		}

		if($op==6){//actualizar usuarios team
			//$this->actualizarUsuarioTeam(2391,array('mobilePhone'=>'0990436142'));
			$datos = $this->academico_model->listaAlumnos(null, null,$p,null);
			$j=0;
			$resultado='';
			foreach($datos as $dato){
				if($dato['ESTADO_MATRICULA']==0){
					if($dato['CELULAR']!=''){
						$dat['mobilePhone']=str_replace(array(' ', '-'),'',$dato['CELULAR']);
						$this->actualizarUsuarioTeam($dato['ID_PERSONA'],$dat);
						$i++;
						echo '<br>'.$i.') Actualizado '.$dato['CORREO'].' -> '.$dat['mobilePhone'];
					}else{
						$j++;
						echo '<br>'.$j.') No Actualizado '.$dato['CORREO'].' -> '.$dato['CELULAR'];
					}
				}
			}
			//echo $i.' Registros Procesados (usuarios)';
		}
	}

	///////////////////////////////////////////////////////////////
	public function duplicarPlantillaContenido($idPlantilla)
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado')){
			$plantillas = $this->academico_model->buscar_plantillas(array('ID_PLANTILLA'=>$idPlantilla));
			$resultado='';
			foreach($plantillas as $kp=>$plantilla){
				$resultado.=($kp+1).') '.$plantilla['PLANTILLA'].' ';

				//crear plantilla
				unset($plantilla['ID_PLANTILLA']);
				$plantilla['ID_USUARIO']=$idusuario;
				$plantilla['PLANTILLA']=$plantilla['PLANTILLA'].' 2';
				$plantilla['GUIA']='';
				$id_plantilla=$this->academico_model->crearPlantilla($plantilla);
				//crear preguntas examen plantilla
				$preguntas = $this->academico_model->getPreguntas(array('ID_PLANTILLA'=>$idPlantilla));
				foreach($preguntas as $pregunta){
					$imagen='copy2'.$pregunta['IMAGEN'];
					if($pregunta['IMAGEN']!='' and file_exists(FCPATH.'archivos/plantillas/preguntas/'.$pregunta['IMAGEN'])){
						copy(FCPATH.'archivos/plantillas/preguntas/'.$pregunta['IMAGEN'], FCPATH.'archivos/plantillas/preguntas/'.$imagen);
						$pregunta['IMAGEN']=$imagen;
					}
					$respuestas=$this->academico_model->getOpcionesRespuesta(array('ID_PREGUNTA'=>$pregunta['ID_PREGUNTA']));
					$idsOpcionesRespuestas = "+";
					$idsOpcionesRespuesta = explode("+", trim($pregunta['ID_OPCION_RESPUESTA'],"+"));
					unset($pregunta['ID_PREGUNTA']);
					$pregunta['ID_PLANTILLA']=$id_plantilla;
					$pregunta['ID_OPCION_RESPUESTA']='';
					$id_pregunta=$this->academico_model->crearPregunta($pregunta);
					foreach($respuestas as $respuesta){
						$datr=array();
						$datr['ID_PREGUNTA']=$id_pregunta;
						$datr['OPCION_RESPUESTA']=$respuesta['OPCION_RESPUESTA'];
						$datr['IMAGEN']='';
						if($respuesta['IMAGEN']!='' and file_exists(FCPATH.'archivos/plantillas/preguntas/'.$respuesta['IMAGEN'])){
							copy(FCPATH.'archivos/plantillas/preguntas/'.$respuesta['IMAGEN'], FCPATH.'archivos/plantillas/preguntas/copy2'.$respuesta['IMAGEN']);
							$datr['IMAGEN']='copy2'.$respuesta['IMAGEN'];
						}
						$id_opcion_respuesta=$this->academico_model->crearOpcionesRespuesta($datr);
						if(in_array($respuesta['ID_OPCION_RESPUESTA'], $idsOpcionesRespuesta)){
							$idsOpcionesRespuestas .=  $id_opcion_respuesta . "+";
						}
					}
					$this->academico_model->actualizarPregunta(array('ID_OPCION_RESPUESTA'=>$idsOpcionesRespuestas),$id_pregunta);
				}
				//crear retos proyectos
				$retos_proyectos = $this->academico_model->getRetosProyectos(array('ID_PLANTILLA'=>$idPlantilla));
				foreach($retos_proyectos as $reto_proyecto){
					$datrt=array();
					$datrt['TITULO']=$reto_proyecto['TITULO'];
					$datrt['ARCHIVO']=NULL;
					if($reto_proyecto['ARCHIVO']!='' and $reto_proyecto['ARCHIVO']!=NULL and file_exists(FCPATH.'archivos/plantillas/proyectos/'.$reto_proyecto['ARCHIVO'])){
						copy(FCPATH.'archivos/plantillas/proyectos/'.$reto_proyecto['ARCHIVO'], FCPATH.'archivos/plantillas/proyectos/copy2'.$reto_proyecto['ARCHIVO']);
						$datrt['ARCHIVO']='copy2'.$reto_proyecto['ARCHIVO'];
					}
					$datrt['DESCRIPCION']=$reto_proyecto['DESCRIPCION'];
					$datrt['ID_PLANTILLA']=$id_plantilla;
					$datrt['TIPO']=$reto_proyecto['TIPO'];
					$datrt['TIPO_RETO']=$reto_proyecto['TIPO_RETO'];
					$datrt['FECHA_CREACION']=date('Y-m-d H:i:s');
					$datrt['ID_USUARIO']=$reto_proyecto['ID_USUARIO'];
					$datrt['FECHA_MODIFICACION']=date('Y-m-d H:i:s');
					$datrt['ID_USUARIO_MODIFICACION']=$reto_proyecto['ID_USUARIO_MODIFICACION'];
					$id_reto_proyecto=$this->academico_model->crearRetoProyecto($datrt);
					if($datrt['TIPO']==0 and $datrt['TIPO_RETO']==1){//si tipo es reto y tipo reto es preguntas
						//crear preguntas retos contenido
						$preguntas_retos = $this->academico_model->getPreguntasRetos(array('ID_RETO'=>$reto_proyecto['ID_RETO_PROYECTO']));
						foreach($preguntas_retos as $pregunta_reto){
							$datpr=array();
							$datpr['ID_RETO']=$id_reto_proyecto;
							$datpr['PREGUNTA']=$pregunta_reto['PREGUNTA'];
							$datpr['IMAGEN']='';
							if($pregunta_reto['IMAGEN']!='' and file_exists(FCPATH.'archivos/plantillas/retos/'.$pregunta_reto['IMAGEN'])){
								copy(FCPATH.'archivos/plantillas/retos/'.$pregunta_reto['IMAGEN'], FCPATH.'archivos/plantillas/retos/copy2'.$pregunta_reto['IMAGEN']);
								$datpr['IMAGEN']='copy2'.$pregunta_reto['IMAGEN'];
							}
							$id_pregunta_reto=$this->academico_model->crearPreguntaReto($datpr);
							$respuestas_retos=$this->academico_model->getOpcionesRespuestaRetos(array('ID_PREGUNTA_RETO'=>$pregunta_reto['ID_PREGUNTA_RETO']));
							$idsOpcionesRespuestasRetos = "+";
							$idsOpcionesRespuestaReto = explode("+", trim($pregunta_reto['ID_OPCION_RESPUESTA_RETO'],"+"));
							foreach($respuestas_retos as $respuesta_reto){
								$datrr=array();
								$datrr['ID_PREGUNTA_RETO']=$id_pregunta_reto;
								$datrr['OPCION_RESPUESTA']=$respuesta_reto['OPCION_RESPUESTA'];
								$datrr['IMAGEN']='';
								if($respuesta_reto['IMAGEN']!='' and file_exists(FCPATH.'archivos/plantillas/retos/'.$respuesta_reto['IMAGEN'])){
									copy(FCPATH.'archivos/plantillas/retos/'.$respuesta_reto['IMAGEN'], FCPATH.'archivos/plantillas/retos/copy2'.$respuesta_reto['IMAGEN']);
									$datrr['IMAGEN']='copy2'.$respuesta_reto['IMAGEN'];
								}
								$id_opcion_respuesta_reto=$this->academico_model->crearOpcionesRespuestaReto($datrr);
								if(in_array($respuesta_reto['ID_OPCION_RESPUESTA_RETO'], $idsOpcionesRespuestaReto)){
									$idsOpcionesRespuestasRetos .=  $id_opcion_respuesta_reto . "+";
								}
							}
							$this->academico_model->actualizarPreguntaReto(array('ID_OPCION_RESPUESTA_RETO'=>$idsOpcionesRespuestasRetos),$id_pregunta_reto);
						}
					}
				}
				$resultado.=' Creado<br>';
			}
			echo $resultado;
		}else{
			echo "Acceso Denegado";
		}
	}

	//////////////////////////////////////////////////////////////////////////////
	public function gestionReunionTeam($idPlanificacion)
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,101)){
			$datos_taller = $this->academico_model->get_docente_carrera_materia_grupo_planificacion(array('ID_PLANIFICACION'=>$idPlanificacion));
			$aulaVirtual         = $this->academico_model->buscar_aulaVirtual(array('ID_CARRERA_MATERIA'=>$datos_taller['ID_CARRERA_MATERIA'],'ID_PERIODO_ACADEMICO'=>$datos_taller['ID_PERIODO_ACADEMICO'],'ID_GRUPO'=>$datos_taller['ID_GRUPO'],'ID_PLANTILLA'=>$datos_taller['ID_PLANTILLA']));
			$msg = "";
			$url_redireccion = "";

			if($aulaVirtual==NULL and $this->session->userdata('loggeado')['ID_PERFIL']==4) {
				$msg = "crea aula";
				$data['ID_PLANIFICACION'] = $idPlanificacion;
				$data['CODIGO_UNICO']     = md5($idPlanificacion.time());
				$data['ID_USUARIO']       = $this->session->userdata('loggeado')['ID_USUARIO'];
				$data['FECHA_CREACION']   = date('Y-m-d H:i:s');
				$tema=$datos_taller['MATERIA'].' '.$datos_taller['GRUPO'];
				$idPersona=$datos_taller['ID_PERSONA'];
				$aulaTeam=$this->crearReunionTeam($idPersona,$tema,$data['CODIGO_UNICO']);
				if(isset($aulaTeam['onlineMeeting'])){
					$data['URL_AULA_PROFESOR']=$aulaTeam['onlineMeeting']['joinUrl'];
					$id_aulaVirtual           = $this->academico_model->crearAulaVirtual($data);
					$msg = "Aula Creada";
					$url_redireccion=$data['URL_AULA_PROFESOR'];
				}
				//$msg = $aulaTeam;
				$respuesta=$aulaTeam;
			}elseif($aulaVirtual==NULL){
				$msg = "Aula No Existe";
				$respuesta="";
				$data="";
			}else{
				$msg = "Ingresando al Aula";
				$url_redireccion=$aulaVirtual['URL_AULA_PROFESOR'];
				$respuesta="";
				$data="";
			}
			echo json_encode(array("err"=>'',"msg"=>$msg,$idPlanificacion,$data,$aulaVirtual,$respuesta,"url_aula"=>$url_redireccion));
			// echo json_encode();
		}else{
			echo json_encode(array("err"=>'Acceso Denegado'));
		}
	}

	//////////////////////////////////////////////////////////////
	public function guardarHoraDictada()
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado')){
			//print_r($_POST);
			$dati['ID_PERIODO_ACADEMICO']=$this->academico_model->get_periodo_activado();
			$dati['ID_MATERIA']=trim($this->input->post('id_materia_hd'));
			$dati['ID_GRUPO']=trim($this->input->post('id_grupo_hd'));
			$horaDictada=$this->academico_model->get_horasDictadas($dati);
			$dati['NRO_FACTURA']=trim($this->input->post('nroFactura'));
			if(count($horaDictada)<=0){
				$dati['ID_USUARIO']=$idusuario;
				$dati['FECHA_CREACION']=date('Y-m-d H:i:s');
				$id_hora_dictada=$this->academico_model->crear_horasDictadas($dati);
			}else{
				$dati['ID_USUARIO_ACTUALIZA']=$idusuario;
				$dati['FECHA_ACTUALIZACION']=date('Y-m-d H:i:s');
				$id_hora_dictada=$horaDictada[0]['ID_HORA_DICTADA'];
				$this->academico_model->actualizar_horasDictadas($dati,$id_hora_dictada);
			}
			echo 'Registro Realizado';
		}else{
			echo 'Acceso Denegado';
		}
	}

	///////////////////////////////////////////////////////////
	public function borrarExamenEstudiante()
    {
        $idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado')){
			$usuario=$this->session->userdata('loggeado');
			$id_estudiante_carrera_materia = trim($this->input->post('idecm'));
			$etapa = trim($this->input->post('etapa'));
			$this->academico_model->borrarExamenEstudiante($id_estudiante_carrera_materia,$etapa);
			if($etapa==0){
				$dat['ID_ESTUDIANTE_CARRERA_MATERIA']=$id_estudiante_carrera_materia;
				$dat['ID_TIPO_CALIFICACION']=6;
				$calificaciones=$this->academico_model->get_calificaciones($dat);
				if(count($calificaciones)>0){
					$calificacion=$calificaciones[0];
					$datos['ESTADO_CALIFICACION']=0;//colocar a supletorio
					$this->academico_model->actualizarCalificacion($datos,$calificacion['ID_CALIFICACION']);
				}
			}
            echo true;
        }else{
            redirect('admin/login', 'refresh');
        }
    }

	///////////////////////////////////////////////////
	public function remedialEstudiantes()
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,99)){
			$id_periodo_academico=$this->academico_model->get_periodo_activado();
			$usuario=$this->session->userdata('loggeado');
			if(!$this->input->is_ajax_request()){
				$datos['carreras'] = $this->academico_model->get_carreras();
				$datos['examenes'] = $this->academico_model->buscar_contenidos(array('ID_PERIODO_ACADEMICO'=>$id_periodo_academico));
				$datos['usuario'] = $usuario;
				$datos1=$this->perfil_model->cabecera($idusuario);
				$datos['num_etapas']=count($this->academico_model->get_etapas_calificar())-1;//quitar etapa general
				$vector_us=null;
				$grupos=array();
				if($usuario['ID_PERFIL']==12){//filtrar grupos para coordinadores
					$gruposc=$this->usuarios_model->grupos_usuario_academico(array('ID_USUARIO_ACADEMICO'=>$idusuario));
					foreach($gruposc as $g){
						$grupos[]=$g['GRUPO'];
					}
				}else{
					$grupos=$this->academico_model->buscarGruposEst($vector_us);
					$grupos = explode("-", $grupos);
				}
				$datos['grupos'] = $grupos;
			  	$this->load->view('templates/header',$datos1);
			  	$this->load->view('remedialEstudiante',$datos);
			  	$this->load->view('templates/footer');
			}else{
				$clases_examenes=array();
				$dat=array();
				if($usuario['ID_PERFIL']==5){
					$dat['ID_PERSONA']=$usuario['ID_PERSONA'];
					$dat['ESTADO_ESTUDIANTE']='0';
				}else{
					$dat['ID_CONTENIDO']=trim($this->input->post('examen'));
					$dat['NRO_DOCUMENTO']=trim($this->input->post('nro_doc_estudiante'));
					$dat['ID_CARRERA']=trim($this->input->post('id_carrera'));
					$dat['GRUPO']=trim($this->input->post('grupo'));
					if($usuario['ID_PERFIL']==12){//filtrar grupos para coordinadores
						$dat['ID_USUARIO_ACADEMICO']=$usuario['ID_USUARIO'];
					}
					//$dat['ETAPA']=trim($this->input->post('tipo'));
				}
				$fecha_actual=date_create(date('Y-m-d H:i:s'));
				$clases_examenes = $this->academico_model->buscar_alumno_remedial($dat);
				$listado=array();
				foreach($clases_examenes as $k=>$ce){
					//verifico si ya tiene supletorio personalizado el estudiante
					$clases_examenes[$k]['ESTADO']='';
					$clases_examenes[$k]['CALIFICACION']='';
					$fecha='';
					$hora='';
					$examenes_estudiante=$this->academico_model->buscarExamenesRemediales(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$ce['ID_ESTUDIANTE_CARRERA_MATERIA']));
					if($ce['ESTADO_CALIFICACION']==2 or count($examenes_estudiante)>0){
						//tiene remedial
						if(count($examenes_estudiante)>0){
							$ee=$examenes_estudiante[count($examenes_estudiante)-1];//utlimo remedial
							if($ee['TIPO_EXAMEN']==0 and $ee['ESTADO']==1){
								$clases_examenes[$k]['ESTADO']='Realizado';
								$clases_examenes[$k]['CALIFICACION']=number_format(floatval($ee['CALIFICACION']),2);
							}elseif($ee['TIPO_EXAMEN']==0 and $ee['ESTADO']==0 and $ee['IDS_PREGUNTA_CONTENIDO']!=NULL){
								$clases_examenes[$k]['ESTADO']='En Proceso';
							}elseif($ee['TIPO_EXAMEN']==0 and $ee['ESTADO']==0){
								$clases_examenes[$k]['ESTADO']='Pendiente';
							}elseif($ee['TIPO_EXAMEN']==1){
								$clases_examenes[$k]['ESTADO']='Impreso';
							}
							$fecha=$ee['FECHA'];
							$hora=$ee['HORA'];
						}
						$clases_examenes[$k]['FECHA_HORA_REMEDIAL']=NULL;
						$dato_contenido=$this->academico_model->getContenidoMateria($ce['ID_CARRERA_MATERIA'],$ce['ID_PERIODO_ACADEMICO']);
						if($dato_contenido!=NULL and $fecha!='' and $hora!=''){
							if($dato_contenido['DURACION_EXAMEN']<=0){
								$plantilla=$this->academico_model->buscar_plantillas(array('ID_PLANTILLA'=>$dato_contenido['ID_PLANTILLA']));
								$dato_contenido['DURACION_EXAMEN']=$plantilla[0]['DURACION_EXAMEN'];
							}
							if($dato_contenido['DURACION_EXAMEN']>0 and $fecha!=NULL and $fecha!='0000-00-00' and $hora!='' and $hora!=NULL){
								$fi_examen = date_create($fecha.' '.$hora.':00');
								$fi_examen->modify('+ '.$dato_contenido['DURACION_EXAMEN'].' minute');
								$clases_examenes[$k]['FECHA_HORA_REMEDIAL']=$fecha.' '.$hora.' a '.$fi_examen->format('H:i');
							}
						}
						$clases_examenes[$k]['EXAMEN_HOY']=0;
						if($fecha==date('Y-m-d')){
							$clases_examenes[$k]['EXAMEN_HOY']=1;
						}
						$listado[]=$clases_examenes[$k];
					}
				}
				//echo json_encode($clases_examenes);
				echo json_encode($listado);
			}
		}else{
			redirect('admin/login', 'refresh');
		}
	}

	/////////////////////////////////////////////////////////////////////////////
	public function getExamenRemedial()
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,99)){
			$usuario=$this->session->userdata('loggeado');
			$id_estudiante_carrera_materia = trim($this->input->post('id_estudiante_carrera_materia'));
			$dat['ID_ESTUDIANTE_CARRERA_MATERIA']=$id_estudiante_carrera_materia;
			$clases_examenes=array();
			if($id_estudiante_carrera_materia!=NULL and $id_estudiante_carrera_materia!='' and $id_estudiante_carrera_materia>0){
				$clases_examenes = $this->academico_model->buscar_alumno_remedial($dat);
			}

			$idRubro=22;//Remedial
			$arancelExamenRemedial = $this->facturacion_model->buscarArancel(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$id_estudiante_carrera_materia, 'ID_RUBRO'=>$idRubro));
			$texto_arancel='';
			if(count($arancelExamenRemedial)>0 and isset($arancelExamenRemedial[count($arancelExamenRemedial)-1]['NOMBRE_ARANCEL']) and ($arancelExamenRemedial[count($arancelExamenRemedial)-1]['ESTADO'] == '0' or $arancelExamenRemedial[count($arancelExamenRemedial)-1]['ESTADO'] == 1)){
				$texto_arancel='<div class="alert alert-warning"><strong>Debe pagar el rubro: '.$arancelExamenRemedial[count($arancelExamenRemedial)-1]['NOMBRE_ARANCEL'].' </strong></div>';
			}

			if($usuario['ID_PERFIL']==5 and count($clases_examenes)>0){
				$clase_examen=$clases_examenes[0];
				$tabla='<table class="table table-condensed">';
				$tabla.='<tr><td><strong>NOMBRE</strong></td><td>'.$clase_examen['NOMBRE_ESTUDIANTE'].'</td><td><strong>NRO. DOCUMENTO</strong></td><td>'.$clase_examen['NRO_DOCUMENTO'].'</td></tr>';
				$tabla.='<tr><td><strong>MATERIA</strong></td><td>'.$clase_examen['MATERIA'].'</td><td><strong>GRUPO</strong></td><td>'.$clase_examen['GRUPO'].'</td></tr>';
				$tabla.='</table>';

				$tabla.='<input name="idecm" type="hidden" id="idecm" value="'.$id_estudiante_carrera_materia.'">';
				//verifico si ya tiene examen web personalizado el estudiante
				$examenes_estudiante=$this->academico_model->buscarExamenesRemediales(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$id_estudiante_carrera_materia));
				$ultimo_indice=count($examenes_estudiante)-1;
				if(count($examenes_estudiante)>0){
					$examen_estudiante=$examenes_estudiante[$ultimo_indice];
					$fecha_examen_inicio = $examen_estudiante['FECHA'].' '.$examen_estudiante['HORA'].':00';
					$ff_examen = date_create(date('Y-m-d H:i:s'));//fecha final por defecto
					$dato_contenido=$this->academico_model->getContenidoMateria($clase_examen['ID_CARRERA_MATERIA'],$clase_examen['ID_PERIODO_ACADEMICO']);
					if($dato_contenido!=NULL){
						if($dato_contenido['DURACION_EXAMEN']<=0){
							$plantilla=$this->academico_model->buscar_plantillas(array('ID_PLANTILLA'=>$dato_contenido['ID_PLANTILLA']));
							$dato_contenido['DURACION_EXAMEN']=$plantilla[0]['DURACION_EXAMEN'];
						}
						if($dato_contenido['DURACION_EXAMEN']>0 and $examen_estudiante['FECHA']!=NULL and $examen_estudiante['FECHA']!='0000-00-00' and $examen_estudiante['HORA']!='' and $examen_estudiante['HORA']!=NULL){
							$ff_examen = date_create($fecha_examen_inicio);
							$ff_examen->modify('+ '.$dato_contenido['DURACION_EXAMEN'].' minute');
						}
					}

					$fi_examen = date_create($fecha_examen_inicio);
					$f_actual = date_create(date('Y-m-d H:i:s'));
					$interval = date_diff($f_actual, $ff_examen);
					$days = $interval->format('%a');
					$seconds = 0;
					if($days){
						$seconds += 24 * 60 * 60 * $days;
					}
					$hours = $interval->format('%H');
					if($hours){
						$seconds += 60 * 60 * $hours;
					}
					$minutes = $interval->format('%i');
					if($minutes){
						$seconds += 60 * $minutes;
					}
					$seconds += $interval->format('%s');
					$seg_interval=$seconds;
				}

				if(count($examenes_estudiante)>0 and $examenes_estudiante[$ultimo_indice]['ESTADO']==1){
					$tabla.='<div class="alert alert-success">Examen Realizado. Calificaci&oacute;n: <strong>'.number_format(floatval($examenes_estudiante[$ultimo_indice]['CALIFICACION']),2).'</strong></div>';
					///VISTA DE DETALLE DEL EXAMEN PARA EL ESTUDIANTES
					//CUANTAS HA APROBADO
					//CUANTAS HA SIDO INCORRECTAS
					//CUANTAS NO HAN CONTESTADO
					$examen=$examenes_estudiante[$ultimo_indice];
					$preguntas=explode('+',$examen['IDS_PREGUNTA_CONTENIDO']);
					$opciones=explode('+',$examen['IDS_OPCION_RESPUESTA_CONTENIDO']);
					$respuestas=explode('+',$examen['IDS_RESPUESTA']);
					$correcto=0;
					foreach($preguntas as $k=>$p){
						$correcto=0;
						$tabla.='<div class="row">';
							$tabla.='<div class="col-md-6 text-right" style="text-align: right">';
								$tabla.='<label class="text-left" style="font-size:20px;">Pregunta '.($k+1).'</label> ';
							$tabla.='</div>';
							$pregunta=$this->academico_model->getPreguntasContenido(array('ID_PREGUNTA_CONTENIDO'=>$p));
							$pe=$pregunta[0];
							if(isset($respuestas[$k])){
								$opcionesSeleccionadas = explode("-", $respuestas[$k]);
							}else{
								$opcionesSeleccionadas = array();
							}
							$opcionesCorrectas     = explode("+", trim($pe['ID_OPCION_RESPUESTA_CONTENIDO'],"+"));
							$correctoPregunta = 0;
							if (count($opcionesSeleccionadas) == count($opcionesCorrectas)){
								foreach ($opcionesSeleccionadas as $oSeleccionada){
									foreach ($opcionesCorrectas as $ocorrecta){
										if ($ocorrecta == $oSeleccionada){
											$correctoPregunta++;
										}
									}
								}
							}
							if(isset($respuestas[$k]) and count($opcionesCorrectas) == $correctoPregunta){
								$correcto++;
							}
							$tabla.='<div class="col-md-6"  style="font-size:25px;">';
								if (count($opcionesSeleccionadas)==0 || $opcionesSeleccionadas[0]=="0") {
									//$tabla.= "No contest�";
									$tabla.='<span class="glyphicon glyphicon-question-sign" style="color:blue;"></span>';
								}elseif ($correcto==0) {
									//$tabla.= "Incorrecto";
									$tabla.='<span class="glyphicon glyphicon-remove-sign" style="color:red;"></span>';
								}else{
									//$tabla.= "Correcto";
									$tabla.='<span class="glyphicon glyphicon-ok-sign" style="color:green;"></span>';
								}
							$tabla.='</div>';
						$tabla.='</div><br>';
					}
				}elseif(count($examenes_estudiante)>0 and $examenes_estudiante[$ultimo_indice]['FECHA']==NULL){
					$tabla.=$texto_arancel.'<div class="alert alert-info">Fecha no asignada</strong></div>';
				}elseif(count($examenes_estudiante)>0 and $f_actual<$fi_examen){
					$tabla.=$texto_arancel.'<div class="alert alert-info">Aun no inicia examen <strong>'.$examenes_estudiante[$ultimo_indice]['FECHA'].' '.$fi_examen->format('H:i').'</strong></div>';
				}elseif(count($examenes_estudiante)>0 and $f_actual>$ff_examen){
					$tabla.=$texto_arancel.'<div class="alert alert-info">Ya finaliz&oacute; examen <strong>'.$examenes_estudiante[$ultimo_indice]['FECHA'].' '.$ff_examen->format('H:i').'</strong></div>';
					$idp = trim($this->input->post('idp'));
					if(isset($idp) and $idp==-1 and count($examenes_estudiante)>0 and $examenes_estudiante[$ultimo_indice]['ESTADO']==0){//finalizar Examen por tiempo limite
                        $examen=$examenes_estudiante[$ultimo_indice];
						$preguntas=explode('+',$examen['IDS_PREGUNTA_CONTENIDO']);
						$opciones=explode('+',$examen['IDS_OPCION_RESPUESTA_CONTENIDO']);
						$respuestas=explode('+',$examen['IDS_RESPUESTA']);
						$correcto=0;
						foreach($preguntas as $k=>$p){
							$pregunta=$this->academico_model->getPreguntasContenido(array('ID_PREGUNTA_CONTENIDO'=>$p));
							$pe=$pregunta[0];
							$opcionesSeleccionadas = array();
							if(isset($respuestas[$k])){
								$opcionesSeleccionadas = explode("-", $respuestas[$k]);
							}
							$opcionesCorrectas     = explode("+", trim($pe['ID_OPCION_RESPUESTA_CONTENIDO'],"+"));
							$correctoPregunta = 0;
							if (count($opcionesSeleccionadas) == count($opcionesCorrectas)){
								foreach ($opcionesSeleccionadas as $oSeleccionada){
									foreach ($opcionesCorrectas as $ocorrecta){
										if ($ocorrecta == $oSeleccionada){
											$correctoPregunta++;
										}
									}
								}
							}
							if(isset($respuestas[$k]) and count($opcionesCorrectas) == $correctoPregunta){
								$correcto++;
							}
						}
						$calificacion=round($correcto*10/count($preguntas),2);
						$dat_actualiza=array();
						$dat_actualiza['ESTADO']=1;
						$dat_actualiza['CALIFICACION']=$calificacion;
						$dat_actualiza['FECHA_ACTUALIZACION']=date('Y-m-d H:i:s');
						$dat_actualiza['FECHA_FIN_CONEXION']=date('Y-m-d H:i:s');
						$this->academico_model->actualizarExamenRemedial($dat_actualiza,$examen['ID_EXAMEN_REMEDIAL']);
						$tabla.='<div class="alert alert-success">Examen finalizado. Calificaci&oacute;n: <strong>'.$calificacion.'</strong></div>';
						//transpasar nota remedial
						$this->registraCalificacionComponente(0,$id_estudiante_carrera_materia,0,$calificacion);
					}
				}else if($texto_arancel!=''){//tiene arancel remedial y no esta pagado
					$tabla.=$texto_arancel;
				}else{
					$dato_contenido=$this->academico_model->getContenidoMateria($clase_examen['ID_CARRERA_MATERIA'],$clase_examen['ID_PERIODO_ACADEMICO']);
					if(count($examenes_estudiante)>0 and $examenes_estudiante[$ultimo_indice]['IDS_PREGUNTA_CONTENIDO']==NULL and $seg_interval>0){
						if($dato_contenido!=NULL){
							//verificar si existe base de preguntas para este examen
							$preguntas_clase=$this->academico_model->getPreguntasContenido(array('ID_CONTENIDO'=>$dato_contenido['ID_CONTENIDO'],'TIPO'=>'0'));
							if(count($preguntas_clase)<=0){
								//generar base de preguntas examen
								$this->generarBasePreguntasContenido(array('ID_PLANTILLA'=>$dato_contenido['ID_PLANTILLA'],'ID_CONTENIDO'=>$dato_contenido['ID_CONTENIDO']));
							}
							//generar examen web del estudiante
							$this->generarExamenRemedial($examenes_estudiante[$ultimo_indice]['ID_EXAMEN_REMEDIAL'],'0',$dato_contenido['ID_CONTENIDO']);
							$examenes_estudiante=$this->academico_model->buscarExamenesRemediales(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$id_estudiante_carrera_materia));
							$ultimo_indice=count($examenes_estudiante)-1;
						}
					}
					if(count($examenes_estudiante)>0 and $examenes_estudiante[$ultimo_indice]['IDS_PREGUNTA_CONTENIDO']!=NULL and $examenes_estudiante[$ultimo_indice]['IDS_PREGUNTA_CONTENIDO']!='' and $seg_interval>0){
						$idp = trim($this->input->post('idp'));
						$opcion_seleccionado = trim($this->input->post('op'));//respuesta
						$examen=$examenes_estudiante[$ultimo_indice];
						$preguntas=explode('+',$examen['IDS_PREGUNTA_CONTENIDO']);
						$opciones=explode('+',$examen['IDS_OPCION_RESPUESTA_CONTENIDO']);
						$respuestas=explode('+',$examen['IDS_RESPUESTA']);

						if($idp==NULL and $examen['IDS_RESPUESTA']==''){
							$idp=$preguntas[0];
						}elseif($idp==NULL){
							$idp=$preguntas[count($respuestas)-1];
						}
						if($opcion_seleccionado!=NULL and $opcion_seleccionado!=''){
							$v_opSeleccionadas = explode("+", trim($opcion_seleccionado,"+"));
							$indicePregunta = "0";

							$opcionesRespuestasSeleccionadas = "";
							foreach ($v_opSeleccionadas as $kops => $ops) {
								//guardar respuesta
								$op_select=explode('-',$ops);

								foreach($preguntas as $k=>$p){
									if($p==$op_select[0]){
										$opcionesRespuestasSeleccionadas .= "-".$op_select[1];
										$indicePregunta = $k;
										break;
									}
								}
								$respuestas[$k]= trim($opcionesRespuestasSeleccionadas,"-");
							}
							if (isset($respuestas[$indicePregunta]) && $respuestas[$indicePregunta]=="") {
								$respuestas[$indicePregunta] =0;
							}

							$res_total=implode('+',$respuestas);
							if($res_total!=$examen['IDS_RESPUESTA']){
								$dat_actualiza=array();
								$dat_actualiza['IDS_RESPUESTA']=$res_total;
								$dat_actualiza['FECHA_ACTUALIZACION']=date('Y-m-d H:i:s');
								$dat_actualiza['FECHA_FIN_CONEXION']=date('Y-m-d H:i:s');
								$this->academico_model->actualizarExamenRemedial($dat_actualiza,$examen['ID_EXAMEN_REMEDIAL']);
							}
							//cambiar de pregunta si no selecciona respuesta
							if($respuestas[$indicePregunta]==0){
								$dat_b['ID_CONTENIDO']=$dato_contenido['ID_CONTENIDO'];
								$dat_b['ALEATORIO']=1;
								$dat_b['NUM_REGISTROS']=1;
								$dat_b['TIPO']='0';
								$dat_b['EXCLUIR']=$preguntas;
								$preguntas_estudiante=$this->academico_model->getPreguntasContenido($dat_b);
								if(count($preguntas_estudiante)>0){
									$preguntas[$indicePregunta]=$preguntas_estudiante[0]['ID_PREGUNTA_CONTENIDO'];
									if(!in_array($idp,$preguntas)){
										$idp=$preguntas_estudiante[0]['ID_PREGUNTA_CONTENIDO'];
									}
									$opciones_respuesta_estudiante=$this->academico_model->getOpcionesRespuestaContenido(array('ID_PREGUNTA_CONTENIDO'=>$preguntas[$indicePregunta]));
									if(count($opciones_respuesta_estudiante)>0){
										shuffle($opciones_respuesta_estudiante);//desordenar las opciones de respuesta
										foreach($opciones_respuesta_estudiante as $ore){
											$ids_opcion_respuesta[]=$ore['ID_OPCION_RESPUESTA_CONTENIDO'];
										}
									}else{
										$ids_opcion_respuesta[]='0';
									}
									$opciones[$indicePregunta]=implode('-',$ids_opcion_respuesta);
								}
								$dat_actualiza=array();
								$dat_actualiza['IDS_PREGUNTA_CONTENIDO']=implode('+',$preguntas);
								$dat_actualiza['IDS_OPCION_RESPUESTA_CONTENIDO']=implode('+',$opciones);
								$this->academico_model->actualizarExamenRemedial($dat_actualiza,$examen['ID_EXAMEN_REMEDIAL']);
							}
						}
						if($idp==-1){//finalizar Examen
							$correcto=0;
							foreach($preguntas as $k=>$p){
								$pregunta=$this->academico_model->getPreguntasContenido(array('ID_PREGUNTA_CONTENIDO'=>$p));
								$pe=$pregunta[0];
								$opcionesSeleccionadas = explode("-", $respuestas[$k]);
								$opcionesCorrectas     = explode("+", trim($pe['ID_OPCION_RESPUESTA_CONTENIDO'],"+"));
								$correctoPregunta = 0;
								if (count($opcionesSeleccionadas) == count($opcionesCorrectas)){
									foreach ($opcionesSeleccionadas as $oSeleccionada){
										foreach ($opcionesCorrectas as $ocorrecta){
											if ($ocorrecta == $oSeleccionada){
												$correctoPregunta++;
											}
										}
									}
								}
								if(isset($respuestas[$k]) and count($opcionesCorrectas) == $correctoPregunta){
									$correcto++;
								}

							}
							$calificacion=round($correcto*10/count($preguntas),2);
							$dat_actualiza=array();
							$dat_actualiza['ESTADO']=1;
							$dat_actualiza['CALIFICACION']=$calificacion;
							$dat_actualiza['FECHA_ACTUALIZACION']=date('Y-m-d H:i:s');
							$this->academico_model->actualizarExamenRemedial($dat_actualiza,$examen['ID_EXAMEN_REMEDIAL']);
							$tabla.='<div class="alert alert-success">Examen finalizado. Calificaci&oacute;n: <strong>'.number_format(floatval($calificacion),2).'</strong></div>';
							//transpasar nota remedial
							$this->registraCalificacionComponente(0,$id_estudiante_carrera_materia,0,$calificacion);
						}else{//mostrar pregunta
							$tabla.='<table width="100%"><tr><td style="font-size:12px; color:blue">Pregunta '.(array_search($idp,$preguntas)+1).' de '.count($preguntas).'</td>';
							if($seg_interval>0){
								$tabla.='<td><div align="right" style="font-size:12px; color:blue" id="countdown"></div><script>contador('.$seg_interval.');</script></td>';
							}
							$tabla.='</tr></table>';
							foreach($preguntas as $k=>$p){
								if($idp==$p){
									$pregunta=$this->academico_model->getPreguntasContenido(array('ID_PREGUNTA_CONTENIDO'=>$p));
									$pe=$pregunta[0];
									$img='';
									if($pe['IMAGEN']!='' and file_exists(FCPATH.'archivos/contenidos/preguntas/'.$pe['IMAGEN'])){
										$img='<div class="thumbnail"><img src="'.base_url('archivos/contenidos/preguntas/')."/".$pe['IMAGEN'].'"/></div>';
									}
									$tabla.='<div class="panel panel-default">
											  <div class="panel-heading">
												<h3 class="panel-title">'.($k+1).') '.$pe['PREGUNTA'].'</h3>'.$img.'
											  </div>
											  <div class="panel-body">
												<table>';
									//obtengo las opciones de respuesta
									$opciones_respuesta=explode('-',$opciones[$k]);
									//recorrer las opciones de respuesta
									foreach($opciones_respuesta as $or){
										$opcion=$this->academico_model->getOpcionesRespuestaContenido(array('ID_OPCION_RESPUESTA_CONTENIDO'=>$or));//obtengo el texto de la opci�n de respuesta
										if(count($opcion)>0){
											$op=$opcion[0];
											$seleccionado='';
											if(isset($respuestas[$k])){

												$respuestasSeleccionadas = explode("-", $respuestas[$k]);
												if (in_array($or, $respuestasSeleccionadas)) {
													$seleccionado='checked';
												}
											}
											$img='';
											if($op['IMAGEN']!='' and file_exists(FCPATH.'archivos/contenidos/preguntas/'.$op['IMAGEN'])){
												$img='<div class="thumbnail"><img src="'.base_url('archivos/contenidos/preguntas/')."/".$op['IMAGEN'].'"/></div>';
											}
											$tabla.='<tr><td valign="top"><input required="" name="opcion_seleccionada['.$p.'][]" type="checkbox" value="'.$p.'-'.$or.'" id="opcion_respuesta'.$or.'" style="transform: scale(1.5)" class="claseopcion" '.$seleccionado.'></td><td style="padding-left:10px"><label for="opcion_respuesta'.$or.'" style="cursor: pointer">'.$op['OPCION_RESPUESTA'].' '.$img.'</label></td></tr>';
										}
									}
									$tabla.='</table>
											</div>';
									$btnSig='';
									if(isset($preguntas[$k+1])){
										$btnSig='<input type="button" name="btn_sig" id="btn_sig" value="Siguiente" class="btn btn-primary btn-sm" onclick="get_pregunta(\''.$id_estudiante_carrera_materia.'\',\''.$preguntas[$k].'\',\''.$preguntas[$k+1].'\',1)">';
									}elseif(($k+1)==count($preguntas)){
										$btnSig='<input type="button" name="btn_sig" id="btn_sig" value="FInalizar" class="btn btn-success btn-sm" onclick="get_pregunta(\''.$id_estudiante_carrera_materia.'\',\''.$preguntas[$k].'\',\'-1\',1)">';
									}
									$btnAnt='';
									if(isset($preguntas[$k-1])){
										$btnAnt='<input type="button" name="btn_ant" value="Anterior" class="btn btn-default btn-sm" onclick="get_pregunta(\''.$id_estudiante_carrera_materia.'\',\''.$preguntas[$k].'\',\''.$preguntas[$k-1].'\',1)">';
									}
									$tabla.='<div id="error-pregunta" style="color:red; text-align:right"></div>';
									$tabla.='<div class="panel-footer"><table width="100%"><tr><td align="left">'.$btnAnt.'</td><td align="right">'.$btnSig.'</td></tr></table></div>';
									$tabla.='<script>window.onblur = function() { cambiaPregunta(\''.$id_estudiante_carrera_materia.'\',\''.$preguntas[$k].'\',\''.$preguntas[$k].'\',1);console.log(\'salio de la ventana\'); }</script>';
									$tabla.='</div>';
									break;
								}
							}
						}
					}else{
						$tabla.='<div class="alert alert-danger">No existe examen configurado</div>';
					}
				}
				$respuesta=$tabla;
			}elseif($usuario['ID_PERFIL']==12 and count($clases_examenes)>0){//vista de usuario coordinador
				$clase_examen=$clases_examenes[0];
				$tabla='<table class="table table-condensed">';
				$tabla.='<tr><td><strong>NOMBRE</strong></td><td>'.$clase_examen['NOMBRE_ESTUDIANTE'].'</td><td><strong>NRO. DOCUMENTO</strong></td><td>'.$clase_examen['NRO_DOCUMENTO'].'</td></tr>';
				$tabla.='<tr><td><strong>MATERIA</strong></td><td>'.$clase_examen['MATERIA'].'</td><td><strong>GRUPO</strong></td><td>'.$clase_examen['GRUPO'].'</td></tr>';
				$tabla.='</table>';

				//verifico si ya tiene examen personalizado el estudiante
				$examenes_estudiante=$this->academico_model->buscarExamenesRemediales(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$id_estudiante_carrera_materia));
				$ultimo_indice=0;
				if(count($examenes_estudiante)>0){
					$ultimo_indice=count($examenes_estudiante)-1;
					$examen=$examenes_estudiante[$ultimo_indice];
					$fecha_examen_inicio=$examen['FECHA'].' '.$examen['HORA'].':00';
					$fi_examen = date_create($fecha_examen_inicio);
					$ff_examen = date_create(date('Y-m-d H:i:s'));//fecha final por defecto
					$dato_contenido=$this->academico_model->getContenidoMateria($clase_examen['ID_CARRERA_MATERIA'],$clase_examen['ID_PERIODO_ACADEMICO']);
					if($dato_contenido!=NULL){
						if($dato_contenido['DURACION_EXAMEN']<=0){
							$plantilla=$this->academico_model->buscar_plantillas(array('ID_PLANTILLA'=>$dato_contenido['ID_PLANTILLA']));
							$dato_contenido['DURACION_EXAMEN']=$plantilla[0]['DURACION_EXAMEN'];
						}
						if($dato_contenido['DURACION_EXAMEN']>0 and $examen['FECHA']!=NULL and $examen['FECHA']!='0000-00-00' and $examen['HORA']!='' and $examen['HORA']!=NULL){
							$ff_examen = date_create($fecha_examen_inicio);
							$ff_examen->modify('+ '.$dato_contenido['DURACION_EXAMEN'].' minute');
						}
					}
					if($examen['ESTADO']==1){
						$tabla.='<div class="alert alert-success">Examen finalizado. Calificaci&oacute;n: <strong>'.number_format(floatval($examen['CALIFICACION']),2).'</strong></div>';

						$tabla.='<table><tr><td><strong>Fecha:</strong> '.$examen['FECHA'].' <strong>Hora:</strong> '.$examen['HORA'].' a '.$ff_examen->format('H:i').'</td><tr>';
						$fci=explode(' ',$examen['FECHA_INICIO_CONEXION']);
						$fcf=explode(' ',$examen['FECHA_FIN_CONEXION']);
						$tabla.='<tr><td><strong>Inicio Conexi&oacute;n:</strong> '.$fci[1].' <strong>Fin Conexi&oacute;n:</strong> '.$fcf[1].'</td><tr></table>';
						$preguntas=explode('+',$examen['IDS_PREGUNTA_CONTENIDO']);
						$opciones=explode('+',$examen['IDS_OPCION_RESPUESTA_CONTENIDO']);
						$respuestas=explode('+',$examen['IDS_RESPUESTA']);
						///VISTA DE DETALLE DEL EXAMEN PARA EL Coordinador
						//CUANTAS HA APROBADO
						//CUANTAS HA SIDO INCORRECTAS
						//CUANTAS NO HAN CONTESTADO
						$correcto=0;
						foreach($preguntas as $k=>$p){
							$correcto=0;
							$tabla.='<div class="row">';
								$tabla.='<div class="col-md-6 text-right">';
									$tabla.='<label class="text-left" style="font-size:20px; width:110px;">pregunta '.($k+1).'</label> ';
								$tabla.='</div>';
								$pregunta=$this->academico_model->getPreguntasContenido(array('ID_PREGUNTA_CONTENIDO'=>$p));
								$pe=$pregunta[0];
								if(isset($respuestas[$k])){
									$opcionesSeleccionadas = explode("-", $respuestas[$k]);
								}else{
									$opcionesSeleccionadas = array();
								}
								$opcionesCorrectas     = explode("+", trim($pe['ID_OPCION_RESPUESTA_CONTENIDO'],"+"));
								$correctoPregunta = 0;
								if (count($opcionesSeleccionadas) == count($opcionesCorrectas)){
									foreach ($opcionesSeleccionadas as $oSeleccionada){
										foreach ($opcionesCorrectas as $ocorrecta){
											if ($ocorrecta == $oSeleccionada){
												$correctoPregunta++;
											}
										}
									}
								}
								if(isset($respuestas[$k]) and count($opcionesCorrectas) == $correctoPregunta){
									$correcto++;
								}
								$tabla.='<div class="col-md-6"  style="font-size:25px;">';
									if (count($opcionesSeleccionadas)==0 || $opcionesSeleccionadas[0]=="0") {
										//$tabla.= "No contest�";
										$tabla.='<span class="glyphicon glyphicon-question-sign" style="color:blue;"></span>';
									}elseif ($correcto==0) {
										//$tabla.= "Incorrecto";
										$tabla.='<span class="glyphicon glyphicon-remove-sign" style="color:red;"></span>';
									}else{
										//$tabla.= "Correcto";
										$tabla.='<span class="glyphicon glyphicon-ok-sign" style="color:green;"></span>';
									}
								$tabla.='</div>';
							$tabla.='</div><br>';
						}
					}
				}
				$tabla.='<div class="panel-footer"><table width="100%"><tr><td align="left"></td><td align="right"><input type="button" name="sal" value="Salir" class="btn-default btn btn-sm" id="sal" data-dismiss="modal"></td></tr></table></div>';
				$respuesta=$tabla;
			}elseif(count($clases_examenes)>0){//vista de usuario diferente de estudiante y coordinador
				$clase_examen=$clases_examenes[0];
				$cabecera='<table class="table table-condensed">';
				$cabecera.='<tr><td><strong>NOMBRE</strong></td><td>'.$clase_examen['NOMBRE_ESTUDIANTE'].'</td><td><strong>NRO. DOCUMENTO</strong></td><td>'.$clase_examen['NRO_DOCUMENTO'].'</td></tr>';
				$cabecera.='<tr><td><strong>MATERIA</strong></td><td>'.$clase_examen['MATERIA'].'</td><td><strong>GRUPO</strong></td><td>'.$clase_examen['GRUPO'].'</td></tr>';
				$cabecera.='</table>';

				//verifico si ya tiene examen personalizado el estudiante
				$examenes_estudiante=$this->academico_model->buscarExamenesRemediales(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$id_estudiante_carrera_materia));
				$tabla='';
				$tabla.=$texto_arancel;
				$option_select='';
				$ultimo_indice=0;
				if(count($examenes_estudiante)>0){
					$ultimo_indice=count($examenes_estudiante)-1;
					foreach($examenes_estudiante as $k=>$examen){
						if($examen['IDS_PREGUNTA_CONTENIDO']!=NULL){
							$d_examen=' style="display:none"';
							$btn_nuevo='';
							$selected='';
							if($ultimo_indice==$k){
								$d_examen=' style="display:block"';
								$calificaciones=$this->academico_model->get_calificaciones(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$id_estudiante_carrera_materia,'ID_TIPO_CALIFICACION'=>6));

								if(count($calificaciones)>0 and $calificaciones[0]['ESTADO_CALIFICACION']==2 and $examen['ESTADO']==1){
									$btn_nuevo='<br><input type="button" name="btn_ant" value="Nueva Fecha" class="btn btn-primary btn-xs" onclick="nuevo_examen('.count($examenes_estudiante).')"><br><br>';
								}
								$selected=' selected';
							}
							$fecha_examen_inicio=$examen['FECHA'].' '.$examen['HORA'].':00';
							$fi_examen = date_create($fecha_examen_inicio);
							$ff_examen = date_create(date('Y-m-d H:i:s'));//fecha final por defecto
							$dato_contenido=$this->academico_model->getContenidoMateria($clase_examen['ID_CARRERA_MATERIA'],$clase_examen['ID_PERIODO_ACADEMICO']);
							if($dato_contenido!=NULL){
								if($dato_contenido['DURACION_EXAMEN']<=0){
									$plantilla=$this->academico_model->buscar_plantillas(array('ID_PLANTILLA'=>$dato_contenido['ID_PLANTILLA']));
									$dato_contenido['DURACION_EXAMEN']=$plantilla[0]['DURACION_EXAMEN'];
								}
								if($dato_contenido['DURACION_EXAMEN']>0 and $examen['FECHA']!=NULL and $examen['FECHA']!='0000-00-00' and $examen['HORA']!='' and $examen['HORA']!=NULL){
									$ff_examen = date_create($fecha_examen_inicio);
									$ff_examen->modify('+ '.$dato_contenido['DURACION_EXAMEN'].' minute');
								}
							}
							$option_select.='<option value="'.$k.'" '.$selected.'>Remedial '.($k+1).'</option>';
							$tabla.='<div id="d_examen'.$k.'" '.$d_examen.'>'.$btn_nuevo;
								if($examen['ESTADO']==1){
									$tabla.='<div class="alert alert-success">Examen finalizado. Calificaci&oacute;n: <strong>'.number_format(floatval($examen['CALIFICACION']),2).'</strong></div>';

									$tabla.='<table><tr><td><strong>Fecha:</strong> '.$examen['FECHA'].' <strong>Hora:</strong> '.$examen['HORA'].' a '.$ff_examen->format('H:i').'</td><tr>';
									$fci=explode(' ',$examen['FECHA_INICIO_CONEXION']);
									$fcf=explode(' ',$examen['FECHA_FIN_CONEXION']);
									$tabla.='<tr><td><strong>Inicio Conexi&oacute;n:</strong> '.$fci[1].' <strong>Fin Conexi&oacute;n:</strong> '.$fcf[1].'</td><tr></table>';
								}elseif($examen['IDS_PREGUNTA_CONTENIDO']!=NULL and $ultimo_indice==$k){
									$tabla.='<div class="alert alert-success" id="estado_examen">Examen en proceso</strong></div>';
									$f_actual = date_create(date('Y-m-d H:i:s'));
									if(($f_actual>$ff_examen or $f_actual<$fi_examen) and $usuario['ID_PERFIL']!=12){
										$tabla.='<table class="table table-condensed"><tr><td id="celda_btnCalificar"><input type="button" name="finalizar_manual" id="finalizar_manual" value="Calificar Examen" class="btn btn-success btn-sm" onclick="finalizaExamenManual(\''.$id_estudiante_carrera_materia.'\')"></td><tr></table>';
									}
								}
								$preguntas=explode('+',$examen['IDS_PREGUNTA_CONTENIDO']);
								$opciones=explode('+',$examen['IDS_OPCION_RESPUESTA_CONTENIDO']);
								$respuestas=explode('+',$examen['IDS_RESPUESTA']);
								foreach($preguntas as $k=>$p){
									$pregunta=$this->academico_model->getPreguntasContenido(array('ID_PREGUNTA_CONTENIDO'=>$p));
									$pe=$pregunta[0];
									$img='';
									if($pe['IMAGEN']!='' and file_exists(FCPATH.'archivos/contenidos/preguntas/'.$pe['IMAGEN'])){
										$img='<div class="thumbnail"><img src="'.base_url('archivos/contenidos/preguntas/')."/".$pe['IMAGEN'].'"/></div>';
									}
									$tabla.='<div class="panel panel-default">';
										$tabla.='<div class="panel-heading">';
											$tabla.='<h3 class="panel-title">'.($k+1).') '.$pe['PREGUNTA'].'</h3>'.$img;
										$tabla.='</div>';
										$tabla.='<div class="panel-body">';
										$tabla.='<table>';
									$opciones_respuesta=explode('-',$opciones[$k]);
									$idOpcionesRespuestas = explode("+", $pe['ID_OPCION_RESPUESTA_CONTENIDO']);
									foreach($opciones_respuesta as $or){
										$opcion=$this->academico_model->getOpcionesRespuestaContenido(array('ID_OPCION_RESPUESTA_CONTENIDO'=>$or));
										if(count($opcion)>0){
											$op=$opcion[0];
											$seleccionado='';
											$opcion_correcta='';
											if(isset($respuestas[$k])){
												$respuestasSeleccionadas = explode("-", $respuestas[$k]);
												if (in_array($or, $respuestasSeleccionadas)) {
													$seleccionado='checked';
												}
											}
											if(in_array($or, $idOpcionesRespuestas)){
												$opcion_correcta=' style="background-color:#8ccc8c"';
											}
											$img='';
											if($op['IMAGEN']!='' and file_exists(FCPATH.'archivos/contenidos/preguntas/'.$op['IMAGEN'])){
												$img='<div class="thumbnail"><img src="'.base_url('archivos/contenidos/preguntas/')."/".$op['IMAGEN'].'"/></div>';
											}
											$tabla.='<tr '.$opcion_correcta.'><td valign="top"><input required="" name="opcion_seleccionada['.$p.'][]" type="checkbox" value="'.$p.'-'.$or.'" id="opcion_respuesta'.$or.'" style="transform: scale(1.5)" class="claseopcion" '.$seleccionado.' disabled></td><td style="padding-left:10px">'.$op['OPCION_RESPUESTA'].' '.$img.'</td></tr>';
										}
									}
									$tabla.='</table>
											</div>';
									$tabla.='</div>';
								}
							$tabla.='</div>';
						}
					}

				}
				$fecha='';
				$hora='';
				$d_examen=' style="display:none"';
				if(isset($examenes_estudiante[$ultimo_indice]) and $examenes_estudiante[$ultimo_indice]['ESTADO']==0 and $examenes_estudiante[$ultimo_indice]['IDS_PREGUNTA_CONTENIDO']==NULL){
					$d_examen=' style="display:block"';
					$option_select.='<option value="'.$ultimo_indice.'" selected>Remedial '.($ultimo_indice+1).'</option>';
					$fecha=$examenes_estudiante[$ultimo_indice]['FECHA'];
					$hora=$examenes_estudiante[$ultimo_indice]['HORA'];
				}elseif(!isset($examenes_estudiante[$ultimo_indice])){
					$d_examen=' style="display:block"';
				}
				if(isset($examenes_estudiante[$ultimo_indice]) and $examenes_estudiante[$ultimo_indice]['IDS_PREGUNTA_CONTENIDO']!=NULL){
					$ultimo_indice++;
				}

				$tabla.='<div id="d_examen'.$ultimo_indice.'" '.$d_examen.'>';
				$tabla.='<form name="f_examen" id="f_examen"><input name="idecm" type="hidden" id="idecm" value="'.$id_estudiante_carrera_materia.'"><div class="well well-sm"><strong>Fecha Remedial</strong><table><tr><td>Fecha</td><td>Hora</td><td></td></tr><tr><td><input name="fecha_remedial" type="text" id="fecha_remedial" value="'.$fecha.'" class="form-control" style="height:30px" required="required" autocomplete="off" /></td><td><input type="time" style="height:30px;line-height: normal" id="hora_remedial" name="hora_remedial" class="form-control" required value="'.$hora.'"></td><td width="100px" align="right" id="respuesta_fecha"><input type="button" name="btn_ant" value="Guardar" class="btn btn-primary btn-xs" onclick="guardar_fecha_examen()"></td></tr></table></div></form><script>$(\'#fecha_remedial\').datepicker({format: "yyyy-mm-dd",language: \'es\',autoclose: true,forceParse: true,enableOnReadonly: true,clearBtn: true,startDate:\''.date('Y-m-d').'\'});</script>';
				$tabla.='</div>';
				$tabla.='<div class="panel-footer"><table width="100%"><tr><td align="left"></td><td align="right"><input type="button" name="sal" value="Salir" class="btn-default btn btn-sm" id="sal" data-dismiss="modal"></td></tr></table></div>';
				if($option_select!='' and $k>0){
					$option_select='<select onChange="ver_examen(this.value)" id="select_examen" class="form-control">'.$option_select.'</select>';
				}else{
					$option_select='';
				}
				$respuesta=$cabecera.$option_select.$tabla;
			}else{
				$respuesta='No tiene examen remedial activo';
				//$respuesta='No tiene examen o Sesion Expirada. <a href="'.site_url().'/admin/login/index">Iniciar Session nuevamente AQUI</a>';
			}
			echo $respuesta;
		}else{
			echo 'Acceso Denegado';
		}
	}

	/////////////////////////////////////////////////////////////////////////////
	public function guardarFechaRemedial()
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,99)){
			$usuario=$this->session->userdata('loggeado');
			$ids_estudiante_carrera_materia = explode('+',trim($this->input->post('idecm'),'+'));
			$fecha = trim($this->input->post('fecha_remedial'));
			$hora = trim($this->input->post('hora_remedial'));
			//verifico si ya tiene examen aplazado el estudiante
			foreach($ids_estudiante_carrera_materia as $id_estudiante_carrera_materia){
				$examenes_estudiante=$this->academico_model->buscarExamenesRemediales(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$id_estudiante_carrera_materia,'ESTADO'=>'0'));
				$dat['FECHA']=$fecha;
				$dat['HORA']=$hora;
				if(count($examenes_estudiante)>0){
					//verifico si ya tiene examen web personalizado el estudiante
					$fe=$examenes_estudiante[0];
					if($fe['IDS_PREGUNTA_CONTENIDO']!=NULL){
						$respuesta= '<span style="color:red">Error: no puede actualizar remedial en proceso</span>';
					}else{
						$dat['FECHA_ACTUALIZACION']=date('Y-m-d H:i:s');
						$this->academico_model->actualizarExamenRemedial($dat,$fe['ID_EXAMEN_REMEDIAL']);
						$respuesta= 'Registro actualizado';
					}
				}else{
					$calificaciones=$this->academico_model->get_calificaciones(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$id_estudiante_carrera_materia,'ID_TIPO_CALIFICACION'=>6));
					if(count($calificaciones)>0 and $calificaciones[0]['ESTADO_CALIFICACION']==2){
						$dat['ID_ESTUDIANTE_CARRERA_MATERIA']=$id_estudiante_carrera_materia;
						$dat['TIPO_EXAMEN']=0;
						$dat['FECHA_CREACION']=date('Y-m-d H:i:s');
						$this->academico_model->crearExamenRemedial($dat);
						$respuesta= 'Registro guardado';
					}else{
						$respuesta= 'Estudiante ya aprobo';
					}
				}
			}
			if(count($ids_estudiante_carrera_materia)>1){
				echo 'Registros guardados: '.count($ids_estudiante_carrera_materia);
			}else{
				echo $respuesta;
			}
		}else{
			echo 'Acceso Denegado';
		}
	}

	/////////////////////////////////////////////////////////////////////////////
	public function generarExamenRemedial($idExamenRemedial,$tipo,$idContenido)
	{
		//if($this->session->userdata('loggeado')){
			$datos['ALEATORIO']=1;
			$datos['NUM_REGISTROS']=10;
			$datos['TIPO']=$tipo;
			$datos['ID_CONTENIDO']=$idContenido;
			$preguntas_estudiante=$this->academico_model->getPreguntasContenido($datos);
			if(count($preguntas_estudiante)>0){
				$ids_pregunta='';
				$ids_opcion_respuesta='';
				foreach($preguntas_estudiante as $pe){
					$ids_pregunta.=$pe['ID_PREGUNTA_CONTENIDO'].'+';
					$opciones_respuesta_estudiante=$this->academico_model->getOpcionesRespuestaContenido(array('ID_PREGUNTA_CONTENIDO'=>$pe['ID_PREGUNTA_CONTENIDO']));
					if(count($opciones_respuesta_estudiante)>0){
						shuffle($opciones_respuesta_estudiante);//desordenar las opciones de respuesta
						foreach($opciones_respuesta_estudiante as $ore){
							$ids_opcion_respuesta.=$ore['ID_OPCION_RESPUESTA_CONTENIDO'].'-';
						}
					}else{
						$ids_opcion_respuesta.='0-';
					}
					$ids_opcion_respuesta=trim($ids_opcion_respuesta,'-').'+';
				}
				$dat_er['IDS_PREGUNTA_CONTENIDO']=trim($ids_pregunta,'+');
				$dat_er['IDS_OPCION_RESPUESTA_CONTENIDO']=trim($ids_opcion_respuesta,'+');
				$dat_er['FECHA_ACTUALIZACION']=date('Y-m-d H:i:s');
				$dat_er['FECHA_INICIO_CONEXION']=date('Y-m-d H:i:s');
				$this->academico_model->actualizarExamenRemedial($dat_er,$idExamenRemedial);
			}
		//}
	}

	///////////////////////////////////////////////////////////////////
	public function finalizarExamenRemedial($id_estudiante_carrera_materia)
	{
		if($this->session->userdata('loggeado')){
			$examenes_estudiante=$this->academico_model->buscarExamenesRemediales(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$id_estudiante_carrera_materia,'TIPO_EXAMEN'=>'0'));
			$ultimo_indice=count($examenes_estudiante)-1;
			$examen=$examenes_estudiante[$ultimo_indice];
			$preguntas=explode('+',$examen['IDS_PREGUNTA_CONTENIDO']);
			$opciones=explode('+',$examen['IDS_OPCION_RESPUESTA_CONTENIDO']);
			$respuestas=explode('+',$examen['IDS_RESPUESTA']);
			$correcto=0;
			foreach($preguntas as $k=>$p){
				$pregunta=$this->academico_model->getPreguntasContenido(array('ID_PREGUNTA_CONTENIDO'=>$p));
				$pe=$pregunta[0];
				if(isset($respuestas[$k])){
					$opcionesSeleccionadas = explode("-", $respuestas[$k]);
					$opcionesCorrectas     = explode("+", trim($pe['ID_OPCION_RESPUESTA_CONTENIDO'],"+"));
					$correctoPregunta = 0;
					if (count($opcionesSeleccionadas) == count($opcionesCorrectas)){
						foreach ($opcionesSeleccionadas as $oSeleccionada){
							foreach ($opcionesCorrectas as $ocorrecta){
								if ($ocorrecta == $oSeleccionada){
									$correctoPregunta++;
								}
							}
						}
					}
					if(isset($respuestas[$k]) and count($opcionesCorrectas) == $correctoPregunta){
						$correcto++;
					}
				}
			}
			$calificacion=round($correcto*10/count($preguntas),2);
			$dat_actualiza=array();
			$dat_actualiza['ESTADO']=1;
			$dat_actualiza['CALIFICACION']=$calificacion;
			$dat_actualiza['FECHA_ACTUALIZACION']=date('Y-m-d H:i:s');
			$this->academico_model->actualizarExamenRemedial($dat_actualiza,$examen['ID_EXAMEN_REMEDIAL']);
			$msj='Examen Finalizado. Calificaci&oacute;n: <strong>'.number_format(floatval($calificacion),2).'</strong>';
			//transpasar nota remedial(supletorio)
			$this->registraCalificacionComponente(0,$id_estudiante_carrera_materia,0,$calificacion);
			echo $msj;
		}
	}

	//////////////////////////////////////////////////////////////////////
	public function buscaIES()
	{
		if($this->session->userdata('loggeado')){
			$data['COD_IES'] = trim($this->input->post('palabra'));
			$ies=$this->academico_model->buscar_ies($data);
			$respuesta='';
			if(count($ies)>0){
				$respuesta.='<table class="table table-condensed">';
				foreach($ies as $v){
					$respuesta.='<tr onMouseOver="this.style.backgroundColor=\'#EBFCE2\'" onMouseOut="this.style.backgroundColor=\'\'"><td id="celda_codigo_'.$v['ID_IES'].'">'.$v['CODIGO'].'</td><td id="celda_ies_'.$v['ID_IES'].'">'.$v['IES'].'</td><td><input type="button" value="Seleccionar" class="btn-warning btn btn-xs" onclick="selecciona_ies('.$v["ID_IES"].')" /></td></tr>';
				}
				$respuesta.='</table>';
			}
			if($respuesta==''){
				$respuesta='No existen resultados';
			}
			echo $respuesta;
		}else{
			echo 'Acceso Denegado';
		}
	}

	/////////////////////////////////////////////////
	public function bloqueoContenidoMora()
	{
		$id_periodo = $this->academico_model->get_periodo_activado();
		$id_carrera=null;
		$id_nivel=null;
		$grupo=null;
		//$grupo = trim($this->input->post('grupo'));
		$id_persona=null;

		$bidimensional= $this->academico_model->listaAlumnosCuotas($id_carrera, $id_nivel, $id_periodo,$grupo,$id_persona);
		$alumno=$bidimensional[0];
        $cuotas=$bidimensional[1];
		$estado_matricula=$bidimensional[2];
		$becas=$bidimensional[3];
		$id=$bidimensional[4];
		$facturas=$bidimensional[5];
		$descuentos=$bidimensional[6];
		$recibido=$bidimensional[7];
		$grupo=$bidimensional[8];

		$bloqueados='';
		$i=0;
		$g_cien=array('668V','669V','670V','671V');
		foreach($bidimensional[1] as $k=>$cuotas){
			$pagado=0;
			$total=0;
			foreach($cuotas as $c){
				$pagado+=$c['VALOR'];
				$total+=$c['TOTAL'];
			}
			$idPersona=$this->academico_model->get_id_persona($id[$k]);
			$usuario=$this->usuarios_model->obtener_datos_usuario_por_persona($idPersona);
			if($pagado<100 and $total>0 and in_array($grupo[$k],$g_cien)){
				if($usuario['ESTADO']>0){
					$i++;
					$bloqueados.=$i.') '.$alumno[$k]. ' '.$grupo[$k].'<br>';
					$this->usuarios_model->actualizarUsuario(array('ESTADO'=>2),$usuario['ID_USUARIO']);
				}
			}else if($pagado<300 and $total>0 and !in_array($grupo[$k],$g_cien)){
				if($usuario['ESTADO']>0){
					$i++;
					$bloqueados.=$i.') '.$alumno[$k]. ' '.$grupo[$k].'<br>';
					$this->usuarios_model->actualizarUsuario(array('ESTADO'=>2),$usuario['ID_USUARIO']);
				}
			}else{
				if($usuario['ESTADO']>0){
					$this->usuarios_model->actualizarUsuario(array('ESTADO'=>1),$usuario['ID_USUARIO']);
				}
			}
		}

		echo $bloqueados;
	}

	////////////////////////////////////////////////////////////////////////////////////////
	/////creacion, Persona, inscripcion y matricula de estudiantes Validaci�n Ligen/////////
	public function migracionEstudiantesValidacion()
	{
		$ip=$_SERVER['REMOTE_ADDR'];
		$this->session->set_userdata('loggeado', array('ID_USUARIO'=>0));

		$JSONData = file_get_contents("php://input");
		$datos = json_decode($JSONData,true);
		$estudiantes = $datos['ESTUDIANTES'];
		$id_carrera=$datos['ID_CARRERA'];
		$grupo=$datos['GRUPO'];
		if($grupo!=null and $grupo!=''){
			$grupos = $this->academico_model->buscar_grupos_estudiantes($grupo);
		}
		$idPeriodo=$this->academico_model->get_periodo_matricula();
		$docente_materia_planificado=array();
		$materias_carrera=array();
		if($id_carrera>0){
			$carrera=$this->academico_model->obtener_datos_carrera($id_carrera);
			for($id_nivel=1;$id_nivel<=$carrera['DURACION_EN_NIVELES'];$id_nivel++){
				$id_grupo=$this->academico_model->get_id_grupo($grupo,$id_carrera,$id_nivel);
				$materias_pla  = $this->academico_model->buscarPlanificaciones(array('ID_CARRERA'=>$id_carrera,'ID_NIVEL'=>$id_nivel,'ID_GRUPO'=>$id_grupo,'ID_PERIODO_ACADEMICO'=>$idPeriodo));
				if(count($materias_pla)>0){
					$materias_carrera  = $this->academico_model->getMateriasPorCarreraNivel($id_carrera, $id_nivel);
					foreach($materias_pla as $mp){
						foreach($materias_carrera as $k=>$m){
							if($m['ID_CARRERA_MATERIA']==$mp['ID_CARRERA_MATERIA']){
								$docente_materia_planificado[$m['ID_CARRERA_MATERIA']]=$mp['ID_PERSONA'];
							}
						}
					}
				}
			}
			$materias_carrera  = $this->academico_model->getMateriasPorCarreraNivel($id_carrera, null);
		}
		$valor=$datos['VALOR'];




		//print_r($estudiante);
		//return 0;
		$respuesta=array();
		//log vlc
		$dat=array();
		$dat['CEDULA']='';
		//$dat['ID_CARRERA']='';
		$dat['MSJ_JSON']=$JSONData;
		$num_procesado=0;
		if(is_array($estudiantes)){
			$this->load->model('clientes/clientes_model');
			$this->load->model('admin/usuarios_model');
			$this->load->model('vinculacion/vinculacion_model');
			$this->load->module('vinculacion/vinculacion');
			$error='';
			foreach($estudiantes as $dat_estudiante){
				$estudiante=$dat_estudiante['DATOS_PERSONA'];
				$persona=$this->clientes_model->buscar_persona_x_cedula(array('CEDULA'=>$estudiante['NRO_DOCUMENTO']));
				////Proceso Persona/////////////////////////////////
				$id_persona=0;
				$id_cliente=0;
				if($persona!=NULL){
					$id_persona=$persona['ID_PERSONA'];
					$id_cliente=$persona['ID_CLIENTE'];
					//$error='Error: estudiante ya existe';
				}else{

					$data=array();
					$data['PRIMER_NOMBRE']= $estudiante['PRIMER_NOMBRE'];
					$data['SEGUNDO_NOMBRE']= $estudiante['SEGUNDO_NOMBRE'];
					$data['APELLIDO_PATERNO']= $estudiante['APELLIDO_PATERNO'];
					$data['APELLIDO_MATERNO']= $estudiante['APELLIDO_MATERNO'];
					$data['ID_TIPO_CONTRIBUYENTE']= 1;
					$data['TIPO_DOCUMENTO']= $estudiante['TIPO_DOCUMENTO'];
					$data['NRO_DOCUMENTO']= $estudiante['NRO_DOCUMENTO'];
					$data['CORREO_INSTITUCIONAL']= $estudiante['CORREO_INSTITUCIONAL'];
					$data['TIENE_RUC']= $estudiante['TIENE_RUC'];
					$data['NUMERO_RUC']= $estudiante['NUMERO_RUC'];
					$data['NOMBRE_COMERCIAL']= $estudiante['NOMBRE_COMERCIAL'];
					$data['ID_TIPO_BECA']= '';
					$data['ID_NACIONALIDAD']= $estudiante['ID_NACIONALIDAD'];
					$data['FECHA_NACIMIENTO']= $estudiante['FECHA_NACIMIENTO'];
					$data['ID_PAIS_NACIMIENTO']= $estudiante['ID_PAIS_NACIMIENTO'];
					$data['ID_PROVINCIA_NACIMIENTO']= $estudiante['ID_PROVINCIA_NACIMIENTO'];
					$data['ID_CANTON_NACIMIENTO']= $estudiante['ID_CANTON_NACIMIENTO'];
					$data['ID_ESTADO_CIVIL']= $estudiante['ID_ESTADO_CIVIL'];
					$data['TIPO_SANGRE']= $estudiante['TIPO_SANGRE'];
					$data['GENERO']= $estudiante['GENERO'];
					$data['ID_GRUPO_CULTURAL']= $estudiante['ID_GRUPO_CULTURAL'];
					$data['NRO_DOCUMENTO_MILITAR']= '';
					$data['TRATO_PERSONAL']= $estudiante['TRATO_PERSONAL'];
					$data['ID_PROFESION']= $estudiante['ID_PROFESION'];
					$data['OCUPACION']= 1;
					$data['EST_COLEGIO_GRADUACION']= $estudiante['COLEGIO'];
					$data['EST_ANO_GRADUACION']= $estudiante['ANIO_GRADUACION'];
					$data['EST_PAIS_GRADUACION']= $estudiante['ID_PAIS_COLEGIO'];
					$data['EST_TITULO_BACHILLER']= $estudiante['TITULO'];
					$data['EST_COLEGIO_SECTOR']= $estudiante['EST_COLEGIO_SECTOR'];
					$data['EST_ID_TIPO_COLEGIO']= $estudiante['ID_TIPO_COLEGIO'];
					$data['EST_UNIVERSIDAD']= $estudiante['UNIVERSIDAD_INSTITUTO'];
					$data['EST_UNIVERSIDAD_GRADUACION']= $estudiante['EST_UNIVERSIDAD_GRADUACION'];
					$data['EST_UNIVERSIDAD_ESPECIALIDAD']= $estudiante['EST_UNIVERSIDAD_ESPECIALIDAD'];
					$data['EST_UNIVERSIDAD_SECTOR']= $estudiante['EST_UNIVERSIDAD_SECTOR'];
					$data['CONTRASENA']= '';
					$data['ES_DISCAPACITADO']= $estudiante['ES_DISCAPACITADO'];
					$data['PERSONA_LLAMAR_EMERGENCIA']= $estudiante['PERSONA_LLAMAR_EMERGENCIA'];
					$data['PARENTESCO_AFINIDAD']= $estudiante['PARENTESCO_AFINIDAD'];
					$data['DIRECCION_EMERGENCIA']= $estudiante['DIRECCION_EMERGENCIA'];
					$data['TELEFONO_EMERGENCIA']= $estudiante['TELEFONO_EMERGENCIA'];
					$data['CELULAR_EMERGENCIA']= $estudiante['CELULAR_EMERGENCI'];
					$data['CARNET_CONADIS']= $estudiante['CARNET_CONADIS'];
					$data['TIPO_DISCAPACIDAD']= $estudiante['TIPO_DISCAPACIDAD'];
					$data['PORCENTAJE_DICAPACIDAD']= $estudiante['PORCENTAJE_DICAPACIDAD'];
					$data['DESCRIPCION_DISCAPACIDAD']= $estudiante['DESCRIPCION_DISCAPACIDAD'];

					$data['CONTACTO_DOMICILIO']['ID_OPERADOR_TELEFONICO']='';
					if($estudiante['ID_OPERADOR_TELEFONICO']>0){
						$data['CONTACTO_DOMICILIO']['ID_OPERADOR_TELEFONICO']= $estudiante['ID_OPERADOR_TELEFONICO'];
					}
					$data['CONTACTO_DOMICILIO']['CELULAR']= $estudiante['CELULAR_PERSONAL'];
					$data['CONTACTO_DOMICILIO']['TELEFONO']= $estudiante['TELEFONO_DOMICILIO'];
					$data['CONTACTO_DOMICILIO']['CORREO_ELECTRONICO']= $estudiante['EMAIL'];
					$data['CONTACTO_DOMICILIO']['ID_PAIS']= $estudiante['ID_PAIS_DOMICILIO'];
					$data['CONTACTO_DOMICILIO']['ID_PROVINCIA']= $estudiante['ID_PROVINCIA_DOMICILIO'];
					$data['CONTACTO_DOMICILIO']['ID_CANTON']= $estudiante['ID_CANTON_DOMICILIO'];
					$data['CONTACTO_DOMICILIO']['ID_PARROQUIA']= $estudiante['ID_PARROQUIA_DOMICILIO'];
					$data['CONTACTO_DOMICILIO']['BARRIO']= $estudiante['BARRIO_DOMICILIO'];
					$data['CONTACTO_DOMICILIO']['SECTOR']= $estudiante['SECTOR_DOMICILIO'];
					$data['CONTACTO_DOMICILIO']['DIRECCION_CALLE_PRINCIPAL']= $estudiante['DIRECCION_CALLE_PRINCIPAL'];
					$data['CONTACTO_DOMICILIO']['DIRECCION_NUMERO']= $estudiante['DIRECCION_NUMERO'];
					$data['CONTACTO_DOMICILIO']['DIRECCION_CALLE_SECUNDARIA1']= $estudiante['DIRECCION_CALLE_SECUNDARIA1'];
					$data['CONTACTO_DOMICILIO']['DIRECCION_CALLE_SECUNDARIA2']= $estudiante['DIRECCION_CALLE_SECUNDARIA2'];
					$data['CONTACTO_DOMICILIO']['DIRECCION_REFERENCIA']= $estudiante['DIRECCION_REFERENCIA'];
					$data['CONTACTO_DOMICILIO']['DESCRIPCION']= $estudiante['DESCRIPCION_DOMICILIO'];

					$data['ID_CONTACTO_LABORAL']['ID_OPERADOR_TELEFONICO']='';
					$data['ID_CONTACTO_LABORAL']['CELULAR']= '';
					$data['ID_CONTACTO_LABORAL']['TELEFONO']= '';
					$data['ID_CONTACTO_LABORAL']['CORREO_ELECTRONICO']= '';
					$data['ID_CONTACTO_LABORAL']['ID_PAIS']= 0;
					$data['ID_CONTACTO_LABORAL']['ID_PROVINCIA']= 0;
					$data['ID_CONTACTO_LABORAL']['ID_CANTON']= 0;
					$data['ID_CONTACTO_LABORAL']['ID_PARROQUIA']= '';
					$data['ID_CONTACTO_LABORAL']['BARRIO']= '';
					$data['ID_CONTACTO_LABORAL']['SECTOR']= '';
					$data['ID_CONTACTO_LABORAL']['DIRECCION_CALLE_PRINCIPAL']= '';
					$data['ID_CONTACTO_LABORAL']['DIRECCION_NUMERO']= '';
					$data['ID_CONTACTO_LABORAL']['DIRECCION_CALLE_SECUNDARIA1']= '';
					$data['ID_CONTACTO_LABORAL']['DIRECCION_CALLE_SECUNDARIA2']= '';
					$data['ID_CONTACTO_LABORAL']['DIRECCION_REFERENCIA']= '';
					$data['ID_CONTACTO_LABORAL']['DESCRIPCION']= '';
					if(isset($estudiante['CONTACTOS']) and $estudiante['CONTACTOS']!=NULL and count($estudiante['CONTACTOS'])>0){
						$data['ID_CONTACTO_LABORAL']=$estudiante['CONTACTOS'];
						if($data['ID_CONTACTO_LABORAL']['ID_OPERADOR_TELEFONICO']=='0'){
							$data['ID_CONTACTO_LABORAL']['ID_OPERADOR_TELEFONICO']='';
						}
					}

					$data['Referencia_Familiar']=NULL;
					$data['Referencia_Laboral']=NULL;
					$data['Padre']=NULL;
					$data['Madre']=NULL;
					$data['Conyuge']=NULL;
					if(isset($estudiante['FAMILIA']) and count($estudiante['FAMILIA'])>0){
						foreach($estudiante['FAMILIA'] as $familia){
							if($familia['TIPO']!='Referencia_Emergencia'){
								$data[$familia['TIPO']]['ID_PERSONA_FAMILIAR']= '';
								$data[$familia['TIPO']]['NOMBRES']= $familia['NOMBRES'];
								$data[$familia['TIPO']]['EMPRESA']= $familia['EMPRESA'];
								$data[$familia['TIPO']]['CARGO_OCUPACION']= $familia['CARGO_OCUPACION'];
								$data[$familia['TIPO']]['TELEFONO']= $familia['TELEFONO'];
							}
						}
					}

					$data['FINANCIERO']=NULL;
					if(isset($estudiante['FINANCIERO']) and $estudiante['FINANCIERO']!=NULL and count($estudiante['FINANCIERO'])>0){
						$data['FINANCIERO']=$estudiante['FINANCIERO'];
						$data['FINANCIERO']['ID_PERSONA_FINANCIERO']= '';
						$data['FINANCIERO']['INDUSTRIA']= '';
					}

					/* TRABAJO CON LOS CHECKS */
					if (!isset($data['ES_BECADO'])) {
						$data['ES_BECADO'] = 0;
					}
					if (!isset($data['TIENE_RUC'])) {
						$data['TIENE_RUC'] = 0;
					}
					if (!isset($data['ES_DISCAPACITADO'])) {
						$data['ES_DISCAPACITADO'] = 0;
					}
					if (!isset($data['ES_CONTRIBUYENTE_ESPECIAL'])) {
						$data['ES_CONTRIBUYENTE_ESPECIAL'] = 0;
					}
					/*--------------------- TRABAJO CON LOS CONTACTOS ---------------------*/
					$contactoLaboral = $data['ID_CONTACTO_LABORAL'];
					$contactoDomiciliar = $data['CONTACTO_DOMICILIO'];
					unset($data['CONTACTO_DOMICILIO']);
					unset($data['ID_CONTACTO_LABORAL']);
					/*---------------------------TRABAJO CON LOS DATOS DE CLIENTE------------------------------------*/
					$cliente = array();
					$cliente['TIPO_DOCUMENTO']=$data['TIPO_DOCUMENTO'];
					$cliente['NRO_DOCUMENTO']=$data['NRO_DOCUMENTO'];
					$cliente['ID_TIPO_CONTRIBUYENTE']=$data['ID_TIPO_CONTRIBUYENTE'];
					$cliente['ES_CONTRIBUYENTE_ESPECIAL']=$data['ES_CONTRIBUYENTE_ESPECIAL'];

					unset($data['TIPO_DOCUMENTO']);
					unset($data['NRO_DOCUMENTO']);
					unset($data['ID_TIPO_CONTRIBUYENTE']);
					unset($data['ES_CONTRIBUYENTE_ESPECIAL']);

					/*--------------------- TRABAJO CON LOS datos familiares adicionales ---------------------*/
					$referenciaFamiliar = $data['Referencia_Familiar'];
					unset($data['Referencia_Familiar']);
					$referenciaLaboral = $data['Referencia_Laboral'];
					unset($data['Referencia_Laboral']);
					$padre = $data['Padre'];
					unset($data['Padre']);
					$madre = $data['Madre'];
					unset($data['Madre']);
					$conyuge = $data['Conyuge'];
					unset($data['Conyuge']);

					/*--------------------- TRABAJO CON LOS datos financieros adicionales ---------------------*/
					$financiero = $data['FINANCIERO'];
					unset($data['FINANCIERO']);
					/*-------------------------------------------------------------------------------------------------*/

					/* SE CONVIERTE A NULL TODOS LOS CAMPOS QUE VENGAN DEL FORMULARIO CON CADENA VACIA DE VALOR */
					foreach ($contactoLaboral as $key => $value) {
						if ($value === '' or $value === 0) {
							$contactoLaboral[$key] = NULL;
						}
					}
					foreach ($contactoDomiciliar as $key => $value) {
						if ($value === '' or $value === 0) {
							$contactoDomiciliar[$key] = NULL;
						}
					}
					foreach ($cliente as $key => $value) {
						if ($value === '') {
							$cliente[$key] = NULL;
						}
					}
					//print_r($data);
					foreach ($data as $key => $value) {
						if ($value === '') {
							$data[$key] = NULL;
						}
						if($value === 0){
							$data[$key] = NULL;
						}
					}
					//print_r($data);
					//return 0;
					$persona=NULL;
					////////////////////////////////////////////////////////////////////////////////////////
					$this->clientes_model->crearActualizarClienteNaturalTransaccional($persona,$data,$cliente,$contactoLaboral,$contactoDomiciliar,$referenciaFamiliar,$referenciaLaboral,$padre,$madre,$conyuge,$financiero);

					//verificar si existe usuario
					$persona=$this->clientes_model->buscar_persona_x_cedula(array('CEDULA'=>$estudiante['NRO_DOCUMENTO']));
					$usuario = $this->usuarios_model->buscar_usuarios(array('ID_PERSONA'=>$persona['ID_PERSONA']));
					if(count($usuario)<=0){
						$data_usuario['ID_PERSONA'] = $persona['ID_PERSONA'];
						$data_usuario['USUARIO']    = $estudiante['NRO_DOCUMENTO'];
						$data_usuario['CLAVE']      = md5($estudiante['NRO_DOCUMENTO']);
						$data_usuario['ESTADO']     = 1;
						$data_usuario['NOMBRE_COMPLETO']   = $data['PRIMER_NOMBRE']." ".$data['SEGUNDO_NOMBRE']." ".$data['APELLIDO_PATERNO']." ".$data['APELLIDO_MATERNO'];
						$data_usuario['NRO_DOCUMENTO']     = $estudiante['NRO_DOCUMENTO'];
						$id_usuario                        = $this->usuarios_model->crearUsuario($data_usuario);
						$data_usuario_perfil['id_usuario'] = $id_usuario;
						$data_usuario_perfil['id_perfil']  = 5;//perfil alumno
						$this->usuarios_model->crearUsuarioPerfil($data_usuario_perfil);
					}
					///////////
					//notifico al mail
					//$this->enviarCorreoElectronico($dir_correo_e, $usuario_generado, $pass );
					//////////
					///Realizar inscripci�n en carrera
					if($id_carrera>0){
						$data_inscripcion['ID_CLIENTE']=$persona['ID_CLIENTE'];
						$data_inscripcion['ID_CARRERA']=$id_carrera;
						$data_inscripcion["ID_NIVEL"]=$carrera['DURACION_EN_NIVELES'];
						$data_inscripcion["ID_PERIODO_ACADEMICO"]=$idPeriodo;
						$data_inscripcion["ID_MODALIDAD"]=$carrera['ID_MODALIDAD'];
						if(isset($grupos) and count($grupos)>0){
							$data_inscripcion["ID_SEDE"]=$grupos[0]['ID_SEDE'];
						}
						$this->academico_model->crearActualizarInscripcion($data_inscripcion);
					}
					$id_persona=$persona['ID_PERSONA'];
					$id_cliente=$persona['ID_CLIENTE'];
					if(isset($estudiante['ID_USUARIO_OFFICE']) and $estudiante['ID_USUARIO_OFFICE']!=''){
						$this->academico_model->crearUsuarioTeam(array('ID_USUARIO_OFFICE'=>$estudiante['ID_USUARIO_OFFICE'],'ID_PERSONA'=>$id_persona));
					}
				}


				////Proceso matricula/////////////////////////////////
				$materias_validadas=$dat_estudiante['MATERIAS'];
				if(count($materias_validadas)>0 and $id_persona>0 and $id_cliente>0 and $id_carrera>0){
					$matricula = $this->academico_model->obtener_matricula(array('ID_PERSONA'=>$id_persona,'ID_CARRERA'=>$id_carrera,'ESTADO'=>'0'));
					if($matricula!=NULL){
						$respuesta=array('resultado'=>'Estudiante ya est� matriculado','numero'=>'');
					}else{
						//datos para matricula
						$data=array();
						$data['ID_CLIENTE']=$id_cliente;
						$data['ID_MATRICULA']=NULL;
						$data['ID_CARRERA']=$id_carrera;
						$data['GRUPO_ASIGNADO']=$grupo;
						$data['ID_NIVEL']=$carrera['DURACION_EN_NIVELES'];
						$data['ID_PERIODO_ACADEMICO']=$idPeriodo;
						$data['ID_RUBRO_OPCIONAL']=0;
						$data['ID_MODALIDAD']=$carrera['ID_MODALIDAD'];
						$data['OPCION_PAGO']='CUARTA';
						//materias a matricular
						$idsm='';
						foreach($materias_validadas as $idm=>$mv){
							$idsm.=trim($idm,'+').'+';
						}
						$ids_materias_validadas=explode('+',trim($idsm,'+'));
						foreach($materias_carrera as $materia){
							if(in_array($materia['ID_CARRERA_MATERIA'],$ids_materias_validadas)){//filtrar materias validadas
							}else{
								$data['MATERIAS_ASIGNADAS'][$materia['ID_CARRERA_MATERIA']]=$materia['ID_CARRERA_MATERIA'];
								$data['DOCENTES_ASIGNADOS'][$materia['ID_CARRERA_MATERIA']]=0;
								if(isset($docente_materia_planificado[$materia['ID_CARRERA_MATERIA']])){
									$data['DOCENTES_ASIGNADOS'][$materia['ID_CARRERA_MATERIA']]=$docente_materia_planificado[$materia['ID_CARRERA_MATERIA']];
								}
								$data['GRUPO'][$materia['ID_CARRERA_MATERIA']]=$grupo;
							}
						}
						$data['valor']=$valor;
						$respuesta = $this->academico_model->crearActualizarMatricula($data);

						$id_matricula=0;

						//generar Tabla amortizaci�n
						$plan=$this->academico_model->seleccionado_plan_de_pago($data['ID_CLIENTE'],$data['ID_CARRERA'],$data['ID_PERIODO_ACADEMICO']);
						//sin tiene plan de p�go genero el plan personalizado de Deming
						if($plan==0){
							//aplicar plan de pagos
							$plan_pago='10-6';//6B
							$plan_pago=explode('-',$plan_pago);
							$id_plan_pago=$plan_pago[0];
							$cuotas=$plan_pago[1];
							$rubros_matricula=$this->automatica_model->get_datos_cliente_rubro($estudiante['NRO_DOCUMENTO'],$data['ID_PERIODO_ACADEMICO'],$data['ID_CARRERA']);
							foreach($rubros_matricula as $rubro){
								$id_cliente_rubro=$rubro['ID_CLIENTE_RUBRO'];
								$valor_primera_cuota=$rubro['VALOR_PRIMERA_CUOTA'];
								$valor_cuota_regular=$rubro['VALOR_CUOTA_REGULAR'];
								$valor_recargo_generacion=$rubro['VALOR_RECARGO_GENERACION'];
								$descuento_pronta_matricula=0;
								$descuento_beca=0;
								$plan_pago=4;
								//aplicar descuento Pronta Matr�cula
								if($data['ID_RUBRO_OPCIONAL']==-1){
									if($rubro['ID_RUBRO']==17){//semestre
										//$descuento = $this->rubros_model->buscar_rubros(array('rubro'=>'DESCUENTO SEMESTRE'));
										//$descuento_pronta_matricula=round(($descuento[0]['PRECIO']-15.5)/5,2);
									}
								}
								if($rubro['ID_RUBRO']==16 or $rubro['ID_RUBRO']==17){
									$plan_pago=$id_plan_pago;
								}
								if($rubro['ID_RUBRO']==17){//aplicar plan a semestre
									if($rubro['VALOR_PRIMERA_CUOTA']>=210 and $id_plan_pago==6){
										$valor_primera_cuota=210;
										$valor_cuota_regular=round(($rubro['VALOR_PRIMERA_CUOTA']-210)/($cuotas-1),2);
									}elseif($rubro['VALOR_PRIMERA_CUOTA']>=110 and $id_plan_pago==10){
										$valor_primera_cuota=110;
										$valor_cuota_regular=round(($rubro['VALOR_PRIMERA_CUOTA']-110)/($cuotas-1),2);
									}else{
										$valor_primera_cuota=round($rubro['VALOR_PRIMERA_CUOTA']/$cuotas,2);
										$valor_cuota_regular=round($rubro['VALOR_PRIMERA_CUOTA']/$cuotas,2);
									}
									if($descuento_pronta_matricula>$valor_cuota_regular){
										$descuento_pronta_matricula=$valor_cuota_regular;
									}
								}
								//aplicar beca
								/*if(isset($beca)){
									$rubros_aplica='+'.$beca['RUBROS_APLICA'].'+';
									$pos_rubro = strpos($rubros_aplica, '+'.$rubro['ID_RUBRO'].'+');
									if($pos_rubro!==false){//si a este rubro se aplica el descuento beca
										$descuento_beca=round($valor_cuota_regular*$beca['PORCENTAJE']/100,2);
									}
								}*/
								//datos matrcula
								$mat=$this->academico_model->buscar_matricula(array('ID_CLIENTE'=>$data['ID_CLIENTE'],'ID_CARRERA'=>$data['ID_CARRERA'],'ID_PERIODO_ACADEMICO'=>$data['ID_PERIODO_ACADEMICO']));
								$id_matricula=$mat[0]['ID_MATRICULA'];
								//eliminar de clientes-rubros-cuotas
								$this->automatica_model->elimiar_cuotas($id_cliente_rubro);
								$this->automatica_model->generar_nuevas_cuotas($id_cliente_rubro, $plan_pago,$valor_primera_cuota,$valor_cuota_regular, $valor_recargo_generacion,$id_cliente,$descuento_pronta_matricula,$descuento_beca,$id_matricula,$data['ID_PERIODO_ACADEMICO']);
							}//fin foreach($rubros_matricula as $rubro){
						}//fin de if($plan==0)

						//Realizar validaci�n materias
						if($id_matricula>0){
							$data=array();
							$data['ID_MATRICULA']=$id_matricula;
							$data['ID_CARRERA']=$id_carrera;
							$data['ID_NIVEL']=$carrera['DURACION_EN_NIVELES'];
							$data['ID_PERIODO_ACADEMICO']=$idPeriodo;
							//materias a validar
							$ids_materias_validadas=array();
							$notas_materias_validadas=array();
							foreach($materias_validadas as $idm=>$mv){
								$validadas=explode('+',trim($idm,'+'));
								foreach($validadas as $v){
									$ids_materias_validadas[$v]=$v;
									$notas_materias_validadas[$v]=$mv;
								}
							}
							$data['MATERIAS_CONVALIDADAS']=$ids_materias_validadas;
							$data['NOTAS_CONV']=$notas_materias_validadas;
							$data['ID_CLIENTE'] = $id_cliente;
							$respuesta = $this->academico_model->homologarConvalidar($data);
						}

						////Proceso Practicas/////////////////////////////////
						$dat_practica=$dat_estudiante['PRACTICA'];
						//if($dat_practica!=NULL and $id_matricula>0){
						if(count($dat_practica)>0 and $id_matricula>0){
							$dat_practica['ID_CARRERA'] = $id_carrera;
							$dat_practica['ID_PERSONA'] = $id_persona;
							$dat_practica['TIPO'] = 1;
							$practica=$this->vinculacion_model->buscarEvaluacionPracticaVinculacion(array('ID_CARRERA'=>$id_carrera,'ID_PERSONA'=>$id_persona,'TIPO'=>1));
							if(count($practica)<=0){
								$dat_practica['ID_PERIODO_ACADEMICO']=$idPeriodo;
								//$dat_practica['EMPRESA']=trim($this->input->post('empresa'));
								//$dat_practica['DIRECCION']=trim($this->input->post('direccion'));
								//$dat_practica['FECHA_INICIO']=trim($this->input->post('fecha_inicio'));
								//$dat_practica['FECHA_FIN']=trim($this->input->post('fecha_fin'));
								$dat_practica['HORARIO']=' / ';
								//$dat_practica['NUM_HORAS']=trim($this->input->post('horas'));
								//-$dat_practica['CONTROL_AVANCE']='';
								//-$dat_practica['RESULTADO_ALCANZADO']='';
								//-$dat_practica['EVALUACION_TUTOR']='';
								//-$dat_practica['EVALUACION_TUTOR_ACADEMICO']='';
								//-$dat_practica['EVALUACION_PROFESOR']='';
								$dat_practica['CALIFICACION']=1;
								$dat_practica['OBSERVACION']='Migrado Ligen';
								$dat_practica['ESTADO']=4;//aprobado
								$dat_practica['ID_USUARIO']=0;
								$dat_practica['FECHA_CREACION']=date('Y-m-d H:i:s');
								$this->vinculacion_model->crearEvaluacionPracticaVinculacion($dat_practica);
							}
						}elseif($id_matricula>0){
							//crear arancel de practicas
							$this->vinculacion->crearArancelVinculacion($id_matricula,1);
						}

						$num_procesado++;
					}
				}
			}

			//log vlc
			$dat['CEDULA']=count($estudiantes);
			//$dat['ID_CARRERA']=$id_carrera;
			//$dat['MSJ_JSON']=$JSONData;
		}
		//guardar log vlc
		$dat['RESULTADO']='procesados '.$num_procesado.' registros de '.count($estudiantes);
		$dat['FECHA']=date('Y-m-d H:i:s');
		$this->academico_model->crearLogInscripcionVlc($dat);
		//echo json_encode($datos);
		//print_r($datos);
		echo json_encode($dat);
	}

	/////retornar carreras a Ligen/////////////////////////////////////
    public function carrerasDeming(){
        $carreras = $this->academico_model->buscarCarrera(NULL, NULL);
        echo json_encode($carreras);
    }

    ////////////////////////////////////////////////////////////////////
    /////retornar una carrera a Ligen/////////////////////////////////////
    public function carreraDeming($id_carrera){
        $carreras = $this->academico_model->obtener_datos_carrera($id_carrera);
        echo json_encode($carreras);
    }

    ////////////////////////////////////////////////////////////////////
    /////retornar materias a Ligen/////////////////////////////////////
    public function materiasDeming($id_carrera){
        $materias = $this->academico_model->getMateriasPorCarrera($id_carrera, 1);
        echo json_encode($materias);
    }

    ////////////////////////////////////////////////////////////////////
    /////retornar una materia a Ligen/////////////////////////////////////
    public function materiaDeming($id_materia){
	    $materia = $this->academico_model->obtener_datos_materia($id_materia);
	    echo json_encode($materia);
    }

    ////////////////////////////////////////////////////////////////////
    /////retornar una nombres de los grupos/////////////////////////////////////
    public function get_nombres_grupo_deming($id_carrera){
        $id_periodo_activado = $this->academico_model->get_periodo_matricula();
        $nombres_grupo = $this ->academico_model->getNombresGrupoDeming($id_periodo_activado ,$id_carrera);
        echo json_encode($nombres_grupo);
    }

	///////////////////////////////////////////////////////////////
	//asignar proyecto a estudiantes que no ingresaron a la patalla de proyectos
	public function asignacionProyectosAutomatico()
	{
		$num_proyectos_asignar=1;
		$asignados='';
		//$fecha_cierre=date('Y-m-d');
		//$fecha_cierre='2022-04-22';
		$contenidos = $this->academico_model->listado_contenido(array('FECHA_CIERRE'=>$fecha_cierre));
		//$contenidos = $this->academico_model->listado_contenido(array('ID_PERIODO_ACADEMICO'=>15));
		if(count($contenidos)>0){
			foreach($contenidos as $contenido){
				$dato_contenido=$this->academico_model->getContenidoMateria($contenido['ID_CARRERA_MATERIA'],$contenido['ID_PERIODO_ACADEMICO']);
				$proyectos=array();
				if($dato_contenido!=NULL){
					$dat['ID_CONTENIDO']=$dato_contenido['ID_CONTENIDO'];
					$dat['TIPO']=1;
					$proyectos=$this->academico_model->getRetosProyectosContenido($dat);
					//estudiantes del grupo
					$estudiantes=$this->academico_model->get_estudiantes(array('ID_CARRERA_MATERIA'=>$contenido['ID_CARRERA_MATERIA'],'ID_PERIODO_ACADEMICO'=>$contenido['ID_PERIODO_ACADEMICO'],'ID_GRUPO'=>$contenido['ID_GRUPO']));
					$ids_persona=array();
					foreach($estudiantes as $estudiante){
						$idPersona = $estudiante['ID_PERSONA'];
						$proyectos_asignados=$this->academico_model->proyectos_realizados_estudiante($idPersona,$dato_contenido['ID_CONTENIDO']);
						//asignar proyecto al estudiante
						if(count($proyectos_asignados)<$num_proyectos_asignar and count($proyectos)>0){
							$dat_proyecto_asignado['ID_PROYECTO_CONTENIDO']=$proyectos[0]['ID_RETO_PROYECTO_CONTENIDO'];
							$dat_proyecto_asignado['ID_PERSONA']=$idPersona;
							$this->academico_model->crearRespuestaProyecto($dat_proyecto_asignado);
							$asignados.=$estudiante['ESTUDIANTE'].' -> '.$contenido['MATERIA'].'<br>';
						}
					}
				}
			}

			if($asignados==''){
				echo 'No existe proyectos '.$fecha_cierre;
			}else{
				echo 'Proyectos Asignados '.$fecha_cierre.'<br><br>'.$asignados;
			}
		}else{
			echo 'No existe proyectos '.$fecha_cierre;
		}
	}

	//corregir tabla de amortizacion colocando el rubro matricula
	public function correccionTabla()
	{
		$this->load->model('facturacion/servicios_model');
		$id_nivel = 2;
		$id_periodo_academico = 16;
		$matriculas = $this->academico_model->listaAlumnos(null, $id_nivel,$id_periodo_academico,null);
		$num=0;
		foreach($matriculas as $m){
			$pago_pendiente=$this->automatica_model->get_total_por_pagar($m['ID_MATRICULA']);
			$rubros_matricula=$this->automatica_model->get_datos_cliente_rubro($m['CEDULA'],$m['ID_PERIODO_ACADEMICO'],$m['id_carrera']);
			$tieneRubro=0;
			foreach($rubros_matricula as $rm){
				if($rm['ID_RUBRO']==19){
					$tieneRubro=1;
				}
			}
			if($pago_pendiente>0 and $tieneRubro==0){
				$resultado = $this->academico_model->obtener_rubros_semestre_del_nivel($m['id_nivel']); //RUBROS de semestre, o sea de la colegiatura.

				foreach($resultado as $res){
					if($res['ID_RUBRO']==19){//solo rubro matricula
						$this->servicios_model->asociarRubrosAClientes(array(
							'idRubro' => $res['ID_RUBRO'],
							'idCliente' =>  $m['ID_CLIENTE'],
							'idPeriodo' => $m['ID_PERIODO_ACADEMICO'],
							'idPlan' => 4,
							'idCarrera' => $m['id_carrera'],
							'idSemestre' => $m['id_nivel'],
							'nroItems' => 1,
							'valor'=>0,
							'aplicarRecargoGeneracion' => FALSE
						));
						$num++;
						echo $num.') '.$m['CEDULA'].' '.$m['NOMBRE_COMPLETO'].'<br>';
					}
				}
			}
		}
	}

	////////////////////////////////////////////////////////////////////////////
	public function recalificarReto($idPlanificacion,$idRetoContenido=0)
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado')){
			$contenidos = $this->academico_model->listado_contenido(array('ID_PLANIFICACION'=>$idPlanificacion));
			if(count($contenidos)>0){
				$contenido=$contenidos[0];
				$dato_contenido=$this->academico_model->getContenidoMateria($contenido['ID_CARRERA_MATERIA'],$contenido['ID_PERIODO_ACADEMICO']);
				$estudiantes=$this->academico_model->get_estudiantes(array('ID_CARRERA_MATERIA'=>$contenido['ID_CARRERA_MATERIA'],'ID_PERIODO_ACADEMICO'=>$contenido['ID_PERIODO_ACADEMICO'],'ID_GRUPO'=>$contenido['ID_GRUPO']));
				$preguntas=$this->academico_model->getPreguntasRetosContenido(array('ID_RETO_CONTENIDO'=>$idRetoContenido));

				$tabla='<table class="table table-condensed"><tr>';
				$tabla.='<th>Nro.</th>';
				$tabla.='<th>Estudiante</th>';
				$tabla.='<th>Recalificado</th></tr>';
				foreach($estudiantes as $e=>$estudiante){
					$correcto=0;
					$recalificado='No';
					$retos_estudiante=$this->academico_model->retos_realizados_estudiante($estudiante['ID_PERSONA'],null,$idRetoContenido);
					if(count($retos_estudiante)>0){
						$reto_estudiante=$retos_estudiante[0];
						$respuestas=explode('+',$reto_estudiante['IDS_RESPUESTA']);
						foreach($preguntas as $k=>$p){
							$pe=$p;
							$opcionesSeleccionadas = explode("-", $respuestas[$k]);
							$opcionesCorrectas     = explode("+", trim($pe['ID_OPCION_RESPUESTA_RETO_CONTENIDO'],"+"));
							$correctoPregunta = 0;
							if (count($opcionesSeleccionadas) == count($opcionesCorrectas)){
								foreach ($opcionesSeleccionadas as $oSeleccionada){
									foreach ($opcionesCorrectas as $ocorrecta){
										if ($ocorrecta == $oSeleccionada){
											$correctoPregunta++;
										}
									}
								}
							}
							if(isset($respuestas[$k]) and count($opcionesCorrectas) == $correctoPregunta){
								$correcto++;
							}
						}
						$calificacion=round($correcto*10/count($preguntas),2);
						if($calificacion!=$reto_estudiante['CALIFICACION'] and $reto_estudiante['ESTADO']==1){
							$dat_actualiza=array();
							$dat_actualiza['ESTADO']=1;
							$dat_actualiza['CALIFICACION']=$calificacion;
							$dat_actualiza['FECHA_ACTUALIZACION']=date('Y-m-d H:i:s');
							$this->academico_model->actualizarRetoEstudiante($dat_actualiza,$reto_estudiante['ID_RETO_ESTUDIANTE']);
							//transpasar nota
							$this->promedioRetoProyecto($estudiante['ID_PERSONA'],$idPlanificacion);
							$recalificado='Si';
						}
					}
					$tabla.='<tr><td>'.($e+1).'</td>';
					$tabla.='<td>'.$estudiante['ESTUDIANTE'].'</td>';
					$tabla.='<td align="center">'.$recalificado.'</td></tr>';
				}
				$tabla.='</table>';
				echo $tabla;
			}
		}else{
			echo "Sesion Terminada";
		}
	}

	/////////////////////////////////////////////////////////////////////////////
	public function preguntasImpresion($idPlantilla=0,$idReto=0)
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado')){
			$tabla='';
			if($idPlantilla>0){
				$plantillas=$this->academico_model->buscar_plantillas(array('ID_PLANTILLA'=>$idPlantilla));
				$plantilla=$plantillas[0];
				if($idReto>0){
					$reto  = $this->academico_model->getRetoProyecto($idReto);
					$preguntas=$this->academico_model->getPreguntasRetos(array('ID_RETO'=>$idReto));
					$tabla.='<title>RetoPlantilla</title>';
					$tabla.='<style type="text/css"> .tdc{ padding:3px; vertical-align:top; font-size:12px; border-bottom:solid 1px #5A5A5A }</style>';
					$tabla.='<div align="center">';
						$tabla.='<img width="100px" src="'.base_url('assets/librerias/images/lendan.jpg').'">';
					$tabla.='</div>';
					$tabla.='<div align="center">';
							$tabla.=utf8_encode('<h3>Reto Plantilla</h3>');
						$tabla.='</div>';
					$tabla.='<table width="100%" style="margin-bottom:5px; border-collapse:collapse; border:solid 1px #5A5A5A">';
						$tabla.='<tr>';
							$tabla.='<td class="tdc" align="center">';
								$tabla.='<strong>'.$plantilla['PLANTILLA'].'</strong>';
							$tabla.='</td>';
						$tabla.='</tr>';
						$tabla.='<tr>';
							$tabla.='<td class="tdc" align="center">';
								$tabla.='<strong>'.$reto['TITULO'].'</strong>';
							$tabla.='</td>';
						$tabla.='</tr>';
					$tabla.='</table>';

					foreach($preguntas as $k=>$pe){
						//$preguntas_respuestas[$k]['ID_OPCION_RESPUESTA_RETO'] = trim($pr['ID_OPCION_RESPUESTA_RETO'],"+");
						//$preguntas_respuestas[$k]['opciones_respuesta']=$this->academico_model->getOpcionesRespuestaRetos(array('ID_PREGUNTA_RETO'=>$pr['ID_PREGUNTA_RETO']));
						$img='';
						if($pe['IMAGEN']!='' and file_exists(FCPATH.'archivos/plantillas/retos/'.$pe['IMAGEN'])){
							$img='<div class="thumbnail"><img src="'.base_url('archivos/plantillas/retos')."/".$pe['IMAGEN'].'"/></div>';
						}
						$tabla.='<table width="100%" style="margin-bottom:5px; border-bottom:solid 1px #5A5A5A; break-inside: avoid">';
							$tabla.='<tr>';
							$tabla.='<td align="center" valign="top" style="width:30px"><div style="color:#FFFFFF; width:30px; background-color:#003C49;padding-top:7px; padding-bottom:7px; font-weight:bold">'.($k+1).'</div></td>';
							$tabla.='<td style="font-size:12px"><strong>'.$pe['PREGUNTA'].$img.'</strong></td>';
							$tabla.='</tr>';
							$tabla.='<tr>';
							$tabla.='<td colspan="2" style="font-size:12px">';
							$tabla.='<ol type="a">';
						$opciones_respuesta=$this->academico_model->getOpcionesRespuestaRetos(array('ID_PREGUNTA_RETO'=>$pe['ID_PREGUNTA_RETO']));
						$opcion_correcta=explode("+", trim($pe['ID_OPCION_RESPUESTA_RETO'],"+"));
						foreach($opciones_respuesta as $op){
							$seleccionado='';
							if (in_array($op['ID_OPCION_RESPUESTA_RETO'], $opcion_correcta)) {
								$seleccionado=' style="color:#052F90"';
							}
							$img='';
							if($op['IMAGEN']!='' and file_exists(FCPATH.'archivos/plantillas/retos/'.$op['IMAGEN'])){
								$img='<div class="thumbnail"><img src="'.base_url('archivos/plantillas/retos')."/".$op['IMAGEN'].'"/></div>';
							}
							$tabla.='<li '.$seleccionado.'>'.$op['OPCION_RESPUESTA'].' '.$img.'</li>';
						}
						$tabla.='</ol>
								</td>';
						$tabla.='</tr>';
						$tabla.='</table>';
					}
				}else{
					$preguntas=$this->academico_model->getPreguntas(array('ID_PLANTILLA'=>$idPlantilla));
					$tabla.='<title>ExamenPlantilla</title>';
					$tabla.='<style type="text/css"> .tdc{ padding:3px; vertical-align:top; font-size:12px; border-bottom:solid 1px #5A5A5A }</style>';
					$tabla.='<div align="center">';
						$tabla.='<img width="100px" src="'.base_url('assets/librerias/images/lendan.jpg').'">';
					$tabla.='</div>';
					$tabla.='<div align="center">';
							$tabla.=utf8_encode('<h3>Examen Plantilla</h3>');
						$tabla.='</div>';
					$tabla.='<table width="100%" style="margin-bottom:5px; border-collapse:collapse; border:solid 1px #5A5A5A">';
						$tabla.='<tr>';
							$tabla.='<td class="tdc" align="center">';
								$tabla.='<strong>'.$plantilla['PLANTILLA'].' <em>('.$plantilla['DURACION_EXAMEN'].'min)</em></strong>';
							$tabla.='</td>';
						$tabla.='</tr>';
					$tabla.='</table>';

					foreach($preguntas as $k=>$pe){
						//$preguntas_respuestas[$k]['ID_OPCION_RESPUESTA'] = trim($pr['ID_OPCION_RESPUESTA'],"+");
						//$preguntas_respuestas[$k]['opciones_respuesta']=$this->academico_model->getOpcionesRespuesta(array('ID_PREGUNTA'=>$pr['ID_PREGUNTA']));
						$img='';
						if($pe['IMAGEN']!='' and file_exists(FCPATH.'archivos/plantillas/preguntas/'.$pe['IMAGEN'])){
							$img='<div class="thumbnail"><img src="'.base_url('archivos/plantillas/preguntas')."/".$pe['IMAGEN'].'"/></div>';
						}
						$tabla.='<table width="100%" style="margin-bottom:5px; border-bottom:solid 1px #5A5A5A; break-inside: avoid">';
							$tabla.='<tr>';
							$tabla.='<td align="center" valign="top" style="width:30px"><div style="color:#FFFFFF; width:30px; background-color:#003C49;padding-top:7px; padding-bottom:7px; font-weight:bold">'.($k+1).'</div></td>';
							$tabla.='<td style="font-size:12px"><strong>'.$pe['PREGUNTA'].$img.'</strong></td>';
							$tabla.='</tr>';
							$tabla.='<tr>';
							$tabla.='<td colspan="2" style="font-size:12px">';
							$tabla.='<ol type="a">';
						$opciones_respuesta=$this->academico_model->getOpcionesRespuesta(array('ID_PREGUNTA'=>$pe['ID_PREGUNTA']));
						$opcion_correcta=explode("+", trim($pe['ID_OPCION_RESPUESTA'],"+"));
						foreach($opciones_respuesta as $op){
							$seleccionado='';
							if (in_array($op['ID_OPCION_RESPUESTA'], $opcion_correcta)) {
								$seleccionado=' style="color:#052F90"';
							}
							$img='';
							if($op['IMAGEN']!='' and file_exists(FCPATH.'archivos/plantillas/preguntas/'.$op['IMAGEN'])){
								$img='<div class="thumbnail"><img src="'.base_url('archivos/plantillas/preguntas')."/".$op['IMAGEN'].'"/></div>';
							}
							$tabla.='<li '.$seleccionado.'>'.$op['OPCION_RESPUESTA'].' '.$img.'</li>';
						}
						$tabla.='</ol>
								</td>';
						$tabla.='</tr>';
						$tabla.='</table>';
					}
				}
				$tabla.='<script type="text/javascript">window.onload=function alcargar(){ window.print();setTimeout(function() { window.close();},200);}</script>';
			}
			echo $tabla;
		}else{
			echo 'Acceso Denegado';
		}
	}

	//////Verificar si ha perdido una materia mas de 3 veces/////////
	public function consultaMateriaPerdida()
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado')){
			$idCliente=$this->input->post('idcli');
			$idCarrera=$this->input->post('idcar');
			$materia_tercera_perdida=0;
			$ultima_matricula=$this->academico_model->datos_ultima_matricula_estudiante($idCliente,$idCarrera);
			if($ultima_matricula!=NULL){
				$materias_estudiante=array();
				//todas las materias del alumno excepto validadas,homologadas,historial
				$materias  = $this->academico_model->get_materias_estudiante($ultima_matricula['ID_PERSONA'],null,null,null,$ultima_matricula['ID_CARRERA']);
				foreach($materias as $m){
					if(isset($materias_estudiante[$m['ID_CARRERA_MATERIA']])){
						$materias_estudiante[$m['ID_CARRERA_MATERIA']]++;
					}else{
						$materias_estudiante[$m['ID_CARRERA_MATERIA']]=1;
					}
					$estado=$this->academico_model->get_calificaciones(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$m['ID_ESTUDIANTE_CARRERA_MATERIA'],'ID_TIPO_CALIFICACION'=>6));
					if(isset($estado[0]) and $estado[0]['ESTADO_CALIFICACION']==1){
						$materias_estudiante[$m['ID_CARRERA_MATERIA']]--;
					}
				}
				if(count($materias_estudiante)>0){
					asort($materias_estudiante);
					if(end($materias_estudiante)>=3){
						$materia_tercera_perdida=1;
					}
				}
			}
			echo $materia_tercera_perdida;
			//print_r($materias_estudiante);
			//echo end($materias_estudiante);
		}else{
			redirect('admin/login', 'refresh');
		}
	}

	////////////////////////////////////////////////////////////////////////////
	public function recalificarExamen($idContenido=0)
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado')){
			$id_periodo_academico=$this->academico_model->get_periodo_activado();
			$usuario=$this->session->userdata('loggeado');
			$clases_examenes=array();
			$dat=array();
			$dat['ID_CONTENIDO']=$idContenido;
			//$dat['NRO_DOCUMENTO']=trim($this->input->post('nro_doc_estudiante'));
			//$dat['ID_CARRERA']=trim($this->input->post('id_carrera'));
			//$dat['GRUPO']=trim($this->input->post('grupo'));
			//$dat['FECHA_INICIO']=trim($this->input->post('fechai'));
			//$dat['FECHA_FIN']=trim($this->input->post('fechaf'));

			$fecha_actual=date_create(date('Y-m-d H:i:s'));

			$tabla='Ninguno';
			$clases_examenes=$this->academico_model->buscarGruposExamenesEstudiantes($dat);
			if(count($clases_examenes)>0){
				$tabla='<table class="table table-condensed"><tr><th colspan="4">Recalifcaciones Examen '.$clases_examenes[0]['MATERIA'].'</th></tr>';
				$tabla.='<tr><th>Nro. Documento</th>';
				$tabla.='<th>Estudiante</th>';
				$tabla.='<th>Calificacion</th>';
				$tabla.='<th>Recalificion</th></tr>';
				foreach($clases_examenes as $k=>$ce){
					$examenes_estudiante=$this->academico_model->buscarExamenesEstudiantes(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$ce['ID_ESTUDIANTE_CARRERA_MATERIA'],'ETAPA'=>1));
					if(count($examenes_estudiante)>0){
						$ee=$examenes_estudiante[0];
						if($ee['TIPO_EXAMEN']==0 and $ee['ESTADO']==1){//Examen Realizado
							$clases_examenes[$k]['ESTADO']='Realizado';
							$clases_examenes[$k]['CALIFICACION']=number_format(floatval($ee['CALIFICACION']),2);


							$preguntas=explode('+',$ee['IDS_PREGUNTA_CONTENIDO']);
							$opciones=explode('+',$ee['IDS_OPCION_RESPUESTA_CONTENIDO']);
							$respuestas=explode('+',$ee['IDS_RESPUESTA']);
							$correcto=0;
							foreach($preguntas as $k=>$p){
								$pregunta=$this->academico_model->getPreguntasContenido(array('ID_PREGUNTA_CONTENIDO'=>$p));
								$pe=$pregunta[0];
								if(isset($respuestas[$k])){
									$opcionesSeleccionadas = explode("-", $respuestas[$k]);
									$opcionesCorrectas     = explode("+", trim($pe['ID_OPCION_RESPUESTA_CONTENIDO'],"+"));
									$correctoPregunta = 0;
									if (count($opcionesSeleccionadas) == count($opcionesCorrectas)){
										foreach ($opcionesSeleccionadas as $oSeleccionada){
											foreach ($opcionesCorrectas as $ocorrecta){
												if ($ocorrecta == $oSeleccionada){
													$correctoPregunta++;
												}
											}
										}
									}
								}
								if(isset($respuestas[$k]) and count($opcionesCorrectas) == $correctoPregunta){
									$correcto++;
								}
							}
							$calificacion=round($correcto*10/count($preguntas),2);
							if($calificacion!=$ee['CALIFICACION']){
								$dat_actualiza=array();
								$dat_actualiza['CALIFICACION']=$calificacion;
								$this->academico_model->actualizarExamenEstudiante($dat_actualiza,$ee['ID_EXAMEN_ESTUDIANTE']);
								//transpasar nota examen
								$this->registraCalificacionComponente(1,$ce['ID_ESTUDIANTE_CARRERA_MATERIA'],3,$calificacion);
								$tabla.='<tr><td>'.$ce['NRO_DOCUMENTO'].'</td>';
								$tabla.='<td>'.$ce['NOMBRE_ESTUDIANTE'].'</td>';
								$tabla.='<td>'.$ee['CALIFICACION'].'</td>';
								$tabla.='<td>'.$calificacion.'</td></tr>';
							}
						}
					}
				}
				$tabla.='</table>';
			}

			echo $tabla;
		}else{
			redirect('index', 'refresh');
		}
	}

	/////////////////////////////////////////////////
	public function avisoMasivoMora($op=0)
	{
		$this->load->module('admin/usuario');
		$id_periodo = $this->academico_model->get_periodo_activado();
		$id_carrera=null;
		$id_nivel=null;
		$grupo=null;
		//$grupo = trim($this->input->post('grupo'));
		$id_persona=null;

		$bidimensional= $this->academico_model->listaAlumnosCuotas($id_carrera, $id_nivel, $id_periodo,$grupo,$id_persona);
		$alumno=$bidimensional[0];
        $cuotas=$bidimensional[1];
		$estado_matricula=$bidimensional[2];
		$becas=$bidimensional[3];
		$id=$bidimensional[4];
		$facturas=$bidimensional[5];
		$descuentos=$bidimensional[6];
		$recibido=$bidimensional[7];
		$grupo=$bidimensional[8];
		$id_carrera=$bidimensional[9];

		$avisos='<table border="1"><tr><th>Nro.</th><th>Nro Documento</th><th>Estudiante</th><th></th><th></th></tr>';
		$i=0;
		foreach($bidimensional[1] as $k=>$cuotas){
			$pagado=0;
			$total=0;
			$porpagar=0;
			foreach($cuotas as $c){
				$pagado+=$c['VALOR'];
				$total+=$c['TOTAL'];
			}
			$porpagar= $total-$pagado;

			//if($estado_matricula[$k]==-1){//en mora
				$idPersona=$this->academico_model->get_id_persona($id[$k]);
				$validaciones=$this->academico_model->get_estudianteCarreraMateria(array('ID_PERSONA'=>$idPersona,'ID_CARRERA'=>$id_carrera[$k],'FUE_CONVALIDADA'=>1));
				//$homologaciones=$this->academico_model->get_estudianteCarreraMateria(array('ID_PERSONA'=>$idPersona,'ID_CARRERA'=>$id_carrera[$k],'FUE_HOMOLOGADA'=>1));
				//if($validaciones==NULL and $homologaciones==NULL and $becas[$k]=='' and $porpagar>0){//si no es validacion / homologacion / sin beca
				if($validaciones==NULL and $porpagar>0){//si no es validacion
					$persona=$this->academico_model->get_datos_persona($idPersona);
					if($op==1){//bloqueo examenes
						$usuario=$this->usuarios_model->obtener_datos_usuario_por_persona($idPersona);
						if($usuario['ESTADO']>0){
							$i=$i+1;
							$this->usuarios_model->actualizarUsuario(array('ESTADO'=>3),$usuario['ID_USUARIO']);
							//re-agendar si examen es el 08/10/2022 y 09/10/2022
							$reagendar='';
							$dat['ID_PERSONA']=$idPersona;
							$dat['FECHA_INICIO']='2022-10-08';
							$dat['FECHA_FIN']='2022-10-09';
							$examenes=$this->academico_model->buscarGruposExamenesEstudiantes($dat);
							if(count($examenes)>0){
								$reagendar='Re agendado';
								foreach($examenes as $ee){
									//verifico si ya tiene examen aplazado el estudiante
									$examenes_estudiante_aplazados=$this->academico_model->buscarExamenesEstudiantesAplazados(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$ee['ID_ESTUDIANTE_CARRERA_MATERIA'],'ETAPA'=>1));
									$datf['FECHA_APLAZADO']='2022-10-15';
									$datf['HORA_APLAZADO']='17:00';
									if(count($examenes_estudiante_aplazados)>0){
										$idExamenEstudianteAplazado=$examenes_estudiante_aplazados[0]['ID_EXAMEN_ESTUDIANTE_APLAZADO'];
										$datf['ID_USUARIO_ACTUALIZA']=0;
										$datf['FECHA_ACTUALIZACION']=date('Y-m-d H:i:s');
										$this->academico_model->actualizarExamenEstudianteAplazado($datf,$idExamenEstudianteAplazado);
									}else{
										$datf['ETAPA']=1;
										$datf['ID_ESTUDIANTE_CARRERA_MATERIA']=$ee['ID_ESTUDIANTE_CARRERA_MATERIA'];
										$datf['ID_USUARIO']=0;
										$datf['FECHA_CREACION']=date('Y-m-d H:i:s');
										$this->academico_model->crearExamenEstudianteAplazado($datf);
									}
								}
							}
							$avisos.='<tr><td>'.$i.'</td><td>'.$persona['CEDULA'].'</td><td>'.$alumno[$k].'</td><td>'.$reagendar.'</td><td>bloqueado</td></tr>';
						}
					}elseif($op==2){//aviso de descuento en pensiones
						$i=$i+1;
						//Enviar Aviso
						$msg = "*ESTIMADO ESTUDIANTE DEMING*\n\n";
						$msg.= "El Instituto te brinda la oportunidad de acceder a un *descuento del 10%* del valor total de tu semestre.\n\n";
						$msg.= "Solo debes cancelar hasta este *28 de diciembre* el valor que tienes pendiente de tus pensiones y nosotros te descontamos *EL 10% DEL VALOR DEL SEMESTRE*.\n\n";
						$msg.= "Si quieres beneficiarte de esta oferta y deseas conocer el valor que debes pagar para obtenerla, comunícate a los siguientes números, de lunes a viernes de 8:30 a 16:00 horas.\n\n";
						$msg.= "Telf: *(02) 2250 045* / Extensiones: *124* y *104*\n\n";#DemingEsCalidad
						$msg.= "#DemingEsCalidad\n\n";
						$msg.= "* No aplica para estudiantes con beca.\n";
						$msg.= "* No aplica descuento sobre descuento.\n";
						$msg.= "\n";
						$msg.= "Mensaje creado por Bi-Academos by Binary IT: Este mensaje es automático *no responder o llamar a este número* \n";
						$res['msg']='';
						$email='';
						$celular='';
						if($_SERVER['SERVER_NAME']=="localhost" or $_SERVER['SERVER_NAME']=="[::1]"){
							$email="gmales@binary.ec";
							$celular='+5930990436142';
						}else{
							if(isset($persona['CORREO_INSTITUCIONAL']) and $persona['CORREO_INSTITUCIONAL']!=NULL and $persona['CORREO_INSTITUCIONAL']!=''){
								$email=$persona['CORREO_INSTITUCIONAL'];
							}
							if(isset($persona['CELULAR']) and $persona['CELULAR']!=NULL and $persona['CELULAR']!='' and $persona['CELULAR']!='00-0000-0000'){
								$celular='+593'.str_replace('-','',$persona['CELULAR']);
							}
						}
						$asunto = "Notificación Deming";
						if($email!=NULL and $email!=''){
							//$this->academico->enviarMailTeam($email,$asunto,$msg);
						}
						if($celular!=NULL and $celular!=''){
							//$r=$this->academico_model->get_log_vlc(array('CEDULA'=>$persona['CEDULA']));
							if($i==1){
								//if($r==NULL){
									$res=$this->usuario->enviarWhatsapp($celular,$msg);
								//}else{
								//	$res['msg']='Ya enviado';
								//}
							}
							//guardar log vlc
							/*$dat['CEDULA']=$persona['CEDULA'];
							$dat['RESULTADO']=$res['msg'];
							$dat['FECHA']=date('Y-m-d H:i:s');
							$this->academico_model->crearLogInscripcionVlc($dat);*/
						}
						$avisos.='<tr><td>'.$i.'</td><td>'.$persona['CEDULA'].'</td><td>'.$alumno[$k]. '</td><td>'.$persona['CELULAR'].' / '.$celular.'</td><td>'.$res['msg'].'</td></tr>';
					}else{

						$i=$i+1;
						//Enviar Aviso
						$msg = "🚨 *ESTUDIANTES INSTITUTO SUPERIOR TECNOLÓGICO CORPORATIVO EDWARDS DEMING- PENSIONES*\n\n";
						$msg.= "Entendemos la situación de diversa índole que puede estar atravesando, sin embargo es importante cumplir con los compromisos adquiridos para su formación, solicitamos ponerse al día con el pago de sus pensiones.\n\n";
						$msg.= "Los saldos pueden ser consultados en el sistema académico, donde además deberá registrar su comprobante de pago. \n\n";
						$msg.= "En caso de incumplimiento de su parte, se suspenderá la planificación de *exámenes*.\n\n";
						$msg.= "*Nota:* Si usted ya realizó la carga de su comprobante de pago, por favor no haga caso de este mensaje.\n";
						$msg.= "\n";
						$msg.= "Mensaje creado por Bi-Academos by Binary IT: Este mensaje es automático *no responder o llamar a este número* \n";
						$res['msg']='';
						$email='';
						$celular='';
						if($_SERVER['SERVER_NAME']=="localhost" or $_SERVER['SERVER_NAME']=="[::1]"){
							$email="gmales@binary.ec";
							$celular='+5930990436142';
						}else{
							if(isset($persona['CORREO_INSTITUCIONAL']) and $persona['CORREO_INSTITUCIONAL']!=NULL and $persona['CORREO_INSTITUCIONAL']!=''){
								$email=$persona['CORREO_INSTITUCIONAL'];
							}
							if(isset($persona['CELULAR']) and $persona['CELULAR']!=NULL and $persona['CELULAR']!='' and $persona['CELULAR']!='00-0000-0000'){
								$celular='+593'.str_replace('-','',$persona['CELULAR']);
							}
						}
						$asunto = "Notificación Deming";
						if($email!=NULL and $email!=''){
							//$this->academico->enviarMailTeam($email,$asunto,$msg);
						}
						if($celular!=NULL and $celular!=''){
							$r=$this->academico_model->get_log_vlc(array('CEDULA'=>$persona['CEDULA']));
							if($i==1){
								if($r==NULL){
									$res=$this->usuario->enviarWhatsapp($celular,$msg);
								}else{
									$res['msg']='Ya enviado';
								}
							}
							//guardar log vlc
							$dat['CEDULA']=$persona['CEDULA'];
							$dat['RESULTADO']=$res['msg'];
							$dat['FECHA']=date('Y-m-d H:i:s');
							$this->academico_model->crearLogInscripcionVlc($dat);
						}
						$avisos.='<tr><td>'.$i.'</td><td>'.$persona['CEDULA'].'</td><td>'.$alumno[$k]. '</td><td>'.$persona['CELULAR'].' / '.$celular.'</td><td>'.$res['msg'].'</td></tr>';
					}
				}
			//}
		}
		$avisos.='</table>';
		//aviso administrador
		//$this->enviarMailTeam('cvasquez@binary.ec','Bloqueo Masivo Financiero',$avisos,array(),true);
		$this->enviarMailTeam('gmales@binary.ec','aviso descuento',$avisos,array(),true);
		echo $avisos;
	}

	/////////////////////////////////////////////////
	public function reagendarSupletoriosRemediales($op=0)
	{
		if($op==0){//supletorio
			$clases_examenes=array();
			$dat=array();
			$estado_examen='-1';//pendiente
			//$dat['FECHA_INICIO_SUPLETORIO']=trim($this->input->post('fechai'));
			//$dat['FECHA_FIN_SUPLETORIO']=trim($this->input->post('fechaf'));
			$estadosExamen=array(-1=>'Pendiente',0=>'En Proceso',1=>'Realizado');
			$fecha_actual=date_create(date('Y-m-d H:i:s'));
			$listado=array();
			$clases_examenes=$this->academico_model->buscarGruposExamenesEstudiantes($dat);
			foreach($clases_examenes as $k=>$ce){
				$validaciones=$this->academico_model->get_estudianteCarreraMateria(array('ID_PERSONA'=>$ce['ID_PERSONA'],'ID_CARRERA'=>$ce['ID_CARRERA'],'FUE_CONVALIDADA'=>1));
				if($validaciones==NULL){//si no es validacion
					$clases_examenes[$k]['ETAPA']=0;
					$clases_examenes[$k]['TIPO']='';
					//verifico si ya tiene supletorio personalizado el estudiante
					$clases_examenes[$k]['ESTADO']='Pendiente';
					$clases_examenes[$k]['CALIFICACION']='';
					$examenes_estudiante=$this->academico_model->buscarExamenesEstudiantes(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$ce['ID_ESTUDIANTE_CARRERA_MATERIA'],'ETAPA'=>'0'));
					if(count($examenes_estudiante)>0){
						$ee=$examenes_estudiante[0];
						if($ee['TIPO_EXAMEN']==0 and $ee['ESTADO']==1){
							$clases_examenes[$k]['ESTADO']='Realizado';
							$clases_examenes[$k]['CALIFICACION']=number_format(floatval($ee['CALIFICACION']),2);
						}elseif($ee['TIPO_EXAMEN']==0 and $ee['ESTADO']==0){
							$clases_examenes[$k]['ESTADO']='En Proceso';
						}elseif($ee['TIPO_EXAMEN']==1){
							$clases_examenes[$k]['ESTADO']='Impreso';
						}
					}
					$clases_examenes[$k]['FECHA_HORA_SUPLETORIO']=NULL;
					$dato_contenido=$this->academico_model->getContenidoMateria($ce['ID_CARRERA_MATERIA'],$ce['ID_PERIODO_ACADEMICO']);
					if($dato_contenido!=NULL){
						if($dato_contenido['DURACION_EXAMEN']<=0){
							$plantilla=$this->academico_model->buscar_plantillas(array('ID_PLANTILLA'=>$dato_contenido['ID_PLANTILLA']));
							$dato_contenido['DURACION_EXAMEN']=$plantilla[0]['DURACION_EXAMEN'];
						}
						if($dato_contenido['DURACION_EXAMEN']>0 and $ce['FECHA_SUPLETORIO']!=NULL and $ce['FECHA_SUPLETORIO']!='0000-00-00' and $ce['HORA_SUPLETORIO']!='' and $ce['HORA_SUPLETORIO']!=NULL){
							$fi_examen = date_create($ce['FECHA_SUPLETORIO'].' '.$ce['HORA_SUPLETORIO'].':00');
							$fi_examen->modify('+ '.$dato_contenido['DURACION_EXAMEN'].' minute');
							$clases_examenes[$k]['FECHA_HORA_SUPLETORIO']=$ce['FECHA_SUPLETORIO'].'<br>'.$ce['HORA_SUPLETORIO'].' a '.$fi_examen->format('H:i');
						}
					}
					$clases_examenes[$k]['FECHA_APLAZADO']='';
					$examenes_estudiante_aplazados=$this->academico_model->buscarExamenesEstudiantesAplazados(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$ce['ID_ESTUDIANTE_CARRERA_MATERIA'],'ETAPA'=>'0'));
					if(count($examenes_estudiante_aplazados)>0){//si tiene fecha aplazado
						$aplazo=$examenes_estudiante_aplazados[0];
						$clases_examenes[$k]['FECHA_APLAZADO']=$aplazo['FECHA_APLAZADO'].'<br>'.$aplazo['HORA_APLAZADO'];
						if(isset($dato_contenido['DURACION_EXAMEN']) and $dato_contenido['DURACION_EXAMEN']>0 and $aplazo['FECHA_APLAZADO']!=NULL and $aplazo['FECHA_APLAZADO']!='0000-00-00' and $aplazo['HORA_APLAZADO']!='' and $aplazo['HORA_APLAZADO']!=NULL){
							$ff_aplazo = date_create($aplazo['FECHA_APLAZADO'].' '.$aplazo['HORA_APLAZADO'].':00');
							if($aplazo['DURACION_EXAMEN']!=NULL and $aplazo['DURACION_EXAMEN']>0){
								$ff_aplazo->modify('+ '.$aplazo['DURACION_EXAMEN'].' minute');
							}else{
								$ff_aplazo->modify('+ '.$dato_contenido['DURACION_EXAMEN'].' minute');
							}
							$clases_examenes[$k]['FECHA_APLAZADO'].=' a '.$ff_aplazo->format('H:i');
						}
					}

					//verificar que este en supletorio
					$dats['ID_ESTUDIANTE_CARRERA_MATERIA']=$ce['ID_ESTUDIANTE_CARRERA_MATERIA'];
					$dats['ID_TIPO_CALIFICACION']=6;
					$supletorio=$this->academico_model->buscar_calificacion($dats);
					if(count($supletorio)>0){
						if($supletorio[0]['ESTADO_CALIFICACION']==0 or count($examenes_estudiante)>0){
							//$listado[]=$clases_examenes[$k];
							if(isset($estado_examen) and $estado_examen!=''){
								if($clases_examenes[$k]['ESTADO']==$estadosExamen[$estado_examen]){
									$listado[]=$clases_examenes[$k];
								}
							}else{
								$listado[]=$clases_examenes[$k];
							}
						}
					}
				}
			}
			$num=0;
			$fecha='2022-10-27';
			$hora_desde='20:00';
			foreach($listado as $r){
				if($r['FECHA_APLAZADO']==''){
					$dat['FECHA_APLAZADO']=$fecha;
					$dat['HORA_APLAZADO']=$hora_desde;
					$dat['ETAPA']='0';
					$dat['ID_ESTUDIANTE_CARRERA_MATERIA']=$r['ID_ESTUDIANTE_CARRERA_MATERIA'];
					$dat['ID_USUARIO']=0;
					$dat['FECHA_CREACION']=date('Y-m-d H:i:s');
					$this->academico_model->crearExamenEstudianteAplazado($dat);
					$num++;
				}
			}
			echo 'Supletorios Reasignados: '.$num;
		}

		if($op==1){//remedial
			$clases_examenes=array();
			$dat=array();
			$fecha_actual=date_create(date('Y-m-d H:i:s'));
			$clases_examenes = $this->academico_model->buscar_alumno_remedial($dat);
			$listado=array();
			foreach($clases_examenes as $k=>$ce){
				$validaciones=$this->academico_model->get_estudianteCarreraMateria(array('ID_PERSONA'=>$ce['ID_PERSONA'],'ID_CARRERA'=>$ce['ID_CARRERA'],'FUE_CONVALIDADA'=>1));
				if($validaciones==NULL){//si no es validacion

					//verifico si ya tiene supletorio personalizado el estudiante
					$clases_examenes[$k]['ESTADO']='';
					$clases_examenes[$k]['CALIFICACION']='';
					$fecha='';
					$hora='';
					$examenes_estudiante=$this->academico_model->buscarExamenesRemediales(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$ce['ID_ESTUDIANTE_CARRERA_MATERIA']));
					if($ce['ESTADO_CALIFICACION']==2 or count($examenes_estudiante)>0){
						//tiene remedial
						if(count($examenes_estudiante)>0){
							$ee=$examenes_estudiante[count($examenes_estudiante)-1];//utlimo remedial
							if($ee['TIPO_EXAMEN']==0 and $ee['ESTADO']==1){
								$clases_examenes[$k]['ESTADO']='Realizado';
								$clases_examenes[$k]['CALIFICACION']=number_format(floatval($ee['CALIFICACION']),2);
							}elseif($ee['TIPO_EXAMEN']==0 and $ee['ESTADO']==0 and $ee['IDS_PREGUNTA_CONTENIDO']!=NULL){
								$clases_examenes[$k]['ESTADO']='En Proceso';
							}elseif($ee['TIPO_EXAMEN']==0 and $ee['ESTADO']==0){
								$clases_examenes[$k]['ESTADO']='Pendiente';
							}elseif($ee['TIPO_EXAMEN']==1){
								$clases_examenes[$k]['ESTADO']='Impreso';
							}
							$fecha=$ee['FECHA'];
							$hora=$ee['HORA'];
						}
						$clases_examenes[$k]['FECHA_HORA_REMEDIAL']=NULL;
						$dato_contenido=$this->academico_model->getContenidoMateria($ce['ID_CARRERA_MATERIA'],$ce['ID_PERIODO_ACADEMICO']);
						if($dato_contenido!=NULL and $fecha!='' and $hora!=''){
							if($dato_contenido['DURACION_EXAMEN']<=0){
								$plantilla=$this->academico_model->buscar_plantillas(array('ID_PLANTILLA'=>$dato_contenido['ID_PLANTILLA']));
								$dato_contenido['DURACION_EXAMEN']=$plantilla[0]['DURACION_EXAMEN'];
							}
							if($dato_contenido['DURACION_EXAMEN']>0 and $fecha!=NULL and $fecha!='0000-00-00' and $hora!='' and $hora!=NULL){
								$fi_examen = date_create($fecha.' '.$hora.':00');
								$fi_examen->modify('+ '.$dato_contenido['DURACION_EXAMEN'].' minute');
								$clases_examenes[$k]['FECHA_HORA_REMEDIAL']=$fecha.' '.$hora.' a '.$fi_examen->format('H:i');
							}
						}
						$clases_examenes[$k]['EXAMEN_HOY']=0;
						if($fecha==date('Y-m-d')){
							$clases_examenes[$k]['EXAMEN_HOY']=1;
						}
						$listado[]=$clases_examenes[$k];
					}
				}
			}
			$num=0;
			$fecha='2022-10-27';
			$hora='20:00';
			foreach($listado as $r){
				if($r['ESTADO']=='Pendiente'){
					$examenes_estudiante=$this->academico_model->buscarExamenesRemediales(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$r['ID_ESTUDIANTE_CARRERA_MATERIA'],'ESTADO'=>'0'));
					$dat['FECHA']=$fecha;
					$dat['HORA']=$hora;
					if(count($examenes_estudiante)>0){
						//verifico si ya tiene examen web personalizado el estudiante
						$fe=$examenes_estudiante[0];
						if($fe['IDS_PREGUNTA_CONTENIDO']==NULL){
$dat['FECHA_ACTUALIZACION']=date('Y-m-d H:i:s');
							$this->academico_model->actualizarExamenRemedial($dat,$fe['ID_EXAMEN_REMEDIAL']);
							$num++;
						}
					}
				}
			}
			echo 'Remediales Reasignados: '.$num;
		}
	}

	/////////////////////////////////////////////////////////////////////////////
	public function getRetoEstudianteImpresion($idRetoContenido,$idPersonaEstudiante)
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado')){
			$usuario=$this->session->userdata('loggeado');
			$preguntas=$this->academico_model->getPreguntasRetosContenido(array('ID_RETO_CONTENIDO'=>$idRetoContenido));
			//$clases_examenes=$this->academico_model->buscarGruposExamenesEstudiantes($dat);
			if(count($clases_examenes)>0){
				$clase_examen=$clases_examenes[0];
				$examenes_estudiante=$this->academico_model->buscarExamenesEstudiantes(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$id_estudiante_carrera_materia,'ETAPA'=>$etapa,'TIPO_EXAMEN'=>'0'));
				$docente=$this->academico_model->get_datos_docente($clase_examen['ID_PERSONA_DOCENTE']);
				$examen=$examenes_estudiante[0];
				$fecha_examen_inicio = $clase_examen['FECHA_EXAMEN'].' '.$clase_examen['HORA_EXAMEN'].':00';
				$ff_examen = date_create(date('Y-m-d H:i:s'));//fecha final por defecto
				$dato_contenido=$this->academico_model->getContenidoMateria($clase_examen['ID_CARRERA_MATERIA'],$clase_examen['ID_PERIODO_ACADEMICO']);
				if($dato_contenido!=NULL){
					if($dato_contenido['DURACION_EXAMEN']<=0){
						$plantilla=$this->academico_model->buscar_plantillas(array('ID_PLANTILLA'=>$dato_contenido['ID_PLANTILLA']));
						$dato_contenido['DURACION_EXAMEN']=$plantilla[0]['DURACION_EXAMEN'];
					}
					if($dato_contenido['DURACION_EXAMEN']>0 and $clase_examen['FECHA_EXAMEN']!=NULL and $clase_examen['FECHA_EXAMEN']!='0000-00-00' and $clase_examen['HORA_EXAMEN']!='' and $clase_examen['HORA_EXAMEN']!=NULL){
						$ff_examen = date_create($fecha_examen_inicio);
						$ff_examen->modify('+ '.$dato_contenido['DURACION_EXAMEN'].' minute');
					}
				}
				$examenes_estudiante_aplazados = $this->academico_model->buscarExamenesEstudiantesAplazados(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$id_estudiante_carrera_materia,'ETAPA'=>$etapa));
				$numPreguntasContestadas=0;
				if(count($examenes_estudiante_aplazados)>0 and $dato_contenido!=NULL){//si tiene fecha aplazado
					$aplazo=$examenes_estudiante_aplazados[0];
					$fecha_examen_inicio=$aplazo['FECHA_APLAZADO'].' '.$aplazo['HORA_APLAZADO'].':00';
					$ff_examen = date_create($fecha_examen_inicio);
					if($aplazo['DURACION_EXAMEN']!=NULL and $aplazo['DURACION_EXAMEN']>0){
						$ff_examen->modify('+ '.$aplazo['DURACION_EXAMEN'].' minute');
					}else{
						$ff_examen->modify('+ '.$dato_contenido['DURACION_EXAMEN'].' minute');
					}
				}
				$fi_examen = date_create($fecha_examen_inicio);
				$tabla='<title>Examen_Estudiante_'.$clase_examen['NRO_DOCUMENTO'].'</title>';
				$tabla.='<style type="text/css"> .tdc{ padding:3px; vertical-align:top; font-size:12px; border-bottom:solid 1px #5A5A5A }</style>';
				$tabla.='<div align="center">';
					$tabla.='<img width="100px" src="'.base_url('assets/librerias/images/lendan.jpg').'">';
				$tabla.='</div>';
				$tabla.='<div align="center">';
						$tabla.=utf8_encode('<h3>Examen en l�nea</h3>');
					$tabla.='</div>';
				$tabla.='<table width="100%" style="margin-bottom:5px; border-collapse:collapse; border:solid 1px #5A5A5A">';
					$tabla.='<tr>';
						$tabla.='<td class="tdc">';
							$tabla.='<strong>Carrera</strong>';
						$tabla.='</td>';
						$tabla.='<td class="tdc" colspan="5">'.$clase_examen['CARRERA'].'</td>';
					$tabla.='</tr>';
					$tabla.='<tr>';
						$tabla.='<td class="tdc">';
							$tabla.='<strong>Estudiante</strong>';
						$tabla.='</td>';
						$tabla.='<td class="tdc">'.$clase_examen['NOMBRE_ESTUDIANTE'].'</td>';
						$tabla.='<td class="tdc">';
							$tabla.=utf8_encode('<strong>C�dula</strong>');
						$tabla.='</td>';
						$tabla.='<td class="tdc">'.$clase_examen['NRO_DOCUMENTO'].'</td>';
						$tabla.='<td class="tdc">';
							$tabla.=utf8_encode('<strong>Calificaci�n</strong>');
						$tabla.='</td>';
						$tabla.='<td class="tdc">'.number_format(floatval($examen['CALIFICACION']),1).' / 10</td>';
					$tabla.='</tr>';
					$tabla.='<tr>';
						$tabla.='<td class="tdc">';
							$tabla.='<strong>Materia</strong>';
						$tabla.='</td>';
						$tabla.='<td class="tdc">'.$clase_examen['MATERIA'].'</td>';
						$tabla.='<td class="tdc">';
							$tabla.='<strong>Grupo</strong>';
						$tabla.='</td>';
						$tabla.='<td class="tdc">'.$clase_examen['GRUPO'].'</td>';
						$tabla.='<td class="tdc">';
							$tabla.='<strong>Fecha de examen</strong>';
						$tabla.='</td>';
						$tabla.='<td class="tdc">'.$fi_examen->format('Y-m-d H:i').'</td>';
					$tabla.='</tr>';
					$tabla.='<tr>';
						$tabla.='<td class="tdc">';
							$tabla.='<strong>Docente</strong>';
						$tabla.='</td>';
						$tabla.='<td colspan="5" class="tdc">'.$docente['APELLIDOS'].' '.$docente['NOMBRES'].'</td>';
					$tabla.='</tr>';
				$tabla.='</table>';
				$fci=explode(' ',$examen['FECHA_INICIO_CONEXION']);
				$fcf=explode(' ',$examen['FECHA_FIN_CONEXION']);
				if(isset($fci[1]) and isset($fcf[1])){
					$tabla.='<table width="100%"><tr><td class="tdc"><strong>Inicio Conexi&oacute;n:</strong> '.$fci[1].' <strong>Fin Conexi&oacute;n:</strong> '.$fcf[1].'</td><tr></table>';
				}
				$preguntas=explode('+',$examen['IDS_PREGUNTA_CONTENIDO']);
				$opciones=explode('+',$examen['IDS_OPCION_RESPUESTA_CONTENIDO']);
				$respuestas=explode('+',$examen['IDS_RESPUESTA']);
				if($examen['IDS_PREGUNTA_CONTENIDO']!='' and $examen['IDS_PREGUNTA_CONTENIDO']!=NULL){
					foreach($preguntas as $k=>$p){
						$pregunta=$this->academico_model->getPreguntasContenido(array('ID_PREGUNTA_CONTENIDO'=>$p));
						$pe=$pregunta[0];
						$img='';
						if($pe['IMAGEN']!='' and file_exists(FCPATH.'archivos/contenidos/preguntas/'.$pe['IMAGEN'])){
							$img='<div class="thumbnail"><img src="'.base_url('archivos/contenidos/preguntas')."/".$pe['IMAGEN'].'"/></div>';
						}
						$tabla.='<table width="100%" style="margin-bottom:5px; border-bottom:solid 1px #5A5A5A">';
							$tabla.='<tr>';
							$tabla.='<td align="center" valign="top" style="width:30px"><div style="color:#FFFFFF; width:30px; background-color:#003C49;padding-top:7px; padding-bottom:7px; font-weight:bold">'.($k+1).'</div></td>';
							$tabla.='<td style="font-size:12px">'.$pe['PREGUNTA'].$img.'</td>';
							$tabla.='</tr>';
							$tabla.='<tr>';
							$tabla.='<td colspan="2" style="font-size:12px">';
							$tabla.='<ol type="a">';
						$opciones_respuesta=explode('-',$opciones[$k]);
						$opcion_seleccionada=0;
						foreach($opciones_respuesta as $or){
							$opcion=$this->academico_model->getOpcionesRespuestaContenido(array('ID_OPCION_RESPUESTA_CONTENIDO'=>$or));
							$op=$opcion[0];
							$seleccionado='';
							$opcion_correcta='';
							if(isset($respuestas[$k])){
								$respuestasSeleccionadas = explode("-", $respuestas[$k]);
								if (in_array($or, $respuestasSeleccionadas)) {
									$seleccionado=' style="color:#052F90"';
									$opcion_seleccionada++;
								}
							}
							$img='';
							if($op['IMAGEN']!='' and file_exists(FCPATH.'archivos/contenidos/preguntas/'.$op['IMAGEN'])){
								$img='<div class="thumbnail"><img src="'.base_url('archivos/contenidos/preguntas')."/".$op['IMAGEN'].'"/></div>';
							}
							$tabla.='<li '.$seleccionado.'>'.$op['OPCION_RESPUESTA'].' '.$img.'</li>';
						}
						$tabla.='</ol>
								</td>';
						$tabla.='</tr>';
						$status='Incorrecto';
						if(isset($respuestas[$k])){
							$opcionesSeleccionadas = explode("-", $respuestas[$k]);
						}else{
							$opcionesSeleccionadas = array();
						}
						$opcionesCorrectas     = explode("+", trim($pe['ID_OPCION_RESPUESTA_CONTENIDO'],"+"));
						$correctoPregunta = 0;
						if (count($opcionesSeleccionadas) == count($opcionesCorrectas)){
							foreach ($opcionesSeleccionadas as $oSeleccionada){
								foreach ($opcionesCorrectas as $ocorrecta){
									if ($ocorrecta == $oSeleccionada){
										$correctoPregunta++;
									}
								}
							}
						}
						if(isset($respuestas[$k]) and count($opcionesCorrectas) == $correctoPregunta){
							$status='Correcto';
						}
						$tabla.='<tr>';
							$tabla.='<td colspan="2" style="font-size:12px"><strong>Status: '.$status.'</strong></td>';
							$tabla.='</tr>';
						$tabla.='</table>';
					}
				}
				$tabla.='<script type="text/javascript">window.onload=function alcargar(){ window.print();setTimeout(function() { window.close();},200);}</script>';
				//$tabla.='<div class="panel-footer"><table width="100%"><tr><td align="left"></td><td align="right"><input type="button" name="sal" value="Salir" class="btn-default btn btn-sm" id="sal" data-dismiss="modal"></td></tr></table></div>';
				$respuesta=$tabla;
			}
			//$this->load->view('templates/header_conexion');
			echo $respuesta;
		}else{
			echo 'Acceso Denegado';
		}
	}

	//////////////////////CRON///////////////////////////////////////
	public function generacionAutomaticaBasePreguntas()
	{
		if(!$this->session->userdata('loggeado')){
			$this->session->set_userdata('loggeado', array('ID_USUARIO'=>'0','ID_PERFIL'=>'0','ID_PERSONA'=>'0'));
		}
		if($this->session->userdata('loggeado')){
			$num=0;
			$dat['FECHA']=date('Y-m-d');
			//$dat['FECHA']='2023-02-04';
			$clases_examenes=array();
			$clases_examenes=$this->academico_model->buscarGruposExamenesEstudiantes($dat);
			if(count($clases_examenes)>0){
				foreach($clases_examenes as $ce){
					$dato_contenido=$this->academico_model->getContenidoMateria($ce['ID_CARRERA_MATERIA'],$ce['ID_PERIODO_ACADEMICO'],$ce['ID_PLANTILLA']);
					if(isset($dato_contenido['ID_CONTENIDO']) and !isset($generado[$dato_contenido['ID_CONTENIDO']])){
						$preguntas_clase=$this->academico_model->getPreguntasContenido($dato_contenido);
						if(count($preguntas_clase)<=0){
							//generar base de preguntas examen
							$this->generarBasePreguntasContenido($dato_contenido);
							$generado[$dato_contenido['ID_CONTENIDO']]=1;
							$num++;
						}
					}
				}
			}
			//$rw=$this->usuario->enviarWhatsapp('+593990436142','Vencidos: '.$num);
			$file = fopen("log_tareas_cron.txt", "a");
			fwrite($file, "generacionAutomaticaBasePreguntas : ".$num." / ".date('Y-m-d H:i:s'). PHP_EOL);
			fclose($file);
			echo 'BasePreguntas Generados: '.$num.'<br>';
			//print_r($rw);
		}
	}

	///////////////////////////////////////////////////////////
	public function getMencionCarrera()
	{
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado')){
			$usuario=$this->session->userdata('loggeado');
			$idCarrera=trim($this->input->post('idc'));
			$menciones=$this->academico_model->get_carrera_mencion($idCarrera);
			if(count($menciones)<=0){
				$menciones=null;
			}
			echo json_encode($menciones);
		}else{
			echo json_encode(array('res'=>'<script language="javascript">alert(\'Sesión ha caducado. Inicie Nuevamente\'); window.location.href="'.site_url().'/admin/login"</script>'));
		}
	}

    //////////////////////////////
    /////////// EVA //////////////
    //////////////////////////////

    public function dashboardEva(){
        $idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
        $perfil=$this->perfil_model->get_perfil($idusuario);
        if($this->session->userdata('loggeado') and ($perfil == 5 or $perfil == 4)){
            $datos1=$this->cabeceraEva();
//            print_r($datos1);
            $this->load->view('templates/headerEva',$datos1);
            $this->load->view('academico/dashboard_eva',$datos1);
            $this->load->view('templates/footerEva');
        }else{
            redirect('admin/login', 'refresh');
        }
    }

    public function cabeceraEva(){
        $id_persona=$this->session->userdata('loggeado')['ID_PERSONA'];
        $id_perfil=$this->session->userdata('loggeado')['ID_PERFIL'];
        $id_periodo_activado = $this->academico_model->get_periodo_matricula();
        $id_cliente=$this->academico_model->get_id_cliente($id_persona);
        $data['materias'] = array();
        $data['matricula'] = array();
        if ($id_perfil == 5){
            $matriculas = $this->academico_model->buscar_matricula(array('ID_PERSONA'=>$id_persona,'ID_PERIODO_ACADEMICO'=>$id_periodo_activado));
            if(count($matriculas)>0){
                foreach($matriculas as $km=>$m){
                    $matricula=$m;
                    //  $materias=$this->academico_model->get_materias_estudiante($id_persona,$id_periodo_activado,null,null,$matricula['ID_CARRERA']);//todas las materias del alumno en el periodo vigente en la carrera
                    $materias = $this -> academico_model->get_materias_estudiante_all($id_persona,$matricula['ID_CARRERA'],$id_periodo_activado);
                    // print_r($materias);
                    foreach($materias as $k=>$materia){
                        // $materias[$k]=$this->academico_model->get_materias_estudianteAll($materia['ID_ESTUDIANTE_CARRERA_MATERIA']);
                        $materias[$k]['ID_ESTUDIANTE_CARRERA_MATERIA'] = $materia['ID_ESTUDIANTE_CARRERA_MATERIA'];
                        $plantilla = $this->academico_model->get_plantilla_materia(array('ID_PLANTILLA'=>$materia['ID_PLANTILLA']));
                       	// print_r($plantilla);
                        if (count($plantilla)>0){
                            $materias[$k]['IMAGEN'] = $plantilla[0]['IMAGEN'];
                            $materias[$k]['PLANTILLA'] = $plantilla[0]['PLANTILLA'];
                        }
                        $estado = '0';//PENDIENTE
                        if(isset($materia['FECHA_TUTORIA1']) and date('Y-m-d') < $materia['FECHA_TUTORIA1']){
                            $estado = '0';//PENDIENTE
                        }elseif (isset($materia['FECHA_TUTORIA1']) and date('Y-m-d') >= $materia['FECHA_TUTORIA1'] and date('Y-m-d') <= $materia['FECHA_CIERRE']){
                            $estado = '1';//ACTIVO
                        }elseif (isset($materia['FECHA_TUTORIA1']) and date('Y-m-d') > $materia['FECHA_CIERRE']){
                            $estado = '2';//FINALIZADO
                        }
                        $materias[$k]['ESTADO_CIERRE_MATERIA'] = $estado;
                    }
                    $data['matricula']= $this->academico_model->obtener_datos_matricula($id_cliente,$matricula['ID_MATRICULA'],$id_periodo_activado);
                    $data['materias']=$materias;
					
                }
            }
        }elseif($id_perfil == 4){
            $materias = $this->academico_model->buscar_grupos_calificar(NULL, NULL, NULL,$id_persona);
            //print_r($materias);
            foreach($materias as $key=>$materia){
                if($this->academico_model->verificar_si_tiene_estudiantes($materia)==0){
                    unset($materias[$key]);
                }else{
                    $fechaCierre = $this->academico_model->get_fecha_cierre(array('ID_GRUPO'=>$materia['ID_GRUPO'],'ID_MATERIA'=>$materia['ID_MATERIA'],'ID_PERIODO_ACADEMICO'=>$id_periodo_activado));
                    $materias[$key]['ESTADO_CIERRE_CALIFICACION'] = '0';
                    if (isset($fechaCierre['FECHA_CIERRE']) and $fechaCierre['FECHA_CIERRE']!='' and $id_perfil != 5){
                        if($fechaCierre['FECHA_APLAZADO']!='0000-00-00'){
                            $datetime1 = $fechaCierre['FECHA_APLAZADO'].' 23:59:59';
                            $materias[$key]['FECHA_CIERRE_CALIFICACION'] = $fechaCierre['FECHA_APLAZADO'];
                        }else{
                            $datetime1 = $fechaCierre['FECHA_CIERRE'].' 23:59:59';
                            $materias[$key]['FECHA_CIERRE_CALIFICACION'] = $fechaCierre['FECHA_CIERRE'];
                        }
                        $datetimeActual = date('Y-m-d H:i:s');
                        $dateRestada = date("Y-m-d H:i:s",strtotime($datetime1."- 3 days"));

                        $estado = '0';//PENDIENTE
                        if($datetimeActual >= $dateRestada and $datetimeActual <= $datetime1){
                            $materias[$key]['ESTADO_CIERRE_CALIFICACION'] = '3';
                        }elseif(isset($materia['FECHA_TUTORIA1']) and date('Y-m-d') < $materia['FECHA_TUTORIA1']){
                            $estado = '0';//PENDIENTE
                        }elseif (isset($materia['FECHA_TUTORIA1']) and date('Y-m-d') >= $materia['FECHA_TUTORIA1'] and date('Y-m-d') <= $materias[$key]['FECHA_CIERRE_CALIFICACION']){
                            $estado = '1';//ACTIVO
                        }elseif (isset($materia['FECHA_TUTORIA1']) and date('Y-m-d') > $materias[$key]['FECHA_CIERRE_CALIFICACION']){
                            $estado = '2';//FINALIZADO
                        }
                        $materias[$key]['ESTADO_CIERRE_CALIFICACION'] = $estado;
                    }
                    $plantilla = $this->academico_model->get_plantilla_materia(array('ID_PLANTILLA'=>$materia['ID_PLANTILLA']));
                    if (count($plantilla)>0){
                        $materias[$key]['IMAGEN'] = $plantilla[0]['IMAGEN'];
                        $materias[$key]['PLANTILLA'] = $plantilla[0]['PLANTILLA'];
                    }
                }
            }

            // $materias[2]['ESTADO_CIERRE_CALIFICACION'] = '3';

            $data['materias']=$materias;
            $data['matricula']=$this->academico_model->get_docente($id_persona);
        }
        $data['perfil'] = $id_perfil;
        return $data;
    }

    public function detalleMateriaEstudiante($id_estudiante_carrera_materia, $id_planificacion){
        if($this->session->userdata('loggeado')){
            $idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
            $perfil=$this->perfil_model->get_perfil($idusuario);
            $id_persona_estudiante = $this->session->userdata('loggeado')['ID_PERSONA'];
            $data['materia']=$this->academico_model->get_materias_estudianteAll($id_estudiante_carrera_materia, $id_planificacion);
            $data['materia']['PERIODO']=$data['materia']['FECHA_TUTORIA1'];
            $fechast=$data['materia']['FECHA_TUTORIA2'].'+'.$data['materia']['FECHA_TUTORIA3'].'+'.$data['materia']['FECHA_TUTORIA4'].'+'.$data['materia']['FECHAS_TUTORIA'];
            $vector_ft=explode('+',$fechast);
            foreach($vector_ft as $ft){
                if($ft!='' and $ft!=NULL and $ft!='0000-00-00'){
                    $fecha_fin=$ft;
                }
            }
            if($fecha_fin!=''){
                $data['materia']['PERIODO'].=' / '.$fecha_fin;
            }

            $data['ID_ESTUDIANTE_CARRERA_MATERIA'] = $id_estudiante_carrera_materia;
            $id_periodo_academico = $this->academico_model->get_periodo_activado();
            // $data['planificacion'] = $this->academico_model->getPlanificacion($data['materia']['ID_GRUPO'],$data['materia']['ID_CARRERA_MATERIA'],$id_periodo_academico);
            $data['perfil']=$perfil;

            $dat['ID_PERIODO_ACADEMICO'] = $id_periodo_academico;
            $dat['ID_CARRERA'] = $data['materia']['ID_CARRERA'];
            $dat['ID_NIVEL'] = $data['materia']['ID_NIVEL'];
            $dat['ID_CARRERA_MATERIA'] = $data['materia']['ID_CARRERA_MATERIA'];
            $dat['ID_GRUPO'] = $data['materia']['ID_GRUPO'];
            $dat['ID_PLANIFICACION'] = $id_planificacion;
            $contenidos = $this->academico_model->listado_contenido($dat);
            $matricula = $this->academico_model->obtener_matricula(array('ID_PERSONA'=>$id_persona_estudiante,'ID_PERIODO_ACADEMICO'=>$id_periodo_academico,'ID_CARRERA'=>$data['materia']['ID_CARRERA']));
            if (count($contenidos)>0){
                foreach($contenidos as $key=>$contenido){
                    // $contenidos[$key]['num_tareas']=$this->academico_model->num_tareas_estudiantes($silabo_tarea['ID_DOCENTE_CARRERA_MATERIA'],$silabo_tarea['ID_GRUPO']);
                    $dato_contenido=$this->academico_model->getContenidoMateria($contenido['ID_CARRERA_MATERIA'],$contenido['ID_PERIODO_ACADEMICO'],$contenido['ID_PLANTILLA']);
                    $num_retos=0;
                    $num_proyectos=0;
                    $num_talleres = 0;
                    $resp_retos = 0;
                    $resp_proyectos = 0;
                    $resp_talleres = 0;
                    if($dato_contenido!=NULL){
                        $contenidos[$key]=array_merge($contenidos[$key], $dato_contenido);
                        $dat['ID_CONTENIDO']=$dato_contenido['ID_CONTENIDO'];
                        $dat['TIPO']='0';
                        $retos_estudiante = $this->academico_model->getRetosProyectosContenido($dat);
                        $num_retos=count($retos_estudiante);
                        $dat['TIPO']='1';
                        $proyectos_estudiante =$this->academico_model->getRetosProyectosContenido($dat);
                        $num_proyectos=count($proyectos_estudiante);
                        // $num_talleres = count($this->academico_model->buscar_talleres(array('ID_PLANIFICACION'=>$contenido['ID_PLANIFICACION'])));
                        $talleres_estudiante = $this->academico_model->buscar_talleres(array('ID_CARRERA_MATERIA'=>$contenido['ID_CARRERA_MATERIA'],'ID_PERIODO_ACADEMICO'=>$contenido['ID_PERIODO_ACADEMICO'],'ID_GRUPO'=>$contenido['ID_GRUPO'],'ID_PLANTILLA'=>$contenido['ID_PLANTILLA']));
                        $num_talleres = count($talleres_estudiante);
                        if($num_proyectos>1 and $perfil==5){
                            $num_proyectos=1;
                        }
                        //NRO RESPUESTAS ESTUDIANTE
                        foreach ($retos_estudiante as $reto){
                            $data_r['ID_RETO_CONTENIDO']=$reto['ID_RETO_PROYECTO_CONTENIDO'];
                            $data_r['ID_PERSONA'] = $id_persona_estudiante;
                            $respuestas=$this->academico_model->buscar_retos_estudiantes($data_r);
                            if (count($respuestas)>0){
                                $resp_retos++;
                            }
                        }

                        foreach ($proyectos_estudiante as $k => $proyecto){
                            $respuestas=$this->academico_model->proyectos_realizados_estudiante($id_persona_estudiante,null,$proyecto['ID_RETO_PROYECTO_CONTENIDO']);
                            if(count($respuestas)>0){
                                $resp_proyectos = $this->academico_model->num_respuestasProyectos_estudiantes($proyecto['ID_RETO_PROYECTO_CONTENIDO'],$id_persona_estudiante);
                            }else{
                                unset($proyectos_estudiante[$k]);
                            }
                        //    $resp_proyectos = $this->academico_model->num_respuestasProyectos_estudiantes($proyecto['ID_RETO_PROYECTO_CONTENIDO'],$id_persona_estudiante);
                        }

                        foreach ($talleres_estudiante as $taller){
                            $data_t['ID_TALLER']    = $taller['ID_TALLER'];
                            $data_t['ID_PERSONA']   = $id_persona_estudiante;
                            $respuestas=$this->academico_model->buscar_respuestas_taller($data_t);
                            if (count($respuestas)>0){
                                $resp_talleres++;
                            }
                        }

                    }
                    $contenidos[$key]['num_retos']     = $num_retos;
                    $contenidos[$key]['num_proyectos'] = $num_proyectos;
                    $contenidos[$key]['num_talleres']  = $num_talleres;
                    $contenidos[$key]['num_resp_retos']     = $resp_retos;
                    $contenidos[$key]['num_resp_proyectos'] = $resp_proyectos;
                    $contenidos[$key]['num_resp_talleres']  = $resp_talleres;
                    $contenidos[$key]['aulaVirtual']   = $this->academico_model->buscar_aulaVirtual(array('ID_CARRERA_MATERIA'=>$contenido['ID_CARRERA_MATERIA'],'ID_PERIODO_ACADEMICO'=>$contenido['ID_PERIODO_ACADEMICO'],'ID_GRUPO'=>$contenido['ID_GRUPO'], 'ID_PLANTILLA'=>$contenido['ID_PLANTILLA']));
                    $contenidos[$key]['PERIODO']=$contenido['FECHA_TUTORIA1'];

                    $fecha_fin='';
                    $fechast=$contenido['FECHA_TUTORIA2'].'+'.$contenido['FECHA_TUTORIA3'].'+'.$contenido['FECHA_TUTORIA4'].'+'.$contenido['FECHAS_TUTORIA'];
                    $vector_ft=explode('+',$fechast);
                    $contenidos[$key]['HOY']=0;
                    if($contenido['FECHA_TUTORIA1']==date('Y-m-d')){
                        $contenidos[$key]['HOY']=1;
                    }
                    foreach($vector_ft as $ft){
                        if($ft!='' and $ft!=NULL and $ft!='0000-00-00'){
                            $fecha_fin=$ft;
                        }
                        if($ft==date('Y-m-d')){
                            $contenidos[$key]['HOY']=1;
                        }
                    }
                    if($fecha_fin!=''){
                        $contenidos[$key]['PERIODO'].='<br>'.$fecha_fin;
                    }
                    $contenidos[$key]['BLOQUEO_FECHA']=0;
                    if($perfil==5 or $perfil==12){//vista estudiante y coordinador
                        $fecha_inicio=date_create($contenido['FECHA_TUTORIA1'].' 00:00:00');
                        $fecha_actual=date_create(date('Y-m-d H:i:s'));
                        if($fecha_inicio>$fecha_actual){
                            $contenidos[$key]['BLOQUEO_FECHA']=1;
                        }
                    }
                    $log_guia = $this->academico_model->getLogGuia($id_estudiante_carrera_materia);
                    if(count($contenidos)>0 and $matricula!=NULL and $matricula['ESTADO']==0){
                        $contenidos[$key]['ID_ESTUDIANTE_CARRERA_MATERIA']=$id_estudiante_carrera_materia;
                        $contenidos[$key]['BLOQUEO']=0;
                        if($log_guia['ID_LOG_GUIA']==NULL){
                            $contenidos[$key]['BLOQUEO']=1;
                        }
                    }

					if($contenido['ID_PLANTILLA']>0){
                        $pla=$this->academico_model->get_plantilla($contenido['ID_PLANTILLA']);
                        if($pla!=NULL){
                            $data['materia']['MATERIA']=$contenido['MATERIA'].'<p class="text-success">'.$pla['PLANTILLA'].'</p>';
                        }
                    }

					//EXAMENES MATERIA
					$data['examenes'] = $this->getExamenesMateriaEstudiante($id_persona_estudiante, $id_estudiante_carrera_materia, $contenido['ID_PLANTILLA']);
					$data['supletorios'] = $this->getSupletoriosMateriaEstudiante($id_persona_estudiante, $id_estudiante_carrera_materia, $contenido['ID_PLANTILLA']);
					$data['remediales'] = $this->getRemedialesMateriasEstudiante($id_persona_estudiante, $id_estudiante_carrera_materia);
                }

                $data['contenido'] = $contenidos[0];
                $data['material_apoyo'] = $this->academico_model->get_material_apoyo(array('ID_PLANIFICACION'=>$id_planificacion));
            }else{
                $data['contenido'] = array();
                $data['material_apoyo'] = array();
            }

            //JUSTIFICACION MATERIAS
            $d['ID_PERSONA']=$id_persona_estudiante;
            $d['id_periodo_academico'] = $id_periodo_academico;
            $d['id_carrera'] = $data['materia']['ID_CARRERA'];
            $d['grupo'] = $data['materia']['GRUPO'];
            $d['ID_ESTUDIANTE_CARRERA_MATERIA'] = $id_estudiante_carrera_materia;
            $d['justificando'] = 1;
            $data['justificaciones'] = $this->academico_model->buscar_alumno_materia($d);
            $datos1=$this->cabeceraEva();
            $this->load->view('templates/headerEva',$datos1);
            $this->load->view('academico/detalleMateriaEstudiante',$data);
            $this->load->view('templates/footerEva');
        }else{
            redirect('admin/login', 'refresh');
        }
    }

    public function detalleMateriaDocente($idPlanificacion){
        if($this->session->userdata('loggeado')){
            $idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
            $perfil=$this->perfil_model->get_perfil($idusuario);
            $id_persona = $this->session->userdata('loggeado')['ID_PERSONA'];
            $id_periodo_academico = $this->academico_model->get_periodo_activado();
            $materia = $this->academico_model->buscar_materia_calificar($idPlanificacion);
            $data['contenido'] = array();
            $data['docente'] = array();
            $data['materia'] = array();
            $data['material_apoyo'] = array();
            if (count($materia)>0){
                $materia = $materia[0];

                $docente_materia = $this->academico_model->getDocenteMateria($materia['ID_CARRERA_MATERIA'], $materia['ID_PERSONA']);
                $data['docente'] = $docente_materia[0];
                $data_c['ID_PERIODO_ACADEMICO'] = $id_periodo_academico;
                $data_c['ID_CARRERA'] = trim($this->input->post('id_carrera'));
                $data_c['ID_NIVEL'] = trim($this->input->post('id_nivel'));
                $data_c['GRUPO'] = trim($this->input->post('grupo'));
                $data_c['ID_PERSONA'] = $id_persona;
                $data_c['ID_PLANIFICACION'] = $idPlanificacion;
                $contenidos = $this->academico_model->listado_contenido($data_c);

                foreach($contenidos as $key=>$contenido){
                    // $contenidos[$key]['num_tareas']=$this->academico_model->num_tareas_estudiantes($silabo_tarea['ID_DOCENTE_CARRERA_MATERIA'],$silabo_tarea['ID_GRUPO']);
                    $dato_contenido=$this->academico_model->getContenidoMateria($contenido['ID_CARRERA_MATERIA'],$contenido['ID_PERIODO_ACADEMICO'],$contenido['ID_PLANTILLA']);
                    $num_retos=0;
                    $num_proyectos=0;
                    $num_talleres = 0;
                    if($dato_contenido!=NULL){
                        $contenidos[$key]=array_merge($contenidos[$key], $dato_contenido);
                        $dat['ID_CONTENIDO']=$dato_contenido['ID_CONTENIDO'];
                        $dat['TIPO']='0';
                        $num_retos=count($this->academico_model->getRetosProyectosContenido($dat));
                        $dat['TIPO']=1;
                        $num_proyectos=count($this->academico_model->getRetosProyectosContenido($dat));
                        // $num_talleres = count($this->academico_model->buscar_talleres(array('ID_PLANIFICACION'=>$contenido['ID_PLANIFICACION'])));
                        $num_talleres = count($this->academico_model->buscar_talleres(array('ID_CARRERA_MATERIA'=>$contenido['ID_CARRERA_MATERIA'],'ID_PERIODO_ACADEMICO'=>$contenido['ID_PERIODO_ACADEMICO'],'ID_GRUPO'=>$contenido['ID_GRUPO'],'ID_PLANTILLA'=>$contenido['ID_PLANTILLA'])));
                    }


                    $contenidos[$key]['num_retos']     = $num_retos;
                    $contenidos[$key]['num_proyectos'] = $num_proyectos;
                    $contenidos[$key]['num_talleres']  = $num_talleres;
                    // $contenidos[$key]['aulaVirtual']   = $this->academico_model->buscar_aulaVirtual(array('ID_PLANIFICACION'=>$contenido['ID_PLANIFICACION']));
                    $contenidos[$key]['aulaVirtual']   = $this->academico_model->buscar_aulaVirtual(array('ID_CARRERA_MATERIA'=>$contenido['ID_CARRERA_MATERIA'],'ID_PERIODO_ACADEMICO'=>$contenido['ID_PERIODO_ACADEMICO'],'ID_GRUPO'=>$contenido['ID_GRUPO'],'ID_PLANTILLA'=>$contenido['ID_PLANTILLA']));
                    $contenidos[$key]['PERIODO']=$contenido['FECHA_TUTORIA1'];

                    $fecha_fin='';
                    $fechast=$contenido['FECHA_TUTORIA2'].'+'.$contenido['FECHA_TUTORIA3'].'+'.$contenido['FECHA_TUTORIA4'].'+'.$contenido['FECHAS_TUTORIA'];
                    $vector_ft=explode('+',$fechast);
                    $contenidos[$key]['HOY']=0;
                    if($contenido['FECHA_TUTORIA1']==date('Y-m-d')){
                        $contenidos[$key]['HOY']=1;
                    }
                    foreach($vector_ft as $ft){
                        if($ft!='' and $ft!=NULL and $ft!='0000-00-00'){
                            $fecha_fin=$ft;
                        }
                        if($ft==date('Y-m-d')){
                            $contenidos[$key]['HOY']=1;
                        }
                    }
                    if($fecha_fin!=''){
                        $contenidos[$key]['PERIODO'].='<br>'.$fecha_fin;
                    }

                    if($contenido['ID_PLANTILLA']>0){
                        $pla=$this->academico_model->get_plantilla($contenido['ID_PLANTILLA']);
                        if($pla!=NULL){
                            $contenidos[$key]['MATERIA']=$contenido['MATERIA'].'<br>'.$pla['PLANTILLA'];
							$materia['MATERIA'] = $materia['MATERIA'].'<p class="text-success">'.$pla['PLANTILLA'].'</p>';
                        }
                    }
                    $contenidos[$key]['BLOQUEO_FECHA']=0;
                }
                $data['contenido'] = $contenidos[0];
                $data['material_apoyo'] = $this->academico_model->get_material_apoyo(array('ID_PLANIFICACION'=>$idPlanificacion));
				$data['estadistica'] = $this->estadisticasDocente($idPlanificacion);
				// print_r($data['estadistica']);
            }
            $data['perfil'] = $perfil;
            $data['materia'] = $materia;    
            $datos1=$this->cabeceraEva();
            $this->load->view('templates/headerEva',$datos1);
            $this->load->view('academico/detalleMateriaDocente',$data);
            $this->load->view('templates/footerEva');
        }else{
            redirect('admin/login', 'refresh');
        }
    }

    ///////////////////////////////////////////////////////////////
    public function getExamenesMateriaEstudiante($id_persona, $id_estudiante_carrera_materia, $id_plantilla){
        $clases_examenes=array();
        $dat=array();
        $usuario=$this->session->userdata('loggeado');
        if($usuario['ID_PERFIL']==5){
            $dat['ID_PERSONA']=$id_persona;
            $dat['ESTADO_ESTUDIANTE']='0';
			$dat['ID_ESTUDIANTE_CARRERA_MATERIA']=$id_estudiante_carrera_materia;
			if($id_plantilla>0){
				$dat['ID_PLANTILLA']=$id_plantilla;
			}
        }
        $estadosExamen=array(-1=>'Pendiente',0=>'En Proceso',1=>'Realizado');
        $fecha_actual=date_create(date('Y-m-d H:i:s'));
        $listado=array();
        $clases_examenes=$this->academico_model->buscarGruposExamenesEstudiantes($dat);
        foreach($clases_examenes as $k=>$ce){
            $clases_examenes[$k]['ETAPA']=1;
            $clases_examenes[$k]['TIPO']='';
            //verifico si ya tiene examen personalizado el estudiante
            $clases_examenes[$k]['ESTADO']='Pendiente';
            $clases_examenes[$k]['CALIFICACION']='';
            $examenes_estudiante=$this->academico_model->buscarExamenesEstudiantes(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$ce['ID_ESTUDIANTE_CARRERA_MATERIA'],'ETAPA'=>1,'ID_PLANTILLA'=>$ce['ID_PLANTILLA']));
            if(count($examenes_estudiante)>0){
                $ee=$examenes_estudiante[0];
                if($ee['TIPO_EXAMEN']==0 and $ee['ESTADO']==1){
                    $clases_examenes[$k]['ESTADO']='Realizado';
                    $clases_examenes[$k]['CALIFICACION']=number_format(floatval($ee['CALIFICACION']),2);
                }elseif($ee['TIPO_EXAMEN']==0 and $ee['ESTADO']==0){
                    $clases_examenes[$k]['ESTADO']='En Proceso';
                }elseif($ee['TIPO_EXAMEN']==1){
                    $clases_examenes[$k]['ESTADO']='Impreso';
                }
            }

            $clases_examenes[$k]['FECHA_HORA_EXAMEN']=NULL;

            if(isset($v_dato_contenido[$ce['ID_CARRERA_MATERIA']])){
                $dato_contenido=$v_dato_contenido[$ce['ID_CARRERA_MATERIA']];
            }else{
                $dato_contenido=$this->academico_model->getContenidoMateria($ce['ID_CARRERA_MATERIA'],$ce['ID_PERIODO_ACADEMICO'],$ce['ID_PLANTILLA']);
                if(isset($dato_contenido['DURACION_EXAMEN']) and $dato_contenido['DURACION_EXAMEN']<=0){
                    $plantilla=$this->academico_model->buscar_plantillas(array('ID_PLANTILLA'=>$dato_contenido['ID_PLANTILLA']));
                    $dato_contenido['DURACION_EXAMEN']=$plantilla[0]['DURACION_EXAMEN'];
                }
                $v_dato_contenido[$ce['ID_CARRERA_MATERIA']]=$dato_contenido;
            }

            if($dato_contenido!=NULL){
                /*if($dato_contenido['DURACION_EXAMEN']<=0){
                    $plantilla=$this->academico_model->buscar_plantillas(array('ID_PLANTILLA'=>$dato_contenido['ID_PLANTILLA']));
                    $dato_contenido['DURACION_EXAMEN']=$plantilla[0]['DURACION_EXAMEN'];
                }*/
                if($dato_contenido['DURACION_EXAMEN']>0 and $ce['FECHA_EXAMEN']!=NULL and $ce['FECHA_EXAMEN']!='0000-00-00' and $ce['HORA_EXAMEN']!='' and $ce['HORA_EXAMEN']!=NULL){
                    $fi_examen = date_create($ce['FECHA_EXAMEN'].' '.$ce['HORA_EXAMEN'].':00');
                    $fi_examen->modify('+ '.$dato_contenido['DURACION_EXAMEN'].' minute');
                    $clases_examenes[$k]['FECHA_HORA_EXAMEN']=$ce['FECHA_EXAMEN'].' '.$ce['HORA_EXAMEN'].' a '.$fi_examen->format('H:i');
                }
            }
            $clases_examenes[$k]['FECHA_APLAZADO']='';
            $examenes_estudiante_aplazados=$this->academico_model->buscarExamenesEstudiantesAplazados(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$ce['ID_ESTUDIANTE_CARRERA_MATERIA'],'ETAPA'=>1,'ID_PLANTILLA'=>$ce['ID_PLANTILLA']));
            if(count($examenes_estudiante_aplazados)>0){//si tiene fecha aplazado
                $aplazo=$examenes_estudiante_aplazados[0];
                $clases_examenes[$k]['FECHA_APLAZADO']=$aplazo['FECHA_APLAZADO'].'<br>'.$aplazo['HORA_APLAZADO'];
                if(isset($dato_contenido['DURACION_EXAMEN']) and $dato_contenido['DURACION_EXAMEN']>0 and $aplazo['FECHA_APLAZADO']!=NULL and $aplazo['FECHA_APLAZADO']!='0000-00-00' and $aplazo['HORA_APLAZADO']!='' and $aplazo['HORA_APLAZADO']!=NULL){
                    $ff_aplazo = date_create($aplazo['FECHA_APLAZADO'].' '.$aplazo['HORA_APLAZADO'].':00');
                    if($aplazo['DURACION_EXAMEN']!=NULL and $aplazo['DURACION_EXAMEN']>0){
                        $ff_aplazo->modify('+ '.$aplazo['DURACION_EXAMEN'].' minute');
                    }else{
                        $ff_aplazo->modify('+ '.$dato_contenido['DURACION_EXAMEN'].' minute');
                    }
                    $clases_examenes[$k]['FECHA_APLAZADO'].=' a '.$ff_aplazo->format('H:i');
                }
            }
            $clases_examenes[$k]['BLOQUEO_FECHA']=0;
            if($usuario['ID_PERFIL']==5 and $ce['FECHA_EXAMEN']!=NULL and $ce['FECHA_EXAMEN']!=''){//vista estudiante
                $fi_examen=date_create($ce['FECHA_EXAMEN'].' 00:00:00');
                if($fi_examen>$fecha_actual){
                    $clases_examenes[$k]['BLOQUEO_FECHA']=1;
                }
            }
            $clases_examenes[$k]['EXAMEN_HOY']=0;
            if($clases_examenes[$k]['FECHA_EXAMEN']==date('Y-m-d') or (count($examenes_estudiante_aplazados)>0 and $aplazo['FECHA_APLAZADO']==date('Y-m-d'))){
                //if($clases_examenes[$k]['FECHA_EXAMEN']==date('Y-m-d') or $ce['FECHA_APLAZADO']==date('Y-m-d')){
                $clases_examenes[$k]['EXAMEN_HOY']=1;
            }
        }
        return $clases_examenes;
    }

    ///////////////////////////////////////////////////////////////
    public function getSupletoriosMateriaEstudiante($id_persona, $id_estudiante_carrera_materia, $id_plantilla){
        $clases_examenes=array();
        $dat=array();
        $usuario=$this->session->userdata('loggeado');
        if($usuario['ID_PERFIL']==5){
            $dat['ID_PERSONA']=$id_persona;
            $dat['ESTADO_ESTUDIANTE']='0';
            $dat['ID_ESTUDIANTE_CARRERA_MATERIA']=$id_estudiante_carrera_materia;
			if($id_plantilla>0){
				$dat['ID_PLANTILLA']=$id_plantilla;
			}
        }
        $estadosExamen=array(-1=>'Pendiente',0=>'En Proceso',1=>'Realizado');
        $fecha_actual=date_create(date('Y-m-d H:i:s'));
        $listado=array();
        $clases_examenes=$this->academico_model->buscarGruposExamenesEstudiantes($dat);
        foreach($clases_examenes as $k=>$ce){
            $clases_examenes[$k]['ETAPA']=0;
            $clases_examenes[$k]['TIPO']='';
            //verifico si ya tiene supletorio personalizado el estudiante
            $clases_examenes[$k]['ESTADO']='Pendiente';
            $clases_examenes[$k]['CALIFICACION']='';
            $examenes_estudiante=$this->academico_model->buscarExamenesEstudiantes(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$ce['ID_ESTUDIANTE_CARRERA_MATERIA'],'ETAPA'=>'0'));
            if(count($examenes_estudiante)>0){
                $ee=$examenes_estudiante[0];
                if($ee['TIPO_EXAMEN']==0 and $ee['ESTADO']==1){
                    $clases_examenes[$k]['ESTADO']='Realizado';
                    $clases_examenes[$k]['CALIFICACION']=number_format(floatval($ee['CALIFICACION']),2);
                }elseif($ee['TIPO_EXAMEN']==0 and $ee['ESTADO']==0){
                    $clases_examenes[$k]['ESTADO']='En Proceso';
                }elseif($ee['TIPO_EXAMEN']==1){
                    $clases_examenes[$k]['ESTADO']='Impreso';
                }
            }
            $clases_examenes[$k]['FECHA_HORA_SUPLETORIO']=NULL;
            $dato_contenido=$this->academico_model->getContenidoMateria($ce['ID_CARRERA_MATERIA'],$ce['ID_PERIODO_ACADEMICO']);
            if($dato_contenido!=NULL){
                if($dato_contenido['DURACION_EXAMEN']<=0){
                    $plantilla=$this->academico_model->buscar_plantillas(array('ID_PLANTILLA'=>$dato_contenido['ID_PLANTILLA']));
                    $dato_contenido['DURACION_EXAMEN']=$plantilla[0]['DURACION_EXAMEN'];
                }
                if($dato_contenido['DURACION_EXAMEN']>0 and $ce['FECHA_SUPLETORIO']!=NULL and $ce['FECHA_SUPLETORIO']!='0000-00-00' and $ce['HORA_SUPLETORIO']!='' and $ce['HORA_SUPLETORIO']!=NULL){
                    $fi_examen = date_create($ce['FECHA_SUPLETORIO'].' '.$ce['HORA_SUPLETORIO'].':00');
                    $fi_examen->modify('+ '.$dato_contenido['DURACION_EXAMEN'].' minute');
                    $clases_examenes[$k]['FECHA_HORA_SUPLETORIO']=$ce['FECHA_SUPLETORIO'].'<br>'.$ce['HORA_SUPLETORIO'].' a '.$fi_examen->format('H:i');
                }
            }
            $clases_examenes[$k]['FECHA_APLAZADO']='';
            $examenes_estudiante_aplazados=$this->academico_model->buscarExamenesEstudiantesAplazados(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$ce['ID_ESTUDIANTE_CARRERA_MATERIA'],'ETAPA'=>'0'));
            if(count($examenes_estudiante_aplazados)>0){//si tiene fecha aplazado
                $aplazo=$examenes_estudiante_aplazados[0];
                $clases_examenes[$k]['FECHA_APLAZADO']=$aplazo['FECHA_APLAZADO'].'<br>'.$aplazo['HORA_APLAZADO'];
                if(isset($dato_contenido['DURACION_EXAMEN']) and $dato_contenido['DURACION_EXAMEN']>0 and $aplazo['FECHA_APLAZADO']!=NULL and $aplazo['FECHA_APLAZADO']!='0000-00-00' and $aplazo['HORA_APLAZADO']!='' and $aplazo['HORA_APLAZADO']!=NULL){
                    $ff_aplazo = date_create($aplazo['FECHA_APLAZADO'].' '.$aplazo['HORA_APLAZADO'].':00');
                    if($aplazo['DURACION_EXAMEN']!=NULL and $aplazo['DURACION_EXAMEN']>0){
                        $ff_aplazo->modify('+ '.$aplazo['DURACION_EXAMEN'].' minute');
                    }else{
                        $ff_aplazo->modify('+ '.$dato_contenido['DURACION_EXAMEN'].' minute');
                    }
                    $clases_examenes[$k]['FECHA_APLAZADO'].=' a '.$ff_aplazo->format('H:i');
                }
            }
            $clases_examenes[$k]['BLOQUEO_FECHA']=0;
            if($usuario['ID_PERFIL']==5 and $ce['FECHA_SUPLETORIO']!=NULL and $ce['FECHA_SUPLETORIO']!=''){//vista estudiante
                $fi_examen=date_create($ce['FECHA_SUPLETORIO'].' 00:00:00');
                if($fi_examen>$fecha_actual){
                    $clases_examenes[$k]['BLOQUEO_FECHA']=1;
                }
            }
            $clases_examenes[$k]['EXAMEN_HOY']=0;
            if($clases_examenes[$k]['FECHA_SUPLETORIO']==date('Y-m-d') or (count($examenes_estudiante_aplazados)>0 and $aplazo['FECHA_APLAZADO']==date('Y-m-d'))){
                $clases_examenes[$k]['EXAMEN_HOY']=1;
            }

            //verificar que este en supletorio
            $dats['ID_ESTUDIANTE_CARRERA_MATERIA']=$ce['ID_ESTUDIANTE_CARRERA_MATERIA'];
            $dats['ID_TIPO_CALIFICACION']=6;
            $supletorio=$this->academico_model->buscar_calificacion($dats);
//            print_r($examenes_estudiante);
            if(count($supletorio)>0){
                if($supletorio[0]['ESTADO_CALIFICACION']==0 or count($examenes_estudiante)>0){
                    //$listado[]=$clases_examenes[$k];
                    if(isset($estado_examen) and $estado_examen!=''){
                        if($clases_examenes[$k]['ESTADO']==$estadosExamen[$estado_examen]){
                            $listado[]=$clases_examenes[$k];
                        }
                    }else{
                        $listado[]=$clases_examenes[$k];
                    }
                }
            }

        }
//        print_r($listado);
        return $listado;
    }

    ///////////////////////////////////////////////////////////////
    public function getRemedialesMateriasEstudiante($id_persona, $id_estudiante_carrera_materia){
        $clases_examenes=array();
        $dat=array();
        $usuario=$this->session->userdata('loggeado');
        if($usuario['ID_PERFIL']==5){
            $dat['ID_PERSONA']=$id_persona;
            $dat['ESTADO_ESTUDIANTE']='0';
            $dat['ID_ESTUDIANTE_CARRERA_MATERIA']=$id_estudiante_carrera_materia;
        }
        $fecha_actual=date_create(date('Y-m-d H:i:s'));
        $clases_examenes = $this->academico_model->buscar_alumno_remedial($dat);
        $listado=array();
        foreach($clases_examenes as $k=>$ce){
            //verifico si ya tiene supletorio personalizado el estudiante
            $clases_examenes[$k]['ESTADO']='';
            $clases_examenes[$k]['CALIFICACION']='';
            $fecha='';
            $hora='';
            $examenes_estudiante=$this->academico_model->buscarExamenesRemediales(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$ce['ID_ESTUDIANTE_CARRERA_MATERIA']));
            if($ce['ESTADO_CALIFICACION']==2 or count($examenes_estudiante)>0){
                //tiene remedial
                if(count($examenes_estudiante)>0){
                    $ee=$examenes_estudiante[count($examenes_estudiante)-1];//utlimo remedial
                    if($ee['TIPO_EXAMEN']==0 and $ee['ESTADO']==1){
                        $clases_examenes[$k]['ESTADO']='Realizado';
                        $clases_examenes[$k]['CALIFICACION']=number_format(floatval($ee['CALIFICACION']),2);
                    }elseif($ee['TIPO_EXAMEN']==0 and $ee['ESTADO']==0 and $ee['IDS_PREGUNTA_CONTENIDO']!=NULL){
                        $clases_examenes[$k]['ESTADO']='En Proceso';
                    }elseif($ee['TIPO_EXAMEN']==0 and $ee['ESTADO']==0){
                        $clases_examenes[$k]['ESTADO']='Pendiente';
                    }elseif($ee['TIPO_EXAMEN']==1){
                        $clases_examenes[$k]['ESTADO']='Impreso';
                    }
                    $fecha=$ee['FECHA'];
                    $hora=$ee['HORA'];
                }
                $clases_examenes[$k]['FECHA_HORA_REMEDIAL']=NULL;
                $dato_contenido=$this->academico_model->getContenidoMateria($ce['ID_CARRERA_MATERIA'],$ce['ID_PERIODO_ACADEMICO']);
                if($dato_contenido!=NULL and $fecha!='' and $hora!=''){
                    if($dato_contenido['DURACION_EXAMEN']<=0){
                        $plantilla=$this->academico_model->buscar_plantillas(array('ID_PLANTILLA'=>$dato_contenido['ID_PLANTILLA']));
                        $dato_contenido['DURACION_EXAMEN']=$plantilla[0]['DURACION_EXAMEN'];
                    }
                    if($dato_contenido['DURACION_EXAMEN']>0 and $fecha!=NULL and $fecha!='0000-00-00' and $hora!='' and $hora!=NULL){
                        $fi_examen = date_create($fecha.' '.$hora.':00');
                        $fi_examen->modify('+ '.$dato_contenido['DURACION_EXAMEN'].' minute');
                        $clases_examenes[$k]['FECHA_HORA_REMEDIAL']=$fecha.' '.$hora.' a '.$fi_examen->format('H:i');
                    }
                }
                $clases_examenes[$k]['EXAMEN_HOY']=0;
                if($fecha==date('Y-m-d')){
                    $clases_examenes[$k]['EXAMEN_HOY']=1;
                }
                $listado[]=$clases_examenes[$k];
            }
        }
        //echo json_encode($clases_examenes);
        return $listado;
    }

    ///////////////////////////////////////////////////////////////
    public function gestionContenidoMateria($idPlanificacion)
    {
        $idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
        if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,101)){
            $usuario=$this->session->userdata('loggeado');
            $perfil=$this->session->userdata('loggeado')['ID_PERFIL'];
            if(!$this->input->is_ajax_request()) {
                $contenidos = $this->academico_model->listado_contenido(array('ID_PLANIFICACION'=>$idPlanificacion));
                if(count($contenidos)>0){
                    $contenido=$contenidos[0];
                    $fecha_fin='';
                    $fechast=$contenido['FECHA_TUTORIA2'].'+'.$contenido['FECHA_TUTORIA3'].'+'.$contenido['FECHA_TUTORIA4'].'+'.$contenido['FECHAS_TUTORIA'];
                    $vector_ft=explode('+',$fechast);
                    foreach($vector_ft as $ft){
                        if($ft!='' and $ft!=NULL and $ft!='0000-00-00'){
                            $fecha_fin=$ft;
                        }
                    }
                    $contenido['FECHA_FIN']=$fecha_fin;
                    $dato_contenido=$this->academico_model->getContenidoMateria($contenido['ID_CARRERA_MATERIA'],$contenido['ID_PERIODO_ACADEMICO'],$contenido['ID_PLANTILLA']);
                    $retos=array();
                    $proyectos = array();
					$talleres = array();
                    if($dato_contenido!=NULL){
                        //RETOS
                        $dat['ID_CONTENIDO']=$dato_contenido['ID_CONTENIDO'];
                        $dat['TIPO']='0';
                        $retos=$this->academico_model->getRetosProyectosContenido($dat);
                        if($perfil==5){
                            ///agregar datos de respuesta
                            foreach($retos as $key=>$reto){
                                $data_respuesta['ID_RETO_CONTENIDO']=$reto['ID_RETO_PROYECTO_CONTENIDO'];
                                $data_respuesta['ID_PERSONA'] = $this->session->userdata('loggeado')['ID_PERSONA'];
                                $respuestas=$this->academico_model->buscar_retos_estudiantes($data_respuesta);
                                if($respuestas==NULL){
                                    $retos[$key]['respuesta']=NULL;
                                }else{
                                    $retos[$key]['respuesta']=$respuestas[0];
                                }
                                $aplazos=$this->academico_model->getAplazoContenido($this->session->userdata('loggeado')['ID_PERSONA'],'0',$reto['ID_RETO_PROYECTO_CONTENIDO']);
                                if(count($aplazos)>0){
                                    $retos[$key]['FECHA_APLAZADA']=$aplazos[0]['FECHA_APLAZADA'];
                                }
                            }
                        }

                        //FIN RETOS

                        //PROYECTOS
                        $num_proyectos_asignar=1;
                        $dat['TIPO']='1';
                        $proyectos=$this->academico_model->getRetosProyectosContenido($dat);
                        if($perfil==5){
                            $idPersona = $this->session->userdata('loggeado')['ID_PERSONA'];
                            $proyectos_asignados=$this->academico_model->proyectos_realizados_estudiante($idPersona,$dato_contenido['ID_CONTENIDO']);
                            //asignar proyecto al estudiante
                            if(count($proyectos_asignados)<$num_proyectos_asignar and count($proyectos)>0){
                                $indice=rand(0,(count($proyectos)-1));
                                $dat_proyecto_asignado['ID_PROYECTO_CONTENIDO']=$proyectos[$indice]['ID_RETO_PROYECTO_CONTENIDO'];
                                $dat_proyecto_asignado['ID_PERSONA']=$idPersona;
                                $this->academico_model->crearRespuestaProyecto($dat_proyecto_asignado);
                            }
                            ///agregar datos de respuesta
                            foreach($proyectos as $k=>$proyecto){
                                $idProyectoContenido=$proyecto['ID_RETO_PROYECTO_CONTENIDO'];
                                $aplazos=$this->academico_model->getAplazoContenido($idPersona,1,$idProyectoContenido);
                                if(count($aplazos)>0){
                                    $proyectos[$k]['FECHA_APLAZADA']=$aplazos[0]['FECHA_APLAZADA'];
                                }
                                $respuestas=$this->academico_model->proyectos_realizados_estudiante($idPersona,null,$idProyectoContenido);
                                if(count($respuestas)>0){
                                    $proyectos[$k]['respuesta']=$respuestas[0];
                                }else{
                                    unset($proyectos[$k]);
                                }
                            }
                        }else{
                            //estudiantes del grupo
                            $dat_e['ID_CARRERA_MATERIA']=$contenido['ID_CARRERA_MATERIA'];
                            $dat_e['ID_PERIODO_ACADEMICO']=$contenido['ID_PERIODO_ACADEMICO'];
                            $dat_e['ID_GRUPO']=$contenido['ID_GRUPO'];
                            if($usuario['ID_PERFIL']==12){
                                $dat_e['ID_USUARIO_ACADEMICO']=$usuario['ID_USUARIO'];
                            }
                            $estudiantes=$this->academico_model->get_estudiantes($dat_e);
                            $ids_persona=array();
                            foreach($estudiantes as $estudiante){

                                $idPersona = $estudiante['ID_PERSONA'];
                                $proyectos_asignados=$this->academico_model->proyectos_realizados_estudiante($idPersona,$dato_contenido['ID_CONTENIDO']);
                                //asignar proyecto al estudiante
                                if(count($proyectos_asignados)<$num_proyectos_asignar and count($proyectos)>0){
                                    $indice=rand(0,(count($proyectos)-1));
                                    $dat_proyecto_asignado['ID_PROYECTO_CONTENIDO']=$proyectos[$indice]['ID_RETO_PROYECTO_CONTENIDO'];
                                    $dat_proyecto_asignado['ID_PERSONA']=$idPersona;
                                    $this->academico_model->crearRespuestaProyecto($dat_proyecto_asignado);
                                    //$asignados.=$estudiante['ESTUDIANTE'].' -> '.$contenido['MATERIA'].'<br>';
                                }

                                $ids_persona[]=$estudiante['ID_PERSONA'];
                            }
                            $vec_id_persona=implode(',',$ids_persona);
                            foreach($proyectos as $k=>$proyecto){
                                if(count($ids_persona)>0){
                                    $proyectos[$k]['num_respuestas'] = $this->academico_model->num_respuestasProyectos_estudiantes($proyecto['ID_RETO_PROYECTO_CONTENIDO'],$vec_id_persona);
                                }else{
                                    $proyectos[$k]['num_respuestas'] = 0;
                                }
                            }
                        }
                        //FIN PROYECTOS
                    }

                    ///agregar numero de retos
                    foreach($retos as $k=>$reto){
                        $retos[$k]['NumPreguntas']=$this->academico_model->numRetosPreguntasContenido($reto['ID_RETO_PROYECTO_CONTENIDO']);
                    }

                    //TALLERES
                    $cabecera_taller = $this->academico_model->get_docente_carrera_materia_grupo_planificacion(array('ID_PLANIFICACION'=>$idPlanificacion));
                    $talleres  = $this->academico_model->buscar_talleres(array('ID_CARRERA_MATERIA'=>$cabecera_taller['ID_CARRERA_MATERIA'],'ID_PERIODO_ACADEMICO'=>$cabecera_taller['ID_PERIODO_ACADEMICO'],'ID_GRUPO'=>$cabecera_taller['ID_GRUPO'],'ID_PLANTILLA'=>$cabecera_taller['ID_PLANTILLA']));
                    if($perfil==5){
                        foreach ($talleres as $kt => $taller) {
                            $data_respuesta['ID_TALLER']    = $taller['ID_TALLER'];
                            $data_respuesta['ID_PERSONA']   = $this->session->userdata('loggeado')['ID_PERSONA'];

                            $respuestas=$this->academico_model->buscar_respuestas_taller($data_respuesta);
                            if($respuestas==NULL){
                                $talleres[$kt]['respuesta'] = NULL;
                            }else{
                                $talleres[$kt]['respuesta'] = $respuestas[0];
                            }
                            $data_respuesta['ID']   = $taller['ID_TALLER'];
                            $data_respuesta['TIPO'] = 2;
                            $fechaAplazada = $this->academico_model->buscar_fechaAplazada_taller_por_estudiante($data_respuesta);
                            $talleres[$kt]['FECHA_APLAZADA'] = $fechaAplazada['FECHA_APLAZADA'];
                            // $talleres[$kt]['FECHA_LIMITE']   = $fecha_fin;
                        }
                    }else{
                        $id_usuario_academico=null;
                        if($perfil==12){
                            $id_usuario_academico=$idusuario;
                        }
                        foreach($talleres as $kt => $taller){
                            $talleres[$kt]['num_respuestas'] = $this->academico_model->num_respuestasTalleres_estudiantes($taller['ID_TALLER'],$id_usuario_academico);
                        }
                    }
                    $cabecera_taller['FECHA_LIMITE_TUTORIA'] = $fecha_fin;

                    $fechaCierre=$this->academico_model->get_fecha_cierre(array('ID_GRUPO'=>$cabecera_taller['ID_GRUPO'],'ID_MATERIA'=>$cabecera_taller['ID_CARRERA_MATERIA'],'ID_PERIODO_ACADEMICO'=>$cabecera_taller['ID_PERIODO_ACADEMICO'],'ID_PLANTILLA'=>$cabecera_taller['ID_PLANTILLA']));
                    $calificacion_cerrada=0;
                    if(count($fechaCierre)>0){
                        if($fechaCierre['FECHA_APLAZADO']!='0000-00-00'){
                            $datetime1 = date_create($fechaCierre['FECHA_APLAZADO'].' 23:59:59');
                        }else{
                            $datetime1 = date_create($fechaCierre['FECHA_CIERRE'].' 23:59:59');
                        }
                        $datetime2 = date_create(date('Y-m-d H:i:s'));
                        if($datetime1<$datetime2){
                            $calificacion_cerrada=1;
                        }
                    }
                    $datos['calificacion_cerrada_talleres'] = $calificacion_cerrada;
                    $datos['talleres']        = $talleres;
                    $datos['cabecera_taller'] = $cabecera_taller;
                    $datos['estudiantes_taller']     = $this->academico_model->get_estudiantes(array('ID_CARRERA_MATERIA'=>$cabecera_taller['ID_CARRERA_MATERIA'],'ID_PERIODO_ACADEMICO'=>$cabecera_taller['ID_PERIODO_ACADEMICO'],'ID_GRUPO'=>$cabecera_taller['ID_GRUPO']));

                    //FIN TALLERES

                    $idPeriodo=$this->academico_model->get_periodo_activado();
                    $periodo=$this->academico_model->getPeriodo($idPeriodo);
                    $datos['fecha_max']=$periodo['FECHA_FIN'];//fecha fin de periodo
                    $datos['contenido']  = $contenido;
                    $datos['proyectos']  = $proyectos;
                    $datos['retos']  = $retos;
                    $datos['perfil']  = $perfil;
                    $d['ID_CARRERA_MATERIA'] = $contenido['ID_CARRERA_MATERIA'];
                    $d['ID_PERIODO_ACADEMICO'] = $contenido['ID_PERIODO_ACADEMICO'];
                    $d['ID_GRUPO'] = $contenido['ID_GRUPO'];
                    if ($perfil == 5){//estudiante
                        $d['ID_PERSONA'] = $this->session->userdata('loggeado')['ID_PERSONA'];
                    }elseif($perfil == 4){//docente
                        $d['ID_PERSONA_DOCENTE'] = $contenido['ID_PERSONA'];
                    }
                    $datos['materia'] = $this->academico_model->get_estudianteCarreraMateria($d);
                    $datos['materia']['ID_PLANIFICACION'] = $idPlanificacion;
                    
					$plantilla = $this->academico_model->get_plantilla_materia(array('ID_PLANTILLA'=>$contenido['ID_PLANTILLA']));
                    if (count($plantilla)>0){
                        $datos['contenido']['MATERIA']= $contenido['MATERIA'].'<p class="text-success">'.$plantilla[0]['PLANTILLA'].'</p>';
                    }
                    $datos1=$this->cabeceraEva();
                    $this->load->view('templates/headerEva',$datos1);
                    $this->load->view('gestionContenidoMateria',$datos);
                    $this->load->view('templates/footerEva');
                }else{
                    echo 'Acceso Denegado';
                }
            }
        }else{
            redirect('admin/login', 'refresh');
        }
    }

    ///////////////////////////////////////////////////////////////
    public function getExamenRemedialEstudiante(){
        $idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
        if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,99)){
            $usuario=$this->session->userdata('loggeado');
            $id_estudiante_carrera_materia = trim($this->input->post('id_estudiante_carrera_materia'));
            $dat['ID_ESTUDIANTE_CARRERA_MATERIA']=$id_estudiante_carrera_materia;
            $clases_examenes=array();
            if($id_estudiante_carrera_materia!=NULL and $id_estudiante_carrera_materia!='' and $id_estudiante_carrera_materia>0){
                $clases_examenes = $this->academico_model->buscar_alumno_remedial($dat);
            }

            $idRubro=22;//Remedial
            $arancelExamenRemedial = $this->facturacion_model->buscarArancel(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$id_estudiante_carrera_materia, 'ID_RUBRO'=>$idRubro));
            $texto_arancel='';
            if(count($arancelExamenRemedial)>0 and isset($arancelExamenRemedial[count($arancelExamenRemedial)-1]['NOMBRE_ARANCEL']) and ($arancelExamenRemedial[count($arancelExamenRemedial)-1]['ESTADO'] == '0' or $arancelExamenRemedial[count($arancelExamenRemedial)-1]['ESTADO'] == 1)){
                $texto_arancel='<div class="alert alert-warning"><strong>Debe pagar el rubro: '.$arancelExamenRemedial[count($arancelExamenRemedial)-1]['NOMBRE_ARANCEL'].' </strong></div>';
            }
            $tamanio_modal = 0;
            if($usuario['ID_PERFIL']==5 and count($clases_examenes)>0){
                $clase_examen=$clases_examenes[0];

                $tabla='<input name="idecm" type="hidden" id="idecm" value="'.$id_estudiante_carrera_materia.'">';
                //verifico si ya tiene examen web personalizado el estudiante
                $examenes_estudiante=$this->academico_model->buscarExamenesRemediales(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$id_estudiante_carrera_materia));
                $ultimo_indice=count($examenes_estudiante)-1;
                if(count($examenes_estudiante)>0){
                    $examen_estudiante=$examenes_estudiante[$ultimo_indice];
                    $fecha_examen_inicio = $examen_estudiante['FECHA'].' '.$examen_estudiante['HORA'].':00';
                    $ff_examen = date_create(date('Y-m-d H:i:s'));//fecha final por defecto
                    $dato_contenido=$this->academico_model->getContenidoMateria($clase_examen['ID_CARRERA_MATERIA'],$clase_examen['ID_PERIODO_ACADEMICO']);
                    if($dato_contenido!=NULL){
                        if($dato_contenido['DURACION_EXAMEN']<=0){
                            $plantilla=$this->academico_model->buscar_plantillas(array('ID_PLANTILLA'=>$dato_contenido['ID_PLANTILLA']));
                            $dato_contenido['DURACION_EXAMEN']=$plantilla[0]['DURACION_EXAMEN'];
                        }
                        if($dato_contenido['DURACION_EXAMEN']>0 and $examen_estudiante['FECHA']!=NULL and $examen_estudiante['FECHA']!='0000-00-00' and $examen_estudiante['HORA']!='' and $examen_estudiante['HORA']!=NULL){
                            $ff_examen = date_create($fecha_examen_inicio);
                            $ff_examen->modify('+ '.$dato_contenido['DURACION_EXAMEN'].' minute');
                        }
                    }

                    $fi_examen = date_create($fecha_examen_inicio);
                    $f_actual = date_create(date('Y-m-d H:i:s'));
                    $interval = date_diff($f_actual, $ff_examen);
                    $days = $interval->format('%a');
                    $seconds = 0;
                    if($days){
                        $seconds += 24 * 60 * 60 * $days;
                    }
                    $hours = $interval->format('%H');
                    if($hours){
                        $seconds += 60 * 60 * $hours;
                    }
                    $minutes = $interval->format('%i');
                    if($minutes){
                        $seconds += 60 * $minutes;
                    }
                    $seconds += $interval->format('%s');
                    $seg_interval=$seconds;
                }

                if(count($examenes_estudiante)>0 and $examenes_estudiante[$ultimo_indice]['ESTADO']==1){
                    $tabla.='<div class="alert alert-success">Examen Realizado. Calificaci&oacute;n: <strong>'.number_format(floatval($examenes_estudiante[$ultimo_indice]['CALIFICACION']),2).'</strong></div>';
                    ///VISTA DE DETALLE DEL EXAMEN PARA EL ESTUDIANTES
                    //CUANTAS HA APROBADO
                    //CUANTAS HA SIDO INCORRECTAS
                    //CUANTAS NO HAN CONTESTADO
                    $examen=$examenes_estudiante[$ultimo_indice];
                    $preguntas=explode('+',$examen['IDS_PREGUNTA_CONTENIDO']);
                    $opciones=explode('+',$examen['IDS_OPCION_RESPUESTA_CONTENIDO']);
                    $respuestas=explode('+',$examen['IDS_RESPUESTA']);
                    $correcto=0;
                    $tabla.='<div class="card"><div class="card-body">';
                    foreach($preguntas as $k=>$p){
                        $correcto=0;
                        $tabla.='<div class="row">';
                        $tabla.='<div class="col text-right" style="text-align: right">';
                        $tabla.='<label class="text-left" style="font-size:20px;">Pregunta '.($k+1).'</label> ';
                        $tabla.='</div>';
                        $pregunta=$this->academico_model->getPreguntasContenido(array('ID_PREGUNTA_CONTENIDO'=>$p));
                        $pe=$pregunta[0];
                        if(isset($respuestas[$k])){
                            $opcionesSeleccionadas = explode("-", $respuestas[$k]);
                        }else{
                            $opcionesSeleccionadas = array();
                        }
                        $opcionesCorrectas     = explode("+", trim($pe['ID_OPCION_RESPUESTA_CONTENIDO'],"+"));
                        $correctoPregunta = 0;
                        if (count($opcionesSeleccionadas) == count($opcionesCorrectas)){
                            foreach ($opcionesSeleccionadas as $oSeleccionada){
                                foreach ($opcionesCorrectas as $ocorrecta){
                                    if ($ocorrecta == $oSeleccionada){
                                        $correctoPregunta++;
                                    }
                                }
                            }
                        }
                        if(isset($respuestas[$k]) and count($opcionesCorrectas) == $correctoPregunta){
                            $correcto++;
                        }
                        $tabla.='<div class="col"  style="font-size:25px;">';
                        if (count($opcionesSeleccionadas)==0 || $opcionesSeleccionadas[0]=="0") {
                            //$tabla.= "No contest�";
                            $tabla.='<i class="bi-question-circle-fill" style="color:blue;"></i>';
                        }elseif ($correcto==0) {
                            //$tabla.= "Incorrecto";
                            $tabla.='<i class="bi-x-circle-fill" style="color:red;"></i>';
                        }else{
                            //$tabla.= "Correcto";
                            $tabla.='<i class="bi-check-circle-fill" style="color:green;"></i>';
                        }
                        $tabla.='</div>';
                        $tabla.='</div><br>';
                    }
                    $tabla.='</div></div>';
                }elseif(count($examenes_estudiante)>0 and $examenes_estudiante[$ultimo_indice]['FECHA']==NULL){
                    $tabla.=$texto_arancel.'<div class="alert alert-info">Fecha no asignada</strong></div>';
                }elseif(count($examenes_estudiante)>0 and $f_actual<$fi_examen){
                    $tabla.=$texto_arancel.'<div class="alert alert-info">Aun no inicia examen <strong>'.$examenes_estudiante[$ultimo_indice]['FECHA'].' '.$fi_examen->format('H:i').'</strong></div>';
                }elseif(count($examenes_estudiante)>0 and $f_actual>$ff_examen){
                    $tabla.=$texto_arancel.'<div class="alert alert-info">Ya finaliz&oacute; examen <strong>'.$examenes_estudiante[$ultimo_indice]['FECHA'].' '.$ff_examen->format('H:i').'</strong></div>';
                    $idp = trim($this->input->post('idp'));
                    if(isset($idp) and $idp==-1 and count($examenes_estudiante)>0 and $examenes_estudiante[$ultimo_indice]['ESTADO']==0){//finalizar Examen por tiempo limite
                        $examen=$examenes_estudiante[$ultimo_indice];
                        $preguntas=explode('+',$examen['IDS_PREGUNTA_CONTENIDO']);
                        $opciones=explode('+',$examen['IDS_OPCION_RESPUESTA_CONTENIDO']);
                        $respuestas=explode('+',$examen['IDS_RESPUESTA']);
                        $correcto=0;
                        foreach($preguntas as $k=>$p){
                            $pregunta=$this->academico_model->getPreguntasContenido(array('ID_PREGUNTA_CONTENIDO'=>$p));
                            $pe=$pregunta[0];
                            $opcionesSeleccionadas = array();
                            if(isset($respuestas[$k])){
                                $opcionesSeleccionadas = explode("-", $respuestas[$k]);
                            }
                            $opcionesCorrectas     = explode("+", trim($pe['ID_OPCION_RESPUESTA_CONTENIDO'],"+"));
                            $correctoPregunta = 0;
                            if (count($opcionesSeleccionadas) == count($opcionesCorrectas)){
                                foreach ($opcionesSeleccionadas as $oSeleccionada){
                                    foreach ($opcionesCorrectas as $ocorrecta){
                                        if ($ocorrecta == $oSeleccionada){
                                            $correctoPregunta++;
                                        }
                                    }
                                }
                            }
                            if(isset($respuestas[$k]) and count($opcionesCorrectas) == $correctoPregunta){
                                $correcto++;
                            }
                        }
                        $calificacion=round($correcto*10/count($preguntas),2);
                        $dat_actualiza=array();
                        $dat_actualiza['ESTADO']=1;
                        $dat_actualiza['CALIFICACION']=$calificacion;
                        $dat_actualiza['FECHA_ACTUALIZACION']=date('Y-m-d H:i:s');
                        $dat_actualiza['FECHA_FIN_CONEXION']=date('Y-m-d H:i:s');
                        $this->academico_model->actualizarExamenRemedial($dat_actualiza,$examen['ID_EXAMEN_REMEDIAL']);
                        $tabla.='<div class="alert alert-success">Examen finalizado. Calificaci&oacute;n: <strong>'.$calificacion.'</strong></div>';
                        //transpasar nota remedial
                        $this->registraCalificacionComponente(0,$id_estudiante_carrera_materia,0,$calificacion);
                    }
                }else if($texto_arancel!=''){//tiene arancel remedial y no esta pagado
                    $tabla.=$texto_arancel;
                }else{
                    $dato_contenido=$this->academico_model->getContenidoMateria($clase_examen['ID_CARRERA_MATERIA'],$clase_examen['ID_PERIODO_ACADEMICO']);
                    if(count($examenes_estudiante)>0 and $examenes_estudiante[$ultimo_indice]['IDS_PREGUNTA_CONTENIDO']==NULL and $seg_interval>0){
                        if($dato_contenido!=NULL){
                            //verificar si existe base de preguntas para este examen
                            $preguntas_clase=$this->academico_model->getPreguntasContenido(array('ID_CONTENIDO'=>$dato_contenido['ID_CONTENIDO'],'TIPO'=>'0'));
                            if(count($preguntas_clase)<=0){
                                //generar base de preguntas examen
                                $this->generarBasePreguntasContenido(array('ID_PLANTILLA'=>$dato_contenido['ID_PLANTILLA'],'ID_CONTENIDO'=>$dato_contenido['ID_CONTENIDO']));
                            }
                            //generar examen web del estudiante
                            $this->generarExamenRemedial($examenes_estudiante[$ultimo_indice]['ID_EXAMEN_REMEDIAL'],'0',$dato_contenido['ID_CONTENIDO']);
                            $examenes_estudiante=$this->academico_model->buscarExamenesRemediales(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$id_estudiante_carrera_materia));
                            $ultimo_indice=count($examenes_estudiante)-1;
                        }
                    }
                    if(count($examenes_estudiante)>0 and $examenes_estudiante[$ultimo_indice]['IDS_PREGUNTA_CONTENIDO']!=NULL and $examenes_estudiante[$ultimo_indice]['IDS_PREGUNTA_CONTENIDO']!='' and $seg_interval>0){
                        $tamanio_modal = 1;
                        $idp = trim($this->input->post('idp'));
                        $opcion_seleccionado = trim($this->input->post('op'));//respuesta
                        $examen=$examenes_estudiante[$ultimo_indice];
                        $preguntas=explode('+',$examen['IDS_PREGUNTA_CONTENIDO']);
                        $opciones=explode('+',$examen['IDS_OPCION_RESPUESTA_CONTENIDO']);
                        $respuestas=explode('+',$examen['IDS_RESPUESTA']);

                        if($idp==NULL and $examen['IDS_RESPUESTA']==''){
                            $idp=$preguntas[0];
                        }elseif($idp==NULL){
                            $idp=$preguntas[count($respuestas)-1];
                        }
                        if($opcion_seleccionado!=NULL and $opcion_seleccionado!=''){
                            $v_opSeleccionadas = explode("+", trim($opcion_seleccionado,"+"));
                            $indicePregunta = "0";

                            $opcionesRespuestasSeleccionadas = "";
                            foreach ($v_opSeleccionadas as $kops => $ops) {
                                //guardar respuesta
                                $op_select=explode('-',$ops);

                                foreach($preguntas as $k=>$p){
                                    if($p==$op_select[0]){
                                        $opcionesRespuestasSeleccionadas .= "-".$op_select[1];
                                        $indicePregunta = $k;
                                        break;
                                    }
                                }
                                $respuestas[$k]= trim($opcionesRespuestasSeleccionadas,"-");
                            }
                            if (isset($respuestas[$indicePregunta]) && $respuestas[$indicePregunta]=="") {
                                $respuestas[$indicePregunta] =0;
                            }

                            $res_total=implode('+',$respuestas);
                            if($res_total!=$examen['IDS_RESPUESTA']){
                                $dat_actualiza=array();
                                $dat_actualiza['IDS_RESPUESTA']=$res_total;
                                $dat_actualiza['FECHA_ACTUALIZACION']=date('Y-m-d H:i:s');
                                $dat_actualiza['FECHA_FIN_CONEXION']=date('Y-m-d H:i:s');
                                $this->academico_model->actualizarExamenRemedial($dat_actualiza,$examen['ID_EXAMEN_REMEDIAL']);
                            }
                            //cambiar de pregunta si no selecciona respuesta
                            if($respuestas[$indicePregunta]==0){
                                $dat_b['ID_CONTENIDO']=$dato_contenido['ID_CONTENIDO'];
                                $dat_b['ALEATORIO']=1;
                                $dat_b['NUM_REGISTROS']=1;
                                $dat_b['TIPO']='0';
                                $dat_b['EXCLUIR']=$preguntas;
                                $preguntas_estudiante=$this->academico_model->getPreguntasContenido($dat_b);
                                if(count($preguntas_estudiante)>0){
                                    $preguntas[$indicePregunta]=$preguntas_estudiante[0]['ID_PREGUNTA_CONTENIDO'];
                                    if(!in_array($idp,$preguntas)){
                                        $idp=$preguntas_estudiante[0]['ID_PREGUNTA_CONTENIDO'];
                                    }
                                    $opciones_respuesta_estudiante=$this->academico_model->getOpcionesRespuestaContenido(array('ID_PREGUNTA_CONTENIDO'=>$preguntas[$indicePregunta]));
                                    if(count($opciones_respuesta_estudiante)>0){
                                        shuffle($opciones_respuesta_estudiante);//desordenar las opciones de respuesta
                                        foreach($opciones_respuesta_estudiante as $ore){
                                            $ids_opcion_respuesta[]=$ore['ID_OPCION_RESPUESTA_CONTENIDO'];
                                        }
                                    }else{
                                        $ids_opcion_respuesta[]='0';
                                    }
                                    $opciones[$indicePregunta]=implode('-',$ids_opcion_respuesta);
                                }
                                $dat_actualiza=array();
                                $dat_actualiza['IDS_PREGUNTA_CONTENIDO']=implode('+',$preguntas);
                                $dat_actualiza['IDS_OPCION_RESPUESTA_CONTENIDO']=implode('+',$opciones);
                                $this->academico_model->actualizarExamenRemedial($dat_actualiza,$examen['ID_EXAMEN_REMEDIAL']);
                            }
                        }
                        if($idp==-1){//finalizar Examen
                            $correcto=0;
                            foreach($preguntas as $k=>$p){
                                $pregunta=$this->academico_model->getPreguntasContenido(array('ID_PREGUNTA_CONTENIDO'=>$p));
                                $pe=$pregunta[0];
                                $opcionesSeleccionadas = explode("-", $respuestas[$k]);
                                $opcionesCorrectas     = explode("+", trim($pe['ID_OPCION_RESPUESTA_CONTENIDO'],"+"));
                                $correctoPregunta = 0;
                                if (count($opcionesSeleccionadas) == count($opcionesCorrectas)){
                                    foreach ($opcionesSeleccionadas as $oSeleccionada){
                                        foreach ($opcionesCorrectas as $ocorrecta){
                                            if ($ocorrecta == $oSeleccionada){
                                                $correctoPregunta++;
                                            }
                                        }
                                    }
                                }
                                if(isset($respuestas[$k]) and count($opcionesCorrectas) == $correctoPregunta){
                                    $correcto++;
                                }

                            }
                            $calificacion=round($correcto*10/count($preguntas),2);
                            $dat_actualiza=array();
                            $dat_actualiza['ESTADO']=1;
                            $dat_actualiza['CALIFICACION']=$calificacion;
                            $dat_actualiza['FECHA_ACTUALIZACION']=date('Y-m-d H:i:s');
                            $this->academico_model->actualizarExamenRemedial($dat_actualiza,$examen['ID_EXAMEN_REMEDIAL']);
                            $tabla.='<div class="alert alert-success">Examen finalizado. Calificaci&oacute;n: <strong>'.number_format(floatval($calificacion),2).'</strong></div>';
                            //transpasar nota remedial
                            $this->registraCalificacionComponente(0,$id_estudiante_carrera_materia,0,$calificacion);
                        }else{//mostrar pregunta
                            $tabla.='<div class="alert alert-info" role="alert"><table width="100%"><tr><td style="font-size:18px; color:blue">Pregunta '.(array_search($idp,$preguntas)+1).' de '.count($preguntas).'</td>';
                            if($seg_interval>0){
                                $tabla.='<td><div align="right" style="font-size:18px; color:blue" id="countdown"></div><script>contador('.$seg_interval.');</script></td>';
                            }
                            $tabla.='</tr></table></div>';
                            foreach($preguntas as $k=>$p){
                                if($idp==$p){
                                    $pregunta=$this->academico_model->getPreguntasContenido(array('ID_PREGUNTA_CONTENIDO'=>$p));
                                    $pe=$pregunta[0];
                                    $img='';
                                    if($pe['IMAGEN']!='' and file_exists(FCPATH.'archivos/contenidos/preguntas/'.$pe['IMAGEN'])){
                                        $img='<div class="thumbnail"><img src="'.base_url('archivos/contenidos/preguntas/')."/".$pe['IMAGEN'].'"/></div>';
                                    }

                                    $tabla.='<div class="card">
                                                  <div class="card-header">
                                                      <h4 class="card-title">
                                                          <div class="d-flex flex-row align-content-center align-items-center">
                                                              <div class="sw-5 me-4">
                                                                  <div class="border border-1 border-primary rounded-xl sw-5 sh-5 text-primary d-flex justify-content-center align-items-center">'.($k+1).'</div>
                                                              </div>
                                                              <div class="heading mb-0">
                                                                  '.$pe['PREGUNTA'].'
                                                              </div>
                                                          </div>
                                                      </h4>'.$img.'
                                            
                                                  </div>
                                                  <div class="card-body">
                                                    <table>';

                                    //obtengo las opciones de respuesta
                                    $opciones_respuesta=explode('-',$opciones[$k]);
                                    //recorrer las opciones de respuesta
                                    foreach($opciones_respuesta as $or){
                                        $opcion=$this->academico_model->getOpcionesRespuestaContenido(array('ID_OPCION_RESPUESTA_CONTENIDO'=>$or));//obtengo el texto de la opci�n de respuesta
                                        if(count($opcion)>0){
                                            $op=$opcion[0];
                                            $seleccionado='';
                                            if(isset($respuestas[$k])){

                                                $respuestasSeleccionadas = explode("-", $respuestas[$k]);
                                                if (in_array($or, $respuestasSeleccionadas)) {
                                                    $seleccionado='checked';
                                                }
                                            }
                                            $img='';
                                            if($op['IMAGEN']!='' and file_exists(FCPATH.'archivos/contenidos/preguntas/'.$op['IMAGEN'])){
                                                $img='<div class="thumbnail"><img src="'.base_url('archivos/contenidos/preguntas/')."/".$op['IMAGEN'].'"/></div>';
                                            }
                                            $tabla.='<tr><td valign="top"><input required="" name="opcion_seleccionada['.$p.'][]" type="checkbox" value="'.$p.'-'.$or.'" id="opcion_respuesta'.$or.'" style="transform: scale(1.5)" class="claseopcion" '.$seleccionado.'></td><td style="padding-left:10px"><label for="opcion_respuesta'.$or.'" style="cursor: pointer">'.$op['OPCION_RESPUESTA'].' '.$img.'</label></td></tr>';
                                        }
                                    }
                                    $tabla.='</table>
											</div>';
                                    $btnSig='';
                                    if(isset($preguntas[$k+1])){
                                        $btnSig='<button type="button" name="btn_sig" id="btn_sig" value="Siguiente" class="btn btn-primary" onclick="get_pregunta_remedial(\''.$id_estudiante_carrera_materia.'\',\''.$preguntas[$k].'\',\''.$preguntas[$k+1].'\',1)">Siguiente <i class="bi bi-arrow-bar-right"></i></button>';
                                    }elseif(($k+1)==count($preguntas)){
                                        $btnSig='<button type="button" name="btn_sig" id="btn_sig" value="Finalizar" class="btn btn-success" onclick="get_pregunta_remedial(\''.$id_estudiante_carrera_materia.'\',\''.$preguntas[$k].'\',\'-1\',1)">Finalizar</button>';
                                    }
                                    $btnAnt='';
                                    if(isset($preguntas[$k-1])){
                                        $btnAnt='<button type="button" name="btn_ant" value="Anterior" class="btn btn-default" onclick="get_pregunta_remedial(\''.$id_estudiante_carrera_materia.'\',\''.$preguntas[$k].'\',\''.$preguntas[$k-1].'\',1)"><i class="bi bi-arrow-bar-left"></i> Anterior</button>';
                                    }
                                    $tabla.='<div id="error-pregunta" style="color:red; text-align:right"></div>';
                                    $tabla.='<div class="card-footer"><table width="100%"><tr><td align="left">'.$btnAnt.'</td><td align="right">'.$btnSig.'</td></tr></table></div>';
                                    $tabla.='<script>window.onblur = function() { cambiaPreguntaRemedial(\''.$id_estudiante_carrera_materia.'\',\''.$preguntas[$k].'\',\''.$preguntas[$k].'\',1);console.log(\'salio de la ventana\'); }</script>';
                                    $tabla.='</div>';
                                    break;
                                }
                            }
                        }
                    }else{
                        $tabla.='<div class="alert alert-danger">No existe examen configurado</div>';
                    }
                }
                $respuesta['preguntas'] = $tabla;
                $respuesta['tamanio_modal'] = $tamanio_modal;
            }

            echo json_encode($respuesta);
        }else{
            echo 'Acceso Denegado';
        }
    }

    ///////////////////////////////////////////////////////////////
    public function getSupletorioEstudianteMateria(){
        $idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
        if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,106)){
            $usuario=$this->session->userdata('loggeado');
            $id_estudiante_carrera_materia = trim($this->input->post('id_estudiante_carrera_materia'));
            $etapa = trim($this->input->post('etapa'));
            $dat['ETAPA']=$etapa;
            $dat['ID_ESTUDIANTE_CARRERA_MATERIA']=$id_estudiante_carrera_materia;
            $dat['ESTADO_ESTUDIANTE']='0';
            $clases_examenes=array();
            if($id_estudiante_carrera_materia!=null and $id_estudiante_carrera_materia!='' and $id_estudiante_carrera_materia>0){
                $clases_examenes=$this->academico_model->buscarGruposExamenesEstudiantes($dat);
            }

            $idRubro=21;//supletorio
            $arancelExamenSupletorio = $this->facturacion_model->buscarArancel(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$id_estudiante_carrera_materia, 'ID_RUBRO'=>$idRubro));
            $texto_arancel='';
            if(count($arancelExamenSupletorio)>0 and isset($arancelExamenSupletorio[0]['NOMBRE_ARANCEL']) and ($arancelExamenSupletorio[0]['ESTADO'] == '0' or $arancelExamenSupletorio[0]['ESTADO'] == 1)){
                $texto_arancel='<div class="alert alert-warning"><strong>Debe pagar el rubro: '.$arancelExamenSupletorio[0]['NOMBRE_ARANCEL'].' </strong></div>';
            }
            $tamanio_modal = 0;
            //$clases_examenes=$this->academico_model->buscarGruposExamenesEstudiantes($dat);
            if($usuario['ID_PERFIL']==5 and count($clases_examenes)>0){
                $clase_examen=$clases_examenes[0];
                $tabla='<input name="idecm" type="hidden" id="idecm" value="'.$id_estudiante_carrera_materia.'"><input name="etapa" type="hidden" id="etapa" value="'.$etapa.'">';
                $fecha_examen_inicio = $clase_examen['FECHA_SUPLETORIO'].' '.$clase_examen['HORA_SUPLETORIO'].':00';
                $ff_examen = date_create(date('Y-m-d H:i:s'));//fecha final por defecto
                $dato_contenido=$this->academico_model->getContenidoMateria($clase_examen['ID_CARRERA_MATERIA'],$clase_examen['ID_PERIODO_ACADEMICO']);
                if($dato_contenido!=NULL){
                    if($dato_contenido['DURACION_EXAMEN']<=0){
                        $plantilla=$this->academico_model->buscar_plantillas(array('ID_PLANTILLA'=>$dato_contenido['ID_PLANTILLA']));
                        $dato_contenido['DURACION_EXAMEN']=$plantilla[0]['DURACION_EXAMEN'];
                    }
                    if($dato_contenido['DURACION_EXAMEN']>0 and $clase_examen['FECHA_SUPLETORIO']!=NULL and $clase_examen['FECHA_SUPLETORIO']!='0000-00-00' and $clase_examen['HORA_SUPLETORIO']!='' and $clase_examen['HORA_SUPLETORIO']!=NULL){
                        $ff_examen = date_create($fecha_examen_inicio);
                        $ff_examen->modify('+ '.$dato_contenido['DURACION_EXAMEN'].' minute');
                    }
                }
                $examenes_estudiante_aplazados = $this->academico_model->buscarExamenesEstudiantesAplazados(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$id_estudiante_carrera_materia,'ETAPA'=>'0'));
                $numPreguntasContestadas=0;
                if(count($examenes_estudiante_aplazados)>0 and $dato_contenido!=NULL){//si tiene fecha aplazado
                    $aplazo=$examenes_estudiante_aplazados[0];
                    $fecha_examen_inicio=$aplazo['FECHA_APLAZADO'].' '.$aplazo['HORA_APLAZADO'].':00';
                    $ff_examen = date_create($fecha_examen_inicio);
                    if($aplazo['DURACION_EXAMEN']!=NULL and $aplazo['DURACION_EXAMEN']>0){
                        $ff_examen->modify('+ '.$aplazo['DURACION_EXAMEN'].' minute');
                    }else{
                        $ff_examen->modify('+ '.$dato_contenido['DURACION_EXAMEN'].' minute');
                    }
                    if($aplazo['NUM_PREGUNTA_CONTESTADA']!=NULL){
                        $numPreguntasContestadas=$aplazo['NUM_PREGUNTA_CONTESTADA'];
                    }
                }
                $fi_examen = date_create($fecha_examen_inicio);
                //$ff_examen = date_create($fecha_examen_fin);
                $f_actual = date_create(date('Y-m-d H:i:s'));
                $interval = date_diff($f_actual, $ff_examen);
                $days = $interval->format('%a');
                $seconds = 0;
                if($days){
                    $seconds += 24 * 60 * 60 * $days;
                }
                $hours = $interval->format('%H');
                if($hours){
                    $seconds += 60 * 60 * $hours;
                }
                $minutes = $interval->format('%i');
                if($minutes){
                    $seconds += 60 * $minutes;
                }
                $seconds += $interval->format('%s');
                $seg_interval=$seconds;
                //verifico si ya tiene examen web personalizado el estudiante
                $examenes_estudiante=$this->academico_model->buscarExamenesEstudiantes(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$id_estudiante_carrera_materia,'ETAPA'=>$etapa,'TIPO_EXAMEN'=>'0'));
                //verifico si ya tiene examen fisico personalizado el estudiante
                $examenes_estudiante_fisico=$this->academico_model->buscarExamenesEstudiantes(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$id_estudiante_carrera_materia,'ETAPA'=>$etapa,'TIPO_EXAMEN'=>1));
                if(count($examenes_estudiante)>0 and $examenes_estudiante[0]['ESTADO']==1){
                    $tabla.='<div class="alert alert-success">Examen Realizado. Calificaci&oacute;n: <strong>'.number_format(floatval($examenes_estudiante[0]['CALIFICACION']),2).'</strong></div>';
                    ///VISTA DE DETALLE DEL EXAMEN PARA EL ESTUDIANTES
                    //CUANTAS HA APROBADO
                    //CUANTAS HA SIDO INCORRECTAS
                    //CUANTAS NO HAN CONTESTADO
                    $examen=$examenes_estudiante[0];
                    $preguntas=explode('+',$examen['IDS_PREGUNTA_CONTENIDO']);
                    $opciones=explode('+',$examen['IDS_OPCION_RESPUESTA_CONTENIDO']);
                    $respuestas=explode('+',$examen['IDS_RESPUESTA']);
                    $correcto=0;
                    $tabla.='<div class="card"><div class="card-body">';
                    foreach($preguntas as $k=>$p){
                        $correcto=0;
                        $tabla.='<div class="row">';
                        $tabla.='<div class="col text-right" style="text-align: right">';
                        $tabla.='<label class="text-left" style="font-size:20px;">Pregunta '.($k+1).'</label> ';
                        $tabla.='</div>';
                        $pregunta=$this->academico_model->getPreguntasContenido(array('ID_PREGUNTA_CONTENIDO'=>$p));
                        $pe=$pregunta[0];
                        if(isset($respuestas[$k])){
                            $opcionesSeleccionadas = explode("-", $respuestas[$k]);
                        }else{
                            $opcionesSeleccionadas = array();
                        }
                        $opcionesCorrectas     = explode("+", trim($pe['ID_OPCION_RESPUESTA_CONTENIDO'],"+"));
                        $correctoPregunta = 0;
                        if (count($opcionesSeleccionadas) == count($opcionesCorrectas)){
                            foreach ($opcionesSeleccionadas as $oSeleccionada){
                                foreach ($opcionesCorrectas as $ocorrecta){
                                    if ($ocorrecta == $oSeleccionada){
                                        $correctoPregunta++;
                                    }
                                }
                            }
                        }
                        if(isset($respuestas[$k]) and count($opcionesCorrectas) == $correctoPregunta){
                            $correcto++;
                        }
                        $tabla.='<div class="col"  style="font-size:25px;">';
                        if (count($opcionesSeleccionadas)==0 || $opcionesSeleccionadas[0]=="0") {
                            //$tabla.= "No contest�";
                            $tabla.='<i class="bi-question-circle-fill" style="color:blue;"></i>';
                        }elseif ($correcto==0) {
                            //$tabla.= "Incorrecto";
                            $tabla.='<i class="bi-x-circle-fill" style="color:red;"></i>';
                        }else{
                            //$tabla.= "Correcto";
                            $tabla.='<i class="bi-check-circle-fill" style="color:green;"></i>';
                        }
                        $tabla.='</div>';
                        $tabla.='</div><br>';
                    }
                    $tabla.='</div></div>';
                }elseif(count($examenes_estudiante_fisico)>0){
                    $tabla.='<div class="alert alert-info">Examen Impreso</strong></div>';
                }elseif($f_actual<$fi_examen){
                    $tabla.=$texto_arancel.'<div class="alert alert-info">Aun no inicia examen <strong>'.$fi_examen->format('Y-m-d H:i').'</strong> Cierre e ingrese a la hora planificada</div>';
                }elseif($f_actual>$ff_examen){
                    $tabla.=$texto_arancel.'<div class="alert alert-info">Ya finaliz&oacute; examen <strong>'.$ff_examen->format('Y-m-d H:i').'</strong></div>';
                    $idp = trim($this->input->post('idp'));
                    if(isset($idp) and $idp==-1 and count($examenes_estudiante)>0 and $examenes_estudiante[0]['ESTADO']==0){//finalizar Examen por tiempo limite
                        $examen=$examenes_estudiante[0];
                        $preguntas=explode('+',$examen['IDS_PREGUNTA_CONTENIDO']);
                        $opciones=explode('+',$examen['IDS_OPCION_RESPUESTA_CONTENIDO']);
                        $respuestas=explode('+',$examen['IDS_RESPUESTA']);
                        $correcto=0;
                        foreach($preguntas as $k=>$p){
                            $pregunta=$this->academico_model->getPreguntasContenido(array('ID_PREGUNTA_CONTENIDO'=>$p));
                            $pe=$pregunta[0];
                            $opcionesSeleccionadas = explode("-", $respuestas[$k]);
                            $opcionesCorrectas     = explode("+", trim($pe['ID_OPCION_RESPUESTA_CONTENIDO'],"+"));
                            $correctoPregunta = 0;
                            if (count($opcionesSeleccionadas) == count($opcionesCorrectas)){
                                foreach ($opcionesSeleccionadas as $oSeleccionada){
                                    foreach ($opcionesCorrectas as $ocorrecta){
                                        if ($ocorrecta == $oSeleccionada){
                                            $correctoPregunta++;
                                        }
                                    }
                                }
                            }
                            if(isset($respuestas[$k]) and count($opcionesCorrectas) == $correctoPregunta){
                                $correcto++;
                            }
                        }
                        $calificacion=round($correcto*10/count($preguntas),2);
                        $dat_actualiza=array();
                        $dat_actualiza['ESTADO']=1;
                        $dat_actualiza['CALIFICACION']=$calificacion;
                        $dat_actualiza['FECHA_ACTUALIZACION']=date('Y-m-d H:i:s');
                        $dat_actualiza['FECHA_FIN_CONEXION']=date('Y-m-d H:i:s');
                        $this->academico_model->actualizarExamenEstudiante($dat_actualiza,$examen['ID_EXAMEN_ESTUDIANTE']);
                        $tabla.='<div class="alert alert-success">Examen finalizado. Calificaci&oacute;n: <strong>'.number_format(floatval($calificacion),2).'</strong></div>';
                        //transpasar nota supletorio
                        $this->registraCalificacionComponente(0,$id_estudiante_carrera_materia,0,$calificacion);
                    }
                }else if($texto_arancel!=''){//tiene arancel supletorio y no esta pagado
                    $tabla.=$texto_arancel;
                }else{
                    if(count($examenes_estudiante)<=0 and $seg_interval>0){
                        //verificar si existe base de preguntas para este examen
                        if(isset($dato_contenido['ID_CONTENIDO'])){
                            $preguntas_clase=$this->academico_model->getPreguntasContenido($dato_contenido);
                            if(count($preguntas_clase)<=0){
                                //generar base de preguntas examen
                                $this->generarBasePreguntasContenido($dato_contenido);
                            }
                        }
                        //generar examen web del estudiante
                        $dato_contenido['ID_ESTUDIANTE_CARRERA_MATERIA']=$clase_examen['ID_ESTUDIANTE_CARRERA_MATERIA'];
                        $this->generarExamenEstudiante($dato_contenido,'0','0');
                        $examenes_estudiante=$this->academico_model->buscarExamenesEstudiantes(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$id_estudiante_carrera_materia,'ETAPA'=>'0','TIPO_EXAMEN'=>'0'));
                    }
                    if(count($examenes_estudiante)>0 and $seg_interval>0){
                        $tamanio_modal = 1;
                        $idp = trim($this->input->post('idp'));
                        $opcion_seleccionado = trim($this->input->post('op'));//respuesta
                        $examen=$examenes_estudiante[0];
                        $preguntas=explode('+',$examen['IDS_PREGUNTA_CONTENIDO']);
                        $opciones=explode('+',$examen['IDS_OPCION_RESPUESTA_CONTENIDO']);
                        $respuestas=explode('+',$examen['IDS_RESPUESTA']);

                        if($idp==NULL and $examen['IDS_RESPUESTA']==''){
                            $idp=$preguntas[0];
                        }elseif($idp==NULL){
                            $idp=$preguntas[count($respuestas)-1];
                        }
                        if($opcion_seleccionado!=NULL and $opcion_seleccionado!=''){
                            $v_opSeleccionadas = explode("+", trim($opcion_seleccionado,"+"));
                            $indicePregunta = "0";
                            $opcionesRespuestasSeleccionadas = "";
                            foreach ($v_opSeleccionadas as $kops => $ops) {
                                //guardar respuesta
                                $op_select=explode('-',$ops);
                                foreach($preguntas as $k=>$p){
                                    if($p==$op_select[0]){
                                        $opcionesRespuestasSeleccionadas .= "-".$op_select[1];
                                        $indicePregunta = $k;
                                        break;
                                    }
                                }
                                $respuestas[$k]= trim($opcionesRespuestasSeleccionadas,"-");
                            }
                            if (isset($respuestas[$indicePregunta]) && $respuestas[$indicePregunta]=="") {
                                $respuestas[$indicePregunta] =0;
                            }
                            // return 0;
                            $res_total=implode('+',$respuestas);
                            if($res_total!=$examen['IDS_RESPUESTA']){
                                $dat_actualiza=array();
                                $dat_actualiza['IDS_RESPUESTA']=$res_total;
                                $dat_actualiza['FECHA_ACTUALIZACION']=date('Y-m-d H:i:s');
                                $dat_actualiza['FECHA_FIN_CONEXION']=date('Y-m-d H:i:s');
                                $this->academico_model->actualizarExamenEstudiante($dat_actualiza,$examen['ID_EXAMEN_ESTUDIANTE']);
                            }
                            //cambiar de pregunta si no selecciona respuesta
                            if($respuestas[$indicePregunta]==0){
                                $dat_b['ID_CONTENIDO']=$dato_contenido['ID_CONTENIDO'];
                                $dat_b['ALEATORIO']=1;
                                $dat_b['NUM_REGISTROS']=1;
                                $dat_b['EXCLUIR']=$preguntas;
                                $preguntas_estudiante=$this->academico_model->getPreguntasContenido($dat_b);
                                if(count($preguntas_estudiante)>0){
                                    $preguntas[$indicePregunta]=$preguntas_estudiante[0]['ID_PREGUNTA_CONTENIDO'];
                                    if(!in_array($idp,$preguntas)){
                                        $idp=$preguntas_estudiante[0]['ID_PREGUNTA_CONTENIDO'];
                                    }
                                    $opciones_respuesta_estudiante=$this->academico_model->getOpcionesRespuestaContenido(array('ID_PREGUNTA_CONTENIDO'=>$preguntas[$indicePregunta]));
                                    if(count($opciones_respuesta_estudiante)>0){
                                        shuffle($opciones_respuesta_estudiante);//desordenar las opciones de respuesta
                                        foreach($opciones_respuesta_estudiante as $ore){
                                            $ids_opcion_respuesta[]=$ore['ID_OPCION_RESPUESTA_CONTENIDO'];
                                        }
                                    }else{
                                        $ids_opcion_respuesta[]='0';
                                    }
                                    $opciones[$indicePregunta]=implode('-',$ids_opcion_respuesta);
                                }
                                $dat_actualiza=array();
                                $dat_actualiza['IDS_PREGUNTA_CONTENIDO']=implode('+',$preguntas);
                                $dat_actualiza['IDS_OPCION_RESPUESTA_CONTENIDO']=implode('+',$opciones);
                                $this->academico_model->actualizarExamenEstudiante($dat_actualiza,$examen['ID_EXAMEN_ESTUDIANTE']);
                            }
                        }
                        if($idp==-1){//finalizar Examen
                            $correcto=0;
                            foreach($preguntas as $k=>$p){
                                $pregunta=$this->academico_model->getPreguntasContenido(array('ID_PREGUNTA_CONTENIDO'=>$p));
                                $pe=$pregunta[0];
                                $opcionesSeleccionadas = explode("-", $respuestas[$k]);
                                $opcionesCorrectas     = explode("+", trim($pe['ID_OPCION_RESPUESTA_CONTENIDO'],"+"));
                                $correctoPregunta = 0;
                                if (count($opcionesSeleccionadas) == count($opcionesCorrectas)){
                                    foreach ($opcionesSeleccionadas as $oSeleccionada){
                                        foreach ($opcionesCorrectas as $ocorrecta){
                                            if ($ocorrecta == $oSeleccionada){
                                                $correctoPregunta++;
                                            }
                                        }
                                    }
                                }
                                if(isset($respuestas[$k]) and count($opcionesCorrectas) == $correctoPregunta){
                                    $correcto++;
                                }
                            }
                            $calificacion=round($correcto*10/count($preguntas),2);
                            $dat_actualiza=array();
                            $dat_actualiza['ESTADO']=1;
                            $dat_actualiza['CALIFICACION']=$calificacion;
                            $dat_actualiza['FECHA_ACTUALIZACION']=date('Y-m-d H:i:s');
                            $dat_actualiza['FECHA_FIN_CONEXION']=date('Y-m-d H:i:s');
                            $this->academico_model->actualizarExamenEstudiante($dat_actualiza,$examen['ID_EXAMEN_ESTUDIANTE']);
                            $tabla.='<div class="alert alert-success">Examen finalizado. Calificaci&oacute;n: <strong>'.number_format(floatval($calificacion),2).'</strong></div>';
                            //transpasar nota supletorio
                            $this->registraCalificacionComponente(0,$id_estudiante_carrera_materia,0,$calificacion);
                        }else{//mostrar pregunta
                            $tabla.='<div class="alert alert-info" role="alert"><table width="100%"><tr><td style="font-size:18px; color:blue">Pregunta '.(array_search($idp,$preguntas)+1).' de '.count($preguntas).'</td>';
                            if($seg_interval>0){
                                $tabla.='<td><div align="right" style="font-size:18px; color:blue" id="countdown"></div><script>contador('.$seg_interval.');</script></td>';
                            }
                            $tabla.='</tr></table></div>';
                            foreach($preguntas as $k=>$p){
                                if($idp==$p){
                                    $pregunta=$this->academico_model->getPreguntasContenido(array('ID_PREGUNTA_CONTENIDO'=>$p));
                                    $pe=$pregunta[0];
                                    $img='';
                                    if($pe['IMAGEN']!='' and file_exists(FCPATH.'archivos/contenidos/preguntas/'.$pe['IMAGEN'])){
                                        $img='<div class="thumbnail"><img src="'.base_url('archivos/contenidos/preguntas/')."/".$pe['IMAGEN'].'"/></div>';
                                    }

                                    $tabla.='<div class="card">
                                                  <div class="card-header">
                                                      <h4 class="card-title">
                                                          <div class="d-flex flex-row align-content-center align-items-center">
                                                              <div class="sw-5 me-4">
                                                                  <div class="border border-1 border-primary rounded-xl sw-5 sh-5 text-primary d-flex justify-content-center align-items-center">'.($k+1).'</div>
                                                              </div>
                                                              <div class="heading mb-0">
                                                                  '.$pe['PREGUNTA'].'
                                                              </div>
                                                          </div>
                                                      </h4>'.$img.'
                                            
                                                  </div>
                                                  <div class="card-body">
                                                    <table>';

                                    //obtengo las opciones de respuesta
                                    $opciones_respuesta=explode('-',$opciones[$k]);
                                    //recorrer las opciones de respuesta
                                    foreach($opciones_respuesta as $or){
                                        $opcion=$this->academico_model->getOpcionesRespuestaContenido(array('ID_OPCION_RESPUESTA_CONTENIDO'=>$or));//obtengo el texto de la opci�n de respuesta
                                        $op=$opcion[0];
                                        $seleccionado='';
                                        if(isset($respuestas[$k])){

                                            $respuestasSeleccionadas = explode("-", $respuestas[$k]);
                                            if (in_array($or, $respuestasSeleccionadas)) {
                                                $seleccionado='checked';
                                            }
                                        }
                                        $img='';
                                        if($op['IMAGEN']!='' and file_exists(FCPATH.'archivos/contenidos/preguntas/'.$op['IMAGEN'])){
                                            $img='<div class="thumbnail"><img src="'.base_url('archivos/contenidos/preguntas/')."/".$op['IMAGEN'].'"/></div>';
                                        }
                                        $tabla.='<tr><td valign="top"><input required="" name="opcion_seleccionada['.$p.'][]" type="checkbox" value="'.$p.'-'.$or.'" id="opcion_respuesta'.$or.'" style="transform: scale(1.5)" class="claseopcion" '.$seleccionado.'></td><td style="padding-left:10px"><label for="opcion_respuesta'.$or.'" style="cursor: pointer">'.$op['OPCION_RESPUESTA'].' '.$img.'</label></td></tr>';
                                    }
                                    $tabla.='</table>
                                                </div>';
                                    $btnSig='';
                                    if(isset($preguntas[$k+1])){
                                        $btnSig='<button type="button" name="btn_sig" id="btn_sig" value="Siguiente" class="btn btn-primary" onclick="get_pregunta_supletorio(\''.$id_estudiante_carrera_materia.'\',\''.$etapa.'\',\''.$preguntas[$k].'\',\''.$preguntas[$k+1].'\',1)">Siguiente <i class="bi bi-arrow-bar-right"></i></button>';
                                    }elseif(($k+1)==count($preguntas)){
                                        $btnSig='<button type="button" name="btn_sig" id="btn_sig" value="FInalizar" class="btn btn-success" onclick="get_pregunta_supletorio(\''.$id_estudiante_carrera_materia.'\',\''.$etapa.'\',\''.$preguntas[$k].'\',\'-1\',1)">Finalizar</button>';
                                    }
                                    $btnAnt='';
                                    if(isset($preguntas[$k-1]) and $k>=$numPreguntasContestadas){
                                        $btnAnt='<button type="button" name="btn_ant" value="Anterior" class="btn btn-default" onclick="get_pregunta_supletorio(\''.$id_estudiante_carrera_materia.'\',\''.$etapa.'\',\''.$preguntas[$k].'\',\''.$preguntas[$k-1].'\',1)"><i class="bi bi-arrow-bar-left"></i> Anterior</button>';
                                    }
                                    $tabla.='<div id="error-pregunta" style="color:red; text-align:right"></div>';
                                    $tabla.='<div class="card-footer"><table width="100%"><tr><td align="left">'.$btnAnt.'</td><td align="right">'.$btnSig.'</td></tr></table></div>';
                                    $tabla.='<script>window.onblur = function() { cambiaPreguntaSupletorio(\''.$id_estudiante_carrera_materia.'\',\''.$etapa.'\',\''.$preguntas[$k].'\',\''.$preguntas[$k].'\',1);console.log(\'salio de la ventana\'); }</script>';
                                    $tabla.='</div>';
                                    break;
                                }
                            }
                        }
                    }else{
                        $tabla.='<div class="alert alert-danger">No existe examen configurado</div>';
                    }
                }
                //            $respuesta=$tabla;
                $respuesta['preguntas'] = $tabla;
                $respuesta['tamanio_modal'] = $tamanio_modal;
            }
            echo json_encode($respuesta);
        }else{
            echo 'Acceso Denegado';
        }
    }

    ///////////////////////////////////////////////////////////////
    public function getExamenEstudianteMateria(){
        $idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
        if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,105)){
            $usuario=$this->session->userdata('loggeado');
            //$id_estudiante_carrera_materia = trim($this->input->post('id_estudiante_carrera_materia'));
            $ids=trim($this->input->post('id_estudiante_carrera_materia'));
            $ids=explode('_',$ids);
            $id_estudiante_carrera_materia = $ids[0];
            $id_plantilla = 0;
            if(isset($ids[1])){
                $id_plantilla = $ids[1];
            }
            $etapa = trim($this->input->post('etapa'));
            $dat['ETAPA']=$etapa;
            $dat['ID_ESTUDIANTE_CARRERA_MATERIA']=$id_estudiante_carrera_materia;
            $dat['ESTADO_ESTUDIANTE']='0';
            $dat['ID_PLANTILLA']=$id_plantilla;
            $clases_examenes=array();
            $tamanio_modal = 0;
            if($id_estudiante_carrera_materia!=NULL and $id_estudiante_carrera_materia!='' and $id_estudiante_carrera_materia>0){
                $clases_examenes=$this->academico_model->buscarGruposExamenesEstudiantes($dat);
            }
            //$clases_examenes=$this->academico_model->buscarGruposExamenesEstudiantes($dat);
            if($usuario['ID_PERFIL']==5 and count($clases_examenes)>0){
                $clase_examen=$clases_examenes[0];
                $tabla='';
                $tabla.='<input name="idecm" type="hidden" id="idecm" value="'.$id_estudiante_carrera_materia.'_'.$id_plantilla.'"><input name="etapa" type="hidden" id="etapa" value="'.$etapa.'">';
                $fecha_examen_inicio = $clase_examen['FECHA_EXAMEN'].' '.$clase_examen['HORA_EXAMEN'].':00';
                $ff_examen = date_create(date('Y-m-d H:i:s'));//fecha final por defecto
                $dato_contenido=$this->academico_model->getContenidoMateria($clase_examen['ID_CARRERA_MATERIA'],$clase_examen['ID_PERIODO_ACADEMICO'],$id_plantilla);
                if($dato_contenido!=NULL){
                    if($dato_contenido['DURACION_EXAMEN']<=0){
                        $plantilla=$this->academico_model->buscar_plantillas(array('ID_PLANTILLA'=>$dato_contenido['ID_PLANTILLA']));
                        $dato_contenido['DURACION_EXAMEN']=$plantilla[0]['DURACION_EXAMEN'];
                    }
                    if($dato_contenido['DURACION_EXAMEN']>0 and $clase_examen['FECHA_EXAMEN']!=NULL and $clase_examen['FECHA_EXAMEN']!='0000-00-00' and $clase_examen['HORA_EXAMEN']!='' and $clase_examen['HORA_EXAMEN']!=NULL){
                        $ff_examen = date_create($fecha_examen_inicio);
                        $ff_examen->modify('+ '.$dato_contenido['DURACION_EXAMEN'].' minute');
                    }
                }
                $examenes_estudiante_aplazados = $this->academico_model->buscarExamenesEstudiantesAplazados(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$id_estudiante_carrera_materia,'ETAPA'=>$etapa,'ID_PLANTILLA'=>$id_plantilla));
                $numPreguntasContestadas=0;
                if(count($examenes_estudiante_aplazados)>0 and $dato_contenido!=NULL){//si tiene fecha aplazado
                    $aplazo=$examenes_estudiante_aplazados[0];
                    if($aplazo['HORA_APLAZADO']=='' or $aplazo['HORA_APLAZADO']==NULL){
                        $aplazo['HORA_APLAZADO']='00:00';
                        if(date_create($aplazo['FECHA_APLAZADO'])>=date_create(date('Y-m-d'))){
                            $aplazo['FECHA_APLAZADO']=date('Y-m-d');
                            $aplazo['HORA_APLAZADO']=date('H:i');
                            $actualiza_aplazo['FECHA_APLAZADO']=date('Y-m-d');
                            $actualiza_aplazo['HORA_APLAZADO']=date('H:i');
                            $actualiza_aplazo['ID_USUARIO_ACTUALIZA']=$usuario['ID_USUARIO'];
                            $actualiza_aplazo['FECHA_ACTUALIZACION']=date('Y-m-d H:i:s');
                            $this->academico_model->actualizarExamenEstudianteAplazado($actualiza_aplazo,$aplazo['ID_EXAMEN_ESTUDIANTE_APLAZADO']);
                        }
                    }
                    $fecha_examen_inicio=$aplazo['FECHA_APLAZADO'].' '.$aplazo['HORA_APLAZADO'].':00';
                    $ff_examen = date_create($fecha_examen_inicio);
                    if($aplazo['DURACION_EXAMEN']!=NULL and $aplazo['DURACION_EXAMEN']>0){
                        $ff_examen->modify('+ '.$aplazo['DURACION_EXAMEN'].' minute');
                    }else{
                        $ff_examen->modify('+ '.$dato_contenido['DURACION_EXAMEN'].' minute');
                    }
                    if($aplazo['NUM_PREGUNTA_CONTESTADA']!=NULL){
                        $numPreguntasContestadas=$aplazo['NUM_PREGUNTA_CONTESTADA'];
                    }
                }
                $fi_examen = date_create($fecha_examen_inicio);
                //$ff_examen = date_create($fecha_examen_fin);
                $f_actual = date_create(date('Y-m-d H:i:s'));
                $interval = date_diff($f_actual, $ff_examen);
                $days = $interval->format('%a');
                $seconds = 0;
                if($days){
                    $seconds += 24 * 60 * 60 * $days;
                }
                $hours = $interval->format('%H');
                if($hours){
                    $seconds += 60 * 60 * $hours;
                }
                $minutes = $interval->format('%i');
                if($minutes){
                    $seconds += 60 * $minutes;
                }
                $seconds += $interval->format('%s');
                $seg_interval=$seconds;
                //verifico si ya tiene examen web personalizado el estudiante
                $examenes_estudiante=$this->academico_model->buscarExamenesEstudiantes(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$id_estudiante_carrera_materia,'ETAPA'=>$etapa,'TIPO_EXAMEN'=>'0','ID_PLANTILLA'=>$id_plantilla));
                //verifico si ya tiene examen fisico personalizado el estudiante
                $examenes_estudiante_fisico=$this->academico_model->buscarExamenesEstudiantes(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$id_estudiante_carrera_materia,'ETAPA'=>$etapa,'TIPO_EXAMEN'=>1,'ID_PLANTILLA'=>$id_plantilla));
                if(count($examenes_estudiante)>0 and $examenes_estudiante[0]['ESTADO']==1){
                    $tabla.='<div class="alert alert-success">Examen Realizado. Calificaci&oacute;n: <strong>'.number_format(floatval($examenes_estudiante[0]['CALIFICACION']),2).'</strong></div>';
                    ///VISTA DE DETALLE DEL EXAMEN PARA EL ESTUDIANTES
                    //CUANTAS HA APROBADO
                    //CUANTAS HA SIDO INCORRECTAS
                    //CUANTAS NO HAN CONTESTADO
                    $examen=$examenes_estudiante[0];
                    $preguntas=explode('+',$examen['IDS_PREGUNTA_CONTENIDO']);
                    $opciones=explode('+',$examen['IDS_OPCION_RESPUESTA_CONTENIDO']);
                    $respuestas=explode('+',$examen['IDS_RESPUESTA']);
                    $correcto=0;
                    if($examen['IDS_PREGUNTA_CONTENIDO']!='' and $examen['IDS_PREGUNTA_CONTENIDO']!=NULL){
                        $tabla.='<div class="card"><div class="card-body">';
                        foreach($preguntas as $k=>$p){
                            $correcto=0;
                            $tabla.='<div class="row">';
                            $tabla.='<div class="col text-right" style="text-align: right">';
                            $tabla.='<label class="text-left" style="font-size:20px; ">Pregunta '.($k+1).'</label> ';
                            $tabla.='</div>';
                            $pregunta=$this->academico_model->getPreguntasContenido(array('ID_PREGUNTA_CONTENIDO'=>$p));
                            $pe=$pregunta[0];
                            if(isset($respuestas[$k])){
                                $opcionesSeleccionadas = explode("-", $respuestas[$k]);
                            }else{
                                $opcionesSeleccionadas = array();
                            }
                            $opcionesCorrectas     = explode("+", trim($pe['ID_OPCION_RESPUESTA_CONTENIDO'],"+"));
                            $correctoPregunta = 0;
                            if (count($opcionesSeleccionadas) == count($opcionesCorrectas)){
                                foreach ($opcionesSeleccionadas as $oSeleccionada){
                                    foreach ($opcionesCorrectas as $ocorrecta){
                                        if ($ocorrecta == $oSeleccionada){
                                            $correctoPregunta++;
                                        }
                                    }
                                }
                            }
                            if(isset($respuestas[$k]) and count($opcionesCorrectas) == $correctoPregunta){
                                $correcto++;
                            }
                            $tabla.='<div class="col"  style="font-size:25px;">';
                            if (count($opcionesSeleccionadas)==0 || $opcionesSeleccionadas[0]=="0") {
                                //$tabla.= "No contest�";
                                $tabla.='<i class="bi-question-circle-fill" style="color:blue;"></i>';
                            }elseif ($correcto==0) {
                                //$tabla.= "Incorrecto";
                                $tabla.='<i class="bi-x-circle-fill" style="color:red;"></i>';
                            }else{
                                //$tabla.= "Correcto";
                                $tabla.='<i class="bi-check-circle-fill" style="color:green;"></i>';
                            }
                            $tabla.='</div>';
                            $tabla.='</div><br>';
                        }
                        $tabla.='</div></div>';
                    }
                }elseif(count($examenes_estudiante_fisico)>0){
                    $tabla.='<div class="alert alert-info">Examen Impreso</strong></div>';
                }elseif($f_actual<$fi_examen){
                    if($fi_examen->format('H:i')=='00:00'){
                        $tabla.='<div class="alert alert-info">Aun no inicia examen <strong>'.$fi_examen->format('Y-m-d').'</strong> Cierre e ingrese a la fecha planificada</div>';
                    }else{
                        $tabla.='<div class="alert alert-info">Aun no inicia examen <strong>'.$fi_examen->format('Y-m-d H:i').'</strong> Cierre e ingrese a la hora planificada</div>';
                    }
                }elseif($f_actual>$ff_examen){
                    $tabla.='<div class="alert alert-info">Ya finaliz&oacute; examen <strong>'.$ff_examen->format('Y-m-d H:i').'</strong></div>';
                    $idRubro=20;//examen atrasado
                    if($etapa==0){
                        $idRubro=21;//supletorio atrasado
                    }
                    $comprobarPagoArancelExamenAtrasado = $this->facturacion_model->buscarArancel(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$id_estudiante_carrera_materia, 'ID_RUBRO'=>$idRubro));
                    if(count($comprobarPagoArancelExamenAtrasado)>0 and isset($comprobarPagoArancelExamenAtrasado[0]['NOMBRE_ARANCEL']) and $comprobarPagoArancelExamenAtrasado[0]['ESTADO'] == '0'){
                        $tabla.='<div class="alert alert-warning"><strong>Debe pagar el rubro: '.$comprobarPagoArancelExamenAtrasado[0]['NOMBRE_ARANCEL'].' </strong></div>';
                    }

                    $idp = trim($this->input->post('idp'));
                    if(isset($idp) and $idp==-1 and count($examenes_estudiante)>0 and $examenes_estudiante[0]['ESTADO']==0){//finalizar Examen por tiempo limite
                        $examen=$examenes_estudiante[0];
                        $preguntas=explode('+',$examen['IDS_PREGUNTA_CONTENIDO']);
                        $opciones=explode('+',$examen['IDS_OPCION_RESPUESTA_CONTENIDO']);
                        $respuestas=explode('+',$examen['IDS_RESPUESTA']);
                        $correcto=0;
                        foreach($preguntas as $k=>$p){
                            $pregunta=$this->academico_model->getPreguntasContenido(array('ID_PREGUNTA_CONTENIDO'=>$p));
                            $pe=$pregunta[0];
                            if(isset($respuestas[$k])){
                                $opcionesSeleccionadas = explode("-", $respuestas[$k]);
                                $opcionesCorrectas     = explode("+", trim($pe['ID_OPCION_RESPUESTA_CONTENIDO'],"+"));
                                $correctoPregunta = 0;
                                if (count($opcionesSeleccionadas) == count($opcionesCorrectas)){
                                    foreach ($opcionesSeleccionadas as $oSeleccionada){
                                        foreach ($opcionesCorrectas as $ocorrecta){
                                            if ($ocorrecta == $oSeleccionada){
                                                $correctoPregunta++;
                                            }
                                        }
                                    }
                                }
                            }
                            if(isset($respuestas[$k]) and count($opcionesCorrectas) == $correctoPregunta){
                                $correcto++;
                            }
                        }
                        $calificacion=round($correcto*10/count($preguntas),2);
                        $dat_actualiza=array();
                        $dat_actualiza['ESTADO']=1;
                        $dat_actualiza['CALIFICACION']=$calificacion;
                        $dat_actualiza['FECHA_ACTUALIZACION']=date('Y-m-d H:i:s');
                        $dat_actualiza['FECHA_FIN_CONEXION']=date('Y-m-d H:i:s');
                        $this->academico_model->actualizarExamenEstudiante($dat_actualiza,$examen['ID_EXAMEN_ESTUDIANTE']);
                        $tabla.='<div class="alert alert-success">Examen finalizado. Calificaci&oacute;n: <strong>'.number_format(floatval($calificacion),2).'</strong></div>';
                        //transpasar nota examen
                        $this->registraCalificacionComponente(1,$id_estudiante_carrera_materia,3,$calificacion,$id_plantilla);
                    }
                }else{
                    $tamanio_modal = 1;
                    if(count($examenes_estudiante)<=0 and $seg_interval>0){
                        //verificar si existe base de preguntas para este examen
                        if(isset($dato_contenido['ID_CONTENIDO'])){
                            $preguntas_clase=$this->academico_model->getPreguntasContenido($dato_contenido);
                            if(count($preguntas_clase)<=0){
                                //generar base de preguntas examen
                                $this->generarBasePreguntasContenido($dato_contenido);
                            }
                        }
                        //generar examen web del estudiante
                        $dato_contenido['ID_ESTUDIANTE_CARRERA_MATERIA']=$clase_examen['ID_ESTUDIANTE_CARRERA_MATERIA'];
                        $this->generarExamenEstudiante($dato_contenido,'0',1,$id_plantilla);
                        $examenes_estudiante=$this->academico_model->buscarExamenesEstudiantes(array('ID_ESTUDIANTE_CARRERA_MATERIA'=>$id_estudiante_carrera_materia,'ETAPA'=>$etapa,'TIPO_EXAMEN'=>'0','ID_PLANTILLA'=>$id_plantilla));
                    }
                    if(count($examenes_estudiante)>0 and $seg_interval>0){
                        $idp = trim($this->input->post('idp'));
                        $opcion_seleccionado = trim($this->input->post('op'));//respuesta
                        $examen=$examenes_estudiante[0];
                        $preguntas=explode('+',$examen['IDS_PREGUNTA_CONTENIDO']);
                        $opciones=explode('+',$examen['IDS_OPCION_RESPUESTA_CONTENIDO']);
                        $respuestas=explode('+',$examen['IDS_RESPUESTA']);

                        if($idp==NULL and $examen['IDS_RESPUESTA']==''){
                            $idp=$preguntas[0];
                        }elseif($idp==NULL){
                            $idp=$preguntas[count($respuestas)-1];
                        }
                        if($opcion_seleccionado!=NULL and $opcion_seleccionado!=''){
                            $v_opSeleccionadas = explode("+", trim($opcion_seleccionado,"+"));
                            $indicePregunta = "0";
                            $opcionesRespuestasSeleccionadas = "";
                            foreach ($v_opSeleccionadas as $kops => $ops) {
                                //guardar respuesta
                                $op_select=explode('-',$ops);
                                foreach($preguntas as $k=>$p){
                                    if($p==$op_select[0]){
                                        $opcionesRespuestasSeleccionadas .= "-".$op_select[1];
                                        $indicePregunta = $k;
                                        break;
                                    }
                                }
                                $respuestas[$k]= trim($opcionesRespuestasSeleccionadas,"-");
                            }
                            if (isset($respuestas[$indicePregunta]) && $respuestas[$indicePregunta]=="") {
                                $respuestas[$indicePregunta] =0;
                            }
                            // return 0;
                            $res_total=implode('+',$respuestas);
                            if($res_total!=$examen['IDS_RESPUESTA']){
                                $dat_actualiza=array();
                                $dat_actualiza['IDS_RESPUESTA']=$res_total;
                                $dat_actualiza['FECHA_ACTUALIZACION']=date('Y-m-d H:i:s');
                                $dat_actualiza['FECHA_FIN_CONEXION']=date('Y-m-d H:i:s');
                                $this->academico_model->actualizarExamenEstudiante($dat_actualiza,$examen['ID_EXAMEN_ESTUDIANTE']);
                            }
                            //cambiar de pregunta si no selecciona respuesta
                            /*if($respuestas[$indicePregunta]==0){
                                $dat_b['ID_CONTENIDO']=$dato_contenido['ID_CONTENIDO'];
                                $dat_b['ALEATORIO']=1;
                                $dat_b['NUM_REGISTROS']=1;
                                $dat_b['EXCLUIR']=$preguntas;
                                $preguntas_estudiante=$this->academico_model->getPreguntasContenido($dat_b);
                                if(count($preguntas_estudiante)>0){
                                    $preguntas[$indicePregunta]=$preguntas_estudiante[0]['ID_PREGUNTA_CONTENIDO'];
                                    if(!in_array($idp,$preguntas)){
                                        $idp=$preguntas_estudiante[0]['ID_PREGUNTA_CONTENIDO'];
                                    }
                                    $opciones_respuesta_estudiante=$this->academico_model->getOpcionesRespuestaContenido(array('ID_PREGUNTA_CONTENIDO'=>$preguntas[$indicePregunta]));
                                    if(count($opciones_respuesta_estudiante)>0){
                                        shuffle($opciones_respuesta_estudiante);//desordenar las opciones de respuesta
                                        foreach($opciones_respuesta_estudiante as $ore){
                                            $ids_opcion_respuesta[]=$ore['ID_OPCION_RESPUESTA_CONTENIDO'];
                                        }
                                    }else{
                                        $ids_opcion_respuesta[]='0';
                                    }
                                    $opciones[$indicePregunta]=implode('-',$ids_opcion_respuesta);
                                }
                                $dat_actualiza=array();
                                $dat_actualiza['IDS_PREGUNTA_CONTENIDO']=implode('+',$preguntas);
                                $dat_actualiza['IDS_OPCION_RESPUESTA_CONTENIDO']=implode('+',$opciones);
                                $this->academico_model->actualizarExamenEstudiante($dat_actualiza,$examen['ID_EXAMEN_ESTUDIANTE']);
                            }*/
                        }
                        if($idp==-1){//finalizar Examen
                            $correcto=0;
                            foreach($preguntas as $k=>$p){
                                $pregunta=$this->academico_model->getPreguntasContenido(array('ID_PREGUNTA_CONTENIDO'=>$p));
                                $pe=$pregunta[0];
                                $opcionesSeleccionadas = explode("-", $respuestas[$k]);
                                $opcionesCorrectas     = explode("+", trim($pe['ID_OPCION_RESPUESTA_CONTENIDO'],"+"));
                                $correctoPregunta = 0;
                                if (count($opcionesSeleccionadas) == count($opcionesCorrectas)){
                                    foreach ($opcionesSeleccionadas as $oSeleccionada){
                                        foreach ($opcionesCorrectas as $ocorrecta){
                                            if ($ocorrecta == $oSeleccionada){
                                                $correctoPregunta++;
                                            }
                                        }
                                    }
                                }
                                if(isset($respuestas[$k]) and count($opcionesCorrectas) == $correctoPregunta){
                                    $correcto++;
                                }
                            }
                            $calificacion=round($correcto*10/count($preguntas),2);
                            $dat_actualiza=array();
                            $dat_actualiza['ESTADO']=1;
                            $dat_actualiza['CALIFICACION']=$calificacion;
                            $dat_actualiza['FECHA_ACTUALIZACION']=date('Y-m-d H:i:s');
                            $dat_actualiza['FECHA_FIN_CONEXION']=date('Y-m-d H:i:s');
                            $this->academico_model->actualizarExamenEstudiante($dat_actualiza,$examen['ID_EXAMEN_ESTUDIANTE']);
                            $tabla.='<div class="alert alert-success">Examen finalizado. Calificaci&oacute;n: <strong>'.number_format(floatval($calificacion),2).'</strong></div>';
                            //transpasar nota examen
                            $this->registraCalificacionComponente(1,$id_estudiante_carrera_materia,3,$calificacion,$id_plantilla);
                        }else{//mostrar pregunta
                            $tabla.='<div class="alert alert-info" role="alert"> <table width="100%" ><tr><td style="font-size:18px;">Pregunta '.(array_search($idp,$preguntas)+1).' de '.count($preguntas).'</td>';
                            if($seg_interval>0){
                                $tabla.='<td><div align="right" style="font-size:18px;" id="countdown"></div><script>contador('.$seg_interval.');</script></td>';
                            }
                            $tabla.='</tr></table></div>';
                            foreach($preguntas as $k=>$p){
                                if($idp==$p){
                                    $pregunta=$this->academico_model->getPreguntasContenido(array('ID_PREGUNTA_CONTENIDO'=>$p));
                                    $pe=$pregunta[0];
                                    $img='';
                                    if($pe['IMAGEN']!='' and file_exists(FCPATH.'archivos/contenidos/preguntas/'.$pe['IMAGEN'])){
                                        $img='<div class="thumbnail text-center"><img src="'.base_url('archivos/contenidos/preguntas/')."/".$pe['IMAGEN'].'"/></div>';
                                    }
                                    $tabla.='<div class="card">
											  <div class="card-header">
											      <h4 class="card-title">
                                                      <div class="d-flex flex-row align-content-center align-items-center">
                                                          <div class="sw-5 me-4">
                                                              <div class="border border-1 border-primary rounded-xl sw-5 sh-5 text-primary d-flex justify-content-center align-items-center">'.($k+1).'</div>
                                                          </div>
                                                          <div class="heading mb-0">
                                                              '.$pe['PREGUNTA'].'
                                                          </div>
                                                      </div>
                                                  </h4>'.$img.'
										
											  </div>
											  <div class="card-body">
												<table>';
                                    //obtengo las opciones de respuesta
                                    $opciones_respuesta=explode('-',$opciones[$k]);
                                    //recorrer las opciones de respuesta
                                    foreach($opciones_respuesta as $or){
                                        $opcion=$this->academico_model->getOpcionesRespuestaContenido(array('ID_OPCION_RESPUESTA_CONTENIDO'=>$or));//obtengo el texto de la opci�n de respuesta
                                        $op=$opcion[0];
                                        $seleccionado='';
                                        if(isset($respuestas[$k])){

                                            $respuestasSeleccionadas = explode("-", $respuestas[$k]);
                                            if (in_array($or, $respuestasSeleccionadas)) {
                                                $seleccionado='checked';
                                            }
                                        }
                                        $img='';
                                        if($op['IMAGEN']!='' and file_exists(FCPATH.'archivos/contenidos/preguntas/'.$op['IMAGEN'])){
                                            $img='<div class="thumbnail"><img src="'.base_url('archivos/contenidos/preguntas/')."/".$op['IMAGEN'].'"/></div>';
                                        }
                                        $tabla.='<tr><td valign="top"><input required="" name="opcion_seleccionada['.$p.'][]" type="checkbox" value="'.$p.'-'.$or.'" id="opcion_respuesta'.$or.'" style="transform: scale(1.5)" class="claseopcion" '.$seleccionado.'></td><td style="padding-left:10px"><label for="opcion_respuesta'.$or.'" style="cursor: pointer">'.$op['OPCION_RESPUESTA'].' '.$img.'</label></td></tr>';
                                    }
                                    $tabla.='</table>
											</div>';
                                    $btnSig='';
                                    if(isset($preguntas[$k+1])){
                                        $btnSig='<button type="button" name="btn_sig" id="btn_sig" value="Siguiente" class="btn btn-primary" onclick="get_pregunta_examen(\''.$id_estudiante_carrera_materia.'_'.$id_plantilla.'\',\''.$etapa.'\',\''.$preguntas[$k].'\',\''.$preguntas[$k+1].'\',1)">Siguiente <i class="bi bi-arrow-bar-right"></i></button> ';
                                    }elseif(($k+1)==count($preguntas)){
                                        $btnSig='<input type="button" name="btn_sig" id="btn_sig" value="FInalizar" class="btn btn-success" onclick="get_pregunta(\''.$id_estudiante_carrera_materia.'_'.$id_plantilla.'\',\''.$etapa.'\',\''.$preguntas[$k].'\',\'-1\',1)">';
                                    }
                                    $btnAnt='';
                                    if(isset($preguntas[$k-1]) and $k>=$numPreguntasContestadas){
                                        $btnAnt='<button type="button" name="btn_ant" value="Anterior" class="btn btn-default" onclick="get_pregunta_examen(\''.$id_estudiante_carrera_materia.'_'.$id_plantilla.'\',\''.$etapa.'\',\''.$preguntas[$k].'\',\''.$preguntas[$k-1].'\',1)"><i class="bi bi-arrow-bar-left"></i> Anterior</button>';
                                    }
                                    $tabla.='<div id="error-pregunta" style="color:red; text-align:right"></div>';
                                    $tabla.='<div class="card-footer"><table width="100%"><tr><td align="left">'.$btnAnt.'</td><td align="right">'.$btnSig.'</td></tr></table></div>';
                                    /*$tabla.='<script>window.onblur = function() { cambiaPreguntaExamen(\''.$id_estudiante_carrera_materia.'\',\''.$etapa.'\',\''.$preguntas[$k].'\',\''.$preguntas[$k].'\',1);console.log(\'salio de la ventana\'); }</script>';*/
                                    $tabla.='</div>';
                                    break;
                                }
                            }
                        }
                    }else{
                        $tabla.='<div class="alert alert-danger">No existe examen configurado '.count($examenes_estudiante).'-'.$seg_interval.'</div>';
                    }
                }
                $respuesta['preguntas'] = $tabla;
                $respuesta['tamanio_modal'] = $tamanio_modal;
            }
            echo json_encode($respuesta);
        }else{
            echo 'Acceso Denegado';
        }
    }

    ///////////////////////////////////////////////////////////////
    public function perfil(){
        $id_persona = $this->session->userdata('loggeado')['ID_PERSONA'];
        $id_cliente = $this->academico_model->get_id_cliente($id_persona);
        if ($id_cliente){
            $this->load->model('clientes/clientes_model');
            if (!$this->input->is_ajax_request()){
                $id_cliente = $this->academico_model->get_id_cliente($id_persona);

                $this->load->model('clientes/operadoras_telefonicas_model');
                $this->load->model('clientes/paises_model');
                $this->load->model('clientes/provincias_model');
                $this->load->model('clientes/cantones_model');
                $this->load->model('clientes/parroquias_model');

                $persona = $this->clientes_model->obtener_datos_cliente_natural($id_cliente);
                $id_perfil=$this->session->userdata('loggeado')['ID_PERFIL'];
                $data['operadoras'] = $this->operadoras_telefonicas_model->get_operadoras_telefonicas_activas();
                $data['paises'] = $this->paises_model->get_paises();
                $data['provinciasDomicilio'] = $this->provincias_model->obtener_provincias_x_id_pais($persona['ID_PAIS_DOMICILIO']);
                $data['cantonesDomicilio'] = $this->cantones_model->obtener_cantones_x_id_provincia($persona['ID_PROVINCIA_DOMICILIO']);
                $data['parroquiasDomicilio'] = $this->parroquias_model->obtener_parroquias_x_id_canton($persona['ID_CANTON_DOMICILIO']);

                $data['persona'] = $persona;
                $data['perfil'] = $id_perfil;
                $datos1 = $this->cabeceraEva();
                $this->load->view('templates/headerEva',$datos1);
                $this->load->view('perfil', $data);
                $this->load->view('templates/footerEva');
            }else{//GUARDAR PERFIL
                $data_persona = $this->input->post('persona');
                $data_contacto = $this->input->post('contacto');
                $resp = '1';
                $msg = 'Información Actualizada';
                $name_img = '';
                if ($data_persona!=null and $data_persona!=''){//Actualizar persona
					$foto= $_FILES['foto']['name'];
					$ingreso_foto='';
					if($foto!=''){
						$dato_foto=$this->cargar_archivo_foto('foto',$foto);
						if($dato_foto['error']==''){
							$name_img = $dato_foto['file_name'];
							$this->clientes_model->actualizarPersona(array('FOTOGRAFIA'=>$dato_foto['file_name']),$id_persona);
							if(isset($persona['FOTOGRAFIA']) && file_exists(FCPATH.'assets/uploads/fotografias/'.$persona['FOTOGRAFIA'])){
								!unlink(FCPATH.'assets/uploads/fotografias/'.$persona['FOTOGRAFIA']);
							}
						}else{
							$resp = '0';
							$msg = $dato_foto['error'];
						}
					}
                }

                if ($data_contacto!=null and $data_contacto!=''){//Actualizar contacto
                    $contacto['ID_CLIENTE'] = $id_cliente;
                    $contacto['ID_TIPO_CONTACTO'] = 2;
                    $contacto['ESTADO'] = 1;

                    $contactoExiste = $this->clientes_model->buscarContacto($contacto);
                    if($contactoExiste){
                        $this->clientes_model->actualizarContacto($data_contacto,$contactoExiste['ID_CONTACTO']);
                    }
                }
                $data['resp'] = $resp;
                $data['msg'] = $msg;
                $data['name_img'] = $name_img;

                echo json_encode($data);
            }
        }else{
            redirect('admin/login', 'refresh');
        }
    }

    ///////////////////////////////////////////////////////////////
    public function cargar_archivo_foto($iname,$name)
    {
        //$name=time();
        // $config['upload_path']   = 'archivos/';
        $config['upload_path']   = 'assets/uploads/fotografias/';
        // $config['allowed_types'] = '*';
        $config['allowed_types'] = 'jpg|png|jpeg';
        $config['max_size']      = 5000;
        //$config['max_width']            = 1024;
        //$config['max_height']           = 768;
        $config['file_name']     = time()."_".$name;
        $dato_foto['nombre']    = time()."_".$name;
        $this->load->library('upload', $config);

        if ( ! $this->upload->do_upload($iname))
        {
            $error = $this->upload->display_errors();
            $dato_foto['error']=$error;
        }
        else
        {
            $dato_foto = $this->upload->data();
            $dato_foto['error']='';
        }
        return $dato_foto;
    }

    ///////////////////////////////////////////////////////////////
    public function guardarMaterialApoyo (){
        if($this->session->userdata('loggeado')){
            $material = $this->input->post('material');
            $material['FECHA_CREACION'] = date('Y-m-d H:i:s');
            $material['ID_USUARIO'] = $this->session->userdata('loggeado')['ID_USUARIO'];

            if($_FILES){//solo recibe un archivo por cada registro
                $files= $_FILES['file']['name'];
                if (count($files)>0){
                    foreach ($files as $key=> $file){
                        $name = time()."_".$file;
                        copy($_FILES['file']['tmp_name'][$key], FCPATH."/archivos/contenidos/material/". $name);
                        $material['MATERIAL'] = $name;
                    }
                }
            }

            $id_material_apoyo = $this->academico_model->crear_material_apoyo($material);
            if ($id_material_apoyo>0){
                $resp['resp'] = 1;
                $resp['msg'] = 'Material de apoyo ingresado';
            }else{
                $resp['resp'] = 0;
                $resp['msg'] = 'Material de apoyo ingresado';
            }

            echo json_encode($resp);
        }else{
            redirect('admin/login', 'refresh');
        }
    }

    ///////////////////////////////////////////////////////////////
    public function eliminarMaterialApoyo ($id_material_apoyo){
        if($this->session->userdata('loggeado')){
            $material = $this->academico_model->get_material_apoyo(array('ID_MATERIAL_APOYO'=>$id_material_apoyo));
            if (count($material)>0){
                $material = $material[0];
                if ($material['TIPO_MATERIAL_APOYO'] == 1){
                    //Eliminar archivo
                    unlink(FCPATH.'/archivos/contenidos/material/'.$material['MATERIAL']);
                }
                $this->academico_model->eliminar_material_apoyo($id_material_apoyo);
                $resp['resp'] = 1;
                $resp['msg'] = 'Material de apoyo Eliminado';
            }else{
                $resp['resp'] = 0;
                $resp['msg'] = 'No existe el material de apoyo';
            }
            echo json_encode($resp);
        }else{
            redirect('admin/login', 'refresh');
        }
    }

	//////////////////////////////////////////////////////////////////
	public function verRespuestasRetoEstudiante(){
		$idusuario=$this->session->userdata('loggeado')['ID_USUARIO'];
		if($this->session->userdata('loggeado') and $this->academico_model->verificar_usuario_funcionalidad($idusuario,101)){
			$perfil= $this->session->userdata('loggeado')['ID_PERFIL'];
			$idRetoContenido  = trim($this->input->post('idReto'));
			$fechaFin  = trim($this->input->post('fechafin'));
            $idPersona = trim($this->input->post('idPersona'));
            $persona = $this->academico_model->get_datos_persona($idPersona);
            $preguntas=$this->academico_model->getPreguntasRetosContenido(array('ID_RETO_CONTENIDO'=>$idRetoContenido));
			if(count($preguntas)>0){
                $retos_estudiante=$this->academico_model->retos_realizados_estudiante($idPersona,null,$idRetoContenido);
                $examen=$retos_estudiante[0];
                $tabla='';

                if($perfil!=5){
                    $tabla.='<table class="table" ><tr><td><strong>Estudiante:</strong></td><td>'.trim($persona['APELLIDO_PATERNO'].' '.$persona['APELLIDO_MATERNO'].' '.$persona['PRIMER_NOMBRE'].' '.$persona['SEGUNDO_NOMBRE']).'</td>
                    <td><strong>Nro Documento:</strong></td><td>'.$persona['CEDULA'].'</td></tr> </table><hr>';
                }

				$tabla.='<div class="alert alert-info"><div class="row"><div class="col"><strong>Calificación: </strong> '.$examen['CALIFICACION'].' </div><div class="col"><strong>Fecha Limite: </strong> '.$fechaFin.'</div> </div></div>';
                $respuestas=explode('+',$examen['IDS_RESPUESTA']);
                $correcto=0;
                foreach($preguntas as $k=>$p){
                    $correcto=0;
					$pe=$p;
					$img='';
					if($pe['IMAGEN']!='' and file_exists(FCPATH.'archivos/contenidos/retos/'.$pe['IMAGEN'])){
						$img='<div class="thumbnail"><img src="'.base_url('archivos/contenidos/retos')."/".$pe['IMAGEN'].'"/></div>';
					}
					$tabla.='<div class="card mb-2 shadow-lg border-light ">';
						$tabla.='<div class="card-header p-3" >';
							$tabla.='<h4 class="card-title">'.($k+1).') '.$pe['PREGUNTA'].'</h4>'.$img;
						$tabla.='</div>';
						$tabla.='<div class="card-body">';
						$tabla.='<table>';
					$opciones_respuesta=$this->academico_model->getOpcionesRespuestaRetosContenido(array('ID_PREGUNTA_RETO_CONTENIDO'=>$pe['ID_PREGUNTA_RETO_CONTENIDO']));
					$idOpcionesRespuestas = explode("+", $pe['ID_OPCION_RESPUESTA_RETO_CONTENIDO']);
					foreach($opciones_respuesta as $or){
						$op=$or;
						$opcion_correcta='';
                        //Opciones seleccionadas por el estudiante
                        $seleccionado='';
                        if(isset($respuestas[$k])){
                            $respuestasSeleccionadas = explode("-", $respuestas[$k]);
                            if (in_array($or['ID_OPCION_RESPUESTA_RETO_CONTENIDO'], $respuestasSeleccionadas)) {
                                $seleccionado='checked';
                            }
                        }

						if(in_array($or['ID_OPCION_RESPUESTA_RETO_CONTENIDO'], $idOpcionesRespuestas)){
							$opcion_correcta=' class="bg-gradient bg-success"';
						}
						$img='';
						if($op['IMAGEN']!='' and file_exists(FCPATH.'archivos/contenidos/retos/'.$op['IMAGEN'])){
							$img='<div class="thumbnail"><img src="'.base_url('archivos/contenidos/retos')."/".$op['IMAGEN'].'"/></div>';
						}
						$tabla.='<tr '.$opcion_correcta.'>';
							$tabla.='<td valign="top">';
									$tabla.='<input type="checkbox" id="opcion_respuesta'.$or['ID_OPCION_RESPUESTA_RETO_CONTENIDO'].'" class="claseopcion" '.$seleccionado.' style="transform: scale(1.5)" disabled>';
							$tabla.='</td>';
							$tabla.='<td style="padding-left:10px">';
									$tabla.='<label for="opcion_respuesta'.$or['ID_OPCION_RESPUESTA_RETO_CONTENIDO'].'">'.$op['OPCION_RESPUESTA'];
								$tabla.=$img.'</label>';
							$tabla.='</td>';
						$tabla.='</tr>';
					}
					$tabla.='</table>
							</div>';
					$tabla.='</div>';
				}
				$respuesta=$tabla;
			}else{
				$respuesta='No tiene preguntas';
			}
			echo $respuesta;
		}else{
			echo 'Acceso Denegado';
		}
	}

    //////////////////////////////////////////////////////////////////
    public function eliminarMaterialesApoyo($id_periodo = 0, $id_carrera_materia = 0){
        $material = array();
        $nro = 0;
        if ($id_periodo > 0){
            $material = $this->academico_model->get_material_apoyo(array('ID_PERIODO_ACADEMICO'=>$id_periodo));
        }elseif($id_carrera_materia > 0){
            $material = $this->academico_model->get_material_apoyo(array('ID_CARRERA_MATERIA'=>$id_carrera_materia));
        }
        if(count($material)>0){
            foreach ($material as $m){
                if ($m['TIPO_MATERIAL_APOYO'] == 1){
                    //Eliminar archivo
                    unlink(FCPATH.'/archivos/contenidos/material/'.$m['MATERIAL']);
                }
                $this->academico_model->eliminar_material_apoyo($m['ID_MATERIAL_APOYO']);
                $nro ++;
            }
        }
        echo "Registros eliminados: ".$nro;
    }

	//////////////////////////////////////////////////////////////////
	public function estadisticasDocente($idPlanificacion){
		$materias  =$this->academico_model->listado_contenido(array('ID_PLANIFICACION'=>$idPlanificacion));
		$materia=NULL;

		$asistenciaPendiente=0;
		$informePendiente=0;
		$materia_normativa = 0;
		$total_talleres_calificados = 0;
		$total_proyectos_pendientes = 0;
		$total_proyectos_calificados = 0;
		$total_asistencia_calificada = 0;

		$num_proyectos = 0;

		if(count($materias)>0){
			$materia=$materias[0];
			//verificar proceso academico del docente
			$dato_contenido=$this->academico_model->getContenidoMateria($materia['ID_CARRERA_MATERIA'],$materia['ID_PERIODO_ACADEMICO'],$materia['ID_PLANTILLA']);
			$estudiantes=$this->academico_model->get_estudiantes(array('ID_CARRERA_MATERIA'=>$materia['ID_CARRERA_MATERIA'],'ID_PERIODO_ACADEMICO'=>$materia['ID_PERIODO_ACADEMICO'],'ID_GRUPO'=>$materia['ID_GRUPO']));
			$total_estudiantes = 0;
			if(count($estudiantes)>0){
				$total_estudiantes = count($estudiantes);
			}
			if($dato_contenido['ID_CONTENIDO']!=null and $dato_contenido['ID_CONTENIDO'] != ''){
				$dat['ID_CONTENIDO']=$dato_contenido['ID_CONTENIDO'];
				$dat['TIPO']=1;
				$num_proyectos=count($this->academico_model->getRetosProyectosContenido($dat));
			}
			
			$num_talleres= (int) $this->academico_model->num_talleres_estudiantes(array('ID_CARRERA_MATERIA'=>$materia['ID_CARRERA_MATERIA'],'ID_PERIODO_ACADEMICO'=>$materia['ID_PERIODO_ACADEMICO'],'ID_GRUPO'=>$materia['ID_GRUPO'],'ID_PLANTILLA'=>$materia['ID_PLANTILLA']));
			// print_r($num_talleres);
			foreach($estudiantes as $estudiante){
				//TALLERES
				if($estudiante['ASISTENCIA_JUSTIFICADA']==0){
					$num_talleres_calificadas = 0;
					$talleres_calificadas    = $this->academico_model->talleres_calificadas_estudiante($estudiante['ID_PERSONA'],array('ID_CARRERA_MATERIA'=>$materia['ID_CARRERA_MATERIA'],'ID_PERIODO_ACADEMICO'=>$materia['ID_PERIODO_ACADEMICO'],'ID_GRUPO'=>$materia['ID_GRUPO'],'ID_PLANTILLA'=>$materia['ID_PLANTILLA']));
					foreach($talleres_calificadas as $taller_calificada){
						if($taller_calificada['CALIFICACION']!=NULL and $taller_calificada['CALIFICACION']!=''){
							$num_talleres_calificadas+=1;
							$total_talleres_calificados++;
						}
					}
				}
				//PROYECTOS
				
				// print_r($proyectos_realizados);
				if($dato_contenido['ID_CONTENIDO']!=null and $dato_contenido['ID_CONTENIDO']!=''){
					$proyectos_realizados=$this->academico_model->proyectos_realizados_estudiante($estudiante['ID_PERSONA'],$dato_contenido['ID_CONTENIDO']);
				}else{
					$proyectos_realizados = array();
				}
				foreach($proyectos_realizados as $proyecto_realizado){
					if($proyecto_realizado['CALIFICACION']==NULL or $proyecto_realizado['CALIFICACION']==''){
						// $proyectoPendiente++;
						$total_proyectos_pendientes++;
					}else{
						$total_proyectos_calificados++;
					}
				}
				//ASISTENCIA
				$opc=array();
				$opc['ID_ESTUDIANTE_CARRERA_MATERIA']=$estudiante['ID_ESTUDIANTE_CARRERA_MATERIA'];
				$opc['ID_COMPONENTE']=0;
				$opc['ID_TIPO_CALIFICACION']=4;//asistencia
				$nota_asistencia = $this->academico_model->get_calificaciones($opc);
				if(count($nota_asistencia)>0){
					if($nota_asistencia[0]['CALIFICACION']==NULL or $nota_asistencia[0]['CALIFICACION']==''){
						$asistenciaPendiente++;
					}else{
						$total_asistencia_calificada++;
					}
				}else{
					$asistenciaPendiente++;
				}
			}
			
			//INFORME
			$dati['ID_PERIODO_ACADEMICO']=$materia['ID_PERIODO_ACADEMICO'];
			$dati['ID_MATERIA']=$materia['ID_CARRERA_MATERIA'];
			$dati['ID_GRUPO']=$materia['ID_GRUPO'];
			$dati['TIPO']=1;
			$dati['ID_PLANTILLA']=$materia['ID_PLANTILLA'];
			$informe=$this->academico_model->get_informe($dati);
			if(count($informe)<=0){
				$informePendiente=1;
			}
			
			//filtrar materia normativa que no tiene taller ni proyecto
			if($materia['MATERIA']=="NORMATIVA INSTITUCIONAL Y DESARROLLO DEL PLAN DE GRADUACIÓN"){
				$materia_normativa = 1;
				$estadistica['TALLERES']['total_talleres_calificados']= 1;
                $estadistica['TALLERES']['total_talleres_pendientes']= 0;

				$estadistica['PROYECTOS']['total_proyectos_calificados']= 1;
                $estadistica['PROYECTOS']['total_proyectos_pendientes']= 0;

			}else{
				if($num_talleres == 0){
					$estadistica['TALLERES']['total_talleres_calificados'] = 0;
					$estadistica['TALLERES']['total_talleres_pendientes']= 1;
				}else{
					$estadistica['TALLERES']['total_talleres_estudiantes']=$total_estudiantes*$num_talleres;
					$estadistica['TALLERES']['total_talleres_calificados']=$total_talleres_calificados;
					$estadistica['TALLERES']['total_talleres_pendientes']=$estadistica['TALLERES']['total_talleres_estudiantes']-$total_talleres_calificados;
				}

				if($num_proyectos == 0){
					$estadistica['PROYECTOS']['total_proyectos_calificados']= 0;
                	$estadistica['PROYECTOS']['total_proyectos_pendientes']= 1;
				}else{
					$estadistica['PROYECTOS']['total_proyectos_calificados']=$total_proyectos_calificados;
					$estadistica['PROYECTOS']['total_proyectos_pendientes']=$total_proyectos_pendientes;
				}
			}
			
			$estadistica['TALLERES']['num_talleres']=$num_talleres;
			$estadistica['TALLERES']['materia_normativa']=$materia_normativa;
			
			$estadistica['PROYECTOS']['num_proyectos']=$num_proyectos;
			$estadistica['PROYECTOS']['materia_normativa']=$materia_normativa;

			// print_r($estadistica['TALLERES']);

			$estadistica['ASISTENCIAS']['materia_normativa']=$materia_normativa;
			$estadistica['ASISTENCIAS']['total_asistencia_calificada']=$total_asistencia_calificada;
			$estadistica['ASISTENCIAS']['total_asistencia_pendiente']=$asistenciaPendiente;
			$estadistica['INFORME']['informe_pendiente']=$informePendiente;
		}
		return ($estadistica);
	}

}